"""
Tests for Mixin class that handles IO between the 
Narrative and workspace service.
"""
__author__ = 'Bill Riehl <wjriehl@lbl.gov>'

import unittest
from getpass import getpass
from biokbase.narrative.narrativeio import KBaseWSManagerMixin, PermissionsError
from biokbase.workspace.client import ServerError
import biokbase.auth
import os
import re
from tornado import web

test_user_id = 'kbasetest'
valid_narr_ref = '1315/1' # should be autogenerated! ...but not yet.
invalid_narr_ref = '1315000/666'
bad_narr_ref = 'not_a_narrative_ref'
private_ws_id = '2995' # owned by test_user_id
private_narr_ref = '2995/1'
inaccessible_ws_id = '4337' # owned by wjriehl, private
inaccessible_narr_ref = '4337/1'
public_ws_id = '1315'
invalid_ws_id = '10000000'
metadata_fields = set(['objid', 'name', 'type', 'save_date', 'ver', 
                   'saved_by', 'wsid', 'workspace', 'chsum', 
                   'size', 'meta'])

class NarrIOTestCase(unittest.TestCase):
    # Before test:
    # - Log in (for tests that need a valid login)
    # also sets the token in the environment variable.
    @classmethod
    def setUpClass(self):
        self.user_id = test_user_id
        self.pwd = getpass('Password for {}: '.format(test_user_id))
        self.token = biokbase.auth.Token(user_id=self.user_id, password=self.pwd)
        # by default, user's left logged out for anonymous testing

    @classmethod
    def setUp(self):
        self.mixin = KBaseWSManagerMixin()

    @classmethod
    def login(self):
        biokbase.auth.set_environ_token(self.token.token)

    @classmethod
    def logout(self):
        biokbase.auth.set_environ_token(None)

    def test_mixin_instantiated(self):
        self.assertIsInstance(self.mixin, biokbase.narrative.narrativeio.KBaseWSManagerMixin)

    # test we can get a workspace client while logged out, and it's anonymous
    def test_get_wsclient_anon(self):
        ws_client = self.mixin.ws_client()
        # it's anon if the header doesn't have an AUTHORIZATION field, or
        # that has a None value
        self.assertTrue(not ws_client._headers.has_key('AUTHORIZATION') or 
                        ws_client._headers['AUTHORIZATION'] is None)

    # test we get a ws client when logged in, and it's authorized
    def test_get_wsclient_auth(self):
        self.login()
        ws_client = self.mixin.ws_client()
        self.assertTrue(ws_client._headers.has_key('AUTHORIZATION') and 
                        ws_client._headers['AUTHORIZATION'] is not None)
        self.logout()

    # test we know what a narrative ref looks like with ws and obj ids
    def test_obj_ref_ws_obj(self):
        ref = valid_narr_ref + '/1'
        self.mixin._test_obj_ref(ref) # this can ONLY fail, has no return value

    # test as above, but include version
    def test_obj_ref_ws_obj_ver(self):
        self.mixin._test_obj_ref(valid_narr_ref)

    # test as above, but make sure it fails right
    def test_obj_ref_fail(self):
        with self.assertRaises(ValueError) as err:
            self.mixin._test_obj_ref(bad_narr_ref)
        self.assertIsNotNone(err)


    ##### test KBaseWSManagerMixin.narrative_exists #####

    def test_narrative_exists_valid(self):
        self.assertTrue(self.mixin.narrative_exists(valid_narr_ref))

    def test_narrative_exists_invalid(self):
        self.assertFalse(self.mixin.narrative_exists(invalid_narr_ref))

    def test_narrative_exists_bad(self):
        with self.assertRaises(ValueError) as err:
            self.mixin.narrative_exists(bad_narr_ref)
        self.assertIsNotNone(err)

    ##### test KBaseWSManagerMixin.read_narrative #####
 
    def test_read_narrative_valid_content_metadata(self):
        pass

    def test_read_narrative_valid_content_no_metadata(self):
        pass

    def test_read_narrative_valid_no_content_metadata(self):
        pass

    def test_read_narrative_valid_no_content_no_metadata(self):
        pass

    def test_read_narrative_invalid(self):
        with self.assertRaises(ServerError) as err:
            self.mixin.read_narrative(invalid_narr_ref)
        self.assertIsNotNone(err)

    def test_read_narrative_bad(self):
        with self.assertRaises(ValueError) as err:
            self.mixin.read_narrative(bad_narr_ref)
        self.assertIsNotNone(err)

    ##### test KBaseWSManagerMixin.write_narrative #####

    def test_write_narrative_valid_content(self):
        pass

    def test_write_narrative_valid_no_content(self):
        pass

    def test_write_narrative_invalid(self):
        pass

    def test_write_narrative_bad(self):
        pass


    ##### test KBaseWSManagerMixin.rename_narrative #####

    def test_rename_narrative_valid(self):
        pass

    def test_rename_narrative_invalid(self):
        pass


    ##### test KBaseWSManagerMixin.copy_narrative #####

    def test_copy_narrative_valid(self):
        pass

    def test_copy_narrative_invalid(self):
        pass


    ##### test KBaseWSManagerMixin.list_narratives #####

    def validate_narrative_list(self, nar_list):
        self.assertIsInstance(nar_list, list)
        for nar in nar_list:
            self.assertIsInstance(nar, dict)
            self.assertTrue(set(nar.keys()).issubset(metadata_fields))

    def test_list_all_narratives_anon(self):
        res = self.mixin.list_narratives()
        self.validate_narrative_list(res)

    def test_list_all_narratives_auth(self):
        self.login()
        res = self.mixin.list_narratives()
        self.validate_narrative_list(res)
        self.logout()

    def test_list_narrative_ws_valid_anon(self):
        res = self.mixin.list_narratives(ws_id=public_ws_id)
        self.validate_narrative_list(res)

    def test_list_narrative_ws_valid_noperm_anon(self):
        with self.assertRaises(PermissionsError) as err:
            self.mixin.list_narratives(ws_id=private_ws_id)
        self.assertIsNotNone(err)

    def test_list_narrative_ws_valid_login(self):
        self.login()
        res = self.mixin.list_narratives(ws_id=private_ws_id)
        self.validate_narrative_list(res)
        self.logout()

    def test_list_narrative_ws_invalid(self):
        with self.assertRaises(ServerError) as err:
            self.mixin.list_narratives(ws_id=invalid_ws_id)
        self.assertIsNotNone(err)

    def test_list_narrative_ws_valid_noperm_auth(self):
        self.login()
        with self.assertRaises(PermissionsError) as err:
            self.mixin.list_narratives(ws_id=inaccessible_ws_id)
        self.assertIsNotNone(err)
        self.logout()

    def test_list_narrative_ws_bad(self):
        with self.assertRaises(ValueError) as err:
            self.mixin.list_narratives(ws_id=bad_narr_ref)
        self.assertIsNotNone(err)


    ##### test KBaseWSManagerMixin.narrative_permissions #####
    # params:
    #    narrative ref == valid, invalid, bad/malformed
    # user:
    #    None, specific
    # login state
    def test_narrative_permissions_anon(self):
        with self.assertRaises(ServerError) as err:
            self.mixin.narrative_permissions(valid_narr_ref)
        self.assertIsNotNone(err)

    def test_narrative_permissions_valid_login(self):
        self.login()
        ret = self.mixin.narrative_permissions(valid_narr_ref)
        self.assertTrue(isinstance(ret, dict) and ret['*'] == 'r')
        self.logout()

    def test_narrative_permissions_invalid_login(self):
        self.login()
        with self.assertRaises(ServerError) as err:
            self.mixin.narrative_permissions(invalid_narr_ref)
        self.logout()

    def test_narrative_permissions_inaccessible_login(self):
        self.login()
        ret = self.mixin.narrative_permissions(inaccessible_narr_ref)
        self.assertTrue(isinstance(ret, dict) and ret[test_user_id] == 'n')
        self.logout()

    def test_narrative_permissions_bad(self):
        with self.assertRaises(ValueError) as err:
            self.mixin.narrative_permissions(bad_narr_ref)
        self.assertIsNotNone(err)


    ##### test KBaseWSManagerMixin.narrative_writable #####

    def test_narrative_writable_anon(self):
        with self.assertRaises(ServerError) as err:
            self.mixin.narrative_writable(valid_narr_ref, test_user_id)
        self.assertIsNotNone(err)

    def test_narrative_writable_valid_login_nouser(self):
        self.login()
        with self.assertRaises(ValueError) as err:
            self.mixin.narrative_writable(valid_narr_ref, None)
        self.assertIsNotNone(err)
        self.logout()

    def test_narrative_writable_valid_login_user(self):
        self.login()
        ret = self.mixin.narrative_writable(valid_narr_ref, test_user_id)
        self.assertTrue(ret)
        self.logout()

    def test_narrative_writable_invalid_login_user(self):
        self.login()
        with self.assertRaises(ServerError) as err:
            self.mixin.narrative_writable(invalid_narr_ref, test_user_id)
        self.assertIsNotNone(err)
        self.logout()

    def test_narrative_writable_inaccessible_login_user(self):
        self.login()
        ret = self.mixin.narrative_writable(inaccessible_narr_ref, test_user_id)
        self.assertFalse(ret)
        self.logout()

    def test_narrative_writable_bad_login_user(self):
        self.login()
        with self.assertRaises(ValueError) as err:
            self.mixin.narrative_writable(bad_narr_ref, test_user_id)
        self.assertIsNotNone(err)
        self.logout()

if __name__ == '__main__':
    unittest.main()