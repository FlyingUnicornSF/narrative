"""
Tests for Mixin class that handles IO between the 
Narrative and workspace service.
"""
__author__ = 'Bill Riehl <wjriehl@lbl.gov>'

import unittest
from getpass import getpass
from biokbase.narrative.narrativeio import KBaseWSManagerMixin
import biokbase.auth
import os
import re
from tornado import web

test_user_id = 'kbasetest'
valid_narr_ref = '' # should be autogenerated! ...but not yet.
invalid_narr_ref = 'not_a_narrative'

class NarrIOTestCase(unittest.TestCase):
    # Before test:
    # - Log in (for tests that need a valid login)
    # also sets the token in the environment variable.
    @classmethod
    def setUpClass(self):
        self.user_id = test_user_id
        self.pwd = getpass('Password for {}: '.format(test_user_id))
        self.token = biokbase.auth.Token(user_id=self.user_id, password=self.pwd)
        # by default, user's left logged out for anonymous testing

    @classmethod
    def setUp(self):
        self.mixin = KBaseWSManagerMixin()

    @classmethod
    def login(self):
        biokbase.auth.set_environ_token(self.token.token)

    @classmethod
    def logout(self):
        biokbase.auth.set_environ_token(None)

    def test_mixin_instantiated(self):
        self.assertIsInstance(self.mixin, biokbase.narrative.narrativeio.KBaseWSManagerMixin)

    # test we can get a workspace client while logged out, and it's anonymous
    def test_get_wsclient_anon(self):
        ws_client = self.mixin.ws_client()
        # it's anon if the header doesn't have an AUTHORIZATION field, or
        # that has a None value
        self.assertTrue(not ws_client._headers.has_key('AUTHORIZATION') or 
                        ws_client._headers['AUTHORIZATION'] is None)

    # test we get a ws client when logged in, and it's authorized
    def test_get_wsclient_loggedin(self):
        self.login()
        ws_client = self.mixin.ws_client()
        self.assertTrue(ws_client._headers.has_key('AUTHORIZATION') and 
                        ws_client._headers['AUTHORIZATION'] is not None)
        self.logout()

    # test we know what a narrative ref looks like with ws and obj ids
    def test_obj_ref_ws_obj(self):
        ref = '123/456'
        self.mixin._test_obj_ref(ref) # this can ONLY fail, has no return value

    # test as above, but include version
    def test_obj_ref_ws_obj_ver(self):
        ref = '1/2/3'
        self.mixin._test_obj_ref(ref)

    # test as above, but make sure it fails right
    def test_obj_ref_fail(self):
        ref = 'i_fail'
        with self.assertRaises(ValueError) as err:
            self.mixin._test_obj_ref(ref)
        self.assertIsNotNone(err)

    def test_narrative_exists_valid(self):
        pass

    def test_narrative_exists_invalid(self):
        pass

    def test_read_narrative_valid_content_metadata(self):
        pass

    def test_read_narrative_valid_content_no_metadata(self):
        pass

    def test_read_narrative_valid_no_content_metadata(self):
        pass

    def test_read_narrative_valid_no_content_no_metadata(self):
        pass

    def test_read_narrative_invalid(self):
        pass

    def test_write_narrative_valid_content(self):
        pass

    def test_write_narrative_valid_no_content(self):
        pass

    def test_write_narrative_invalid(self):
        pass

    def test_rename_narrative_valid(self):
        pass

    def test_rename_narrative_invalid(self):
        pass

    def test_copy_narrative_valid(self):
        pass

    def test_copy_narrative_invalid(self):
        pass

    def test_list_all_narratives_anon(self):
        pass

    def test_list_all_narratives_login(self):
        pass

    def test_list_narrative_ws_valid(self):
        pass

    def test_list_narrative_ws_invalid(self):
        pass

    def test_narrative_permissions_valid_anon(self):
        pass

    def test_narrative_permissions_valid_login(self):
        pass

    def test_narrative_permissions_invalid(self):
        pass

    def test_narrative_writable_valid_anon(self):
        pass

    def test_narrative_writable_valid_login(self):
        pass

if __name__ == '__main__':
    unittest.main()