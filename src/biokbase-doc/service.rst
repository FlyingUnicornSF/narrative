Narrative Service Python API
================================

.. currentmodule:: biokbase.narrative.common.service

.. contents::

Introduction
-------------

This describes the abstract and concrete Python API for KBase services.

Terminology
^^^^^^^^^^^^

_`service`
    A group of related service methods

_`method` *or* _`service method`
    A parameterized function, optionally returning a result.

Requirements
^^^^^^^^^^^^^

Each `service method`_ should be self-describing, and long-running services
(which, in terms of interactive operation, is most of them) should provide
intermediate progress indications. Thus, the minimal requirements of service methods are:

- service metadata
    - version [x.y.z]
    - name
    - description
    - list of parameters
    - list of outputs `*`
    - status
- parameter metadata
    - name
    - type
    - description
- output metadata `*`
    - [name], type, description
    - [name] may be replaced by position in a list
- status
    - success/failure
    - if failure, then an exception with named fields will be returned

We have specified these requirements in a Python class, :class:`Service`, whose documentation is below.
Items marked with a `*` in the above list are not yet (fully) implemented in this code.


API Documentation
------------------

.. automodule:: biokbase.narrative.common.service

Here is a simple usage example.

.. literalinclude:: ../biokbase/narrative/common/service.py
    :pyobject: example

The output from this example will look like the following::


    ### Bad parameters ###

    @@E{"msg": "in ServiceMethod 'pick_up_people': bad parameter: Wrong number of arguments. got=1 wanted=4", "method_name": "pick_up_people", "type": "ServiceMethodParameterError", "severity": "FATAL", "details": "Wrong number of arguments. got=1 wanted=4"}

    ### Function error ###

    @@S
    @@P1/1
    @@E{"msg": "in ServiceMethod 'pick_up_people': Can't pick up less than one person (0)", "method_name": "pick_up_people", "type": "ServiceMethodError", "severity": "FATAL"}

    ### Success ###

    @@S
    @@P1/3
    Willie Brown called for 3 people to be driven from Berkeley to San Francisco
    @@P2/3
    picking up Willie Brown and 2 other bozos at Berkeley
    @@P3/3
    dropping off Willie Brown and 2 other bozos at San Francisco
    @@D

The lines beginning with `@@` are generated by the :class:`LifecyclePrinter` instance that is automatically
created and added to each service.

Exceptions
^^^^^^^^^^

.. autoclass:: ServiceError

.. autoclass:: ServiceMethodError

.. autoclass:: ServiceMethodParameterError

Services
^^^^^^^^

The two classes that new service methods will need to instantiate are
the :class:`Service` (one per group of methods) and :class:`ServiceMethod`.
See the :func:`example` for a usage example.

.. autoclass:: Service
    :members: name, desc, version

.. autoclass:: ServiceMethod
    :members: set_func, __call__, estimated_runtime,
              started, advance, done, error

Version numbers are their own data type.

.. autoclass:: VersionNumber(number)

Lifecycle events
^^^^^^^^^^^^^^^^^

The lifecycle events for the service method execution, i.e. from start to done or error,
are coded with the subject/observer pattern. Most people won't need to do anything with these
classes, but they are designed to be extensible. Since :class:`ServiceMethod` inherits from
:class:`LifecycleSubject`, new observers that take actions based on events can be added
at any time. The base classes are below.

.. autoclass:: LifecycleSubject
    :members:

.. autoclass:: LifecycleObserver
    :members:

Built-in observers
~~~~~~~~~~~~~~~~~~~

The two default observers are for history of the timings, and communicating
the current status back to the front end.

.. autoclass:: LifecycleHistory
    :members:

.. autoclass:: LifecyclePrinter
    :members:
