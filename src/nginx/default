# You may add here your
# server {
#	...
# }
# statements for each of your virtual hosts to this file

##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# http://wiki.nginx.org/Pitfalls
# http://wiki.nginx.org/QuickStart
# http://wiki.nginx.org/Configuration
#
# Generally, you will want to move this file somewhere, and start with a clean
# file but keep this around for reference. Or just disable in sites-enabled.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##

init_by_lua 'cjson = require "cjson"';

lua_shared_dict proxy_map 1m;

server {
	#listen   80; ## listen for ipv4; this line is default and implied
	#listen   [::]:80 default ipv6only=on; ## listen for ipv6

	root /usr/share/nginx/www;
	index index.html index.htm;

	# Make site accessible from http://localhost/
	server_name localhost;

	#location / {
		# First attempt to serve request as file, then
		# as directory, then fall back to index.html
	#	try_files $uri $uri/ /index.html;
		# Uncomment to enable naxsi on this location
		# include /etc/nginx/naxsi.rules
	#}


	location /doc/ {
		alias /usr/share/doc/;
		autoindex on;
		allow 127.0.0.1;
		deny all;
	}

	# Dynamic proxy manager
	location /proxymgr {
	     default_type 'application/json';
	     allow 127.0.0.1;

	     set $uri_base '/proxymgr';
	     content_by_lua_file /etc/nginx/sites-available/proxy_mgr.lua;

	}

	location /narrative/ {

	     default_type 'text/plain';
 
             set $target '';

             access_by_lua '
	     		    ngx.log( ngx.ERR, "In /narrative/ handler")
			    local proxy_key = string.match(ngx.var.uri,"/narrative/([%w_-]+)")
   			    if proxy_key then
   	     		        local proxy_map = ngx.shared.proxy_map
      			        local target, flags = proxy_map:get(proxy_key)
      				if target == nil then
				    ngx.log( ngx.ERR, "Bad proxy key:" .. proxy_key)
				    ngx.exit(ngx.HTTP_NOT_FOUND)
      				else
			            ngx.var.target = target
				    ngx.log( ngx.ERR, "Redirect to " .. ngx.var.target )
      				end
			    else
			        ngx.log( ngx.ERR, "No proxy key given")
				ngx.exit(ngx.HTTP_NOT_FOUND)
			    end
			    ';

              proxy_set_header X-Forwarded-Host $host;
	      proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-Server $host;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
	      proxy_set_header Host $http_host;
	      proxy_set_header X-NginX-Proxy true;
              proxy_pass http://$target;
              proxy_redirect off;
	      proxy_http_version 1.1;
      	      proxy_set_header Upgrade $http_upgrade;
      	      proxy_set_header Connection "upgrade";
      	      proxy_read_timeout 86400;
        }

        location /jiffylab/ {
              proxy_set_header X-Forwarded-Host $host;
              proxy_set_header X-Forwarded-Server $host;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_pass http://127.0.0.1:5000/;
              proxy_redirect off;
        }

}


# another virtual host using mix of IP-, name-, and port-based configuration
#
#server {
#	listen 8000;
#	listen somename:8080;
#	server_name somename alias another.alias;
#	root html;
#	index index.html index.htm;
#
#	location / {
#		try_files $uri $uri/ /index.html;
#	}
#}


# HTTPS server
#
#server {
#	listen 443;
#	server_name localhost;
#
#	root html;
#	index index.html index.htm;
#
#	ssl on;
#	ssl_certificate cert.pem;
#	ssl_certificate_key cert.key;
#
#	ssl_session_timeout 5m;
#
#	ssl_protocols SSLv3 TLSv1;
#	ssl_ciphers ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv3:+EXP;
#	ssl_prefer_server_ciphers on;
#
#	location / {
#		try_files $uri $uri/ /index.html;
#	}
#}
