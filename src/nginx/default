# You may add here your
# server {
#	...
# }
# statements for each of your virtual hosts to this file

##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# http://wiki.nginx.org/Pitfalls
# http://wiki.nginx.org/QuickStart
# http://wiki.nginx.org/Configuration
#
# Generally, you will want to move this file somewhere, and start with a clean
# file but keep this around for reference. Or just disable in sites-enabled.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##

lua_shared_dict proxy_map 1m;
lua_shared_dict proxy_last 1m;

lua_package_path "/home/vagrant/dockerstuff/narrative/docker/?;/home/vagrant/dockerstuff/narrative/docker/?.lua;;";
init_by_lua '
    json = require("json")
    proxymgr = require("proxy_mgr")
    proxymgr:initialize()
';

server {
	#listen   80; ## listen for ipv4; this line is default and implied
	#listen   [::]:80 default ipv6only=on; ## listen for ipv6

	root /usr/share/nginx/www;
	index index.html index.htm;

	# Make site accessible from http://localhost/
	server_name localhost;

	location / {
		# First attempt to serve request as file, then
		# as directory, then fall back to index.html
		try_files $uri $uri/ /index.html;
		# Uncomment to enable naxsi on this location
		# include /etc/nginx/naxsi.rules
	}

	# Dynamic proxy manager
	location /proxymgr {
	     default_type 'application/json';
	     allow 127.0.0.1;

	     set $uri_base '/proxymgr';
	     content_by_lua 'proxymgr:set_proxy()';

	}

	# Dynamic proxy manager
	location /proxy_last {
	     default_type 'application/json';
	     allow 127.0.0.1;

	     set $uri_base '/proxy_last';
	     content_by_lua 'proxymgr:idle_status()';

	}

	location /narrative/ {
	     default_type 'text/plain';
  	     set $target '';
             access_by_lua '
	     		   proxymgr:use_proxy()
	     ';

	     proxy_set_header X-Forwarded-Host $host;
	     proxy_set_header X-Real-IP $remote_addr;
             proxy_set_header X-Forwarded-Server $host;
             proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
	     proxy_set_header Host $http_host;
	     proxy_set_header X-NginX-Proxy true;
             proxy_pass http://$target;
             proxy_redirect off;
	     proxy_http_version 1.1;
      	     proxy_set_header Upgrade $http_upgrade;
      	     proxy_set_header Connection "upgrade";
      	     proxy_read_timeout 86400;
        }

}

# Proxy	for the nginx remote api
server {
        listen 127.0.0.1:65000;
	ssl on;
	ssl_certificate /etc/ssl/certs/ssl-cert-snakeoil.pem;
	ssl_certificate_key /etc/ssl/private/ssl-cert-snakeoil.key;

	ssl_session_timeout 5m;

	ssl_protocols SSLv3 TLSv1;
	ssl_ciphers ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv3:+EXP;
	ssl_prefer_server_ciphers on;

        server_name docker_remote;
	# auth_basic_user_file /etc/nginx/htpasswd;
        location / {
            proxy_pass http://unix:/var/run/docker.sock:/;
	#    auth_basic 'private';
        }
}



# another virtual host using mix of IP-, name-, and port-based configuration
#
#server {
#	listen 8000;
#	listen somename:8080;
#	server_name somename alias another.alias;
#	root html;
#	index index.html index.htm;
#
#	location / {
#		try_files $uri $uri/ /index.html;
#	}
#}


# HTTPS server
#
#server {
#	listen 443;
#	server_name localhost;
#
#	root html;
#	index index.html index.htm;
#
#	ssl on;
#	ssl_certificate cert.pem;
#	ssl_certificate_key cert.key;
#
#	ssl_session_timeout 5m;
#
#	ssl_protocols SSLv3 TLSv1;
#	ssl_ciphers ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv3:+EXP;
#	ssl_prefer_server_ciphers on;
#
#	location / {
#		try_files $uri $uri/ /index.html;
#	}
#}
