/**
 * Absolute minimal support for logging.
 *
 * Author: Dan Gunter <dkgunter@lbl.gov>
 * Date: 14 September 2013
 * - Addig
 */

/*jshint sub:true*/
/*global window:true,define:true, module:true*/
(function(window) {
    "use strict";
    /* Make console logging a no-op where not defined */
	if (typeof console === 'undefined' || !console.log) {
	  window.console = {
	    debug: function() {},
	    trace: function() {},
	    log: function() {},
	    info: function() {},
	    warn: function() {},
	    error: function() {}
	  };
	}
})(window);

/**
 * @class KBWidget
 *
 * A KBase widget. Lorem ipsum dolor sit amet, consectetur adipisicing elit,
 * sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim
 * ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip
 * ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate
 * velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat
 * cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id
 * est laborum.
 *
 * And here's an example:
 *
 *     @example
 *     var widget = $.KBWidget({
 *         name: "MyFancyWidget",
 *         parent: "MommyWidget",
 *         init: function () {}
 *     });
 */
(function ($) {
    var KBase;
    var ucfirst = function(string) {
        return string.charAt(0).toUpperCase() + string.slice(1);
    };

    var willChangeNoteForName = function(name) {
        return 'willChangeValueFor' + ucfirst(name);
    }

    var didChangeNoteForName = function(name) {
        return 'didChangeValueFor' + ucfirst(name);
    }

    var defaultBindingAccessors = function(elem) {
        var tagName = $(elem).prop('tagName').toLowerCase();

        if (tagName.match(/^(input|select|textarea)$/)) {
            if ($(elem).attr('type') == 'checkbox') {
                return {
                    setter : 'checked',
                    getter : 'checked'
                }
            }
            else {
                return {
                        setter : 'val',
                        getter : 'val'
                    }
            }
        }
        else {
            return {
                    setter : 'text',
                    getter : 'text'
                }
        }
    };

    makeBindingCallback = function(elem, $target, attribute, transformers, accessors) {

        return $.proxy(function (e, vals) {
            e.preventDefault();
            e.stopPropagation();

            var newVal = vals.newValue;

            if (transformers.transformedValue != undefined) {
                newVal = transformers.transformedValue(newVal);
            }

            if (accessors.setter == 'checked') {
                $(elem).attr(accessors.setter, newVal);
            }
            else {
                $(elem)[accessors.setter](newVal);
            }

        }, $(elem))
    };

    makeBindingBlurCallback = function(elem, $target, attribute, transformers, accessors) {

        return $.proxy(function (e, vals) {

            if (e.type == 'keypress' && e.which != 13) {
                return;
            }

            e.preventDefault();
            e.stopPropagation();

            var newVal;

            if (accessors.getter == 'checked') {
                newVal = this.is(':checked')
                    ? true
                    : false;
            }
            else {
                newVal = this[accessors.getter]();
            }

            if (newVal != this.data('kbase_bindingValue')) {

                if (transformers.validator != undefined) {
                    var validation = transformers.validator(newVal);

                    if (! validation.success) {
                        $(elem).data('validationError.kbaseBinding', validation.msg);
                        this.popover(
                            {
                                placement   : 'right',
                                title       : 'Validation error',
                                content     : $.proxy( function () { return this.data('validationError.kbaseBinding') }, $(elem)),
                                trigger     : 'manual',
                                html        : true,
                            }
                        );

                        this.popover('show');
                        return;
                    }
                    else {
                        $(elem).popover('hide');
                        if (validation.newVal) {
                            newVal = validation.newVal;
                        }
                    }
                }

                if (transformers.reverseTransformedValue != undefined) {
                    newVal = transformers.reverseTransformedValue(newVal);
                }

                var setter = $target.__attributes[attribute].setter;

                $target[setter](newVal);
            }

        }, $(elem))
    };

    makeBindingFocusCallback = function(elem, transformers, accessors) {

        return $.proxy( function (e) {
            e.preventDefault();
            e.stopPropagation();

            this.data('kbase_bindingValue', this[accessors.getter]());

        }, $(elem));

    };

    $.fn.kb_bind = function($target, attribute, transformers, accessors) {

        if (this.length > 1) {
            var methodArgs = arguments;
            $.each(
                this,
                function (idx, elem) {
                    $.fn.kb_bind.apply($(elem), methodArgs);
                }
            )
            return this;
        }

        if (accessors == undefined) {
            accessors = defaultBindingAccessors(this);
        }

        if (transformers == undefined) {
            transformers = {};
        }

        var event = didChangeNoteForName(attribute);
        $target.on(
            event,
            makeBindingCallback(this, $target, attribute, transformers, accessors)
        );

        $(this).on(
            'blur.kbaseBinding',
            makeBindingBlurCallback(this, $target, attribute, transformers, accessors)
        );

        $(this).on(
            'focus.kbaseBinding',
            makeBindingFocusCallback(this, transformers, accessors)
        );

        var tagName = $(this).prop('tagName').toLowerCase();
        if (tagName.match(/^(input)$/)) {
            $(this).on(
                'keypress.kbaseBinding',
                makeBindingBlurCallback(this, $target, attribute, transformers, accessors)
            )

            if ($(this).attr('type') == 'checkbox') {
                $(this).on(
                    'change.kbaseBinding',
                    makeBindingBlurCallback(this, $target, attribute, transformers, accessors)
                )
            }
        }

        var target_getter = $target.__attributes[attribute].getter;
        var newVal = $target[target_getter]();

        if (transformers.transformedValue != undefined) {
            newVal = transformers.transformedValue(newVal);
        }

        if (accessors.setter == 'checked') {
            $(this).attr(accessors.setter, newVal);
        }
        else {
            $(this)[accessors.setter](newVal);
        }

        return this;
    };

    $.fn.kb_unbind = function($target, attribute, callback, transformers, accessors) {

        if (this.length > 1) {
            var methodArgs = arguments;
            $.each(
                this,
                function (idx, elem) {
                    $.fn.kb_unbind.apply($(elem), methodArgs);
                }
            )
            return this;
        }

        if (accessors == undefined) {
            accessors = defaultBindingAccessors(this);
        }

        if (transformers == undefined) {
            transformers = {};
        }

        var event = didChangeNoteForName(attribute);
        $target.off(
            event,
            makeBindingCallback(this, $target, attribute, transformers, accessors)
        );

        $(this).off(
            'blur.kbaseBinding',
            makeBindingBlurCallback(this, $target, attribute, transformers, accessors)
        );

        $(this).off(
            'focus.kbaseBinding',
            makeBindingBlurCallback(this, transformers, accessors)
        );


        var tagName = $(this).prop('tagName').toLowerCase();
        if (tagName.match(/^(input)$/)) {
            $(this).off(
                'keypress.kbaseBinding',
                makeBindingEnterCallback(this, $target, attribute, transformers, accessors)
            )
            if ($(this).attr('type') == 'checkbox') {
                $(this).off(
                    'change.kbaseBinding',
                    makeBindingBlurCallback(this, $target, attribute, transformers, accessors)
                )
            }
        }

        return this;

    };


    var widgetRegistry = {};
    if (KBase === undefined) {
        KBase = window.KBase = {
            _functions : {

                getter :
                    function(name) {
                        return function() {
                            return this.valueForKey(name);
                        }
                    },

                setter :
                    function (name) {
                        return function (newVal) {
                            return this.setValueForKey(name, newVal);
                        }
                    },

                getter_setter :
                    function (name) {

                        return function(newVal) {
                            if (arguments.length == 1) {
                                return this.setValueForKey(name, newVal);
                            }
                            else {
                                return this.valueForKey(name);
                            }
                        }
                    },
            }
        }
    }

    function subclass(constructor, superConstructor) {
        function surrogateConstructor(){}

        surrogateConstructor.prototype = superConstructor.prototype;

        var prototypeObject = new surrogateConstructor();
        prototypeObject.constructor = constructor;

        constructor.prototype = prototypeObject;
    }

    $.jqElem = function (tagName) {
        var tag = "<" + tagName + ">";
        if (! tag.match(/^(area|base|br|col|command|embed|hr|img|input|keygen|link|meta|param|source|track)/) ) {
            tag += '</' + tagName + '>';
        }
        return $(tag);
    }

    $.KBWidget = function (def) {
        def = (def || {});
        var name    = def.name;
        var parent  = def.parent;

        if (parent == undefined) {
            parent = 'kbaseWidget';
        }

        var asPlugin= def.asPlugin;
        if (asPlugin === undefined) {
            asPlugin = true;
        }

        var Widget = function ($elem) {
            this.$elem = $elem;
            this.options = $.extend(true, {}, def.options, this.constructor.prototype.options);
            return this;
        }

        if (name) {
            var directName = name;
            directName = directName.replace(/^kbase/, '');
            directName = directName.charAt(0).toLowerCase() + directName.slice(1);

            KBase[directName] = function (options, $elem) {
                var $w = new Widget();
                if ($elem == undefined) {
                    $elem = $.jqElem('div');
                }
                $w.$elem = $elem;
                $w.init(options);
                $w._init = true;
                $w.trigger('initialized');
                return $w;
            }

            widgetRegistry[name] = Widget;

            if (def == undefined) {
                def = parent;
                parent = 'kbaseWidget';
                if (def == undefined) {
                    def = {};
                }
            }
        }

        if (parent) {
            var pWidget = widgetRegistry[parent];
            if (pWidget === undefined)
                throw new Error("Parent widget is not registered");
            subclass(Widget, pWidget);
        }

        var defCopy = $.extend(true, {}, def);

        Widget.prototype.__attributes = {};

        if (defCopy._accessors != undefined) {

            //for (var accessor in defCopy._accessors) {
            $.each(
                defCopy._accessors,
                $.proxy(function (idx, accessor) {
                    var info = {
                        name   : accessor,
                        setter : accessor,
                        getter : accessor,
                        type : 'rw'
                    }

                    if (typeof accessor === 'object') {

                        info.setter = accessor.name;
                        info.getter = accessor.name;

                        for (var key in accessor) {
                            info[key] = accessor[key];
                        }

                    }

                    Widget.prototype.__attributes[info.name] = info;

                    if (info.setter == info.getter && info.type.match(/rw/)) {

                        Widget.prototype[info.getter] = KBase._functions.getter_setter(info.name);

                    }
                    else {
                        if (info.type.match(/w/) && info.setter != undefined) {
                            Widget.prototype[info.setter] = KBase._functions.setter(info.name);
                        }

                        if (info.type.match(/r/) && info.getter != undefined) {
                            Widget.prototype[info.getter] = KBase._functions.getter(info.name);
                        }

                    }

                }, this)

            );

            defCopy._accessors = undefined;
        }

        var extension = $.extend(true, {}, Widget.prototype.__attributes, widgetRegistry[parent].prototype.__attributes);
        Widget.prototype.__attributes = extension;

        for (var prop in defCopy) {
            //hella slick closure based _super method adapted from JQueryUI.
//*

            if ($.isFunction(defCopy[prop])) {

                Widget.prototype[prop] = (function(methodName, method) {
                    var _super = function() {
                        throw "No parent method defined! Play by the rules!";
                    }
                    var _superMethod = function() {
                        throw "No parent method defined! Play by the rules!";
                    }

                    if (parent) {
                        var _super = function() {
                            return widgetRegistry[parent].prototype[methodName].apply(this, arguments);
                        }

                        var _superMethod = function(superMethodName) {
                            return widgetRegistry[parent].prototype[superMethodName].apply(this, Array.prototype.slice.call(arguments, 1));
                        }
                    }

                    return function() {
                        var _oSuper = this._super;
                        var _oSuperMethod = this._superMethod;
                        this._super = _super;
                        this._superMethod = _superMethod;

                        var retValue = method.apply(this, arguments);

                        this._super = _oSuper;
                        this._superMethod = _oSuperMethod;

                        return retValue;
                    }
                })(prop, defCopy[prop]);

            }
            else {
//*/
                Widget.prototype[prop] = defCopy[prop];
            }
        }

        if (parent) {
            Widget.prototype.options = $.extend(true, {}, widgetRegistry[parent].prototype.options, Widget.prototype.options);
        }

        if (asPlugin) {
            var ctor = function (method, args) {

                if (this.length > 1) {
                    var methodArgs = arguments;
                    $.each(
                        this,
                        function (idx, elem) {
                            $.fn[name].apply($(elem), methodArgs);
                        }
                    )
                    return this;
                }

                if (this.data(name) == undefined) {
                    this.data(name, new Widget(this));
                }

                // Method calling logic
                if (Widget.prototype[method]) {
                    return Widget.prototype[method].apply(
                        this.data(name),
                        Array.prototype.slice.call(arguments, 1)
                    );
                } else if ( typeof method === 'object' || ! method ) {
                    //return this.data(name).init( arguments );
                    var args = arguments;
                    $w = this.data(name);
                    if ($w._init === undefined) {
                        $w = Widget.prototype.init.apply($w, arguments);
                    }
                    $w._init = true;
                    $w.trigger('initialized');
                    return $w;
                } else {
                    $.error( 'Method ' +  method + ' does not exist on ' + name);
                }

                return this;

            };
            ctor.name = name;
            $.fn[name] = ctor;
            $[name]    = $.fn[name];
        }

        /**
         * Registers events on this element.
         * @param {String} name The event name to register
         * @param {Function} callback The function to call when an event is
         *        emitted.
         */
        this.on = function (evt, callback) {
            this.$elem.bind(evt, callback);
            return this;
        };

        /**
         * Emits an event.
         * @param {String} name The event name
         * @param {Object} data The data to emit with the event
         */
        this.emit = function (evt, data) {
            this.$elem.trigger(evt, data);
            return this;
        };

        /**
         * Unregisters events on this element.
         * @param {String} name The event name to unregister from
         */
        this.off = function (evt) {
            this.$elem.unbind(evt);
            return this;
        };

        if (name !== undefined) {
            Widget.prototype[name] = function () {
                return $.fn[name].apply(this.$elem, arguments);
            }

            return $.fn[name];
        } else {
            return this;
        }
    }

    $.KBWidget(
        {
            name : 'kbaseWidget',

            /**
             * Writes text to console.
             * @param {String} txt The text to write.
             */
            dbg : function (txt) { if (window.console) console.log(txt); },


            callAfterInit : function (func) {
                var $me = this;
                var delayer = function () {

                    var recursion = arguments.callee;

                    if ($me._init) {
                        func();
                    }
                    else {
                        setTimeout(recursion, 10);
                    }
                }

                delayer();
                return delayer;
            },

            /**
             * Initializes the widget.
             * @param {Object} args Initialization arguments
             */
            init : function(args) {

                this._attributes = {};

                var opts = $.extend(true, {}, this.options);
                this.options = $.extend(true, {}, opts, args);

                for (attribute in this.__attributes) {
                    if (this.options[attribute] != undefined) {
                        this.setValueForKey(attribute, this.options[attribute]);
                    }
                }


                return this;
            },

            /**
             * Sets an alert to display
             * @param {String} msg The message to display
             */
            alert : function(msg) {
                if (msg == undefined ) {
                    msg = this.data('msg');
                }
                this.data('msg', msg);

                return this;
            },

            valueForKey :
                function (attribute) {
                    //this.trigger('didAccessValueFor' + name + '.kbase');
                    return this._attributes[attribute];
                },

            setValueForKey :

                function(attribute, newVal) {

                    var triggerValues = undefined;
                    var oldVal = this.valueForKey(attribute);

                    if (newVal != oldVal) {

                        var willChangeNote = willChangeNoteForName(attribute);

                        triggerValues = {
                            oldValue : oldVal,
                            newValue : newVal
                        }
                        this.trigger(willChangeNote, triggerValues);

                        this._attributes[attribute] = triggerValues.newValue;

                        if (triggerValues.newValue != oldVal) {
                            var didChangeNote  = didChangeNoteForName(attribute);

                            this.trigger(didChangeNote, triggerValues);
                        }
                    }

                    return this.valueForKey(attribute);
                },

            /**
             * Sets data.
             * @param {Object} key The key for the data
             * @param {Object} value The data itself
             */
            data : function (key, val) {

                if (this.options._storage == undefined) {
                    this.options._storage = {};
                }

                if (arguments.length == 2) {
                    this.options._storage[key] = val;
                }

                if (key != undefined) {
                    return this.options._storage[key];
                }
                else {
                    return this.options._storage;
                }
            },

            _rewireIds : function($elem, $target) {

                if ($target == undefined) {
                    $target = $elem;
                }

                if ($elem.attr('id')) {
                    $target.data($elem.attr('id'), $elem);
                    $elem.removeAttr('id');
                }

                $.each(
                    $elem.find('[id]'),
                    function(idx) {
                        $target.data($(this).attr('id'), $(this));
                        $(this).removeAttr('id');
                        }
                );

                return $elem;
            },

            sortCaseInsensitively : function (a,b) {
                     if (a.toLowerCase() < b.toLowerCase()) { return -1 }
                else if (a.toLowerCase() > b.toLowerCase()) { return 1  }
                else                            { return 0  }
            },

            sortByKey : function (key, insensitively) {
                if (insensitively) {
                    return function (a,b) {
                             if (a[key].toLowerCase() < b[key].toLowerCase()) { return -1 }
                        else if (a[key].toLowerCase() > b[key].toLowerCase()) { return 1  }
                        else                                                  { return 0  }
                    }
                }
                else {
                    return function (a,b) {
                             if (a[key] < b[key]) { return -1 }
                        else if (a[key] > b[key]) { return 1  }
                        else                      { return 0  }
                    }
                }
            },

            trigger : function () {
                this.$elem.trigger.apply(this.$elem, arguments);
            },

            on : function () {
                this.$elem.on.apply(this.$elem, arguments);
            },

            off : function () {
                this.$elem.off.apply(this.$elem, arguments);
            },

            makeObserverCallback : function($target, attribute, callback) {
                return $.proxy(function (e, vals) {
                    e.preventDefault();
                    e.stopPropagation();

                    callback.call(this, e, $target, vals);

                }, this)
            },

            observe : function($target, attribute, callback) {
                $target.on(
                    attribute,
                    $target,
                    this.makeObserverCallback($target, attribute, callback)
                );

            },

            unobserve : function($target, attribute, callback) {
                $target.off(
                    attribute,
                    $target,
                    this.makeObserverCallback($target, attribute, callback)
                );
            },

/*
            kb_bind : function($target, attribute, callback) {
                var event = didChangeNoteForName(attribute);
                $target.on(event, $target, callback);
            },

            kb_unbind : function($target, attribute, callback) {
                var event = didChangeNoteForName(attribute);
                $target.off(event, callback);
            },
*/

//*
            kb_bind : function($target, attribute, callback) {
                var event = didChangeNoteForName(attribute);
                this.observe($target, event, callback);
            },

            kb_unbind : function($target, attribute, callback) {
                var event = didChangeNoteForName(attribute);
                //$target.off(event, callback);
                this.unobserve($target, event, callback);
            },

            uuid : function () {
                var result = '';
                for (var i = 0; i < 32; i++) {
                    result += Math.floor(Math.random()*16).toString(16).toUpperCase();
                }

                return result;
            },

//*/

        }
    );
})(jQuery);

/*

*/

(function( $, undefined ) {


    $.KBWidget({

		  name: "kbaseAuthenticatedWidget",

        version: "1.0.0",
        _accessors : [
            {name : 'auth', setter: 'setAuth'},
            'sessionId',
            'authToken',
            'user_id',
            'loggedInCallback',
            'loggedOutCallback',
            'loggedInQueryCallback'
        ],
        options: {
            auth : undefined
        },

        init: function(options) {

            this._super(options);

            $(document).on(
                'loggedIn.kbase',
                $.proxy(function (e, auth) {
                    this.setAuth(auth);
                    if (this.loggedInCallback) {
                        this.loggedInCallback(e, auth);
                    }
                }, this)
            );

            $(document).on(
                'loggedOut.kbase',
                $.proxy(function (e) {
                    this.setAuth(undefined);
                    if (this.loggedOutCallback) {
                        this.loggedOutCallback(e);
                    }
                }, this)
            );

            $(document).trigger(
                'loggedInQuery',
                $.proxy(function (auth) {
                    this.setAuth(auth);

                    if (auth.kbase_sessionid) {
                        this.callAfterInit(
                            $.proxy(function() {
                                if (this.loggedInQueryCallback) {
                                    this.loggedInQueryCallback(auth)
                                }
                            }, this)
                        );
                    }
                }, this)
            );

            return this;

        },

        setAuth : function (newAuth) {
            this.setValueForKey('auth', newAuth);
            if (newAuth == undefined) {
                newAuth = {};
            }
            this.sessionId(newAuth.kbase_sessionid);
            this.authToken(newAuth.token);
            this.user_id(newAuth.user_id);
        },

        loggedInQueryCallback : function(args) {
            if (this.loggedInCallback) {
                this.loggedInCallback(undefined,args);
            }
        },

    });

}( jQuery ) );

/*

    Generic prompting widget. Documented via example!

    var tab = 'Some Tab Value';

    var $deleteModal = $('<div></div>').kbasePrompt(
        {
            title : 'Confirm deletion',
            body : 'Really delete <strong>' + tab + '</strong>?',
            modalClass : 'fade', //Not required. jquery animation class to show/hide. Defaults to 'fade'
            controls : [
                'cancelButton',
                {
                    name : 'Delete',
                    type : 'primary',
                    callback : function(e, $prompt) {
                        $prompt.closePrompt();
                        if ($nav.hasClass('active')) {
                            if ($nav.next('li').length) {
                                $nav.next().find('a').trigger('click');
                            }
                            else {
                                $nav.prev('li').find('a').trigger('click');
                            }
                        }
                        $tab.remove();
                        $nav.remove();
                    }
                }
            ],
            footer : 'Some footer value here',
        }
    );

    $deleteModal.openPrompt();

    It takes 4 values - title, body, and footer are jQuery objects containing HTML elements. They will
    be placed as the title, body, and footer of the prompt, respectively. The footer is left justified.

    controls is a little more involved, it governs the buttons used from left->right. Each element is either a string,
    in which case it is a method call on the prompt object, or it's an object with a few keys:
        name : the name to present on the button. It's appended, so you can use an icon!
        type : specify a bootstrap button type (primary, info, success, warning, danger, inverse, link)
        callback: a function callback which is invoked when the button is clicked. The default is prevented.
                  arguments received are the original event object and the associated prompt object. 'this' is the button.
                  Note that the callback is expected to close the modal itself.
        id : an id to tack onto the button, which will be rewired out of existance and hang on the prompt's data().
    Default controls are cancelButton and okayButton, which do nothing other than close the prompt w/o action.

    useful additional methods would be openPrompt() and closePrompt();

*/

(function( $, undefined ) {

    $.KBWidget({

		  name: "kbasePrompt",

        version: "1.0.0",
        options: {
            controls : ['closeButton'],  // Fixme: why would we want both cancel and ok?  Need 'primary' close button
            modalClass : 'fade',
        },

        init: function(options) {
            this._super(options);
            return this;
        },

        openPrompt : function() {
            this.dialogModal().modal({'keyboard' : true});

            //fixme: hack for jim to fix?  
            // This results in destroying the modal on close, intead of hiding.  
            // Critical for modals that are dynamically populated
            $('.modal').on('hidden.bs.modal', function () {
                $(this).data('bs.modal', null);
                $(this).remove();
            });

            //fixme: I didn't bother figuring this one out?
            $('.focusedInput').focus();
        },
        closePrompt : function() {
            this.dialogModal().modal('hide');
        },

        cancelButton : function() {
            return {
                name: 'Cancel',
                callback : function (e, $prompt) {
                    $prompt.closePrompt();
                }
            }
        },

        okayButton : function() {
            return {
                name: 'Okay',
                type : 'primary',
                callback : function (e, $prompt) {
                    $prompt.closePrompt();
                }
            }
        },
        closeButton : function() {
            return {
                name: 'Close',
                type : 'primary',
                callback : function (e, $prompt) {
                    $prompt.closePrompt();
                }
            }
        },

        dialogModal : function () {
            if (this.data('dialogModal') != undefined) {
                return this.data('dialogModal');
            }

            var $dialogModal =
                $('<div></div>')
                    .attr('class', 'modal ' + this.options.modalClass)
                    .attr('tabindex', '-1')
                    .append(
                        $.jqElem('div')
                            .addClass('modal-dialog')
                            .append(
                                $.jqElem('div')
                                    .addClass('modal-content')
                                    .append(
                                        $('<div></div>')
                                            .attr('class', 'modal-header')
                                            .append(
                                                $('<button></button>')
                                                    .attr('type', 'button')
                                                    .attr('class', 'close')
                                                    .attr('data-dismiss', 'modal')
                                                    .attr('aria-hidden', 'true')
                                                    .append('x\n')
                                            )
                                            .append(
                                                $('<h3></h3>')
                                                    .addClass('modal-title')
                                                    .attr('id', 'title')
                                            )
                                    )
                                    .append(
                                        $('<div></div>')
                                            .attr('class', 'modal-body')
                                            .attr('id', 'body')
                                    )
                                    .append(
                                        $('<div></div>')
                                            .attr('class', 'modal-footer')
                                            .append(
                                                $('<div></div>')
                                                    .addClass('row')
                                                    .addClass('form-horizontal')
                                                    .append(
                                                        $('<div></div>')
                                                        .addClass('col-md-6')
                                                        .addClass('text-left')
                                                        .attr('id', 'footer')
                                                    )
                                                    .append(
                                                        $('<div></div>')
                                                            .addClass('col-md-6')
                                                            .attr('id', 'controls')
                                                            .css('white-space', 'nowrap')
                                                    )
                                            )
                                    )
                            )
                    )
            ;

            $dialogModal.unbind('keypress');
            $dialogModal.keypress(function(e) {
                if (e.keyCode == 13) {
                    e.stopPropagation();
                    e.preventDefault();
                    $('a:last', $dialogModal).trigger("click");
                }
            });

            //$deleteModal.modal({'keyboard' : true});

            this._rewireIds($dialogModal, $dialogModal);

            if (this.options.title) {
                $dialogModal.data('title').append(this.options.title);
            }

            if (this.options.body) {
                $dialogModal.data('body').append(this.options.body);
            }

            if (this.options.footer) {
                $dialogModal.data('footer').append(this.options.footer);
            }


            var $prompt = this;

            $.each(
                this.options.controls,
                function (idx, val) {
                    if (typeof val == 'string') {
                        val = $prompt[val]();
                    }
                    var btnClass = 'btn btn-default';
                    if (val.type) {
                        btnClass = btnClass + ' btn-' + val.type;
                    }

                    var $button =
                        $('<a></a>')
                            //.attr('href', '#')
                            .attr('class', btnClass)
                            .append(val.name)
                            .bind('click',
                                function(e) {
                                    e.preventDefault();
                                    e.stopPropagation();
                                    val.callback.call(this, e, $prompt);
                                }
                            )
                    ;

                    if (val.id) {
                        $button.attr('id', val.id);
                    }

                    $dialogModal.data('controls').append($button);
                }
            )

            this._rewireIds($dialogModal, $dialogModal);

            this.data('dialogModal', $dialogModal);

            var $firstField = undefined;
            var selection = false;

            $dialogModal.on('shown.bs.modal',
                $.proxy(
                    function () {
                        $.each(
                            $dialogModal.find('input[type=text],input[type=password],textarea'),
                            function (idx, val) {
                                if ($firstField == undefined) {
                                    $firstField = $(val);
                                }

                                if ($(val).is("input") && $(val).val() == undefined) {
                                    $(val).focus();
                                    selection = true;
                                    return;
                                }
                                else if ($(val).is("textarea") && $(val).text().length == 0) {
                                    $(val).focus();
                                    selection = true;
                                    return;
                                }
                            }
                        );

                        if (! selection && $firstField != undefined) {
                            $firstField.focus();
                        }
                    },
                    this
                )
            );



            /*$dialogModal.find('input[type=text],input[type=password]').last().keypress(
                $.proxy(
                    function(e) {
                        if (e.keyCode == 13) {
                            $dialogModal.find('a:last').trigger('click');
                            e.stopPropagation();
                            e.preventDefault();
                        }
                    },
                    this
                )
            );*/

            return $dialogModal;

        },

        addAlert : function(text, type) {
            if (this.data('dialogModal').find('.alert')) {
                this.rmAlert();
            }

            var ele = $('<div class="alert'+(type ? ' alert-'+type : ' alert-danger')+'">'+text+'</div>');

            if (text) {
                this.data('dialogModal').find('.modal-body').prepend(ele);                
            }            

           return this;
        },

        rmAlert : function(text) {
            this.data('dialogModal').find('.alert').remove();

           return this;
        },

        addCover : function(text, type) {
            if (this.data('dialogModal').find('.modal-cover')) {
                this.rmCover();
            }

            var ele = $('<div class="modal-cover"> \
                             <div class="modal-cover-table"> \
                               <div class="modal-cover-cell"> \
                                 <span class="modal-cover-box">'+
                                 '</span> \
                               </div> \
                             </div> \
                           </div>');
    
            if (type) {
                ele.find('.modal-cover-box').addClass('alert-'+type);
            } else {
                ele.find('.modal-cover-box').addClass('alert-success');                
            }

            ele.hide();
            if (text) ele.find('.modal-cover-box').html(text);
            ele.show();            

            $('.modal-body').append(ele);

            return this;
        },
        
        getCover : function() {
            return this.data('dialogModal').find('.modal-cover-box');
        },


        rmCover : function(text) {
            this.data('dialogModal').find('.modal-cover').remove();

            return this;
        },            

    });

}( jQuery ) );

/*

    KBase Bootstrap plugin to handle all login/session related stuff.

    Set up a container on your HTML page. It can be whatever you'd like. For example.

    <div id = 'fizzlefazzle'></div>

    You don't need to give it that ID. I just populated it with junk because I don't want to
    encourage people to use something generic like 'login', since there's no need. You don't need
    an ID at all, just some way to select it.

    Later, in your jquery initialization, do this:

    $(function() {
        ...

        $(#"fizzlefaszzle").login();

    }

    And that, my friends, is Jenga. You're done. Sit back and enjoy the fruits of your labor.

    There are a couple of useful things to know about. You can extract the user_id and kbase_sessionid:

        $(#"fizzlefazzle").login('session', 'user_id');
        $(#"fizzlefazzle").login('session', 'kbase_sessionid');

    When you're setting it up, you have a few options:

    $('#fizzlefazzle').login(
        {
            style : (button|slim|micro|hidden) // try 'em all out! button is the default.
            loginURL : the URL we're logging into
            login_callback : a function to be called upon login, success or failure. Gets an args hash  (user_id, kbase_sessionid)
            logout_callback : a function to be called upon logout, gets no args
            prior_login_callback : a function to be called upon loading a page, if the user was already logged in. Gets an args hash (user_id, kbase_sessionid)
            user_id : a string with which to pre-populate the user_id on the forms.
        }
    );

    You can also completely inline it.

    	var $login_doodad = $('<span></span>').login({style : 'hidden'});
    	$login_doodad.login('login', 'username', 'password', function (args) {
    		console.log("Tried to log in and got back: "); console.log(args);
    	});

*/

(function( $, undefined ) {

    $.KBWidget({

	    name: "kbaseLogin",

        version: "1.0.0",
        options: {
            style : 'text',
            //loginURL : "http://140.221.92.231/services/authorization/Sessions/Login",
            loginURL : "https://kbase.us/services/authorization/Sessions/Login",
            possibleFields : ['verified','name','opt_in','kbase_sessionid','token','groups','user_id','email','system_admin'],
            fields : ['name', 'kbase_sessionid', 'user_id', 'token'],
        },

        cookieName : 'kbase_session',
        narrCookieName : 'kbase_narr_session',

        get_kbase_cookie : function (field) {

            if (!$.cookie(this.cookieName))
                return {};

            var chips = localStorage.getItem('kbase_session');

            if (chips != undefined  && chips != null) {
                chips = JSON.parse(chips);
            }
            else {
                chips = {};
            }

            return field == undefined
                ? chips
                : chips[field];
        },

        sessionId : function () {
            return this.get_kbase_cookie('kbase_sessionid');
        },

        token : function () {
            return this.get_kbase_cookie('token');
        },

        /**
         * Token validity is tested by the 'expiry' tag in the token.
         * That tag is followed by the number of seconds in the time when it expires.
         * So, pull that out, multiply x1000, and make a Date() out of it. If that Date is greater than
         * the current one, it's still good.
         * If not, or if there is no 'expiry' field, it's not a valid token.
         */
        is_token_valid : function (token) {
            var expirySec = /\|expiry\=(\d+)\|/.exec(token);
            if (expirySec) {
                expirySec = expirySec[1];
                var expiryDate = new Date(expirySec*1000);
                return (expiryDate - new Date() > 0);
            }
            return false;
        },

        init: function(options) {

            this._super(options);

            var kbaseCookie = this.get_kbase_cookie();

            this.$elem.empty();

            var style = '_' + this.options.style + 'Style';

            this.ui = this[style]();
            if (this.ui) {
                this.$elem.append(this.ui);
            }

            if (kbaseCookie.user_id) {

                if (!this.is_token_valid(this.get_kbase_cookie('token'))) {
                    localStorage.removeItem('kbase_session');
                    // nuke the cookie, too, just in case it's still there.
                    $.removeCookie(this.cookieName, { path: '/', domain: '.kbase.us' });
                    $.removeCookie(this.cookieName, { path: '/' });
                }
                else {
                    if (this.registerLogin) {
                        this.registerLogin(kbaseCookie);
                    }
                    if (this.options.prior_login_callback) {
                        this.options.prior_login_callback.call(this, kbaseCookie);
                    }
                }

                this.data('_session', kbaseCookie);
                this.trigger('loggedIn', this.get_kbase_cookie());

            }

            $(document).on(
                'loggedInQuery.kbase',
                $.proxy(function (e, callback) {

                var cookie = this.get_kbase_cookie()
                    if (callback) {
                        callback(cookie);
                    }
                }, this)
            );

            $(document).on(
                'promptForLogin.kbase',
                $.proxy(function (e, args) {
                    if (args.user_id) {
                        this.data('passed_user_id', args.user_id);
                    }
                    this.openDialog();
                }, this)
            );

            $(document).on(
                'logout.kbase',
                $.proxy(function (e, rePrompt) {
                    this.logout(rePrompt);
                }, this)
            );

            return this;

        },

        registerLoginFunc  : function() { return this.registerLogin },
        specificLogoutFunc : function() { return this.specificLogout },

        populateLoginInfo : function (args) {
            if (args.success) {
                this.data('_session', args);
                this._error = undefined;
            }
            else {
                this.data('_session', {});
                this._error = args.message;
            }
        },

        session : function(key, value) {

            if (this.data('_session') == undefined) {
                this.data('_session', {});
            }

            var session = this.data('_session');

            if (arguments.length == 2) {
                session[key] = value;
            }

            if (arguments.length > 0) {
                return session[key];
            }
            else {
                return session;
            }
        },

        error : function(new_error) {
            if (new_error) {
                this._error = new_error;
            }

            return this._error;
        },

        openDialog : function() {

        	if (this.data('loginDialog')) {

                var $ld = this.data('loginDialog');

                $('form', $ld.dialogModal()).get(0).reset();


                $ld.dialogModal().data("user_id").val( this.session('user_id') || this.data('passed_user_id') || this.options.user_id );

                delete this.options.user_id;
                this.session('user_id',undefined);

                $ld.dialogModal().trigger('clearMessages');

        		this.data('loginDialog').openPrompt();

        	}
        },

        _textStyle : function() {
            this._createLoginDialog();

            this.$elem.css('padding', '9px 15px 7px 10px');

            var $prompt = $('<span></span>')
                .append(
                    $('<a></a>')
                        .attr('id', 'loginlink')
                        .attr('href', '#')
                        .text('Sign In')
                        .bind('click',
                            $.proxy( function(e) {
                                e.preventDefault();
                                e.stopPropagation();
                                this.openDialog();
                            }, this)
                        )
                )
                .append(
                    $('<div></div>')
                        .addClass('btn-group')
                        .attr('id', 'userdisplay')
                        .css('display', 'none')
                        .append(
                            $('<button></button>')
                                .addClass('btn btn-default')
                                .addClass('btn-xs')
                                .addClass('dropdown-toggle')
                                .append($('<span></span>').addClass('glyphicon glyphicon-user'))
                                .append($('<span></span>').addClass('caret'))
                                .bind('click',
                                //$.proxy(
                                function(e) {
                                    e.preventDefault(); e.stopPropagation();
                                    $(this).next().toggle();//slideToggle('fast');
                                }
                                //, this)
                                )
                        )
                        .append(
                            $('<ul></ul>')
                                .addClass('dropdown-menu')
                                .addClass('pull-right')
                                .css('padding', '3px')
                                .attr('id', 'login-dropdown-menu')
                                .append(
                                    $('<li></li>')
                                        .css('border-bottom', '1px solid lightgray')
                                        .css('white-space', 'nowrap')
                                        .append(
                                            $.jqElem('div')  //so as to style the link in blue.
                                            .css('text-align', 'right')
                                            .append(
                                                $('<a></a>')
                                                    .attr('id', 'loggedinuser_id')
                                                    .css('font-weight', 'bold')
                                                    .attr('href', 'https://gologin.kbase.us/account/UpdateProfile')
                                                    .attr('target', '_blank')
                                                    .css('padding-right', '0px')
                                                    .css('padding-left', '0px')
                                                    .bind('click',
                                                        $.proxy( function(e) {
                                                            this.data('login-dropdown-menu').hide();
                                                        }, this)
                                                    )
                                            )
                                        )
                                )
                                .append(
                                    $('<li></li>')
                                        .addClass('pull-right')
                                        .append(
                                            $('<span></span>')
                                            .append(
                                                $('<a></a>')
                                                    .css('padding-right', '0px')
                                                    .css('padding-left', '0px')
                                                    .append('Sign out')
                                            )
                                            .bind('click',
                                                $.proxy( function(e) {
                                                    e.stopPropagation();e.preventDefault();
                                                    this.data('login-dropdown-menu').hide();//slideUp('fast');
                                                    this.logout();
                                                }, this)
                                            )
                                        )
                                )
                        )
                )

            ;

            this._rewireIds($prompt, this);

            this.registerLogin =
                function(args) {
                    if ( args.success ) {
                        this.data("loginlink").hide();
                        this.data('loggedinuser_id').text(args.name)
                                                    .attr('href', '/functional-site/#/people/' + args.user_id)
                                                    .click();
                        this.data("userdisplay").show();
                        this.data('loginDialog').closePrompt();
                    }
                    else {
                        this.data('loginDialog').dialogModal().trigger('error', args.message);
                    }
                };

            this.specificLogout = function(args) {
                this.data("userdisplay").hide();
                this.data("loginlink").show();
            };

            return $prompt;

        },

        _hiddenStyle : function() {

			this._createLoginDialog();

			this.registerLogin =
				function(args) {
					if (args.success) {
						this.data('loginDialog').closePrompt();
					}
					else {
                        this.data('loginDialog').dialogModal().trigger('error', args.message);
                    }
				};

            return undefined;
        },

        _slimStyle : function() {

        	this.data('loginDialog', undefined);

            var $prompt = $('<span></span>')
                .addClass('form-inline')
                .append(
                    $('<span></span>')
                        .attr('id', 'entrance')
                            .append(
                                $('<span></span>')
                                    .addClass('input-group')
                                    .append(
                                        $('<span></span>')
                                            .addClass('input-group-addon')
                                            .append('username: ')
                                            .bind('click',
                                                function(e) {
                                                    $(this).next().focus();
                                                }
                                            )
                                    )
                                    .append(
                                        $('<input>')
                                            .attr('type', 'text')
                                            .attr('name', 'user_id')
                                            .attr('id', 'user_id')
                                            .attr('size', '20')
                                            .val(this.options.user_id)
                                    )
                                    .append(
                                        $('<span></span>')
                                            .addClass('input-group-addon')
                                            .append(' password: ')
                                            .bind('click',
                                                function(e) {
                                                    $(this).next().focus();
                                                }
                                            )
                                    )
                                    .append(
                                        $('<input>')
                                            .attr('type', 'password')
                                            .attr('name', 'password')
                                            .attr('id', 'password')
                                            .attr('size', '20')
                                    )
                                //.append('&nbsp;')
                                .append(
                                    $('<button></button>')
                                        .attr('id', 'loginbutton')
                                        .addClass('btn btn-primary')
                                        .append(
                                            $('<i></i>')
                                                .attr('id', 'loginicon')
                                                .addClass('icon-lock')
                                        )
                                )
                            )
                )
                .append(
                    $('<span></span>')
                        .attr('id', 'userdisplay')
                        .attr('style', 'display : none;')
                        .addClass('input-group')
                        .append(
                            $('<span></span>')
                                .addClass('input-group-addon')
                                //.attr('style', 'text-align : center')
                                .append('Logged in as ')
                                .append(
                                    $('<span></span>')
                                        .attr('id', 'loggedinuser_id')
                                        .attr('style', 'font-weight : bold')
                                        .append('user_id\n')
                                )
                            )
                        .append(
                            $('<button></button>')
                                .addClass('btn btn-default')
                                .attr('id', 'logoutbutton')
                                .append(
                                    $('<i></i>')
                                        .attr('id', 'logouticon')
                                        .addClass('icon-signout')
                                )
                        )
                );


            this._rewireIds($prompt, this);

            this.data('password').keypress(
                $.proxy(
                    function(e) {
                        if (e.keyCode == 13.) {
                            this.data('loginbutton').trigger("click");
                            e.stopPropagation();
                        }
                    },
                    this
                )
            );

            this.registerLogin =
                function(args) {

                    this.data('loginicon').removeClass().addClass('icon-lock');

                    if ( args.success ) {
                        this.data("entrance").hide();
                        this.data('user_id').val('');
                        this.data('password').val('');
                        this.data("loggedinuser_id").text(args.name);
                        this.data("userdisplay").show();
                    }
                    else {

                        var $errorModal = $('<div></div>').kbasePrompt(
                            {
                                title : 'Login failed',
                                body : $('<div></div>')
                                    .attr('class', 'alert alert-error')
                                    .append(
                                        $('<div></div>')
                                            .append(
                                                $('<div></div>')
                                                    .addClass('pull-left')
                                                    .append(
                                                        $('<i></i>')
                                                            .addClass('icon-warning-sign')
                                                            .attr('style', 'float: left; margin-right: .3em;')
                                                    )
                                            )
                                            .append(
                                                $('<div></div>')
                                                    .append(
                                                        $('<strong></strong>').append(args.message)
                                                    )
                                            )
                                    )
                                ,
                                controls : ['okayButton'],
                            }
                        );
                        $errorModal.openPrompt();

                    }
                };

            this.specificLogout = function(args) {
                this.data("userdisplay").hide();
                this.data("entrance").show();
            };

            this.data('loginbutton').bind(
                'click',
                $.proxy(
                    function(evt) {

                        this.data('loginicon').removeClass().addClass('icon-refresh');

                        this.login(

                            this.data('user_id').val(),
                            this.data('password').val(),
                            function(args) {

                                this.registerLogin(args);

                                if (this.options.login_callback) {
                                    this.options.login_callback.call(this, args);
                                }
                            }
                        );

                    },
                    this
                )
            );

            this.data('logoutbutton').bind('click',
                $.proxy(
                    function(e) {
                        this.logout();
                        this.data('user_id').focus();
                    },
                    this
                )
            );

            return $prompt;

        },

        _microStyle : function() {
            var $prompt = $('<span></span>')
                .append(
                    $('<button></button>')
                        .addClass('btn btn-primary')
                        .attr('id', 'loginbutton')
                        .append(
                            $('<i></i>')
                                .attr('id', 'loginicon')
                                .addClass('icon-lock')
                        )
                );

            this._rewireIds($prompt, this);

            this._createLoginDialog();

            this.data('loginbutton').bind(
                'click',
                $.proxy(
                    function(evt) {
                        this.openDialog();
                    },
                    this
                )
            );

            this.registerLogin =
                function(args) {

                    if ( args.success ) {

                        this.data('loginDialog').dialogModal().trigger('clearMessages');
                        this.data('loginDialog').closePrompt();

                        this.data('loginbutton').tooltip(
                            {
                                title : 'Logged in as ' + args.name
                            }
                        );

                        this.data('loginicon').removeClass().addClass('icon-user');

                        this.data('loginbutton').bind(
                            'click',
                            $.proxy(
                                function(evt) {
                                    this.logout();
                                },
                                this
                            )
                        );
                    }
                    else {
                        this.data('loginDialog').dialogModal().trigger('error', args.message);
                    }
                };

            this.specificLogout =
                function() {
                    this.data('loginbutton').tooltip('destroy');
                    this.data('loginicon').removeClass().addClass('icon-lock');
                };

            return $prompt;

        },

        _buttonStyle : function () {
            var $prompt = $('<div></div>')
                .attr('style', 'width : 250px; border : 1px solid gray')
                .append(
                    $('<h4></h4>')
                        .attr('style', 'padding : 5px; margin-top : 0px; background-color : lightgray ')
                        .addClass('text-center')
                        .append('User\n')
                )
                .append(
                    $('<div></div>')
                        .attr('id', 'entrance')
                        .append(
                            $('<p></p>')
                                .attr('style', 'text-align : center')
                                .append(
                                    $('<button></button>')
                                        .attr('id', 'loginbutton')
                                        .append('Login')
                                        .addClass('btn btn-primary')
                                )
                        )
                )
                .append(
                    $('<div></div>')
                        .attr('id', 'userdisplay')
                        .attr('style', 'display : none;')
                        .append(
                            $('<p></p>')
                                .attr('style', 'text-align : center')
                                .append('Logged in as ')
                                .append(
                                    $('<span></span>')
                                        .attr('id', 'loggedinuser_id')
                                        .attr('style', 'font-weight : bold')
                                        .append('user_id\n')
                                )
                                .append(
                                    $('<button></button>')
                                        .attr('id', 'logoutbutton')
                                        .append('Logout\n')
                                        .addClass('btn btn-default')
                                )
                        )
                );

            this._rewireIds($prompt, this);

            this._createLoginDialog();

            this.data('loginbutton').bind('click',
                $.proxy(
                    function(event) {
                        this.openDialog();
                    },
                    this
                )
            );

            this.data('logoutbutton').bind('click', $.proxy(this.logout, this));

            this.registerLogin =
                function(args) {

                    if ( args.success ) {
                        this.data('loginDialog').dialogModal().trigger('clearMessages');
                        this.data("entrance").hide();
                        this.data("loggedinuser_id").text(args.name);
                        this.data("userdisplay").show();
                        this.data('loginDialog').closePrompt();
                    }
                    else {
                        this.data('loginDialog').dialogModal().trigger('error', args.message);
                    }
                };

            this.specificLogout = function(args) {
                this.data("userdisplay").hide();
                this.data("entrance").show();
            };

            return $prompt;
        },

        _createLoginDialog : function () {

            var $elem = this.$elem;

            var $ld = $('<div></div').kbasePrompt(
                {
                    title : 'Login to KBase',
                    controls : [
                        'cancelButton',
                        {
                            name     : 'Login',
                            type     : 'primary',
                            id       : 'loginbutton',
                            callback : $.proxy( function(e) {
                                var user_id  = this.data('loginDialog').dialogModal().data('user_id').val();
                                var password = this.data('loginDialog').dialogModal().data('password').val();

                                this.data('loginDialog').dialogModal().trigger('message', user_id);

                                this.login(user_id, password, function(args) {

                                    if (this.registerLogin) {
                                        this.registerLogin(args);
                                    }

                                    if (this.options.login_callback) {
                                        this.options.login_callback.call(this, args);
                                    }
                                });

                            },this)
                        }
                    ],
                    body  :
                        $('<p></p>')
                            .append(
                                $('<form></form>')
                                    .attr('name', 'form')
                                    .attr('id', 'form')
                                    .addClass('form-horizontal')
                                    .append(
                                        $('<fieldset></fieldset>')
                                            .append(
                                                $('<div></div>')
                                                    .attr('class', 'alert alert-error')
                                                    .attr('id', 'error')
                                                    .attr('style', 'display : none')
                                                    .append(
                                                        $('<div></div>')
                                                            .append(
                                                                $('<div></div>')
                                                                    .addClass('pull-left')
                                                                    .append(
                                                                        $('<i></i>')
                                                                            .addClass('icon-warning-sign')
                                                                            .attr('style', 'float: left; margin-right: .3em;')
                                                                    )
                                                            )
                                                            .append(
                                                                $('<div></div>')
                                                                    .append(
                                                                        $('<strong></strong>')
                                                                            .append('Error:\n')
                                                                    )
                                                                    .append(
                                                                        $('<span></span>')
                                                                            .attr('id', 'errormsg')
                                                                    )
                                                            )
                                                    )
                                            )
                                            .append(
                                                $('<div></div>')
                                                    .attr('class', 'alert alert-success')
                                                    .attr('id', 'pending')
                                                    .attr('style', 'display : none')
                                                    .append(
                                                        $('<div></div>')
                                                            /*.append(
                                                                $('<div></div>')
                                                                    .addClass('pull-left')
                                                                    .append(
                                                                        $('<i></i>')
                                                                            .addClass('icon-info-sign')
                                                                            .attr('style', 'float: left; margin-right: .3em;')
                                                                    )
                                                            )*/
                                                            .append(
                                                                $('<div></div>')
                                                                    .append(
                                                                        $('<strong></strong>')
                                                                            .append('Logging in as:\n')
                                                                    )
                                                                    .append(
                                                                        $('<span></span>')
                                                                            .attr('id', 'pendinguser')
                                                                    )
                                                            )
                                                    )
                                            )
                                            .append(
                                                $('<div></div>')
                                                    .attr('class', 'form-group')
                                                    .append(
                                                        $('<label></label>')
                                                            .addClass('control-label')
                                                            .addClass('col-lg-2')
                                                            .attr('for', 'user_id')
                                                            .css('margin-right', '10px')
                                                            .append('Username:\n')
                                                    )
                                                    .append(
                                                        $.jqElem('div')
                                                        .addClass('col-lg-9')
                                                        .append(
                                                            $('<input>')
                                                                .addClass('form-control')
                                                                .attr('type', 'text')
                                                                .attr('name', 'user_id')
                                                                .attr('id', 'user_id')
                                                                .attr('size', '20')
                                                        )
                                                    )
                                            )
                                            .append(
                                                $('<div></div>')
                                                    .attr('class', 'form-group')
                                                    .append(
                                                        $('<label></label>')
                                                            .addClass('control-label')
                                                            .addClass('col-lg-2')
                                                            .attr('for', 'password')
                                                            .css('margin-right', '10px')
                                                            .append('Password:\n')
                                                    )
                                                    .append(
                                                        $.jqElem('div')
                                                        .addClass('col-lg-9')
                                                        .append(
                                                            $('<input>')
                                                                .addClass('form-control')
                                                                .attr('type', 'password')
                                                                .attr('name', 'password')
                                                                .attr('id', 'password')
                                                                .attr('size', '20')
                                                        )
                                                    )
                                            )
                                    )
                            )
                    ,   //body
                    footer : $('<span></span')
                        .append(
                            $('<a></a>')
                                .attr('href', 'https://gologin.kbase.us/ResetPassword')
                                .attr('target', '_blank')
                                .text('Forgot password?')
                        )
                        .append('&nbsp;|&nbsp;')
                        .append(
                            $('<a></a>')
                                .attr('href', ' https://gologin.kbase.us/OAuth?response_type=code&step=SignUp&redirect_uri=' + encodeURIComponent(location.href))
                                .attr('target', '_blank')
                                .text('Sign up')
                        )
                    ,
                }
            );

            this._rewireIds($ld.dialogModal(), $ld.dialogModal());

            this.data('loginDialog', $ld);

            $ld.dialogModal().bind('error',
                function(event, msg) {
                    $(this).trigger('clearMessages');
                    $(this).data("error").show();
                    $(this).data("errormsg").html(msg);
                }
            );

            $ld.dialogModal().bind('message',
                function(event, msg) {
                    $(this).trigger('clearMessages');
                    $(this).data("pending").show();
                    $(this).data("pendinguser").html(msg);
                }
            );

            $ld.dialogModal().bind('clearMessages',
                function(event) {
                    $(this).data("error").hide();
                    $(this).data("pending").hide();
                }
            );

            $ld.dialogModal().on('shown.bs.modal',
                function (e) {

                    if ($(this).data('user_id').val().length == 0) {
                        $(this).data('user_id').focus();
                    }
                    else {
                        $(this).data('password').focus();
                    }
                }
            );

            return $ld;

        },

        login : function (user_id, password, callback) {

            var args = { user_id : user_id, status : 1 };

            // here's a couple of simple cases that need to be handled somewhere. Figured I'd just toss 'em into this function
            // to keep 'em all in one place.
            if (user_id.length == 0) {
                args.message = 'Cannot login w/o user_id';
                args.status = 0;
                callback.call(this, args);
            } else if (password == undefined || password.length == 0) {
                args.message = 'Cannot login w/o password';
                args.status = 0;
                if (callback != undefined) {
                    callback.call(this, args);
                }
            }
            else {
                args.password = password;
                args.cookie = 1;
                args.fields = this.options.fields.join(',');

                $.support.cors = true;
                $.ajax(
                    {
                        type            : "POST",
                        url             : this.options.loginURL,
                        data            : args,
                        dataType        : "json",
                        crossDomain     : true,
                        xhrFields       : { withCredentials: true },
                        success         : $.proxy(
                            function (data,res,jqXHR) {

                                if (data.kbase_sessionid) {

                                    if ($.cookie) {
                                        // $.cookie('kbase_session',
                                        //       'unEQUALSSIGN' + data.user_id
                                        //     + 'PIPESIGN'
                                        //     + 'kbase_sessionidEQUALSSIGN' + data.kbase_sessionid
                                        //     + 'PIPESIGN'
                                        //     + 'token_idEQUALSSIGN' + data.kbase_sessionid,
                                        //     { expires: 60 });
                                        var cookieString = 'un=' + data.user_id + 
                                                           '|kbase_sessionid=' + data.kbase_sessionid +
                                                           '|user_id=' + data.user_id +
                                                           '|token=' + data.token.replace(/=/g, 'EQUALSSIGN').replace(/\|/g, 'PIPESIGN');
                                        $.cookie(this.cookieName, cookieString, { path: '/', domain: 'kbase.us', expires: 60 });
                                        $.cookie(this.cookieName, cookieString, { path: '/', expires: 60 });
                                        $.cookie(this.narrCookieName, cookieString, { path: '/', domain: 'kbase.us', expires: 60 });
                                    }




                                    // var cookieArray = [];

                                    var args = { success : 1 };//this.get_kbase_cookie();
                                    var fields = this.options.fields;

                                    for (var i = 0; i < fields.length; i++) {
                                        var value = data[fields[i]];
                                        args[fields[i]] = value;
                                    }
                                    var jsonARGS = JSON.stringify(args);

                                    localStorage.setItem('kbase_session', jsonARGS);
                                    this.populateLoginInfo(args);
                                    this.trigger('loggedIn', this.get_kbase_cookie());

                                    callback.call(this,args);
                                }
                                else {
                                    localStorage.removeItem('kbase_session');
                                    this.populateLoginInfo({});

                                    callback.call(this, {status : 0, message : data.error_msg});

                                    this.trigger('loggedInFailure', {status : 0, message : data.error_msg});
                                }

                            },
                            this
                        ),
                        error: $.proxy(
                            function (jqXHR, textStatus, errorThrown) {

                                // If we have a useless error message, replace with
                                // friendly, but useless error message

                                var errmsg = textStatus;
                                if (jqXHR.responseJSON) {
                                    errmsg = jqXHR.responseJSON.error_msg;
                                }

                                if (errmsg == "error") {
                                    errmsg = "Error connecting to KBase login server";
                                }
                                else if (errmsg === "LoginFailure: Authentication failed.") {
                                    errmsg = "Login Failed: your username/password is incorrect.";
                                }


                                this.populateLoginInfo({});
                                callback.call(this,{ status : 0, message : errmsg })
                             },
                             this
                            ),
                         xhrFields: {
                            withCredentials: true
                         },
                         beforeSend : function(xhr){
                            // make cross-site requests
                            xhr.withCredentials = true;
                         },
                   }
                );
            }
        },

        logout : function(rePrompt) {

            rePrompt = false;
            if (rePrompt == undefined) {
                rePrompt = true;
            }

            var session_id = this.get_kbase_cookie('kbase_sessionid');

            if (session_id == undefined) {
                return;
            }

            localStorage.removeItem('kbase_session');
            $.removeCookie(this.cookieName, { path: '/' });
            $.removeCookie(this.cookieName, { path: '/', domain: 'kbase.us' });
            $.removeCookie(this.narrCookieName, { path: '/', domain: 'kbase.us' });

            // the rest of this is just housekeeping.

            if (this.specificLogout) {
                this.specificLogout();
            }

            this.populateLoginInfo({});

            //automatically prompt to log in again
            if (this.data('loginDialog') != undefined && rePrompt) {
                this.openDialog();
            }

            this.trigger('loggedOut');

            if (this.options.logout_callback) {
                this.options.logout_callback.call(this);
            }
        }

    });

}( jQuery ) );

/*
Copyright 2014 Igor Vaynberg

Version: 3.5.2 Timestamp: Sat Nov  1 14:43:36 EDT 2014

This software is licensed under the Apache License, Version 2.0 (the "Apache License") or the GNU
General Public License version 2 (the "GPL License"). You may choose either license to govern your
use of this software only upon the condition that you accept all of the terms of either the Apache
License or the GPL License.

You may obtain a copy of the Apache License and the GPL License at:

http://www.apache.org/licenses/LICENSE-2.0
http://www.gnu.org/licenses/gpl-2.0.html

Unless required by applicable law or agreed to in writing, software distributed under the Apache License
or the GPL Licesnse is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
either express or implied. See the Apache License and the GPL License for the specific language governing
permissions and limitations under the Apache License and the GPL License.
*/
!function(a){"undefined"==typeof a.fn.each2&&a.extend(a.fn,{each2:function(b){for(var c=a([0]),d=-1,e=this.length;++d<e&&(c.context=c[0]=this[d])&&b.call(c[0],d,c)!==!1;);return this}})}(jQuery),function(a,b){"use strict";function n(b){var c=a(document.createTextNode(""));b.before(c),c.before(b),c.remove()}function o(a){function b(a){return m[a]||a}return a.replace(/[^\u0000-\u007E]/g,b)}function p(a,b){for(var c=0,d=b.length;d>c;c+=1)if(r(a,b[c]))return c;return-1}function q(){var b=a(l);b.appendTo(document.body);var c={width:b.width()-b[0].clientWidth,height:b.height()-b[0].clientHeight};return b.remove(),c}function r(a,c){return a===c?!0:a===b||c===b?!1:null===a||null===c?!1:a.constructor===String?a+""==c+"":c.constructor===String?c+""==a+"":!1}function s(a,b,c){var d,e,f;if(null===a||a.length<1)return[];for(d=a.split(b),e=0,f=d.length;f>e;e+=1)d[e]=c(d[e]);return d}function t(a){return a.outerWidth(!1)-a.width()}function u(c){var d="keyup-change-value";c.on("keydown",function(){a.data(c,d)===b&&a.data(c,d,c.val())}),c.on("keyup",function(){var e=a.data(c,d);e!==b&&c.val()!==e&&(a.removeData(c,d),c.trigger("keyup-change"))})}function v(c){c.on("mousemove",function(c){var d=h;(d===b||d.x!==c.pageX||d.y!==c.pageY)&&a(c.target).trigger("mousemove-filtered",c)})}function w(a,c,d){d=d||b;var e;return function(){var b=arguments;window.clearTimeout(e),e=window.setTimeout(function(){c.apply(d,b)},a)}}function x(a,b){var c=w(a,function(a){b.trigger("scroll-debounced",a)});b.on("scroll",function(a){p(a.target,b.get())>=0&&c(a)})}function y(a){a[0]!==document.activeElement&&window.setTimeout(function(){var d,b=a[0],c=a.val().length;a.focus();var e=b.offsetWidth>0||b.offsetHeight>0;e&&b===document.activeElement&&(b.setSelectionRange?b.setSelectionRange(c,c):b.createTextRange&&(d=b.createTextRange(),d.collapse(!1),d.select()))},0)}function z(b){b=a(b)[0];var c=0,d=0;if("selectionStart"in b)c=b.selectionStart,d=b.selectionEnd-c;else if("selection"in document){b.focus();var e=document.selection.createRange();d=document.selection.createRange().text.length,e.moveStart("character",-b.value.length),c=e.text.length-d}return{offset:c,length:d}}function A(a){a.preventDefault(),a.stopPropagation()}function B(a){a.preventDefault(),a.stopImmediatePropagation()}function C(b){if(!g){var c=b[0].currentStyle||window.getComputedStyle(b[0],null);g=a(document.createElement("div")).css({position:"absolute",left:"-10000px",top:"-10000px",display:"none",fontSize:c.fontSize,fontFamily:c.fontFamily,fontStyle:c.fontStyle,fontWeight:c.fontWeight,letterSpacing:c.letterSpacing,textTransform:c.textTransform,whiteSpace:"nowrap"}),g.attr("class","select2-sizer"),a(document.body).append(g)}return g.text(b.val()),g.width()}function D(b,c,d){var e,g,f=[];e=a.trim(b.attr("class")),e&&(e=""+e,a(e.split(/\s+/)).each2(function(){0===this.indexOf("select2-")&&f.push(this)})),e=a.trim(c.attr("class")),e&&(e=""+e,a(e.split(/\s+/)).each2(function(){0!==this.indexOf("select2-")&&(g=d(this),g&&f.push(g))})),b.attr("class",f.join(" "))}function E(a,b,c,d){var e=o(a.toUpperCase()).indexOf(o(b.toUpperCase())),f=b.length;return 0>e?(c.push(d(a)),void 0):(c.push(d(a.substring(0,e))),c.push("<span class='select2-match'>"),c.push(d(a.substring(e,e+f))),c.push("</span>"),c.push(d(a.substring(e+f,a.length))),void 0)}function F(a){var b={"\\":"&#92;","&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#47;"};return String(a).replace(/[&<>"'\/\\]/g,function(a){return b[a]})}function G(c){var d,e=null,f=c.quietMillis||100,g=c.url,h=this;return function(i){window.clearTimeout(d),d=window.setTimeout(function(){var d=c.data,f=g,j=c.transport||a.fn.select2.ajaxDefaults.transport,k={type:c.type||"GET",cache:c.cache||!1,jsonpCallback:c.jsonpCallback||b,dataType:c.dataType||"json"},l=a.extend({},a.fn.select2.ajaxDefaults.params,k);d=d?d.call(h,i.term,i.page,i.context):null,f="function"==typeof f?f.call(h,i.term,i.page,i.context):f,e&&"function"==typeof e.abort&&e.abort(),c.params&&(a.isFunction(c.params)?a.extend(l,c.params.call(h)):a.extend(l,c.params)),a.extend(l,{url:f,dataType:c.dataType,data:d,success:function(a){var b=c.results(a,i.page,i);i.callback(b)},error:function(a,b,c){var d={hasError:!0,jqXHR:a,textStatus:b,errorThrown:c};i.callback(d)}}),e=j.call(h,l)},f)}}function H(b){var d,e,c=b,f=function(a){return""+a.text};a.isArray(c)&&(e=c,c={results:e}),a.isFunction(c)===!1&&(e=c,c=function(){return e});var g=c();return g.text&&(f=g.text,a.isFunction(f)||(d=g.text,f=function(a){return a[d]})),function(b){var g,d=b.term,e={results:[]};return""===d?(b.callback(c()),void 0):(g=function(c,e){var h,i;if(c=c[0],c.children){h={};for(i in c)c.hasOwnProperty(i)&&(h[i]=c[i]);h.children=[],a(c.children).each2(function(a,b){g(b,h.children)}),(h.children.length||b.matcher(d,f(h),c))&&e.push(h)}else b.matcher(d,f(c),c)&&e.push(c)},a(c().results).each2(function(a,b){g(b,e.results)}),b.callback(e),void 0)}}function I(c){var d=a.isFunction(c);return function(e){var f=e.term,g={results:[]},h=d?c(e):c;a.isArray(h)&&(a(h).each(function(){var a=this.text!==b,c=a?this.text:this;(""===f||e.matcher(f,c))&&g.results.push(a?this:{id:this,text:this})}),e.callback(g))}}function J(b,c){if(a.isFunction(b))return!0;if(!b)return!1;if("string"==typeof b)return!0;throw new Error(c+" must be a string, function, or falsy value")}function K(b,c){if(a.isFunction(b)){var d=Array.prototype.slice.call(arguments,2);return b.apply(c,d)}return b}function L(b){var c=0;return a.each(b,function(a,b){b.children?c+=L(b.children):c++}),c}function M(a,c,d,e){var h,i,j,k,l,f=a,g=!1;if(!e.createSearchChoice||!e.tokenSeparators||e.tokenSeparators.length<1)return b;for(;;){for(i=-1,j=0,k=e.tokenSeparators.length;k>j&&(l=e.tokenSeparators[j],i=a.indexOf(l),!(i>=0));j++);if(0>i)break;if(h=a.substring(0,i),a=a.substring(i+l.length),h.length>0&&(h=e.createSearchChoice.call(this,h,c),h!==b&&null!==h&&e.id(h)!==b&&null!==e.id(h))){for(g=!1,j=0,k=c.length;k>j;j++)if(r(e.id(h),e.id(c[j]))){g=!0;break}g||d(h)}}return f!==a?a:void 0}function N(){var b=this;a.each(arguments,function(a,c){b[c].remove(),b[c]=null})}function O(b,c){var d=function(){};return d.prototype=new b,d.prototype.constructor=d,d.prototype.parent=b.prototype,d.prototype=a.extend(d.prototype,c),d}if(window.Select2===b){var c,d,e,f,g,i,j,h={x:0,y:0},k={TAB:9,ENTER:13,ESC:27,SPACE:32,LEFT:37,UP:38,RIGHT:39,DOWN:40,SHIFT:16,CTRL:17,ALT:18,PAGE_UP:33,PAGE_DOWN:34,HOME:36,END:35,BACKSPACE:8,DELETE:46,isArrow:function(a){switch(a=a.which?a.which:a){case k.LEFT:case k.RIGHT:case k.UP:case k.DOWN:return!0}return!1},isControl:function(a){var b=a.which;switch(b){case k.SHIFT:case k.CTRL:case k.ALT:return!0}return a.metaKey?!0:!1},isFunctionKey:function(a){return a=a.which?a.which:a,a>=112&&123>=a}},l="<div class='select2-measure-scrollbar'></div>",m={"\u24b6":"A","\uff21":"A","\xc0":"A","\xc1":"A","\xc2":"A","\u1ea6":"A","\u1ea4":"A","\u1eaa":"A","\u1ea8":"A","\xc3":"A","\u0100":"A","\u0102":"A","\u1eb0":"A","\u1eae":"A","\u1eb4":"A","\u1eb2":"A","\u0226":"A","\u01e0":"A","\xc4":"A","\u01de":"A","\u1ea2":"A","\xc5":"A","\u01fa":"A","\u01cd":"A","\u0200":"A","\u0202":"A","\u1ea0":"A","\u1eac":"A","\u1eb6":"A","\u1e00":"A","\u0104":"A","\u023a":"A","\u2c6f":"A","\ua732":"AA","\xc6":"AE","\u01fc":"AE","\u01e2":"AE","\ua734":"AO","\ua736":"AU","\ua738":"AV","\ua73a":"AV","\ua73c":"AY","\u24b7":"B","\uff22":"B","\u1e02":"B","\u1e04":"B","\u1e06":"B","\u0243":"B","\u0182":"B","\u0181":"B","\u24b8":"C","\uff23":"C","\u0106":"C","\u0108":"C","\u010a":"C","\u010c":"C","\xc7":"C","\u1e08":"C","\u0187":"C","\u023b":"C","\ua73e":"C","\u24b9":"D","\uff24":"D","\u1e0a":"D","\u010e":"D","\u1e0c":"D","\u1e10":"D","\u1e12":"D","\u1e0e":"D","\u0110":"D","\u018b":"D","\u018a":"D","\u0189":"D","\ua779":"D","\u01f1":"DZ","\u01c4":"DZ","\u01f2":"Dz","\u01c5":"Dz","\u24ba":"E","\uff25":"E","\xc8":"E","\xc9":"E","\xca":"E","\u1ec0":"E","\u1ebe":"E","\u1ec4":"E","\u1ec2":"E","\u1ebc":"E","\u0112":"E","\u1e14":"E","\u1e16":"E","\u0114":"E","\u0116":"E","\xcb":"E","\u1eba":"E","\u011a":"E","\u0204":"E","\u0206":"E","\u1eb8":"E","\u1ec6":"E","\u0228":"E","\u1e1c":"E","\u0118":"E","\u1e18":"E","\u1e1a":"E","\u0190":"E","\u018e":"E","\u24bb":"F","\uff26":"F","\u1e1e":"F","\u0191":"F","\ua77b":"F","\u24bc":"G","\uff27":"G","\u01f4":"G","\u011c":"G","\u1e20":"G","\u011e":"G","\u0120":"G","\u01e6":"G","\u0122":"G","\u01e4":"G","\u0193":"G","\ua7a0":"G","\ua77d":"G","\ua77e":"G","\u24bd":"H","\uff28":"H","\u0124":"H","\u1e22":"H","\u1e26":"H","\u021e":"H","\u1e24":"H","\u1e28":"H","\u1e2a":"H","\u0126":"H","\u2c67":"H","\u2c75":"H","\ua78d":"H","\u24be":"I","\uff29":"I","\xcc":"I","\xcd":"I","\xce":"I","\u0128":"I","\u012a":"I","\u012c":"I","\u0130":"I","\xcf":"I","\u1e2e":"I","\u1ec8":"I","\u01cf":"I","\u0208":"I","\u020a":"I","\u1eca":"I","\u012e":"I","\u1e2c":"I","\u0197":"I","\u24bf":"J","\uff2a":"J","\u0134":"J","\u0248":"J","\u24c0":"K","\uff2b":"K","\u1e30":"K","\u01e8":"K","\u1e32":"K","\u0136":"K","\u1e34":"K","\u0198":"K","\u2c69":"K","\ua740":"K","\ua742":"K","\ua744":"K","\ua7a2":"K","\u24c1":"L","\uff2c":"L","\u013f":"L","\u0139":"L","\u013d":"L","\u1e36":"L","\u1e38":"L","\u013b":"L","\u1e3c":"L","\u1e3a":"L","\u0141":"L","\u023d":"L","\u2c62":"L","\u2c60":"L","\ua748":"L","\ua746":"L","\ua780":"L","\u01c7":"LJ","\u01c8":"Lj","\u24c2":"M","\uff2d":"M","\u1e3e":"M","\u1e40":"M","\u1e42":"M","\u2c6e":"M","\u019c":"M","\u24c3":"N","\uff2e":"N","\u01f8":"N","\u0143":"N","\xd1":"N","\u1e44":"N","\u0147":"N","\u1e46":"N","\u0145":"N","\u1e4a":"N","\u1e48":"N","\u0220":"N","\u019d":"N","\ua790":"N","\ua7a4":"N","\u01ca":"NJ","\u01cb":"Nj","\u24c4":"O","\uff2f":"O","\xd2":"O","\xd3":"O","\xd4":"O","\u1ed2":"O","\u1ed0":"O","\u1ed6":"O","\u1ed4":"O","\xd5":"O","\u1e4c":"O","\u022c":"O","\u1e4e":"O","\u014c":"O","\u1e50":"O","\u1e52":"O","\u014e":"O","\u022e":"O","\u0230":"O","\xd6":"O","\u022a":"O","\u1ece":"O","\u0150":"O","\u01d1":"O","\u020c":"O","\u020e":"O","\u01a0":"O","\u1edc":"O","\u1eda":"O","\u1ee0":"O","\u1ede":"O","\u1ee2":"O","\u1ecc":"O","\u1ed8":"O","\u01ea":"O","\u01ec":"O","\xd8":"O","\u01fe":"O","\u0186":"O","\u019f":"O","\ua74a":"O","\ua74c":"O","\u01a2":"OI","\ua74e":"OO","\u0222":"OU","\u24c5":"P","\uff30":"P","\u1e54":"P","\u1e56":"P","\u01a4":"P","\u2c63":"P","\ua750":"P","\ua752":"P","\ua754":"P","\u24c6":"Q","\uff31":"Q","\ua756":"Q","\ua758":"Q","\u024a":"Q","\u24c7":"R","\uff32":"R","\u0154":"R","\u1e58":"R","\u0158":"R","\u0210":"R","\u0212":"R","\u1e5a":"R","\u1e5c":"R","\u0156":"R","\u1e5e":"R","\u024c":"R","\u2c64":"R","\ua75a":"R","\ua7a6":"R","\ua782":"R","\u24c8":"S","\uff33":"S","\u1e9e":"S","\u015a":"S","\u1e64":"S","\u015c":"S","\u1e60":"S","\u0160":"S","\u1e66":"S","\u1e62":"S","\u1e68":"S","\u0218":"S","\u015e":"S","\u2c7e":"S","\ua7a8":"S","\ua784":"S","\u24c9":"T","\uff34":"T","\u1e6a":"T","\u0164":"T","\u1e6c":"T","\u021a":"T","\u0162":"T","\u1e70":"T","\u1e6e":"T","\u0166":"T","\u01ac":"T","\u01ae":"T","\u023e":"T","\ua786":"T","\ua728":"TZ","\u24ca":"U","\uff35":"U","\xd9":"U","\xda":"U","\xdb":"U","\u0168":"U","\u1e78":"U","\u016a":"U","\u1e7a":"U","\u016c":"U","\xdc":"U","\u01db":"U","\u01d7":"U","\u01d5":"U","\u01d9":"U","\u1ee6":"U","\u016e":"U","\u0170":"U","\u01d3":"U","\u0214":"U","\u0216":"U","\u01af":"U","\u1eea":"U","\u1ee8":"U","\u1eee":"U","\u1eec":"U","\u1ef0":"U","\u1ee4":"U","\u1e72":"U","\u0172":"U","\u1e76":"U","\u1e74":"U","\u0244":"U","\u24cb":"V","\uff36":"V","\u1e7c":"V","\u1e7e":"V","\u01b2":"V","\ua75e":"V","\u0245":"V","\ua760":"VY","\u24cc":"W","\uff37":"W","\u1e80":"W","\u1e82":"W","\u0174":"W","\u1e86":"W","\u1e84":"W","\u1e88":"W","\u2c72":"W","\u24cd":"X","\uff38":"X","\u1e8a":"X","\u1e8c":"X","\u24ce":"Y","\uff39":"Y","\u1ef2":"Y","\xdd":"Y","\u0176":"Y","\u1ef8":"Y","\u0232":"Y","\u1e8e":"Y","\u0178":"Y","\u1ef6":"Y","\u1ef4":"Y","\u01b3":"Y","\u024e":"Y","\u1efe":"Y","\u24cf":"Z","\uff3a":"Z","\u0179":"Z","\u1e90":"Z","\u017b":"Z","\u017d":"Z","\u1e92":"Z","\u1e94":"Z","\u01b5":"Z","\u0224":"Z","\u2c7f":"Z","\u2c6b":"Z","\ua762":"Z","\u24d0":"a","\uff41":"a","\u1e9a":"a","\xe0":"a","\xe1":"a","\xe2":"a","\u1ea7":"a","\u1ea5":"a","\u1eab":"a","\u1ea9":"a","\xe3":"a","\u0101":"a","\u0103":"a","\u1eb1":"a","\u1eaf":"a","\u1eb5":"a","\u1eb3":"a","\u0227":"a","\u01e1":"a","\xe4":"a","\u01df":"a","\u1ea3":"a","\xe5":"a","\u01fb":"a","\u01ce":"a","\u0201":"a","\u0203":"a","\u1ea1":"a","\u1ead":"a","\u1eb7":"a","\u1e01":"a","\u0105":"a","\u2c65":"a","\u0250":"a","\ua733":"aa","\xe6":"ae","\u01fd":"ae","\u01e3":"ae","\ua735":"ao","\ua737":"au","\ua739":"av","\ua73b":"av","\ua73d":"ay","\u24d1":"b","\uff42":"b","\u1e03":"b","\u1e05":"b","\u1e07":"b","\u0180":"b","\u0183":"b","\u0253":"b","\u24d2":"c","\uff43":"c","\u0107":"c","\u0109":"c","\u010b":"c","\u010d":"c","\xe7":"c","\u1e09":"c","\u0188":"c","\u023c":"c","\ua73f":"c","\u2184":"c","\u24d3":"d","\uff44":"d","\u1e0b":"d","\u010f":"d","\u1e0d":"d","\u1e11":"d","\u1e13":"d","\u1e0f":"d","\u0111":"d","\u018c":"d","\u0256":"d","\u0257":"d","\ua77a":"d","\u01f3":"dz","\u01c6":"dz","\u24d4":"e","\uff45":"e","\xe8":"e","\xe9":"e","\xea":"e","\u1ec1":"e","\u1ebf":"e","\u1ec5":"e","\u1ec3":"e","\u1ebd":"e","\u0113":"e","\u1e15":"e","\u1e17":"e","\u0115":"e","\u0117":"e","\xeb":"e","\u1ebb":"e","\u011b":"e","\u0205":"e","\u0207":"e","\u1eb9":"e","\u1ec7":"e","\u0229":"e","\u1e1d":"e","\u0119":"e","\u1e19":"e","\u1e1b":"e","\u0247":"e","\u025b":"e","\u01dd":"e","\u24d5":"f","\uff46":"f","\u1e1f":"f","\u0192":"f","\ua77c":"f","\u24d6":"g","\uff47":"g","\u01f5":"g","\u011d":"g","\u1e21":"g","\u011f":"g","\u0121":"g","\u01e7":"g","\u0123":"g","\u01e5":"g","\u0260":"g","\ua7a1":"g","\u1d79":"g","\ua77f":"g","\u24d7":"h","\uff48":"h","\u0125":"h","\u1e23":"h","\u1e27":"h","\u021f":"h","\u1e25":"h","\u1e29":"h","\u1e2b":"h","\u1e96":"h","\u0127":"h","\u2c68":"h","\u2c76":"h","\u0265":"h","\u0195":"hv","\u24d8":"i","\uff49":"i","\xec":"i","\xed":"i","\xee":"i","\u0129":"i","\u012b":"i","\u012d":"i","\xef":"i","\u1e2f":"i","\u1ec9":"i","\u01d0":"i","\u0209":"i","\u020b":"i","\u1ecb":"i","\u012f":"i","\u1e2d":"i","\u0268":"i","\u0131":"i","\u24d9":"j","\uff4a":"j","\u0135":"j","\u01f0":"j","\u0249":"j","\u24da":"k","\uff4b":"k","\u1e31":"k","\u01e9":"k","\u1e33":"k","\u0137":"k","\u1e35":"k","\u0199":"k","\u2c6a":"k","\ua741":"k","\ua743":"k","\ua745":"k","\ua7a3":"k","\u24db":"l","\uff4c":"l","\u0140":"l","\u013a":"l","\u013e":"l","\u1e37":"l","\u1e39":"l","\u013c":"l","\u1e3d":"l","\u1e3b":"l","\u017f":"l","\u0142":"l","\u019a":"l","\u026b":"l","\u2c61":"l","\ua749":"l","\ua781":"l","\ua747":"l","\u01c9":"lj","\u24dc":"m","\uff4d":"m","\u1e3f":"m","\u1e41":"m","\u1e43":"m","\u0271":"m","\u026f":"m","\u24dd":"n","\uff4e":"n","\u01f9":"n","\u0144":"n","\xf1":"n","\u1e45":"n","\u0148":"n","\u1e47":"n","\u0146":"n","\u1e4b":"n","\u1e49":"n","\u019e":"n","\u0272":"n","\u0149":"n","\ua791":"n","\ua7a5":"n","\u01cc":"nj","\u24de":"o","\uff4f":"o","\xf2":"o","\xf3":"o","\xf4":"o","\u1ed3":"o","\u1ed1":"o","\u1ed7":"o","\u1ed5":"o","\xf5":"o","\u1e4d":"o","\u022d":"o","\u1e4f":"o","\u014d":"o","\u1e51":"o","\u1e53":"o","\u014f":"o","\u022f":"o","\u0231":"o","\xf6":"o","\u022b":"o","\u1ecf":"o","\u0151":"o","\u01d2":"o","\u020d":"o","\u020f":"o","\u01a1":"o","\u1edd":"o","\u1edb":"o","\u1ee1":"o","\u1edf":"o","\u1ee3":"o","\u1ecd":"o","\u1ed9":"o","\u01eb":"o","\u01ed":"o","\xf8":"o","\u01ff":"o","\u0254":"o","\ua74b":"o","\ua74d":"o","\u0275":"o","\u01a3":"oi","\u0223":"ou","\ua74f":"oo","\u24df":"p","\uff50":"p","\u1e55":"p","\u1e57":"p","\u01a5":"p","\u1d7d":"p","\ua751":"p","\ua753":"p","\ua755":"p","\u24e0":"q","\uff51":"q","\u024b":"q","\ua757":"q","\ua759":"q","\u24e1":"r","\uff52":"r","\u0155":"r","\u1e59":"r","\u0159":"r","\u0211":"r","\u0213":"r","\u1e5b":"r","\u1e5d":"r","\u0157":"r","\u1e5f":"r","\u024d":"r","\u027d":"r","\ua75b":"r","\ua7a7":"r","\ua783":"r","\u24e2":"s","\uff53":"s","\xdf":"s","\u015b":"s","\u1e65":"s","\u015d":"s","\u1e61":"s","\u0161":"s","\u1e67":"s","\u1e63":"s","\u1e69":"s","\u0219":"s","\u015f":"s","\u023f":"s","\ua7a9":"s","\ua785":"s","\u1e9b":"s","\u24e3":"t","\uff54":"t","\u1e6b":"t","\u1e97":"t","\u0165":"t","\u1e6d":"t","\u021b":"t","\u0163":"t","\u1e71":"t","\u1e6f":"t","\u0167":"t","\u01ad":"t","\u0288":"t","\u2c66":"t","\ua787":"t","\ua729":"tz","\u24e4":"u","\uff55":"u","\xf9":"u","\xfa":"u","\xfb":"u","\u0169":"u","\u1e79":"u","\u016b":"u","\u1e7b":"u","\u016d":"u","\xfc":"u","\u01dc":"u","\u01d8":"u","\u01d6":"u","\u01da":"u","\u1ee7":"u","\u016f":"u","\u0171":"u","\u01d4":"u","\u0215":"u","\u0217":"u","\u01b0":"u","\u1eeb":"u","\u1ee9":"u","\u1eef":"u","\u1eed":"u","\u1ef1":"u","\u1ee5":"u","\u1e73":"u","\u0173":"u","\u1e77":"u","\u1e75":"u","\u0289":"u","\u24e5":"v","\uff56":"v","\u1e7d":"v","\u1e7f":"v","\u028b":"v","\ua75f":"v","\u028c":"v","\ua761":"vy","\u24e6":"w","\uff57":"w","\u1e81":"w","\u1e83":"w","\u0175":"w","\u1e87":"w","\u1e85":"w","\u1e98":"w","\u1e89":"w","\u2c73":"w","\u24e7":"x","\uff58":"x","\u1e8b":"x","\u1e8d":"x","\u24e8":"y","\uff59":"y","\u1ef3":"y","\xfd":"y","\u0177":"y","\u1ef9":"y","\u0233":"y","\u1e8f":"y","\xff":"y","\u1ef7":"y","\u1e99":"y","\u1ef5":"y","\u01b4":"y","\u024f":"y","\u1eff":"y","\u24e9":"z","\uff5a":"z","\u017a":"z","\u1e91":"z","\u017c":"z","\u017e":"z","\u1e93":"z","\u1e95":"z","\u01b6":"z","\u0225":"z","\u0240":"z","\u2c6c":"z","\ua763":"z","\u0386":"\u0391","\u0388":"\u0395","\u0389":"\u0397","\u038a":"\u0399","\u03aa":"\u0399","\u038c":"\u039f","\u038e":"\u03a5","\u03ab":"\u03a5","\u038f":"\u03a9","\u03ac":"\u03b1","\u03ad":"\u03b5","\u03ae":"\u03b7","\u03af":"\u03b9","\u03ca":"\u03b9","\u0390":"\u03b9","\u03cc":"\u03bf","\u03cd":"\u03c5","\u03cb":"\u03c5","\u03b0":"\u03c5","\u03c9":"\u03c9","\u03c2":"\u03c3"};i=a(document),f=function(){var a=1;return function(){return a++}}(),c=O(Object,{bind:function(a){var b=this;return function(){a.apply(b,arguments)}},init:function(c){var d,e,g=".select2-results";this.opts=c=this.prepareOpts(c),this.id=c.id,c.element.data("select2")!==b&&null!==c.element.data("select2")&&c.element.data("select2").destroy(),this.container=this.createContainer(),this.liveRegion=a(".select2-hidden-accessible"),0==this.liveRegion.length&&(this.liveRegion=a("<span>",{role:"status","aria-live":"polite"}).addClass("select2-hidden-accessible").appendTo(document.body)),this.containerId="s2id_"+(c.element.attr("id")||"autogen"+f()),this.containerEventName=this.containerId.replace(/([.])/g,"_").replace(/([;&,\-\.\+\*\~':"\!\^#$%@\[\]\(\)=>\|])/g,"\\$1"),this.container.attr("id",this.containerId),this.container.attr("title",c.element.attr("title")),this.body=a(document.body),D(this.container,this.opts.element,this.opts.adaptContainerCssClass),this.container.attr("style",c.element.attr("style")),this.container.css(K(c.containerCss,this.opts.element)),this.container.addClass(K(c.containerCssClass,this.opts.element)),this.elementTabIndex=this.opts.element.attr("tabindex"),this.opts.element.data("select2",this).attr("tabindex","-1").before(this.container).on("click.select2",A),this.container.data("select2",this),this.dropdown=this.container.find(".select2-drop"),D(this.dropdown,this.opts.element,this.opts.adaptDropdownCssClass),this.dropdown.addClass(K(c.dropdownCssClass,this.opts.element)),this.dropdown.data("select2",this),this.dropdown.on("click",A),this.results=d=this.container.find(g),this.search=e=this.container.find("input.select2-input"),this.queryCount=0,this.resultsPage=0,this.context=null,this.initContainer(),this.container.on("click",A),v(this.results),this.dropdown.on("mousemove-filtered",g,this.bind(this.highlightUnderEvent)),this.dropdown.on("touchstart touchmove touchend",g,this.bind(function(a){this._touchEvent=!0,this.highlightUnderEvent(a)})),this.dropdown.on("touchmove",g,this.bind(this.touchMoved)),this.dropdown.on("touchstart touchend",g,this.bind(this.clearTouchMoved)),this.dropdown.on("click",this.bind(function(){this._touchEvent&&(this._touchEvent=!1,this.selectHighlighted())})),x(80,this.results),this.dropdown.on("scroll-debounced",g,this.bind(this.loadMoreIfNeeded)),a(this.container).on("change",".select2-input",function(a){a.stopPropagation()}),a(this.dropdown).on("change",".select2-input",function(a){a.stopPropagation()}),a.fn.mousewheel&&d.mousewheel(function(a,b,c,e){var f=d.scrollTop();e>0&&0>=f-e?(d.scrollTop(0),A(a)):0>e&&d.get(0).scrollHeight-d.scrollTop()+e<=d.height()&&(d.scrollTop(d.get(0).scrollHeight-d.height()),A(a))}),u(e),e.on("keyup-change input paste",this.bind(this.updateResults)),e.on("focus",function(){e.addClass("select2-focused")}),e.on("blur",function(){e.removeClass("select2-focused")}),this.dropdown.on("mouseup",g,this.bind(function(b){a(b.target).closest(".select2-result-selectable").length>0&&(this.highlightUnderEvent(b),this.selectHighlighted(b))})),this.dropdown.on("click mouseup mousedown touchstart touchend focusin",function(a){a.stopPropagation()}),this.nextSearchTerm=b,a.isFunction(this.opts.initSelection)&&(this.initSelection(),this.monitorSource()),null!==c.maximumInputLength&&this.search.attr("maxlength",c.maximumInputLength);var h=c.element.prop("disabled");h===b&&(h=!1),this.enable(!h);var i=c.element.prop("readonly");i===b&&(i=!1),this.readonly(i),j=j||q(),this.autofocus=c.element.prop("autofocus"),c.element.prop("autofocus",!1),this.autofocus&&this.focus(),this.search.attr("placeholder",c.searchInputPlaceholder)},destroy:function(){var a=this.opts.element,c=a.data("select2"),d=this;this.close(),a.length&&a[0].detachEvent&&d._sync&&a.each(function(){d._sync&&this.detachEvent("onpropertychange",d._sync)}),this.propertyObserver&&(this.propertyObserver.disconnect(),this.propertyObserver=null),this._sync=null,c!==b&&(c.container.remove(),c.liveRegion.remove(),c.dropdown.remove(),a.show().removeData("select2").off(".select2").prop("autofocus",this.autofocus||!1),this.elementTabIndex?a.attr({tabindex:this.elementTabIndex}):a.removeAttr("tabindex"),a.show()),N.call(this,"container","liveRegion","dropdown","results","search")},optionToData:function(a){return a.is("option")?{id:a.prop("value"),text:a.text(),element:a.get(),css:a.attr("class"),disabled:a.prop("disabled"),locked:r(a.attr("locked"),"locked")||r(a.data("locked"),!0)}:a.is("optgroup")?{text:a.attr("label"),children:[],element:a.get(),css:a.attr("class")}:void 0},prepareOpts:function(c){var d,e,g,h,i=this;if(d=c.element,"select"===d.get(0).tagName.toLowerCase()&&(this.select=e=c.element),e&&a.each(["id","multiple","ajax","query","createSearchChoice","initSelection","data","tags"],function(){if(this in c)throw new Error("Option '"+this+"' is not allowed for Select2 when attached to a <select> element.")}),c=a.extend({},{populateResults:function(d,e,g){var h,j=this.opts.id,k=this.liveRegion;h=function(d,e,l){var m,n,o,p,q,r,s,t,u,v;d=c.sortResults(d,e,g);var w=[];for(m=0,n=d.length;n>m;m+=1)o=d[m],q=o.disabled===!0,p=!q&&j(o)!==b,r=o.children&&o.children.length>0,s=a("<li></li>"),s.addClass("select2-results-dept-"+l),s.addClass("select2-result"),s.addClass(p?"select2-result-selectable":"select2-result-unselectable"),q&&s.addClass("select2-disabled"),r&&s.addClass("select2-result-with-children"),s.addClass(i.opts.formatResultCssClass(o)),s.attr("role","presentation"),t=a(document.createElement("div")),t.addClass("select2-result-label"),t.attr("id","select2-result-label-"+f()),t.attr("role","option"),v=c.formatResult(o,t,g,i.opts.escapeMarkup),v!==b&&(t.html(v),s.append(t)),r&&(u=a("<ul></ul>"),u.addClass("select2-result-sub"),h(o.children,u,l+1),s.append(u)),s.data("select2-data",o),w.push(s[0]);e.append(w),k.text(c.formatMatches(d.length))},h(e,d,0)}},a.fn.select2.defaults,c),"function"!=typeof c.id&&(g=c.id,c.id=function(a){return a[g]}),a.isArray(c.element.data("select2Tags"))){if("tags"in c)throw"tags specified as both an attribute 'data-select2-tags' and in options of Select2 "+c.element.attr("id");c.tags=c.element.data("select2Tags")}if(e?(c.query=this.bind(function(a){var f,g,h,c={results:[],more:!1},e=a.term;h=function(b,c){var d;b.is("option")?a.matcher(e,b.text(),b)&&c.push(i.optionToData(b)):b.is("optgroup")&&(d=i.optionToData(b),b.children().each2(function(a,b){h(b,d.children)}),d.children.length>0&&c.push(d))},f=d.children(),this.getPlaceholder()!==b&&f.length>0&&(g=this.getPlaceholderOption(),g&&(f=f.not(g))),f.each2(function(a,b){h(b,c.results)}),a.callback(c)}),c.id=function(a){return a.id}):"query"in c||("ajax"in c?(h=c.element.data("ajax-url"),h&&h.length>0&&(c.ajax.url=h),c.query=G.call(c.element,c.ajax)):"data"in c?c.query=H(c.data):"tags"in c&&(c.query=I(c.tags),c.createSearchChoice===b&&(c.createSearchChoice=function(b){return{id:a.trim(b),text:a.trim(b)}}),c.initSelection===b&&(c.initSelection=function(b,d){var e=[];a(s(b.val(),c.separator,c.transformVal)).each(function(){var b={id:this,text:this},d=c.tags;a.isFunction(d)&&(d=d()),a(d).each(function(){return r(this.id,b.id)?(b=this,!1):void 0}),e.push(b)}),d(e)}))),"function"!=typeof c.query)throw"query function not defined for Select2 "+c.element.attr("id");if("top"===c.createSearchChoicePosition)c.createSearchChoicePosition=function(a,b){a.unshift(b)};else if("bottom"===c.createSearchChoicePosition)c.createSearchChoicePosition=function(a,b){a.push(b)};else if("function"!=typeof c.createSearchChoicePosition)throw"invalid createSearchChoicePosition option must be 'top', 'bottom' or a custom function";return c},monitorSource:function(){var d,c=this.opts.element,e=this;c.on("change.select2",this.bind(function(){this.opts.element.data("select2-change-triggered")!==!0&&this.initSelection()})),this._sync=this.bind(function(){var a=c.prop("disabled");a===b&&(a=!1),this.enable(!a);var d=c.prop("readonly");d===b&&(d=!1),this.readonly(d),this.container&&(D(this.container,this.opts.element,this.opts.adaptContainerCssClass),this.container.addClass(K(this.opts.containerCssClass,this.opts.element))),this.dropdown&&(D(this.dropdown,this.opts.element,this.opts.adaptDropdownCssClass),this.dropdown.addClass(K(this.opts.dropdownCssClass,this.opts.element)))}),c.length&&c[0].attachEvent&&c.each(function(){this.attachEvent("onpropertychange",e._sync)}),d=window.MutationObserver||window.WebKitMutationObserver||window.MozMutationObserver,d!==b&&(this.propertyObserver&&(delete this.propertyObserver,this.propertyObserver=null),this.propertyObserver=new d(function(b){a.each(b,e._sync)}),this.propertyObserver.observe(c.get(0),{attributes:!0,subtree:!1}))},triggerSelect:function(b){var c=a.Event("select2-selecting",{val:this.id(b),object:b,choice:b});return this.opts.element.trigger(c),!c.isDefaultPrevented()},triggerChange:function(b){b=b||{},b=a.extend({},b,{type:"change",val:this.val()}),this.opts.element.data("select2-change-triggered",!0),this.opts.element.trigger(b),this.opts.element.data("select2-change-triggered",!1),this.opts.element.click(),this.opts.blurOnChange&&this.opts.element.blur()},isInterfaceEnabled:function(){return this.enabledInterface===!0},enableInterface:function(){var a=this._enabled&&!this._readonly,b=!a;return a===this.enabledInterface?!1:(this.container.toggleClass("select2-container-disabled",b),this.close(),this.enabledInterface=a,!0)},enable:function(a){a===b&&(a=!0),this._enabled!==a&&(this._enabled=a,this.opts.element.prop("disabled",!a),this.enableInterface())},disable:function(){this.enable(!1)},readonly:function(a){a===b&&(a=!1),this._readonly!==a&&(this._readonly=a,this.opts.element.prop("readonly",a),this.enableInterface())},opened:function(){return this.container?this.container.hasClass("select2-dropdown-open"):!1},positionDropdown:function(){var v,w,x,y,z,b=this.dropdown,c=this.container,d=c.offset(),e=c.outerHeight(!1),f=c.outerWidth(!1),g=b.outerHeight(!1),h=a(window),i=h.width(),k=h.height(),l=h.scrollLeft()+i,m=h.scrollTop()+k,n=d.top+e,o=d.left,p=m>=n+g,q=d.top-g>=h.scrollTop(),r=b.outerWidth(!1),s=function(){return l>=o+r},t=function(){return d.left+l+c.outerWidth(!1)>r},u=b.hasClass("select2-drop-above");u?(w=!0,!q&&p&&(x=!0,w=!1)):(w=!1,!p&&q&&(x=!0,w=!0)),x&&(b.hide(),d=this.container.offset(),e=this.container.outerHeight(!1),f=this.container.outerWidth(!1),g=b.outerHeight(!1),l=h.scrollLeft()+i,m=h.scrollTop()+k,n=d.top+e,o=d.left,r=b.outerWidth(!1),b.show(),this.focusSearch()),this.opts.dropdownAutoWidth?(z=a(".select2-results",b)[0],b.addClass("select2-drop-auto-width"),b.css("width",""),r=b.outerWidth(!1)+(z.scrollHeight===z.clientHeight?0:j.width),r>f?f=r:r=f,g=b.outerHeight(!1)):this.container.removeClass("select2-drop-auto-width"),"static"!==this.body.css("position")&&(v=this.body.offset(),n-=v.top,o-=v.left),!s()&&t()&&(o=d.left+this.container.outerWidth(!1)-r),y={left:o,width:f},w?(y.top=d.top-g,y.bottom="auto",this.container.addClass("select2-drop-above"),b.addClass("select2-drop-above")):(y.top=n,y.bottom="auto",this.container.removeClass("select2-drop-above"),b.removeClass("select2-drop-above")),y=a.extend(y,K(this.opts.dropdownCss,this.opts.element)),b.css(y)},shouldOpen:function(){var b;return this.opened()?!1:this._enabled===!1||this._readonly===!0?!1:(b=a.Event("select2-opening"),this.opts.element.trigger(b),!b.isDefaultPrevented())},clearDropdownAlignmentPreference:function(){this.container.removeClass("select2-drop-above"),this.dropdown.removeClass("select2-drop-above")},open:function(){return this.shouldOpen()?(this.opening(),i.on("mousemove.select2Event",function(a){h.x=a.pageX,h.y=a.pageY}),!0):!1},opening:function(){var f,b=this.containerEventName,c="scroll."+b,d="resize."+b,e="orientationchange."+b;this.container.addClass("select2-dropdown-open").addClass("select2-container-active"),this.clearDropdownAlignmentPreference(),this.dropdown[0]!==this.body.children().last()[0]&&this.dropdown.detach().appendTo(this.body),f=a("#select2-drop-mask"),0===f.length&&(f=a(document.createElement("div")),f.attr("id","select2-drop-mask").attr("class","select2-drop-mask"),f.hide(),f.appendTo(this.body),f.on("mousedown touchstart click",function(b){n(f);var d,c=a("#select2-drop");c.length>0&&(d=c.data("select2"),d.opts.selectOnBlur&&d.selectHighlighted({noFocus:!0}),d.close(),b.preventDefault(),b.stopPropagation())})),this.dropdown.prev()[0]!==f[0]&&this.dropdown.before(f),a("#select2-drop").removeAttr("id"),this.dropdown.attr("id","select2-drop"),f.show(),this.positionDropdown(),this.dropdown.show(),this.positionDropdown(),this.dropdown.addClass("select2-drop-active");var g=this;this.container.parents().add(window).each(function(){a(this).on(d+" "+c+" "+e,function(){g.opened()&&g.positionDropdown()})})},close:function(){if(this.opened()){var b=this.containerEventName,c="scroll."+b,d="resize."+b,e="orientationchange."+b;this.container.parents().add(window).each(function(){a(this).off(c).off(d).off(e)}),this.clearDropdownAlignmentPreference(),a("#select2-drop-mask").hide(),this.dropdown.removeAttr("id"),this.dropdown.hide(),this.container.removeClass("select2-dropdown-open").removeClass("select2-container-active"),this.results.empty(),i.off("mousemove.select2Event"),this.clearSearch(),this.search.removeClass("select2-active"),this.opts.element.trigger(a.Event("select2-close"))}},externalSearch:function(a){this.open(),this.search.val(a),this.updateResults(!1)},clearSearch:function(){},getMaximumSelectionSize:function(){return K(this.opts.maximumSelectionSize,this.opts.element)},ensureHighlightVisible:function(){var c,d,e,f,g,h,i,j,b=this.results;if(d=this.highlight(),!(0>d)){if(0==d)return b.scrollTop(0),void 0;c=this.findHighlightableChoices().find(".select2-result-label"),e=a(c[d]),j=(e.offset()||{}).top||0,f=j+e.outerHeight(!0),d===c.length-1&&(i=b.find("li.select2-more-results"),i.length>0&&(f=i.offset().top+i.outerHeight(!0))),g=b.offset().top+b.outerHeight(!1),f>g&&b.scrollTop(b.scrollTop()+(f-g)),h=j-b.offset().top,0>h&&"none"!=e.css("display")&&b.scrollTop(b.scrollTop()+h)}},findHighlightableChoices:function(){return this.results.find(".select2-result-selectable:not(.select2-disabled):not(.select2-selected)")},moveHighlight:function(b){for(var c=this.findHighlightableChoices(),d=this.highlight();d>-1&&d<c.length;){d+=b;
var e=a(c[d]);if(e.hasClass("select2-result-selectable")&&!e.hasClass("select2-disabled")&&!e.hasClass("select2-selected")){this.highlight(d);break}}},highlight:function(b){var d,e,c=this.findHighlightableChoices();return 0===arguments.length?p(c.filter(".select2-highlighted")[0],c.get()):(b>=c.length&&(b=c.length-1),0>b&&(b=0),this.removeHighlight(),d=a(c[b]),d.addClass("select2-highlighted"),this.search.attr("aria-activedescendant",d.find(".select2-result-label").attr("id")),this.ensureHighlightVisible(),this.liveRegion.text(d.text()),e=d.data("select2-data"),e&&this.opts.element.trigger({type:"select2-highlight",val:this.id(e),choice:e}),void 0)},removeHighlight:function(){this.results.find(".select2-highlighted").removeClass("select2-highlighted")},touchMoved:function(){this._touchMoved=!0},clearTouchMoved:function(){this._touchMoved=!1},countSelectableResults:function(){return this.findHighlightableChoices().length},highlightUnderEvent:function(b){var c=a(b.target).closest(".select2-result-selectable");if(c.length>0&&!c.is(".select2-highlighted")){var d=this.findHighlightableChoices();this.highlight(d.index(c))}else 0==c.length&&this.removeHighlight()},loadMoreIfNeeded:function(){var c,a=this.results,b=a.find("li.select2-more-results"),d=this.resultsPage+1,e=this,f=this.search.val(),g=this.context;0!==b.length&&(c=b.offset().top-a.offset().top-a.height(),c<=this.opts.loadMorePadding&&(b.addClass("select2-active"),this.opts.query({element:this.opts.element,term:f,page:d,context:g,matcher:this.opts.matcher,callback:this.bind(function(c){e.opened()&&(e.opts.populateResults.call(this,a,c.results,{term:f,page:d,context:g}),e.postprocessResults(c,!1,!1),c.more===!0?(b.detach().appendTo(a).html(e.opts.escapeMarkup(K(e.opts.formatLoadMore,e.opts.element,d+1))),window.setTimeout(function(){e.loadMoreIfNeeded()},10)):b.remove(),e.positionDropdown(),e.resultsPage=d,e.context=c.context,this.opts.element.trigger({type:"select2-loaded",items:c}))})})))},tokenize:function(){},updateResults:function(c){function m(){d.removeClass("select2-active"),h.positionDropdown(),e.find(".select2-no-results,.select2-selection-limit,.select2-searching").length?h.liveRegion.text(e.text()):h.liveRegion.text(h.opts.formatMatches(e.find('.select2-result-selectable:not(".select2-selected")').length))}function n(a){e.html(a),m()}var g,i,l,d=this.search,e=this.results,f=this.opts,h=this,j=d.val(),k=a.data(this.container,"select2-last-term");if((c===!0||!k||!r(j,k))&&(a.data(this.container,"select2-last-term",j),c===!0||this.showSearchInput!==!1&&this.opened())){l=++this.queryCount;var o=this.getMaximumSelectionSize();if(o>=1&&(g=this.data(),a.isArray(g)&&g.length>=o&&J(f.formatSelectionTooBig,"formatSelectionTooBig")))return n("<li class='select2-selection-limit'>"+K(f.formatSelectionTooBig,f.element,o)+"</li>"),void 0;if(d.val().length<f.minimumInputLength)return J(f.formatInputTooShort,"formatInputTooShort")?n("<li class='select2-no-results'>"+K(f.formatInputTooShort,f.element,d.val(),f.minimumInputLength)+"</li>"):n(""),c&&this.showSearch&&this.showSearch(!0),void 0;if(f.maximumInputLength&&d.val().length>f.maximumInputLength)return J(f.formatInputTooLong,"formatInputTooLong")?n("<li class='select2-no-results'>"+K(f.formatInputTooLong,f.element,d.val(),f.maximumInputLength)+"</li>"):n(""),void 0;f.formatSearching&&0===this.findHighlightableChoices().length&&n("<li class='select2-searching'>"+K(f.formatSearching,f.element)+"</li>"),d.addClass("select2-active"),this.removeHighlight(),i=this.tokenize(),i!=b&&null!=i&&d.val(i),this.resultsPage=1,f.query({element:f.element,term:d.val(),page:this.resultsPage,context:null,matcher:f.matcher,callback:this.bind(function(g){var i;if(l==this.queryCount){if(!this.opened())return this.search.removeClass("select2-active"),void 0;if(g.hasError!==b&&J(f.formatAjaxError,"formatAjaxError"))return n("<li class='select2-ajax-error'>"+K(f.formatAjaxError,f.element,g.jqXHR,g.textStatus,g.errorThrown)+"</li>"),void 0;if(this.context=g.context===b?null:g.context,this.opts.createSearchChoice&&""!==d.val()&&(i=this.opts.createSearchChoice.call(h,d.val(),g.results),i!==b&&null!==i&&h.id(i)!==b&&null!==h.id(i)&&0===a(g.results).filter(function(){return r(h.id(this),h.id(i))}).length&&this.opts.createSearchChoicePosition(g.results,i)),0===g.results.length&&J(f.formatNoMatches,"formatNoMatches"))return n("<li class='select2-no-results'>"+K(f.formatNoMatches,f.element,d.val())+"</li>"),void 0;e.empty(),h.opts.populateResults.call(this,e,g.results,{term:d.val(),page:this.resultsPage,context:null}),g.more===!0&&J(f.formatLoadMore,"formatLoadMore")&&(e.append("<li class='select2-more-results'>"+f.escapeMarkup(K(f.formatLoadMore,f.element,this.resultsPage))+"</li>"),window.setTimeout(function(){h.loadMoreIfNeeded()},10)),this.postprocessResults(g,c),m(),this.opts.element.trigger({type:"select2-loaded",items:g})}})})}},cancel:function(){this.close()},blur:function(){this.opts.selectOnBlur&&this.selectHighlighted({noFocus:!0}),this.close(),this.container.removeClass("select2-container-active"),this.search[0]===document.activeElement&&this.search.blur(),this.clearSearch(),this.selection.find(".select2-search-choice-focus").removeClass("select2-search-choice-focus")},focusSearch:function(){y(this.search)},selectHighlighted:function(a){if(this._touchMoved)return this.clearTouchMoved(),void 0;var b=this.highlight(),c=this.results.find(".select2-highlighted"),d=c.closest(".select2-result").data("select2-data");d?(this.highlight(b),this.onSelect(d,a)):a&&a.noFocus&&this.close()},getPlaceholder:function(){var a;return this.opts.element.attr("placeholder")||this.opts.element.attr("data-placeholder")||this.opts.element.data("placeholder")||this.opts.placeholder||((a=this.getPlaceholderOption())!==b?a.text():b)},getPlaceholderOption:function(){if(this.select){var c=this.select.children("option").first();if(this.opts.placeholderOption!==b)return"first"===this.opts.placeholderOption&&c||"function"==typeof this.opts.placeholderOption&&this.opts.placeholderOption(this.select);if(""===a.trim(c.text())&&""===c.val())return c}},initContainerWidth:function(){function c(){var c,d,e,f,g,h;if("off"===this.opts.width)return null;if("element"===this.opts.width)return 0===this.opts.element.outerWidth(!1)?"auto":this.opts.element.outerWidth(!1)+"px";if("copy"===this.opts.width||"resolve"===this.opts.width){if(c=this.opts.element.attr("style"),c!==b)for(d=c.split(";"),f=0,g=d.length;g>f;f+=1)if(h=d[f].replace(/\s/g,""),e=h.match(/^width:(([-+]?([0-9]*\.)?[0-9]+)(px|em|ex|%|in|cm|mm|pt|pc))/i),null!==e&&e.length>=1)return e[1];return"resolve"===this.opts.width?(c=this.opts.element.css("width"),c.indexOf("%")>0?c:0===this.opts.element.outerWidth(!1)?"auto":this.opts.element.outerWidth(!1)+"px"):null}return a.isFunction(this.opts.width)?this.opts.width():this.opts.width}var d=c.call(this);null!==d&&this.container.css("width",d)}}),d=O(c,{createContainer:function(){var b=a(document.createElement("div")).attr({"class":"select2-container"}).html(["<a href='javascript:void(0)' class='select2-choice' tabindex='-1'>","   <span class='select2-chosen'>&#160;</span><abbr class='select2-search-choice-close'></abbr>","   <span class='select2-arrow' role='presentation'><b role='presentation'></b></span>","</a>","<label for='' class='select2-offscreen'></label>","<input class='select2-focusser select2-offscreen' type='text' aria-haspopup='true' role='button' />","<div class='select2-drop select2-display-none'>","   <div class='select2-search'>","       <label for='' class='select2-offscreen'></label>","       <input type='text' autocomplete='off' autocorrect='off' autocapitalize='off' spellcheck='false' class='select2-input' role='combobox' aria-expanded='true'","       aria-autocomplete='list' />","   </div>","   <ul class='select2-results' role='listbox'>","   </ul>","</div>"].join(""));return b},enableInterface:function(){this.parent.enableInterface.apply(this,arguments)&&this.focusser.prop("disabled",!this.isInterfaceEnabled())},opening:function(){var c,d,e;this.opts.minimumResultsForSearch>=0&&this.showSearch(!0),this.parent.opening.apply(this,arguments),this.showSearchInput!==!1&&this.search.val(this.focusser.val()),this.opts.shouldFocusInput(this)&&(this.search.focus(),c=this.search.get(0),c.createTextRange?(d=c.createTextRange(),d.collapse(!1),d.select()):c.setSelectionRange&&(e=this.search.val().length,c.setSelectionRange(e,e))),""===this.search.val()&&this.nextSearchTerm!=b&&(this.search.val(this.nextSearchTerm),this.search.select()),this.focusser.prop("disabled",!0).val(""),this.updateResults(!0),this.opts.element.trigger(a.Event("select2-open"))},close:function(){this.opened()&&(this.parent.close.apply(this,arguments),this.focusser.prop("disabled",!1),this.opts.shouldFocusInput(this)&&this.focusser.focus())},focus:function(){this.opened()?this.close():(this.focusser.prop("disabled",!1),this.opts.shouldFocusInput(this)&&this.focusser.focus())},isFocused:function(){return this.container.hasClass("select2-container-active")},cancel:function(){this.parent.cancel.apply(this,arguments),this.focusser.prop("disabled",!1),this.opts.shouldFocusInput(this)&&this.focusser.focus()},destroy:function(){a("label[for='"+this.focusser.attr("id")+"']").attr("for",this.opts.element.attr("id")),this.parent.destroy.apply(this,arguments),N.call(this,"selection","focusser")},initContainer:function(){var b,g,c=this.container,d=this.dropdown,e=f();this.opts.minimumResultsForSearch<0?this.showSearch(!1):this.showSearch(!0),this.selection=b=c.find(".select2-choice"),this.focusser=c.find(".select2-focusser"),b.find(".select2-chosen").attr("id","select2-chosen-"+e),this.focusser.attr("aria-labelledby","select2-chosen-"+e),this.results.attr("id","select2-results-"+e),this.search.attr("aria-owns","select2-results-"+e),this.focusser.attr("id","s2id_autogen"+e),g=a("label[for='"+this.opts.element.attr("id")+"']"),this.opts.element.focus(this.bind(function(){this.focus()})),this.focusser.prev().text(g.text()).attr("for",this.focusser.attr("id"));var h=this.opts.element.attr("title");this.opts.element.attr("title",h||g.text()),this.focusser.attr("tabindex",this.elementTabIndex),this.search.attr("id",this.focusser.attr("id")+"_search"),this.search.prev().text(a("label[for='"+this.focusser.attr("id")+"']").text()).attr("for",this.search.attr("id")),this.search.on("keydown",this.bind(function(a){if(this.isInterfaceEnabled()&&229!=a.keyCode){if(a.which===k.PAGE_UP||a.which===k.PAGE_DOWN)return A(a),void 0;switch(a.which){case k.UP:case k.DOWN:return this.moveHighlight(a.which===k.UP?-1:1),A(a),void 0;case k.ENTER:return this.selectHighlighted(),A(a),void 0;case k.TAB:return this.selectHighlighted({noFocus:!0}),void 0;case k.ESC:return this.cancel(a),A(a),void 0}}})),this.search.on("blur",this.bind(function(){document.activeElement===this.body.get(0)&&window.setTimeout(this.bind(function(){this.opened()&&this.search.focus()}),0)})),this.focusser.on("keydown",this.bind(function(a){if(this.isInterfaceEnabled()&&a.which!==k.TAB&&!k.isControl(a)&&!k.isFunctionKey(a)&&a.which!==k.ESC){if(this.opts.openOnEnter===!1&&a.which===k.ENTER)return A(a),void 0;if(a.which==k.DOWN||a.which==k.UP||a.which==k.ENTER&&this.opts.openOnEnter){if(a.altKey||a.ctrlKey||a.shiftKey||a.metaKey)return;return this.open(),A(a),void 0}return a.which==k.DELETE||a.which==k.BACKSPACE?(this.opts.allowClear&&this.clear(),A(a),void 0):void 0}})),u(this.focusser),this.focusser.on("keyup-change input",this.bind(function(a){if(this.opts.minimumResultsForSearch>=0){if(a.stopPropagation(),this.opened())return;this.open()}})),b.on("mousedown touchstart","abbr",this.bind(function(a){this.isInterfaceEnabled()&&(this.clear(),B(a),this.close(),this.selection&&this.selection.focus())})),b.on("mousedown touchstart",this.bind(function(c){n(b),this.container.hasClass("select2-container-active")||this.opts.element.trigger(a.Event("select2-focus")),this.opened()?this.close():this.isInterfaceEnabled()&&this.open(),A(c)})),d.on("mousedown touchstart",this.bind(function(){this.opts.shouldFocusInput(this)&&this.search.focus()})),b.on("focus",this.bind(function(a){A(a)})),this.focusser.on("focus",this.bind(function(){this.container.hasClass("select2-container-active")||this.opts.element.trigger(a.Event("select2-focus")),this.container.addClass("select2-container-active")})).on("blur",this.bind(function(){this.opened()||(this.container.removeClass("select2-container-active"),this.opts.element.trigger(a.Event("select2-blur")))})),this.search.on("focus",this.bind(function(){this.container.hasClass("select2-container-active")||this.opts.element.trigger(a.Event("select2-focus")),this.container.addClass("select2-container-active")})),this.initContainerWidth(),this.opts.element.hide(),this.setPlaceholder()},clear:function(b){var c=this.selection.data("select2-data");if(c){var d=a.Event("select2-clearing");if(this.opts.element.trigger(d),d.isDefaultPrevented())return;var e=this.getPlaceholderOption();this.opts.element.val(e?e.val():""),this.selection.find(".select2-chosen").empty(),this.selection.removeData("select2-data"),this.setPlaceholder(),b!==!1&&(this.opts.element.trigger({type:"select2-removed",val:this.id(c),choice:c}),this.triggerChange({removed:c}))}},initSelection:function(){if(this.isPlaceholderOptionSelected())this.updateSelection(null),this.close(),this.setPlaceholder();else{var c=this;this.opts.initSelection.call(null,this.opts.element,function(a){a!==b&&null!==a&&(c.updateSelection(a),c.close(),c.setPlaceholder(),c.nextSearchTerm=c.opts.nextSearchTerm(a,c.search.val()))})}},isPlaceholderOptionSelected:function(){var a;return this.getPlaceholder()===b?!1:(a=this.getPlaceholderOption())!==b&&a.prop("selected")||""===this.opts.element.val()||this.opts.element.val()===b||null===this.opts.element.val()},prepareOpts:function(){var b=this.parent.prepareOpts.apply(this,arguments),c=this;return"select"===b.element.get(0).tagName.toLowerCase()?b.initSelection=function(a,b){var d=a.find("option").filter(function(){return this.selected&&!this.disabled});b(c.optionToData(d))}:"data"in b&&(b.initSelection=b.initSelection||function(c,d){var e=c.val(),f=null;b.query({matcher:function(a,c,d){var g=r(e,b.id(d));return g&&(f=d),g},callback:a.isFunction(d)?function(){d(f)}:a.noop})}),b},getPlaceholder:function(){return this.select&&this.getPlaceholderOption()===b?b:this.parent.getPlaceholder.apply(this,arguments)},setPlaceholder:function(){var a=this.getPlaceholder();if(this.isPlaceholderOptionSelected()&&a!==b){if(this.select&&this.getPlaceholderOption()===b)return;this.selection.find(".select2-chosen").html(this.opts.escapeMarkup(a)),this.selection.addClass("select2-default"),this.container.removeClass("select2-allowclear")}},postprocessResults:function(a,b,c){var d=0,e=this;if(this.findHighlightableChoices().each2(function(a,b){return r(e.id(b.data("select2-data")),e.opts.element.val())?(d=a,!1):void 0}),c!==!1&&(b===!0&&d>=0?this.highlight(d):this.highlight(0)),b===!0){var g=this.opts.minimumResultsForSearch;g>=0&&this.showSearch(L(a.results)>=g)}},showSearch:function(b){this.showSearchInput!==b&&(this.showSearchInput=b,this.dropdown.find(".select2-search").toggleClass("select2-search-hidden",!b),this.dropdown.find(".select2-search").toggleClass("select2-offscreen",!b),a(this.dropdown,this.container).toggleClass("select2-with-searchbox",b))},onSelect:function(a,b){if(this.triggerSelect(a)){var c=this.opts.element.val(),d=this.data();this.opts.element.val(this.id(a)),this.updateSelection(a),this.opts.element.trigger({type:"select2-selected",val:this.id(a),choice:a}),this.nextSearchTerm=this.opts.nextSearchTerm(a,this.search.val()),this.close(),b&&b.noFocus||!this.opts.shouldFocusInput(this)||this.focusser.focus(),r(c,this.id(a))||this.triggerChange({added:a,removed:d})}},updateSelection:function(a){var d,e,c=this.selection.find(".select2-chosen");this.selection.data("select2-data",a),c.empty(),null!==a&&(d=this.opts.formatSelection(a,c,this.opts.escapeMarkup)),d!==b&&c.append(d),e=this.opts.formatSelectionCssClass(a,c),e!==b&&c.addClass(e),this.selection.removeClass("select2-default"),this.opts.allowClear&&this.getPlaceholder()!==b&&this.container.addClass("select2-allowclear")},val:function(){var a,c=!1,d=null,e=this,f=this.data();if(0===arguments.length)return this.opts.element.val();if(a=arguments[0],arguments.length>1&&(c=arguments[1]),this.select)this.select.val(a).find("option").filter(function(){return this.selected}).each2(function(a,b){return d=e.optionToData(b),!1}),this.updateSelection(d),this.setPlaceholder(),c&&this.triggerChange({added:d,removed:f});else{if(!a&&0!==a)return this.clear(c),void 0;if(this.opts.initSelection===b)throw new Error("cannot call val() if initSelection() is not defined");this.opts.element.val(a),this.opts.initSelection(this.opts.element,function(a){e.opts.element.val(a?e.id(a):""),e.updateSelection(a),e.setPlaceholder(),c&&e.triggerChange({added:a,removed:f})})}},clearSearch:function(){this.search.val(""),this.focusser.val("")},data:function(a){var c,d=!1;return 0===arguments.length?(c=this.selection.data("select2-data"),c==b&&(c=null),c):(arguments.length>1&&(d=arguments[1]),a?(c=this.data(),this.opts.element.val(a?this.id(a):""),this.updateSelection(a),d&&this.triggerChange({added:a,removed:c})):this.clear(d),void 0)}}),e=O(c,{createContainer:function(){var b=a(document.createElement("div")).attr({"class":"select2-container select2-container-multi"}).html(["<ul class='select2-choices'>","  <li class='select2-search-field'>","    <label for='' class='select2-offscreen'></label>","    <input type='text' autocomplete='off' autocorrect='off' autocapitalize='off' spellcheck='false' class='select2-input'>","  </li>","</ul>","<div class='select2-drop select2-drop-multi select2-display-none'>","   <ul class='select2-results'>","   </ul>","</div>"].join(""));return b},prepareOpts:function(){var b=this.parent.prepareOpts.apply(this,arguments),c=this;return"select"===b.element.get(0).tagName.toLowerCase()?b.initSelection=function(a,b){var d=[];a.find("option").filter(function(){return this.selected&&!this.disabled}).each2(function(a,b){d.push(c.optionToData(b))}),b(d)}:"data"in b&&(b.initSelection=b.initSelection||function(c,d){var e=s(c.val(),b.separator,b.transformVal),f=[];b.query({matcher:function(c,d,g){var h=a.grep(e,function(a){return r(a,b.id(g))}).length;return h&&f.push(g),h},callback:a.isFunction(d)?function(){for(var a=[],c=0;c<e.length;c++)for(var g=e[c],h=0;h<f.length;h++){var i=f[h];if(r(g,b.id(i))){a.push(i),f.splice(h,1);break}}d(a)}:a.noop})}),b},selectChoice:function(a){var b=this.container.find(".select2-search-choice-focus");b.length&&a&&a[0]==b[0]||(b.length&&this.opts.element.trigger("choice-deselected",b),b.removeClass("select2-search-choice-focus"),a&&a.length&&(this.close(),a.addClass("select2-search-choice-focus"),this.opts.element.trigger("choice-selected",a)))},destroy:function(){a("label[for='"+this.search.attr("id")+"']").attr("for",this.opts.element.attr("id")),this.parent.destroy.apply(this,arguments),N.call(this,"searchContainer","selection")},initContainer:function(){var c,b=".select2-choices";this.searchContainer=this.container.find(".select2-search-field"),this.selection=c=this.container.find(b);var d=this;this.selection.on("click",".select2-container:not(.select2-container-disabled) .select2-search-choice:not(.select2-locked)",function(){d.search[0].focus(),d.selectChoice(a(this))}),this.search.attr("id","s2id_autogen"+f()),this.search.prev().text(a("label[for='"+this.opts.element.attr("id")+"']").text()).attr("for",this.search.attr("id")),this.opts.element.focus(this.bind(function(){this.focus()})),this.search.on("input paste",this.bind(function(){this.search.attr("placeholder")&&0==this.search.val().length||this.isInterfaceEnabled()&&(this.opened()||this.open())})),this.search.attr("tabindex",this.elementTabIndex),this.keydowns=0,this.search.on("keydown",this.bind(function(a){if(this.isInterfaceEnabled()){++this.keydowns;var b=c.find(".select2-search-choice-focus"),d=b.prev(".select2-search-choice:not(.select2-locked)"),e=b.next(".select2-search-choice:not(.select2-locked)"),f=z(this.search);if(b.length&&(a.which==k.LEFT||a.which==k.RIGHT||a.which==k.BACKSPACE||a.which==k.DELETE||a.which==k.ENTER)){var g=b;return a.which==k.LEFT&&d.length?g=d:a.which==k.RIGHT?g=e.length?e:null:a.which===k.BACKSPACE?this.unselect(b.first())&&(this.search.width(10),g=d.length?d:e):a.which==k.DELETE?this.unselect(b.first())&&(this.search.width(10),g=e.length?e:null):a.which==k.ENTER&&(g=null),this.selectChoice(g),A(a),g&&g.length||this.open(),void 0}if((a.which===k.BACKSPACE&&1==this.keydowns||a.which==k.LEFT)&&0==f.offset&&!f.length)return this.selectChoice(c.find(".select2-search-choice:not(.select2-locked)").last()),A(a),void 0;if(this.selectChoice(null),this.opened())switch(a.which){case k.UP:case k.DOWN:return this.moveHighlight(a.which===k.UP?-1:1),A(a),void 0;case k.ENTER:return this.selectHighlighted(),A(a),void 0;case k.TAB:return this.selectHighlighted({noFocus:!0}),this.close(),void 0;case k.ESC:return this.cancel(a),A(a),void 0}if(a.which!==k.TAB&&!k.isControl(a)&&!k.isFunctionKey(a)&&a.which!==k.BACKSPACE&&a.which!==k.ESC){if(a.which===k.ENTER){if(this.opts.openOnEnter===!1)return;if(a.altKey||a.ctrlKey||a.shiftKey||a.metaKey)return}this.open(),(a.which===k.PAGE_UP||a.which===k.PAGE_DOWN)&&A(a),a.which===k.ENTER&&A(a)}}})),this.search.on("keyup",this.bind(function(){this.keydowns=0,this.resizeSearch()})),this.search.on("blur",this.bind(function(b){this.container.removeClass("select2-container-active"),this.search.removeClass("select2-focused"),this.selectChoice(null),this.opened()||this.clearSearch(),b.stopImmediatePropagation(),this.opts.element.trigger(a.Event("select2-blur"))})),this.container.on("click",b,this.bind(function(b){this.isInterfaceEnabled()&&(a(b.target).closest(".select2-search-choice").length>0||(this.selectChoice(null),this.clearPlaceholder(),this.container.hasClass("select2-container-active")||this.opts.element.trigger(a.Event("select2-focus")),this.open(),this.focusSearch(),b.preventDefault()))})),this.container.on("focus",b,this.bind(function(){this.isInterfaceEnabled()&&(this.container.hasClass("select2-container-active")||this.opts.element.trigger(a.Event("select2-focus")),this.container.addClass("select2-container-active"),this.dropdown.addClass("select2-drop-active"),this.clearPlaceholder())})),this.initContainerWidth(),this.opts.element.hide(),this.clearSearch()},enableInterface:function(){this.parent.enableInterface.apply(this,arguments)&&this.search.prop("disabled",!this.isInterfaceEnabled())},initSelection:function(){if(""===this.opts.element.val()&&""===this.opts.element.text()&&(this.updateSelection([]),this.close(),this.clearSearch()),this.select||""!==this.opts.element.val()){var c=this;this.opts.initSelection.call(null,this.opts.element,function(a){a!==b&&null!==a&&(c.updateSelection(a),c.close(),c.clearSearch())})}},clearSearch:function(){var a=this.getPlaceholder(),c=this.getMaxSearchWidth();a!==b&&0===this.getVal().length&&this.search.hasClass("select2-focused")===!1?(this.search.val(a).addClass("select2-default"),this.search.width(c>0?c:this.container.css("width"))):this.search.val("").width(10)},clearPlaceholder:function(){this.search.hasClass("select2-default")&&this.search.val("").removeClass("select2-default")},opening:function(){this.clearPlaceholder(),this.resizeSearch(),this.parent.opening.apply(this,arguments),this.focusSearch(),""===this.search.val()&&this.nextSearchTerm!=b&&(this.search.val(this.nextSearchTerm),this.search.select()),this.updateResults(!0),this.opts.shouldFocusInput(this)&&this.search.focus(),this.opts.element.trigger(a.Event("select2-open"))},close:function(){this.opened()&&this.parent.close.apply(this,arguments)},focus:function(){this.close(),this.search.focus()},isFocused:function(){return this.search.hasClass("select2-focused")},updateSelection:function(b){var c=[],d=[],e=this;a(b).each(function(){p(e.id(this),c)<0&&(c.push(e.id(this)),d.push(this))}),b=d,this.selection.find(".select2-search-choice").remove(),a(b).each(function(){e.addSelectedChoice(this)}),e.postprocessResults()},tokenize:function(){var a=this.search.val();a=this.opts.tokenizer.call(this,a,this.data(),this.bind(this.onSelect),this.opts),null!=a&&a!=b&&(this.search.val(a),a.length>0&&this.open())},onSelect:function(a,c){this.triggerSelect(a)&&""!==a.text&&(this.addSelectedChoice(a),this.opts.element.trigger({type:"selected",val:this.id(a),choice:a}),this.nextSearchTerm=this.opts.nextSearchTerm(a,this.search.val()),this.clearSearch(),this.updateResults(),(this.select||!this.opts.closeOnSelect)&&this.postprocessResults(a,!1,this.opts.closeOnSelect===!0),this.opts.closeOnSelect?(this.close(),this.search.width(10)):this.countSelectableResults()>0?(this.search.width(10),this.resizeSearch(),this.getMaximumSelectionSize()>0&&this.val().length>=this.getMaximumSelectionSize()?this.updateResults(!0):this.nextSearchTerm!=b&&(this.search.val(this.nextSearchTerm),this.updateResults(),this.search.select()),this.positionDropdown()):(this.close(),this.search.width(10)),this.triggerChange({added:a}),c&&c.noFocus||this.focusSearch())},cancel:function(){this.close(),this.focusSearch()},addSelectedChoice:function(c){var j,k,d=!c.locked,e=a("<li class='select2-search-choice'>    <div></div>    <a href='#' class='select2-search-choice-close' tabindex='-1'></a></li>"),f=a("<li class='select2-search-choice select2-locked'><div></div></li>"),g=d?e:f,h=this.id(c),i=this.getVal();j=this.opts.formatSelection(c,g.find("div"),this.opts.escapeMarkup),j!=b&&g.find("div").replaceWith(a("<div></div>").html(j)),k=this.opts.formatSelectionCssClass(c,g.find("div")),k!=b&&g.addClass(k),d&&g.find(".select2-search-choice-close").on("mousedown",A).on("click dblclick",this.bind(function(b){this.isInterfaceEnabled()&&(this.unselect(a(b.target)),this.selection.find(".select2-search-choice-focus").removeClass("select2-search-choice-focus"),A(b),this.close(),this.focusSearch())})).on("focus",this.bind(function(){this.isInterfaceEnabled()&&(this.container.addClass("select2-container-active"),this.dropdown.addClass("select2-drop-active"))})),g.data("select2-data",c),g.insertBefore(this.searchContainer),i.push(h),this.setVal(i)},unselect:function(b){var d,e,c=this.getVal();if(b=b.closest(".select2-search-choice"),0===b.length)throw"Invalid argument: "+b+". Must be .select2-search-choice";if(d=b.data("select2-data")){var f=a.Event("select2-removing");if(f.val=this.id(d),f.choice=d,this.opts.element.trigger(f),f.isDefaultPrevented())return!1;for(;(e=p(this.id(d),c))>=0;)c.splice(e,1),this.setVal(c),this.select&&this.postprocessResults();return b.remove(),this.opts.element.trigger({type:"select2-removed",val:this.id(d),choice:d}),this.triggerChange({removed:d}),!0}},postprocessResults:function(a,b,c){var d=this.getVal(),e=this.results.find(".select2-result"),f=this.results.find(".select2-result-with-children"),g=this;e.each2(function(a,b){var c=g.id(b.data("select2-data"));p(c,d)>=0&&(b.addClass("select2-selected"),b.find(".select2-result-selectable").addClass("select2-selected"))}),f.each2(function(a,b){b.is(".select2-result-selectable")||0!==b.find(".select2-result-selectable:not(.select2-selected)").length||b.addClass("select2-selected")}),-1==this.highlight()&&c!==!1&&this.opts.closeOnSelect===!0&&g.highlight(0),!this.opts.createSearchChoice&&!e.filter(".select2-result:not(.select2-selected)").length>0&&(!a||a&&!a.more&&0===this.results.find(".select2-no-results").length)&&J(g.opts.formatNoMatches,"formatNoMatches")&&this.results.append("<li class='select2-no-results'>"+K(g.opts.formatNoMatches,g.opts.element,g.search.val())+"</li>")},getMaxSearchWidth:function(){return this.selection.width()-t(this.search)},resizeSearch:function(){var a,b,c,d,e,f=t(this.search);a=C(this.search)+10,b=this.search.offset().left,c=this.selection.width(),d=this.selection.offset().left,e=c-(b-d)-f,a>e&&(e=c-f),40>e&&(e=c-f),0>=e&&(e=a),this.search.width(Math.floor(e))},getVal:function(){var a;return this.select?(a=this.select.val(),null===a?[]:a):(a=this.opts.element.val(),s(a,this.opts.separator,this.opts.transformVal))},setVal:function(b){var c;this.select?this.select.val(b):(c=[],a(b).each(function(){p(this,c)<0&&c.push(this)}),this.opts.element.val(0===c.length?"":c.join(this.opts.separator)))},buildChangeDetails:function(a,b){for(var b=b.slice(0),a=a.slice(0),c=0;c<b.length;c++)for(var d=0;d<a.length;d++)r(this.opts.id(b[c]),this.opts.id(a[d]))&&(b.splice(c,1),c>0&&c--,a.splice(d,1),d--);return{added:b,removed:a}},val:function(c,d){var e,f=this;if(0===arguments.length)return this.getVal();if(e=this.data(),e.length||(e=[]),!c&&0!==c)return this.opts.element.val(""),this.updateSelection([]),this.clearSearch(),d&&this.triggerChange({added:this.data(),removed:e}),void 0;if(this.setVal(c),this.select)this.opts.initSelection(this.select,this.bind(this.updateSelection)),d&&this.triggerChange(this.buildChangeDetails(e,this.data()));else{if(this.opts.initSelection===b)throw new Error("val() cannot be called if initSelection() is not defined");this.opts.initSelection(this.opts.element,function(b){var c=a.map(b,f.id);f.setVal(c),f.updateSelection(b),f.clearSearch(),d&&f.triggerChange(f.buildChangeDetails(e,f.data()))})}this.clearSearch()},onSortStart:function(){if(this.select)throw new Error("Sorting of elements is not supported when attached to <select>. Attach to <input type='hidden'/> instead.");this.search.width(0),this.searchContainer.hide()},onSortEnd:function(){var b=[],c=this;this.searchContainer.show(),this.searchContainer.appendTo(this.searchContainer.parent()),this.resizeSearch(),this.selection.find(".select2-search-choice").each(function(){b.push(c.opts.id(a(this).data("select2-data")))}),this.setVal(b),this.triggerChange()},data:function(b,c){var e,f,d=this;return 0===arguments.length?this.selection.children(".select2-search-choice").map(function(){return a(this).data("select2-data")}).get():(f=this.data(),b||(b=[]),e=a.map(b,function(a){return d.opts.id(a)}),this.setVal(e),this.updateSelection(b),this.clearSearch(),c&&this.triggerChange(this.buildChangeDetails(f,this.data())),void 0)}}),a.fn.select2=function(){var d,e,f,g,h,c=Array.prototype.slice.call(arguments,0),i=["val","destroy","opened","open","close","focus","isFocused","container","dropdown","onSortStart","onSortEnd","enable","disable","readonly","positionDropdown","data","search"],j=["opened","isFocused","container","dropdown"],k=["val","data"],l={search:"externalSearch"};return this.each(function(){if(0===c.length||"object"==typeof c[0])d=0===c.length?{}:a.extend({},c[0]),d.element=a(this),"select"===d.element.get(0).tagName.toLowerCase()?h=d.element.prop("multiple"):(h=d.multiple||!1,"tags"in d&&(d.multiple=h=!0)),e=h?new window.Select2["class"].multi:new window.Select2["class"].single,e.init(d);else{if("string"!=typeof c[0])throw"Invalid arguments to select2 plugin: "+c;if(p(c[0],i)<0)throw"Unknown method: "+c[0];if(g=b,e=a(this).data("select2"),e===b)return;if(f=c[0],"container"===f?g=e.container:"dropdown"===f?g=e.dropdown:(l[f]&&(f=l[f]),g=e[f].apply(e,c.slice(1))),p(c[0],j)>=0||p(c[0],k)>=0&&1==c.length)return!1}}),g===b?this:g},a.fn.select2.defaults={width:"copy",loadMorePadding:0,closeOnSelect:!0,openOnEnter:!0,containerCss:{},dropdownCss:{},containerCssClass:"",dropdownCssClass:"",formatResult:function(a,b,c,d){var e=[];return E(this.text(a),c.term,e,d),e.join("")},transformVal:function(b){return a.trim(b)},formatSelection:function(a,c,d){return a?d(this.text(a)):b},sortResults:function(a){return a},formatResultCssClass:function(a){return a.css},formatSelectionCssClass:function(){return b},minimumResultsForSearch:0,minimumInputLength:0,maximumInputLength:null,maximumSelectionSize:0,id:function(a){return a==b?null:a.id},text:function(b){return b&&this.data&&this.data.text?a.isFunction(this.data.text)?this.data.text(b):b[this.data.text]:b.text
},matcher:function(a,b){return o(""+b).toUpperCase().indexOf(o(""+a).toUpperCase())>=0},separator:",",tokenSeparators:[],tokenizer:M,escapeMarkup:F,blurOnChange:!1,selectOnBlur:!1,adaptContainerCssClass:function(a){return a},adaptDropdownCssClass:function(){return null},nextSearchTerm:function(){return b},searchInputPlaceholder:"",createSearchChoicePosition:"top",shouldFocusInput:function(a){var b="ontouchstart"in window||navigator.msMaxTouchPoints>0;return b?a.opts.minimumResultsForSearch<0?!1:!0:!0}},a.fn.select2.locales=[],a.fn.select2.locales.en={formatMatches:function(a){return 1===a?"One result is available, press enter to select it.":a+" results are available, use up and down arrow keys to navigate."},formatNoMatches:function(){return"No matches found"},formatAjaxError:function(){return"Loading failed"},formatInputTooShort:function(a,b){var c=b-a.length;return"Please enter "+c+" or more character"+(1==c?"":"s")},formatInputTooLong:function(a,b){var c=a.length-b;return"Please delete "+c+" character"+(1==c?"":"s")},formatSelectionTooBig:function(a){return"You can only select "+a+" item"+(1==a?"":"s")},formatLoadMore:function(){return"Loading more results\u2026"},formatSearching:function(){return"Searching\u2026"}},a.extend(a.fn.select2.defaults,a.fn.select2.locales.en),a.fn.select2.ajaxDefaults={transport:a.ajax,params:{type:"GET",cache:!1,dataType:"json"}},window.Select2={query:{ajax:G,local:H,tags:I},util:{debounce:w,markMatch:E,escapeMarkup:F,stripDiacritics:o},"class":{"abstract":c,single:d,multi:e}}}}(jQuery);
var components = {};
var notebookContainer = null;

var prevNotebookContainerW = null;

function getNotebookContainerWidth() {
	if (!notebookContainer) {
		notebookContainer = $('#notebook-container');
		prevNotebookContainerW = notebookContainer.width();
	}
	return notebookContainer.width();
}

function updateMaxWidth(componentId, w) {
	jqueryComponent = components[componentId];
	if (!jqueryComponent.closest('html'))
		return;
	jqueryComponent.css({'max-width': (w - 50) + 'px'});
	//console.log("widgetMaxWidthCorrection: max-width changed into " + (w - 50) + " (componentId=" + 
	//	componentId + ", parentNode=" + jqueryComponent.closest('html') + ")");
}

var windowResizeListener = function() {
	var newW = notebookContainer.width();
	if (prevNotebookContainerW != newW) {
		prevNotebookContainerW = newW;
		for (var componentId in components)
			updateMaxWidth(componentId, newW);
	}
}

function watchForWidgetMaxWidthCorrection(componentId) {
	if (!notebookContainer) {
		getNotebookContainerWidth();
		if (!notebookContainer) {
			console.log("widgetMaxWidthCorrection: notebookContainer is not defined for some reason...");
		} else {
			$(window).resize(windowResizeListener);
		}
	}
	components[componentId] = $('#'+componentId);
	updateMaxWidth(componentId, prevNotebookContainerW);
}
/**
* Bootstrap.js by @mdo and @fat, extended by @ArnoldDaniels.
* plugins: bootstrap-fileupload.js
* Copyright 2012 Twitter, Inc.
* http://www.apache.org/licenses/LICENSE-2.0.txt
*/
!function(e){var t=function(t,n){this.$element=e(t),this.type=this.$element.data("uploadtype")||(this.$element.find(".thumbnail").length>0?"image":"file"),this.$input=this.$element.find(":file");if(this.$input.length===0)return;this.name=this.$input.attr("name")||n.name,this.$hidden=this.$element.find('input[type=hidden][name="'+this.name+'"]'),this.$hidden.length===0&&(this.$hidden=e('<input type="hidden" />'),this.$element.prepend(this.$hidden)),this.$preview=this.$element.find(".fileupload-preview");var r=this.$preview.css("height");this.$preview.css("display")!="inline"&&r!="0px"&&r!="none"&&this.$preview.css("line-height",r),this.original={exists:this.$element.hasClass("fileupload-exists"),preview:this.$preview.html(),hiddenVal:this.$hidden.val()},this.$remove=this.$element.find('[data-dismiss="fileupload"]'),this.$element.find('[data-trigger="fileupload"]').on("click.fileupload",e.proxy(this.trigger,this)),this.listen()};t.prototype={listen:function(){this.$input.on("change.fileupload",e.proxy(this.change,this)),e(this.$input[0].form).on("reset.fileupload",e.proxy(this.reset,this)),this.$remove&&this.$remove.on("click.fileupload",e.proxy(this.clear,this))},change:function(e,t){if(t==="clear")return;var n=e.target.files!==undefined?e.target.files[0]:e.target.value?{name:e.target.value.replace(/^.+\\/,"")}:null;if(!n){this.clear();return}this.$hidden.val(""),this.$hidden.attr("name",""),this.$input.attr("name",this.name);if(this.type==="image"&&this.$preview.length>0&&(typeof n.type!="undefined"?n.type.match("image.*"):n.name.match(/\.(gif|png|jpe?g)$/i))&&typeof FileReader!="undefined"){var r=new FileReader,i=this.$preview,s=this.$element;r.onload=function(e){i.html('<img src="'+e.target.result+'" '+(i.css("max-height")!="none"?'style="max-height: '+i.css("max-height")+';"':"")+" />"),s.addClass("fileupload-exists").removeClass("fileupload-new")},r.readAsDataURL(n)}else this.$preview.text(n.name),this.$element.addClass("fileupload-exists").removeClass("fileupload-new")},clear:function(e){this.$hidden.val(""),this.$hidden.attr("name",this.name),this.$input.attr("name","");if(navigator.userAgent.match(/msie/i)){var t=this.$input.clone(!0);this.$input.after(t),this.$input.remove(),this.$input=t}else this.$input.val("");this.$preview.html(""),this.$element.addClass("fileupload-new").removeClass("fileupload-exists"),e&&(this.$input.trigger("change",["clear"]),e.preventDefault())},reset:function(e){this.clear(),this.$hidden.val(this.original.hiddenVal),this.$preview.html(this.original.preview),this.original.exists?this.$element.addClass("fileupload-exists").removeClass("fileupload-new"):this.$element.addClass("fileupload-new").removeClass("fileupload-exists")},trigger:function(e){this.$input.trigger("click"),e.preventDefault()}},e.fn.fileupload=function(n){return this.each(function(){var r=e(this),i=r.data("fileupload");i||r.data("fileupload",i=new t(this,n)),typeof n=="string"&&i[n]()})},e.fn.fileupload.Constructor=t,e(document).on("click.fileupload.data-api",'[data-provides="fileupload"]',function(t){var n=e(this);if(n.data("fileupload"))return;n.fileupload(n.data());var r=e(t.target).closest('[data-dismiss="fileupload"],[data-trigger="fileupload"]');r.length>0&&(r.trigger("click.fileupload"),t.preventDefault())})}(window.jQuery)
/* Set the defaults for DataTables initialisation */
$.extend( true, $.fn.dataTable.defaults, {
	"sDom": "R<'row'<'col-md-12 table-options'lf>r>t<'row'<'col-md-12'ip>>",
	"sPaginationType": "bootstrap",
	"oLanguage": {
		"sLengthMenu": "_MENU_ records per page"
	},
	"bAutoWidth": false,
	fnInitComplete: function() {
		$('.ColVis').hide();
		$('.ColVis button').addClass('btn btn-default');
		//$('.ColVis_collectionBackground').remove();
	}
} );


/* Default class modification */
$.extend( $.fn.dataTableExt.oStdClasses, {
	"sWrapper": "dataTables_wrapper form-inline"
} );


/* API method to get paging information */
$.fn.dataTableExt.oApi.fnPagingInfo = function ( oSettings )
{
	return {
		"iStart":         oSettings._iDisplayStart,
		"iEnd":           oSettings.fnDisplayEnd(),
		"iLength":        oSettings._iDisplayLength,
		"iTotal":         oSettings.fnRecordsTotal(),
		"iFilteredTotal": oSettings.fnRecordsDisplay(),
		"iPage":          oSettings._iDisplayLength === -1 ?
			0 : Math.ceil( oSettings._iDisplayStart / oSettings._iDisplayLength ),
		"iTotalPages":    oSettings._iDisplayLength === -1 ?
			0 : Math.ceil( oSettings.fnRecordsDisplay() / oSettings._iDisplayLength )
	};
};


/* Bootstrap style pagination control */
$.extend( $.fn.dataTableExt.oPagination, {
	"bootstrap": {
		"fnInit": function( oSettings, nPaging, fnDraw ) {
			var oLang = oSettings.oLanguage.oPaginate;
			var fnClickHandler = function ( e ) {
				e.preventDefault();
				if ( oSettings.oApi._fnPageChange(oSettings, e.data.action) ) {
					fnDraw( oSettings );
				}
			};

			$(nPaging).append(
				'<ul class="pagination">'+
					'<li class="prev disabled"><a href="#">&larr; '+oLang.sPrevious+'</a></li>'+
					'<li class="next disabled"><a href="#">'+oLang.sNext+' &rarr; </a></li>'+
				'</ul>'
			);
			var els = $('a', nPaging);
			$(els[0]).bind( 'click.DT', { action: "previous" }, fnClickHandler );
			$(els[1]).bind( 'click.DT', { action: "next" }, fnClickHandler );

			$('.dataTables_length').find('select').addClass('form-control')
		},

		"fnUpdate": function ( oSettings, fnDraw ) {
			var iListLength = 5;
			var oPaging = oSettings.oInstance.fnPagingInfo();
			var an = oSettings.aanFeatures.p;
			var i, ien, j, sClass, iStart, iEnd, iHalf=Math.floor(iListLength/2);

			if ( oPaging.iTotalPages < iListLength) {
				iStart = 1;
				iEnd = oPaging.iTotalPages;
			}
			else if ( oPaging.iPage <= iHalf ) {
				iStart = 1;
				iEnd = iListLength;
			} else if ( oPaging.iPage >= (oPaging.iTotalPages-iHalf) ) {
				iStart = oPaging.iTotalPages - iListLength + 1;
				iEnd = oPaging.iTotalPages;
			} else {
				iStart = oPaging.iPage - iHalf + 1;
				iEnd = iStart + iListLength - 1;
			}

			for ( i=0, ien=an.length ; i<ien ; i++ ) {
				// Remove the middle elements
				$('li:gt(0)', an[i]).filter(':not(:last)').remove();

				// Add the new list items and their event handlers
				for ( j=iStart ; j<=iEnd ; j++ ) {
					sClass = (j==oPaging.iPage+1) ? 'class="active"' : '';
					$('<li '+sClass+'><a href="#">'+j+'</a></li>')
						.insertBefore( $('li:last', an[i])[0] )
						.bind('click', function (e) {
							e.preventDefault();
							oSettings._iDisplayStart = (parseInt($('a', this).text(),10)-1) * oPaging.iLength;
							fnDraw( oSettings );
						} );
				}

				// Add / remove disabled classes from the static elements
				if ( oPaging.iPage === 0 ) {
					$('li:first', an[i]).addClass('disabled');
				} else {
					$('li:first', an[i]).removeClass('disabled');
				}

				if ( oPaging.iPage === oPaging.iTotalPages-1 || oPaging.iTotalPages === 0 ) {
					$('li:last', an[i]).addClass('disabled');
				} else {
					$('li:last', an[i]).removeClass('disabled');
				}
			}
		}
	}
} );


/*
 * TableTools Bootstrap compatibility
 * Required TableTools 2.1+
 */
if ( $.fn.DataTable.TableTools ) {
	// Set the classes that TableTools uses to something suitable for Bootstrap
	$.extend( true, $.fn.DataTable.TableTools.classes, {
		"container": "DTTT btn-group",
		"buttons": {
			"normal": "btn btn-default",
			"disabled": "disabled"
		},
		"collection": {
			"container": "DTTT_dropdown dropdown-menu",
			"buttons": {
				"normal": "",
				"disabled": "disabled"
			}
		},
		"print": {
			"info": "DTTT_print_info modal"
		},
		"select": {
			"row": "active"
		}
	} );

	// Have the collection use a bootstrap compatible dropdown
	$.extend( true, $.fn.DataTable.TableTools.DEFAULTS.oTags, {
		"collection": {
			"container": "ul",
			"button": "li",
			"liner": "a"
		}
	} );
}


d3=function(){function n(n){return null!=n&&!isNaN(n)}function t(n){return n.length}function e(n){for(var t=1;n*t%1;)t*=10;return t}function r(n,t){try{for(var e in t)Object.defineProperty(n.prototype,e,{value:t[e],enumerable:!1})}catch(r){n.prototype=t}}function i(){}function u(){}function a(n,t,e){return function(){var r=e.apply(t,arguments);return r===t?n:r}}function o(n,t){if(t in n)return t;t=t.charAt(0).toUpperCase()+t.substring(1);for(var e=0,r=Ca.length;r>e;++e){var i=Ca[e]+t;if(i in n)return i}}function c(n){for(var t=n.length,e=new Array(t);t--;)e[t]=n[t];return e}function l(n){return Array.prototype.slice.call(n)}function s(){}function f(){}function h(n){function t(){for(var t,r=e,i=-1,u=r.length;++i<u;)(t=r[i].on)&&t.apply(this,arguments);return n}var e=[],r=new i;return t.on=function(t,i){var u,a=r.get(t);return arguments.length<2?a&&a.on:(a&&(a.on=null,e=e.slice(0,u=e.indexOf(a)).concat(e.slice(u+1)),r.remove(t)),i&&e.push(r.set(t,{on:i})),n)},t}function g(){ya.event.preventDefault()}function p(){for(var n,t=ya.event;n=t.sourceEvent;)t=n;return t}function m(n){for(var t=new f,e=0,r=arguments.length;++e<r;)t[arguments[e]]=h(t);return t.of=function(e,r){return function(i){try{var u=i.sourceEvent=ya.event;i.target=n,ya.event=i,t[i.type].apply(e,r)}finally{ya.event=u}}},t}function d(n){return La(n,Ya),n}function v(n){return"function"==typeof n?n:function(){return Ha(n,this)}}function y(n){return"function"==typeof n?n:function(){return Fa(n,this)}}function M(n,t){function e(){this.removeAttribute(n)}function r(){this.removeAttributeNS(n.space,n.local)}function i(){this.setAttribute(n,t)}function u(){this.setAttributeNS(n.space,n.local,t)}function a(){var e=t.apply(this,arguments);null==e?this.removeAttribute(n):this.setAttribute(n,e)}function o(){var e=t.apply(this,arguments);null==e?this.removeAttributeNS(n.space,n.local):this.setAttributeNS(n.space,n.local,e)}return n=ya.ns.qualify(n),null==t?n.local?r:e:"function"==typeof t?n.local?o:a:n.local?u:i}function x(n){return n.trim().replace(/\s+/g," ")}function b(n){return new RegExp("(?:^|\\s+)"+ya.requote(n)+"(?:\\s+|$)","g")}function _(n,t){function e(){for(var e=-1;++e<i;)n[e](this,t)}function r(){for(var e=-1,r=t.apply(this,arguments);++e<i;)n[e](this,r)}n=n.trim().split(/\s+/).map(w);var i=n.length;return"function"==typeof t?r:e}function w(n){var t=b(n);return function(e,r){if(i=e.classList)return r?i.add(n):i.remove(n);var i=e.getAttribute("class")||"";r?(t.lastIndex=0,t.test(i)||e.setAttribute("class",x(i+" "+n))):e.setAttribute("class",x(i.replace(t," ")))}}function S(n,t,e){function r(){this.style.removeProperty(n)}function i(){this.style.setProperty(n,t,e)}function u(){var r=t.apply(this,arguments);null==r?this.style.removeProperty(n):this.style.setProperty(n,r,e)}return null==t?r:"function"==typeof t?u:i}function E(n,t){function e(){delete this[n]}function r(){this[n]=t}function i(){var e=t.apply(this,arguments);null==e?delete this[n]:this[n]=e}return null==t?e:"function"==typeof t?i:r}function k(n){return"function"==typeof n?n:(n=ya.ns.qualify(n)).local?function(){return Ma.createElementNS(n.space,n.local)}:function(){return Ma.createElementNS(this.namespaceURI,n)}}function A(n){return{__data__:n}}function N(n){return function(){return Oa(this,n)}}function q(n){return arguments.length||(n=ya.ascending),function(t,e){return t&&e?n(t.__data__,e.__data__):!t-!e}}function T(n,t){for(var e=0,r=n.length;r>e;e++)for(var i,u=n[e],a=0,o=u.length;o>a;a++)(i=u[a])&&t(i,a,e);return n}function C(n){return La(n,Ua),n}function z(n){var t,e;return function(r,i,u){var a,o=n[u].update,c=o.length;for(u!=e&&(e=u,t=0),i>=t&&(t=i+1);!(a=o[t])&&++t<c;);return a}}function D(n,t,e){function r(){var t=this[a];t&&(this.removeEventListener(n,t,t.$),delete this[a])}function i(){var i=c(t,za(arguments));r.call(this),this.addEventListener(n,this[a]=i,i.$=e),i._=t}function u(){var t,e=new RegExp("^__on([^.]+)"+ya.requote(n)+"$");for(var r in this)if(t=r.match(e)){var i=this[r];this.removeEventListener(t[1],i,i.$),delete this[r]}}var a="__on"+n,o=n.indexOf("."),c=j;o>0&&(n=n.substring(0,o));var l=Va.get(n);return l&&(n=l,c=L),o?t?i:r:t?s:u}function j(n,t){return function(e){var r=ya.event;ya.event=e,t[0]=this.__data__;try{n.apply(this,t)}finally{ya.event=r}}}function L(n,t){var e=j(n,t);return function(n){var t=this,r=n.relatedTarget;r&&(r===t||8&r.compareDocumentPosition(t))||e.call(t,n)}}function H(){var n=".dragsuppress-"+ ++Za,t="touchmove"+n,e="selectstart"+n,r="dragstart"+n,i="click"+n,u=ya.select(ba).on(t,g).on(e,g).on(r,g),a=xa.style,o=a[Xa];return a[Xa]="none",function(t){function e(){u.on(i,null)}u.on(n,null),a[Xa]=o,t&&(u.on(i,function(){g(),e()},!0),setTimeout(e,0))}}function F(n,t){var e=n.ownerSVGElement||n;if(e.createSVGPoint){var r=e.createSVGPoint();if(0>Ba&&(ba.scrollX||ba.scrollY)){e=ya.select("body").append("svg").style({position:"absolute",top:0,left:0,margin:0,padding:0,border:"none"},"important");var i=e[0][0].getScreenCTM();Ba=!(i.f||i.e),e.remove()}return Ba?(r.x=t.pageX,r.y=t.pageY):(r.x=t.clientX,r.y=t.clientY),r=r.matrixTransform(n.getScreenCTM().inverse()),[r.x,r.y]}var u=n.getBoundingClientRect();return[t.clientX-u.left-n.clientLeft,t.clientY-u.top-n.clientTop]}function P(){}function O(n,t,e){return new Y(n,t,e)}function Y(n,t,e){this.h=n,this.s=t,this.l=e}function R(n,t,e){function r(n){return n>360?n-=360:0>n&&(n+=360),60>n?u+(a-u)*n/60:180>n?a:240>n?u+(a-u)*(240-n)/60:u}function i(n){return Math.round(255*r(n))}var u,a;return n=isNaN(n)?0:(n%=360)<0?n+360:n,t=isNaN(t)?0:0>t?0:t>1?1:t,e=0>e?0:e>1?1:e,a=.5>=e?e*(1+t):e+t-e*t,u=2*e-a,at(i(n+120),i(n),i(n-120))}function U(n){return n>0?1:0>n?-1:0}function I(n){return n>1?0:-1>n?Ka:Math.acos(n)}function V(n){return n>1?Ka/2:-1>n?-Ka/2:Math.asin(n)}function X(n){return(Math.exp(n)-Math.exp(-n))/2}function Z(n){return(Math.exp(n)+Math.exp(-n))/2}function B(n){return(n=Math.sin(n/2))*n}function $(n,t,e){return new W(n,t,e)}function W(n,t,e){this.h=n,this.c=t,this.l=e}function J(n,t,e){return isNaN(n)&&(n=0),isNaN(t)&&(t=0),G(e,Math.cos(n*=to)*t,Math.sin(n)*t)}function G(n,t,e){return new K(n,t,e)}function K(n,t,e){this.l=n,this.a=t,this.b=e}function Q(n,t,e){var r=(n+16)/116,i=r+t/500,u=r-e/200;return i=tt(i)*uo,r=tt(r)*ao,u=tt(u)*oo,at(rt(3.2404542*i-1.5371385*r-.4985314*u),rt(-.969266*i+1.8760108*r+.041556*u),rt(.0556434*i-.2040259*r+1.0572252*u))}function nt(n,t,e){return n>0?$(Math.atan2(e,t)*eo,Math.sqrt(t*t+e*e),n):$(0/0,0/0,n)}function tt(n){return n>.206893034?n*n*n:(n-4/29)/7.787037}function et(n){return n>.008856?Math.pow(n,1/3):7.787037*n+4/29}function rt(n){return Math.round(255*(.00304>=n?12.92*n:1.055*Math.pow(n,1/2.4)-.055))}function it(n){return at(n>>16,255&n>>8,255&n)}function ut(n){return it(n)+""}function at(n,t,e){return new ot(n,t,e)}function ot(n,t,e){this.r=n,this.g=t,this.b=e}function ct(n){return 16>n?"0"+Math.max(0,n).toString(16):Math.min(255,n).toString(16)}function lt(n,t,e){var r,i,u,a=0,o=0,c=0;if(r=/([a-z]+)\((.*)\)/i.exec(n))switch(i=r[2].split(","),r[1]){case"hsl":return e(parseFloat(i[0]),parseFloat(i[1])/100,parseFloat(i[2])/100);case"rgb":return t(gt(i[0]),gt(i[1]),gt(i[2]))}return(u=so.get(n))?t(u.r,u.g,u.b):(null!=n&&"#"===n.charAt(0)&&(4===n.length?(a=n.charAt(1),a+=a,o=n.charAt(2),o+=o,c=n.charAt(3),c+=c):7===n.length&&(a=n.substring(1,3),o=n.substring(3,5),c=n.substring(5,7)),a=parseInt(a,16),o=parseInt(o,16),c=parseInt(c,16)),t(a,o,c))}function st(n,t,e){var r,i,u=Math.min(n/=255,t/=255,e/=255),a=Math.max(n,t,e),o=a-u,c=(a+u)/2;return o?(i=.5>c?o/(a+u):o/(2-a-u),r=n==a?(t-e)/o+(e>t?6:0):t==a?(e-n)/o+2:(n-t)/o+4,r*=60):(r=0/0,i=c>0&&1>c?0:r),O(r,i,c)}function ft(n,t,e){n=ht(n),t=ht(t),e=ht(e);var r=et((.4124564*n+.3575761*t+.1804375*e)/uo),i=et((.2126729*n+.7151522*t+.072175*e)/ao),u=et((.0193339*n+.119192*t+.9503041*e)/oo);return G(116*i-16,500*(r-i),200*(i-u))}function ht(n){return(n/=255)<=.04045?n/12.92:Math.pow((n+.055)/1.055,2.4)}function gt(n){var t=parseFloat(n);return"%"===n.charAt(n.length-1)?Math.round(2.55*t):t}function pt(n){return"function"==typeof n?n:function(){return n}}function mt(n){return n}function dt(n){return function(t,e,r){return 2===arguments.length&&"function"==typeof e&&(r=e,e=null),vt(t,e,n,r)}}function vt(n,t,e,r){function i(){var n,t=c.status;if(!t&&c.responseText||t>=200&&300>t||304===t){try{n=e.call(u,c)}catch(r){return a.error.call(u,r),void 0}a.load.call(u,n)}else a.error.call(u,c)}var u={},a=ya.dispatch("progress","load","error"),o={},c=new XMLHttpRequest,l=null;return!ba.XDomainRequest||"withCredentials"in c||!/^(http(s)?:)?\/\//.test(n)||(c=new XDomainRequest),"onload"in c?c.onload=c.onerror=i:c.onreadystatechange=function(){c.readyState>3&&i()},c.onprogress=function(n){var t=ya.event;ya.event=n;try{a.progress.call(u,c)}finally{ya.event=t}},u.header=function(n,t){return n=(n+"").toLowerCase(),arguments.length<2?o[n]:(null==t?delete o[n]:o[n]=t+"",u)},u.mimeType=function(n){return arguments.length?(t=null==n?null:n+"",u):t},u.responseType=function(n){return arguments.length?(l=n,u):l},u.response=function(n){return e=n,u},["get","post"].forEach(function(n){u[n]=function(){return u.send.apply(u,[n].concat(za(arguments)))}}),u.send=function(e,r,i){if(2===arguments.length&&"function"==typeof r&&(i=r,r=null),c.open(e,n,!0),null==t||"accept"in o||(o.accept=t+",*/*"),c.setRequestHeader)for(var a in o)c.setRequestHeader(a,o[a]);return null!=t&&c.overrideMimeType&&c.overrideMimeType(t),null!=l&&(c.responseType=l),null!=i&&u.on("error",i).on("load",function(n){i(null,n)}),c.send(null==r?null:r),u},u.abort=function(){return c.abort(),u},ya.rebind(u,a,"on"),null==r?u:u.get(yt(r))}function yt(n){return 1===n.length?function(t,e){n(null==t?e:null)}:n}function Mt(){var n=bt(),t=_t()-n;t>24?(isFinite(t)&&(clearTimeout(po),po=setTimeout(Mt,t)),go=0):(go=1,vo(Mt))}function xt(n,t,e){var r=arguments.length;2>r&&(t=0),3>r&&(e=Date.now()),mo.callback=n,mo.time=e+t}function bt(){var n=Date.now();for(mo=fo;mo;)n>=mo.time&&(mo.flush=mo.callback(n-mo.time)),mo=mo.next;return n}function _t(){for(var n,t=fo,e=1/0;t;)t.flush?t=n?n.next=t.next:fo=t.next:(t.time<e&&(e=t.time),t=(n=t).next);return ho=n,e}function wt(n,t){var e=Math.pow(10,3*Math.abs(8-t));return{scale:t>8?function(n){return n/e}:function(n){return n*e},symbol:n}}function St(n,t){return t-(n?Math.ceil(Math.log(n)/Math.LN10):1)}function Et(n){return n+""}function kt(){}function At(n,t,e){var r=e.s=n+t,i=r-n,u=r-i;e.t=n-u+(t-i)}function Nt(n,t){n&&qo.hasOwnProperty(n.type)&&qo[n.type](n,t)}function qt(n,t,e){var r,i=-1,u=n.length-e;for(t.lineStart();++i<u;)r=n[i],t.point(r[0],r[1]);t.lineEnd()}function Tt(n,t){var e=-1,r=n.length;for(t.polygonStart();++e<r;)qt(n[e],t,1);t.polygonEnd()}function Ct(){function n(n,t){n*=to,t=t*to/2+Ka/4;var e=n-r,a=Math.cos(t),o=Math.sin(t),c=u*o,l=i*a+c*Math.cos(e),s=c*Math.sin(e);Co.add(Math.atan2(s,l)),r=n,i=a,u=o}var t,e,r,i,u;zo.point=function(a,o){zo.point=n,r=(t=a)*to,i=Math.cos(o=(e=o)*to/2+Ka/4),u=Math.sin(o)},zo.lineEnd=function(){n(t,e)}}function zt(n){var t=n[0],e=n[1],r=Math.cos(e);return[r*Math.cos(t),r*Math.sin(t),Math.sin(e)]}function Dt(n,t){return n[0]*t[0]+n[1]*t[1]+n[2]*t[2]}function jt(n,t){return[n[1]*t[2]-n[2]*t[1],n[2]*t[0]-n[0]*t[2],n[0]*t[1]-n[1]*t[0]]}function Lt(n,t){n[0]+=t[0],n[1]+=t[1],n[2]+=t[2]}function Ht(n,t){return[n[0]*t,n[1]*t,n[2]*t]}function Ft(n){var t=Math.sqrt(n[0]*n[0]+n[1]*n[1]+n[2]*n[2]);n[0]/=t,n[1]/=t,n[2]/=t}function Pt(n){return[Math.atan2(n[1],n[0]),V(n[2])]}function Ot(n,t){return Math.abs(n[0]-t[0])<Qa&&Math.abs(n[1]-t[1])<Qa}function Yt(n,t){n*=to;var e=Math.cos(t*=to);Rt(e*Math.cos(n),e*Math.sin(n),Math.sin(t))}function Rt(n,t,e){++Do,Lo+=(n-Lo)/Do,Ho+=(t-Ho)/Do,Fo+=(e-Fo)/Do}function Ut(){function n(n,i){n*=to;var u=Math.cos(i*=to),a=u*Math.cos(n),o=u*Math.sin(n),c=Math.sin(i),l=Math.atan2(Math.sqrt((l=e*c-r*o)*l+(l=r*a-t*c)*l+(l=t*o-e*a)*l),t*a+e*o+r*c);jo+=l,Po+=l*(t+(t=a)),Oo+=l*(e+(e=o)),Yo+=l*(r+(r=c)),Rt(t,e,r)}var t,e,r;Vo.point=function(i,u){i*=to;var a=Math.cos(u*=to);t=a*Math.cos(i),e=a*Math.sin(i),r=Math.sin(u),Vo.point=n,Rt(t,e,r)}}function It(){Vo.point=Yt}function Vt(){function n(n,t){n*=to;var e=Math.cos(t*=to),a=e*Math.cos(n),o=e*Math.sin(n),c=Math.sin(t),l=i*c-u*o,s=u*a-r*c,f=r*o-i*a,h=Math.sqrt(l*l+s*s+f*f),g=r*a+i*o+u*c,p=h&&-I(g)/h,m=Math.atan2(h,g);Ro+=p*l,Uo+=p*s,Io+=p*f,jo+=m,Po+=m*(r+(r=a)),Oo+=m*(i+(i=o)),Yo+=m*(u+(u=c)),Rt(r,i,u)}var t,e,r,i,u;Vo.point=function(a,o){t=a,e=o,Vo.point=n,a*=to;var c=Math.cos(o*=to);r=c*Math.cos(a),i=c*Math.sin(a),u=Math.sin(o),Rt(r,i,u)},Vo.lineEnd=function(){n(t,e),Vo.lineEnd=It,Vo.point=Yt}}function Xt(){return!0}function Zt(n,t,e,r,i){var u=[],a=[];if(n.forEach(function(n){if(!((t=n.length-1)<=0)){var t,e=n[0],r=n[t];if(Ot(e,r)){i.lineStart();for(var o=0;t>o;++o)i.point((e=n[o])[0],e[1]);return i.lineEnd(),void 0}var c={point:e,points:n,other:null,visited:!1,entry:!0,subject:!0},l={point:e,points:[e],other:c,visited:!1,entry:!1,subject:!1};c.other=l,u.push(c),a.push(l),c={point:r,points:[r],other:null,visited:!1,entry:!1,subject:!0},l={point:r,points:[r],other:c,visited:!1,entry:!0,subject:!1},c.other=l,u.push(c),a.push(l)}}),a.sort(t),Bt(u),Bt(a),u.length){if(e)for(var o=1,c=!e(a[0].point),l=a.length;l>o;++o)a[o].entry=c=!c;for(var s,f,h,g=u[0];;){for(s=g;s.visited;)if((s=s.next)===g)return;f=s.points,i.lineStart();do{if(s.visited=s.other.visited=!0,s.entry){if(s.subject)for(var o=0;o<f.length;o++)i.point((h=f[o])[0],h[1]);else r(s.point,s.next.point,1,i);s=s.next}else{if(s.subject){f=s.prev.points;for(var o=f.length;--o>=0;)i.point((h=f[o])[0],h[1])}else r(s.point,s.prev.point,-1,i);s=s.prev}s=s.other,f=s.points}while(!s.visited);i.lineEnd()}}}function Bt(n){if(t=n.length){for(var t,e,r=0,i=n[0];++r<t;)i.next=e=n[r],e.prev=i,i=e;i.next=e=n[0],e.prev=i}}function $t(n,t,e,r){return function(i){function u(t,e){n(t,e)&&i.point(t,e)}function a(n,t){m.point(n,t)}function o(){d.point=a,m.lineStart()}function c(){d.point=u,m.lineEnd()}function l(n,t){y.point(n,t),p.push([n,t])}function s(){y.lineStart(),p=[]}function f(){l(p[0][0],p[0][1]),y.lineEnd();var n,t=y.clean(),e=v.buffer(),r=e.length;if(p.pop(),g.push(p),p=null,r){if(1&t){n=e[0];var u,r=n.length-1,a=-1;for(i.lineStart();++a<r;)i.point((u=n[a])[0],u[1]);return i.lineEnd(),void 0}r>1&&2&t&&e.push(e.pop().concat(e.shift())),h.push(e.filter(Wt))}}var h,g,p,m=t(i),d={point:u,lineStart:o,lineEnd:c,polygonStart:function(){d.point=l,d.lineStart=s,d.lineEnd=f,h=[],g=[],i.polygonStart()},polygonEnd:function(){d.point=u,d.lineStart=o,d.lineEnd=c,h=ya.merge(h),h.length?Zt(h,Gt,null,e,i):r(g)&&(i.lineStart(),e(null,null,1,i),i.lineEnd()),i.polygonEnd(),h=g=null},sphere:function(){i.polygonStart(),i.lineStart(),e(null,null,1,i),i.lineEnd(),i.polygonEnd()}},v=Jt(),y=t(v);return d}}function Wt(n){return n.length>1}function Jt(){var n,t=[];return{lineStart:function(){t.push(n=[])},point:function(t,e){n.push([t,e])},lineEnd:s,buffer:function(){var e=t;return t=[],n=null,e},rejoin:function(){t.length>1&&t.push(t.pop().concat(t.shift()))}}}function Gt(n,t){return((n=n.point)[0]<0?n[1]-Ka/2-Qa:Ka/2-n[1])-((t=t.point)[0]<0?t[1]-Ka/2-Qa:Ka/2-t[1])}function Kt(n,t){var e=n[0],r=n[1],i=[Math.sin(e),-Math.cos(e),0],u=0,a=!1,o=!1,c=0;Co.reset();for(var l=0,s=t.length;s>l;++l){var f=t[l],h=f.length;if(h){for(var g=f[0],p=g[0],m=g[1]/2+Ka/4,d=Math.sin(m),v=Math.cos(m),y=1;;){y===h&&(y=0),n=f[y];var M=n[0],x=n[1]/2+Ka/4,b=Math.sin(x),_=Math.cos(x),w=M-p,S=Math.abs(w)>Ka,E=d*b;if(Co.add(Math.atan2(E*Math.sin(w),v*_+E*Math.cos(w))),Math.abs(x)<Qa&&(o=!0),u+=S?w+(w>=0?2:-2)*Ka:w,S^p>=e^M>=e){var k=jt(zt(g),zt(n));Ft(k);var A=jt(i,k);Ft(A);var N=(S^w>=0?-1:1)*V(A[2]);r>N&&(c+=S^w>=0?1:-1)}if(!y++)break;p=M,d=b,v=_,g=n}Math.abs(u)>Qa&&(a=!0)}}return(!o&&!a&&0>Co||-Qa>u)^1&c}function Qt(n){var t,e=0/0,r=0/0,i=0/0;return{lineStart:function(){n.lineStart(),t=1},point:function(u,a){var o=u>0?Ka:-Ka,c=Math.abs(u-e);Math.abs(c-Ka)<Qa?(n.point(e,r=(r+a)/2>0?Ka/2:-Ka/2),n.point(i,r),n.lineEnd(),n.lineStart(),n.point(o,r),n.point(u,r),t=0):i!==o&&c>=Ka&&(Math.abs(e-i)<Qa&&(e-=i*Qa),Math.abs(u-o)<Qa&&(u-=o*Qa),r=ne(e,r,u,a),n.point(i,r),n.lineEnd(),n.lineStart(),n.point(o,r),t=0),n.point(e=u,r=a),i=o},lineEnd:function(){n.lineEnd(),e=r=0/0},clean:function(){return 2-t}}}function ne(n,t,e,r){var i,u,a=Math.sin(n-e);return Math.abs(a)>Qa?Math.atan((Math.sin(t)*(u=Math.cos(r))*Math.sin(e)-Math.sin(r)*(i=Math.cos(t))*Math.sin(n))/(i*u*a)):(t+r)/2}function te(n,t,e,r){var i;if(null==n)i=e*Ka/2,r.point(-Ka,i),r.point(0,i),r.point(Ka,i),r.point(Ka,0),r.point(Ka,-i),r.point(0,-i),r.point(-Ka,-i),r.point(-Ka,0),r.point(-Ka,i);else if(Math.abs(n[0]-t[0])>Qa){var u=(n[0]<t[0]?1:-1)*Ka;i=e*u/2,r.point(-u,i),r.point(0,i),r.point(u,i)}else r.point(t[0],t[1])}function ee(n){return Kt(Zo,n)}function re(n){function t(n,t){return Math.cos(n)*Math.cos(t)>a}function e(n){var e,u,a,c,s;return{lineStart:function(){c=a=!1,s=1},point:function(f,h){var g,p=[f,h],m=t(f,h),d=o?m?0:i(f,h):m?i(f+(0>f?Ka:-Ka),h):0;if(!e&&(c=a=m)&&n.lineStart(),m!==a&&(g=r(e,p),(Ot(e,g)||Ot(p,g))&&(p[0]+=Qa,p[1]+=Qa,m=t(p[0],p[1]))),m!==a)s=0,m?(n.lineStart(),g=r(p,e),n.point(g[0],g[1])):(g=r(e,p),n.point(g[0],g[1]),n.lineEnd()),e=g;else if(l&&e&&o^m){var v;d&u||!(v=r(p,e,!0))||(s=0,o?(n.lineStart(),n.point(v[0][0],v[0][1]),n.point(v[1][0],v[1][1]),n.lineEnd()):(n.point(v[1][0],v[1][1]),n.lineEnd(),n.lineStart(),n.point(v[0][0],v[0][1])))}!m||e&&Ot(e,p)||n.point(p[0],p[1]),e=p,a=m,u=d},lineEnd:function(){a&&n.lineEnd(),e=null},clean:function(){return s|(c&&a)<<1}}}function r(n,t,e){var r=zt(n),i=zt(t),u=[1,0,0],o=jt(r,i),c=Dt(o,o),l=o[0],s=c-l*l;if(!s)return!e&&n;var f=a*c/s,h=-a*l/s,g=jt(u,o),p=Ht(u,f),m=Ht(o,h);Lt(p,m);var d=g,v=Dt(p,d),y=Dt(d,d),M=v*v-y*(Dt(p,p)-1);if(!(0>M)){var x=Math.sqrt(M),b=Ht(d,(-v-x)/y);if(Lt(b,p),b=Pt(b),!e)return b;var _,w=n[0],S=t[0],E=n[1],k=t[1];w>S&&(_=w,w=S,S=_);var A=S-w,N=Math.abs(A-Ka)<Qa,q=N||Qa>A;if(!N&&E>k&&(_=E,E=k,k=_),q?N?E+k>0^b[1]<(Math.abs(b[0]-w)<Qa?E:k):E<=b[1]&&b[1]<=k:A>Ka^(w<=b[0]&&b[0]<=S)){var T=Ht(d,(-v+x)/y);return Lt(T,p),[b,Pt(T)]}}}function i(t,e){var r=o?n:Ka-n,i=0;return-r>t?i|=1:t>r&&(i|=2),-r>e?i|=4:e>r&&(i|=8),i}function u(n){return Kt(c,n)}var a=Math.cos(n),o=a>0,c=[n,0],l=Math.abs(a)>Qa,s=Ne(n,6*to);return $t(t,e,s,u)}function ie(n,t,e,r){function i(r,i){return Math.abs(r[0]-n)<Qa?i>0?0:3:Math.abs(r[0]-e)<Qa?i>0?2:1:Math.abs(r[1]-t)<Qa?i>0?1:0:i>0?3:2}function u(n,t){return a(n.point,t.point)}function a(n,t){var e=i(n,1),r=i(t,1);return e!==r?e-r:0===e?t[1]-n[1]:1===e?n[0]-t[0]:2===e?n[1]-t[1]:t[0]-n[0]}function o(i,u){var a=u[0]-i[0],o=u[1]-i[1],c=[0,1];return Math.abs(a)<Qa&&Math.abs(o)<Qa?n<=i[0]&&i[0]<=e&&t<=i[1]&&i[1]<=r:ue(n-i[0],a,c)&&ue(i[0]-e,-a,c)&&ue(t-i[1],o,c)&&ue(i[1]-r,-o,c)?(c[1]<1&&(u[0]=i[0]+c[1]*a,u[1]=i[1]+c[1]*o),c[0]>0&&(i[0]+=c[0]*a,i[1]+=c[0]*o),!0):!1}return function(c){function l(u){var a=i(u,-1),o=s([0===a||3===a?n:e,a>1?r:t]);return o}function s(n){for(var t=0,e=M.length,r=n[1],i=0;e>i;++i)for(var u,a=1,o=M[i],c=o.length,l=o[0];c>a;++a)u=o[a],l[1]<=r?u[1]>r&&f(l,u,n)>0&&++t:u[1]<=r&&f(l,u,n)<0&&--t,l=u;return 0!==t}function f(n,t,e){return(t[0]-n[0])*(e[1]-n[1])-(e[0]-n[0])*(t[1]-n[1])}function h(u,o,c,l){var s=0,f=0;if(null==u||(s=i(u,c))!==(f=i(o,c))||a(u,o)<0^c>0){do l.point(0===s||3===s?n:e,s>1?r:t);while((s=(s+c+4)%4)!==f)}else l.point(o[0],o[1])}function g(i,u){return i>=n&&e>=i&&u>=t&&r>=u}function p(n,t){g(n,t)&&c.point(n,t)}function m(){T.point=v,M&&M.push(x=[]),A=!0,k=!1,S=E=0/0}function d(){y&&(v(b,_),w&&k&&q.rejoin(),y.push(q.buffer())),T.point=p,k&&c.lineEnd()}function v(n,t){n=Math.max(-Bo,Math.min(Bo,n)),t=Math.max(-Bo,Math.min(Bo,t));var e=g(n,t);if(M&&x.push([n,t]),A)b=n,_=t,w=e,A=!1,e&&(c.lineStart(),c.point(n,t));else if(e&&k)c.point(n,t);else{var r=[S,E],i=[n,t];o(r,i)?(k||(c.lineStart(),c.point(r[0],r[1])),c.point(i[0],i[1]),e||c.lineEnd()):e&&(c.lineStart(),c.point(n,t))}S=n,E=t,k=e}var y,M,x,b,_,w,S,E,k,A,N=c,q=Jt(),T={point:p,lineStart:m,lineEnd:d,polygonStart:function(){c=q,y=[],M=[]},polygonEnd:function(){c=N,(y=ya.merge(y)).length?(c.polygonStart(),Zt(y,u,l,h,c),c.polygonEnd()):s([n,t])&&(c.polygonStart(),c.lineStart(),h(null,null,1,c),c.lineEnd(),c.polygonEnd()),y=M=x=null}};return T}}function ue(n,t,e){if(Math.abs(t)<Qa)return 0>=n;var r=n/t;if(t>0){if(r>e[1])return!1;r>e[0]&&(e[0]=r)}else{if(r<e[0])return!1;r<e[1]&&(e[1]=r)}return!0}function ae(n,t){function e(e,r){return e=n(e,r),t(e[0],e[1])}return n.invert&&t.invert&&(e.invert=function(e,r){return e=t.invert(e,r),e&&n.invert(e[0],e[1])}),e}function oe(n){var t=0,e=Ka/3,r=be(n),i=r(t,e);return i.parallels=function(n){return arguments.length?r(t=n[0]*Ka/180,e=n[1]*Ka/180):[180*(t/Ka),180*(e/Ka)]},i}function ce(n,t){function e(n,t){var e=Math.sqrt(u-2*i*Math.sin(t))/i;return[e*Math.sin(n*=i),a-e*Math.cos(n)]}var r=Math.sin(n),i=(r+Math.sin(t))/2,u=1+r*(2*i-r),a=Math.sqrt(u)/i;return e.invert=function(n,t){var e=a-t;return[Math.atan2(n,e)/i,V((u-(n*n+e*e)*i*i)/(2*i))]},e}function le(){function n(n,t){Wo+=i*n-r*t,r=n,i=t}var t,e,r,i;nc.point=function(u,a){nc.point=n,t=r=u,e=i=a},nc.lineEnd=function(){n(t,e)}}function se(n,t){Jo>n&&(Jo=n),n>Ko&&(Ko=n),Go>t&&(Go=t),t>Qo&&(Qo=t)}function fe(){function n(n,t){a.push("M",n,",",t,u)}function t(n,t){a.push("M",n,",",t),o.point=e}function e(n,t){a.push("L",n,",",t)}function r(){o.point=n}function i(){a.push("Z")}var u=he(4.5),a=[],o={point:n,lineStart:function(){o.point=t},lineEnd:r,polygonStart:function(){o.lineEnd=i},polygonEnd:function(){o.lineEnd=r,o.point=n},pointRadius:function(n){return u=he(n),o},result:function(){if(a.length){var n=a.join("");return a=[],n}}};return o}function he(n){return"m0,"+n+"a"+n+","+n+" 0 1,1 0,"+-2*n+"a"+n+","+n+" 0 1,1 0,"+2*n+"z"}function ge(n,t){Lo+=n,Ho+=t,++Fo}function pe(){function n(n,r){var i=n-t,u=r-e,a=Math.sqrt(i*i+u*u);Po+=a*(t+n)/2,Oo+=a*(e+r)/2,Yo+=a,ge(t=n,e=r)}var t,e;ec.point=function(r,i){ec.point=n,ge(t=r,e=i)}}function me(){ec.point=ge}function de(){function n(n,t){var e=n-r,u=t-i,a=Math.sqrt(e*e+u*u);Po+=a*(r+n)/2,Oo+=a*(i+t)/2,Yo+=a,a=i*n-r*t,Ro+=a*(r+n),Uo+=a*(i+t),Io+=3*a,ge(r=n,i=t)}var t,e,r,i;ec.point=function(u,a){ec.point=n,ge(t=r=u,e=i=a)},ec.lineEnd=function(){n(t,e)}}function ve(n){function t(t,e){n.moveTo(t,e),n.arc(t,e,a,0,2*Ka)}function e(t,e){n.moveTo(t,e),o.point=r}function r(t,e){n.lineTo(t,e)}function i(){o.point=t}function u(){n.closePath()}var a=4.5,o={point:t,lineStart:function(){o.point=e},lineEnd:i,polygonStart:function(){o.lineEnd=u},polygonEnd:function(){o.lineEnd=i,o.point=t},pointRadius:function(n){return a=n,o},result:s};return o}function ye(n){function t(t){function r(e,r){e=n(e,r),t.point(e[0],e[1])}function i(){M=0/0,S.point=a,t.lineStart()}function a(r,i){var a=zt([r,i]),o=n(r,i);e(M,x,y,b,_,w,M=o[0],x=o[1],y=r,b=a[0],_=a[1],w=a[2],u,t),t.point(M,x)}function o(){S.point=r,t.lineEnd()}function c(){i(),S.point=l,S.lineEnd=s}function l(n,t){a(f=n,h=t),g=M,p=x,m=b,d=_,v=w,S.point=a}function s(){e(M,x,y,b,_,w,g,p,f,m,d,v,u,t),S.lineEnd=o,o()}var f,h,g,p,m,d,v,y,M,x,b,_,w,S={point:r,lineStart:i,lineEnd:o,polygonStart:function(){t.polygonStart(),S.lineStart=c},polygonEnd:function(){t.polygonEnd(),S.lineStart=i}};return S}function e(t,u,a,o,c,l,s,f,h,g,p,m,d,v){var y=s-t,M=f-u,x=y*y+M*M;if(x>4*r&&d--){var b=o+g,_=c+p,w=l+m,S=Math.sqrt(b*b+_*_+w*w),E=Math.asin(w/=S),k=Math.abs(Math.abs(w)-1)<Qa?(a+h)/2:Math.atan2(_,b),A=n(k,E),N=A[0],q=A[1],T=N-t,C=q-u,z=M*T-y*C;(z*z/x>r||Math.abs((y*T+M*C)/x-.5)>.3||i>o*g+c*p+l*m)&&(e(t,u,a,o,c,l,N,q,k,b/=S,_/=S,w,d,v),v.point(N,q),e(N,q,k,b,_,w,s,f,h,g,p,m,d,v))}}var r=.5,i=Math.cos(30*to),u=16;return t.precision=function(n){return arguments.length?(u=(r=n*n)>0&&16,t):Math.sqrt(r)},t}function Me(n){var t=ye(function(t,e){return n([t*eo,e*eo])});return function(n){return n=t(n),{point:function(t,e){n.point(t*to,e*to)},sphere:function(){n.sphere()},lineStart:function(){n.lineStart()},lineEnd:function(){n.lineEnd()},polygonStart:function(){n.polygonStart()},polygonEnd:function(){n.polygonEnd()}}}}function xe(n){return be(function(){return n})()}function be(n){function t(n){return n=o(n[0]*to,n[1]*to),[n[0]*h+c,l-n[1]*h]}function e(n){return n=o.invert((n[0]-c)/h,(l-n[1])/h),n&&[n[0]*eo,n[1]*eo]}function r(){o=ae(a=Se(v,y,M),u);var n=u(m,d);return c=g-n[0]*h,l=p+n[1]*h,i()}function i(){return s&&(s.valid=!1,s=null),t}var u,a,o,c,l,s,f=ye(function(n,t){return n=u(n,t),[n[0]*h+c,l-n[1]*h]}),h=150,g=480,p=250,m=0,d=0,v=0,y=0,M=0,x=Xo,b=mt,_=null,w=null;return t.stream=function(n){return s&&(s.valid=!1),s=_e(a,x(f(b(n)))),s.valid=!0,s},t.clipAngle=function(n){return arguments.length?(x=null==n?(_=n,Xo):re((_=+n)*to),i()):_},t.clipExtent=function(n){return arguments.length?(w=n,b=null==n?mt:ie(n[0][0],n[0][1],n[1][0],n[1][1]),i()):w},t.scale=function(n){return arguments.length?(h=+n,r()):h},t.translate=function(n){return arguments.length?(g=+n[0],p=+n[1],r()):[g,p]},t.center=function(n){return arguments.length?(m=n[0]%360*to,d=n[1]%360*to,r()):[m*eo,d*eo]},t.rotate=function(n){return arguments.length?(v=n[0]%360*to,y=n[1]%360*to,M=n.length>2?n[2]%360*to:0,r()):[v*eo,y*eo,M*eo]},ya.rebind(t,f,"precision"),function(){return u=n.apply(this,arguments),t.invert=u.invert&&e,r()}}function _e(n,t){return{point:function(e,r){r=n(e*to,r*to),e=r[0],t.point(e>Ka?e-2*Ka:-Ka>e?e+2*Ka:e,r[1])},sphere:function(){t.sphere()},lineStart:function(){t.lineStart()},lineEnd:function(){t.lineEnd()},polygonStart:function(){t.polygonStart()},polygonEnd:function(){t.polygonEnd()}}}function we(n,t){return[n,t]}function Se(n,t,e){return n?t||e?ae(ke(n),Ae(t,e)):ke(n):t||e?Ae(t,e):we}function Ee(n){return function(t,e){return t+=n,[t>Ka?t-2*Ka:-Ka>t?t+2*Ka:t,e]}}function ke(n){var t=Ee(n);return t.invert=Ee(-n),t}function Ae(n,t){function e(n,t){var e=Math.cos(t),o=Math.cos(n)*e,c=Math.sin(n)*e,l=Math.sin(t),s=l*r+o*i;return[Math.atan2(c*u-s*a,o*r-l*i),V(s*u+c*a)]}var r=Math.cos(n),i=Math.sin(n),u=Math.cos(t),a=Math.sin(t);return e.invert=function(n,t){var e=Math.cos(t),o=Math.cos(n)*e,c=Math.sin(n)*e,l=Math.sin(t),s=l*u-c*a;return[Math.atan2(c*u+l*a,o*r+s*i),V(s*r-o*i)]},e}function Ne(n,t){var e=Math.cos(n),r=Math.sin(n);return function(i,u,a,o){null!=i?(i=qe(e,i),u=qe(e,u),(a>0?u>i:i>u)&&(i+=2*a*Ka)):(i=n+2*a*Ka,u=n);for(var c,l=a*t,s=i;a>0?s>u:u>s;s-=l)o.point((c=Pt([e,-r*Math.cos(s),-r*Math.sin(s)]))[0],c[1])}}function qe(n,t){var e=zt(t);e[0]-=n,Ft(e);var r=I(-e[1]);return((-e[2]<0?-r:r)+2*Math.PI-Qa)%(2*Math.PI)}function Te(n,t,e){var r=ya.range(n,t-Qa,e).concat(t);return function(n){return r.map(function(t){return[n,t]})}}function Ce(n,t,e){var r=ya.range(n,t-Qa,e).concat(t);return function(n){return r.map(function(t){return[t,n]})}}function ze(n){return n.source}function De(n){return n.target}function je(n,t,e,r){var i=Math.cos(t),u=Math.sin(t),a=Math.cos(r),o=Math.sin(r),c=i*Math.cos(n),l=i*Math.sin(n),s=a*Math.cos(e),f=a*Math.sin(e),h=2*Math.asin(Math.sqrt(B(r-t)+i*a*B(e-n))),g=1/Math.sin(h),p=h?function(n){var t=Math.sin(n*=h)*g,e=Math.sin(h-n)*g,r=e*c+t*s,i=e*l+t*f,a=e*u+t*o;return[Math.atan2(i,r)*eo,Math.atan2(a,Math.sqrt(r*r+i*i))*eo]}:function(){return[n*eo,t*eo]};return p.distance=h,p}function Le(){function n(n,i){var u=Math.sin(i*=to),a=Math.cos(i),o=Math.abs((n*=to)-t),c=Math.cos(o);rc+=Math.atan2(Math.sqrt((o=a*Math.sin(o))*o+(o=r*u-e*a*c)*o),e*u+r*a*c),t=n,e=u,r=a}var t,e,r;ic.point=function(i,u){t=i*to,e=Math.sin(u*=to),r=Math.cos(u),ic.point=n},ic.lineEnd=function(){ic.point=ic.lineEnd=s}}function He(n,t){function e(t,e){var r=Math.cos(t),i=Math.cos(e),u=n(r*i);return[u*i*Math.sin(t),u*Math.sin(e)]}return e.invert=function(n,e){var r=Math.sqrt(n*n+e*e),i=t(r),u=Math.sin(i),a=Math.cos(i);return[Math.atan2(n*u,r*a),Math.asin(r&&e*u/r)]},e}function Fe(n,t){function e(n,t){var e=Math.abs(Math.abs(t)-Ka/2)<Qa?0:a/Math.pow(i(t),u);return[e*Math.sin(u*n),a-e*Math.cos(u*n)]}var r=Math.cos(n),i=function(n){return Math.tan(Ka/4+n/2)},u=n===t?Math.sin(n):Math.log(r/Math.cos(t))/Math.log(i(t)/i(n)),a=r*Math.pow(i(n),u)/u;return u?(e.invert=function(n,t){var e=a-t,r=U(u)*Math.sqrt(n*n+e*e);return[Math.atan2(n,e)/u,2*Math.atan(Math.pow(a/r,1/u))-Ka/2]},e):Oe}function Pe(n,t){function e(n,t){var e=u-t;return[e*Math.sin(i*n),u-e*Math.cos(i*n)]}var r=Math.cos(n),i=n===t?Math.sin(n):(r-Math.cos(t))/(t-n),u=r/i+n;return Math.abs(i)<Qa?we:(e.invert=function(n,t){var e=u-t;return[Math.atan2(n,e)/i,u-U(i)*Math.sqrt(n*n+e*e)]},e)}function Oe(n,t){return[n,Math.log(Math.tan(Ka/4+t/2))]}function Ye(n){var t,e=xe(n),r=e.scale,i=e.translate,u=e.clipExtent;return e.scale=function(){var n=r.apply(e,arguments);return n===e?t?e.clipExtent(null):e:n},e.translate=function(){var n=i.apply(e,arguments);return n===e?t?e.clipExtent(null):e:n},e.clipExtent=function(n){var a=u.apply(e,arguments);if(a===e){if(t=null==n){var o=Ka*r(),c=i();u([[c[0]-o,c[1]-o],[c[0]+o,c[1]+o]])}}else t&&(a=null);return a},e.clipExtent(null)}function Re(n,t){var e=Math.cos(t)*Math.sin(n);return[Math.log((1+e)/(1-e))/2,Math.atan2(Math.tan(t),Math.cos(n))]}function Ue(n){function t(t){function a(){l.push("M",u(n(s),o))}for(var c,l=[],s=[],f=-1,h=t.length,g=pt(e),p=pt(r);++f<h;)i.call(this,c=t[f],f)?s.push([+g.call(this,c,f),+p.call(this,c,f)]):s.length&&(a(),s=[]);return s.length&&a(),l.length?l.join(""):null}var e=Ie,r=Ve,i=Xt,u=Xe,a=u.key,o=.7;return t.x=function(n){return arguments.length?(e=n,t):e},t.y=function(n){return arguments.length?(r=n,t):r},t.defined=function(n){return arguments.length?(i=n,t):i},t.interpolate=function(n){return arguments.length?(a="function"==typeof n?u=n:(u=sc.get(n)||Xe).key,t):a},t.tension=function(n){return arguments.length?(o=n,t):o},t}function Ie(n){return n[0]}function Ve(n){return n[1]}function Xe(n){return n.join("L")}function Ze(n){return Xe(n)+"Z"}function Be(n){for(var t=0,e=n.length,r=n[0],i=[r[0],",",r[1]];++t<e;)i.push("H",(r[0]+(r=n[t])[0])/2,"V",r[1]);return e>1&&i.push("H",r[0]),i.join("")}function $e(n){for(var t=0,e=n.length,r=n[0],i=[r[0],",",r[1]];++t<e;)i.push("V",(r=n[t])[1],"H",r[0]);return i.join("")}function We(n){for(var t=0,e=n.length,r=n[0],i=[r[0],",",r[1]];++t<e;)i.push("H",(r=n[t])[0],"V",r[1]);return i.join("")}function Je(n,t){return n.length<4?Xe(n):n[1]+Qe(n.slice(1,n.length-1),nr(n,t))}function Ge(n,t){return n.length<3?Xe(n):n[0]+Qe((n.push(n[0]),n),nr([n[n.length-2]].concat(n,[n[1]]),t))}function Ke(n,t){return n.length<3?Xe(n):n[0]+Qe(n,nr(n,t))}function Qe(n,t){if(t.length<1||n.length!=t.length&&n.length!=t.length+2)return Xe(n);var e=n.length!=t.length,r="",i=n[0],u=n[1],a=t[0],o=a,c=1;if(e&&(r+="Q"+(u[0]-2*a[0]/3)+","+(u[1]-2*a[1]/3)+","+u[0]+","+u[1],i=n[1],c=2),t.length>1){o=t[1],u=n[c],c++,r+="C"+(i[0]+a[0])+","+(i[1]+a[1])+","+(u[0]-o[0])+","+(u[1]-o[1])+","+u[0]+","+u[1];for(var l=2;l<t.length;l++,c++)u=n[c],o=t[l],r+="S"+(u[0]-o[0])+","+(u[1]-o[1])+","+u[0]+","+u[1]}if(e){var s=n[c];r+="Q"+(u[0]+2*o[0]/3)+","+(u[1]+2*o[1]/3)+","+s[0]+","+s[1]}return r}function nr(n,t){for(var e,r=[],i=(1-t)/2,u=n[0],a=n[1],o=1,c=n.length;++o<c;)e=u,u=a,a=n[o],r.push([i*(a[0]-e[0]),i*(a[1]-e[1])]);return r}function tr(n){if(n.length<3)return Xe(n);var t=1,e=n.length,r=n[0],i=r[0],u=r[1],a=[i,i,i,(r=n[1])[0]],o=[u,u,u,r[1]],c=[i,",",u,"L",ur(gc,a),",",ur(gc,o)];for(n.push(n[e-1]);++t<=e;)r=n[t],a.shift(),a.push(r[0]),o.shift(),o.push(r[1]),ar(c,a,o);return n.pop(),c.push("L",r),c.join("")}function er(n){if(n.length<4)return Xe(n);for(var t,e=[],r=-1,i=n.length,u=[0],a=[0];++r<3;)t=n[r],u.push(t[0]),a.push(t[1]);for(e.push(ur(gc,u)+","+ur(gc,a)),--r;++r<i;)t=n[r],u.shift(),u.push(t[0]),a.shift(),a.push(t[1]),ar(e,u,a);return e.join("")}function rr(n){for(var t,e,r=-1,i=n.length,u=i+4,a=[],o=[];++r<4;)e=n[r%i],a.push(e[0]),o.push(e[1]);for(t=[ur(gc,a),",",ur(gc,o)],--r;++r<u;)e=n[r%i],a.shift(),a.push(e[0]),o.shift(),o.push(e[1]),ar(t,a,o);return t.join("")}function ir(n,t){var e=n.length-1;if(e)for(var r,i,u=n[0][0],a=n[0][1],o=n[e][0]-u,c=n[e][1]-a,l=-1;++l<=e;)r=n[l],i=l/e,r[0]=t*r[0]+(1-t)*(u+i*o),r[1]=t*r[1]+(1-t)*(a+i*c);return tr(n)}function ur(n,t){return n[0]*t[0]+n[1]*t[1]+n[2]*t[2]+n[3]*t[3]
}function ar(n,t,e){n.push("C",ur(fc,t),",",ur(fc,e),",",ur(hc,t),",",ur(hc,e),",",ur(gc,t),",",ur(gc,e))}function or(n,t){return(t[1]-n[1])/(t[0]-n[0])}function cr(n){for(var t=0,e=n.length-1,r=[],i=n[0],u=n[1],a=r[0]=or(i,u);++t<e;)r[t]=(a+(a=or(i=u,u=n[t+1])))/2;return r[t]=a,r}function lr(n){for(var t,e,r,i,u=[],a=cr(n),o=-1,c=n.length-1;++o<c;)t=or(n[o],n[o+1]),Math.abs(t)<1e-6?a[o]=a[o+1]=0:(e=a[o]/t,r=a[o+1]/t,i=e*e+r*r,i>9&&(i=3*t/Math.sqrt(i),a[o]=i*e,a[o+1]=i*r));for(o=-1;++o<=c;)i=(n[Math.min(c,o+1)][0]-n[Math.max(0,o-1)][0])/(6*(1+a[o]*a[o])),u.push([i||0,a[o]*i||0]);return u}function sr(n){return n.length<3?Xe(n):n[0]+Qe(n,lr(n))}function fr(n,t,e,r){var i,u,a,o,c,l,s;return i=r[n],u=i[0],a=i[1],i=r[t],o=i[0],c=i[1],i=r[e],l=i[0],s=i[1],(s-a)*(o-u)-(c-a)*(l-u)>0}function hr(n,t,e){return(e[0]-t[0])*(n[1]-t[1])<(e[1]-t[1])*(n[0]-t[0])}function gr(n,t,e,r){var i=n[0],u=e[0],a=t[0]-i,o=r[0]-u,c=n[1],l=e[1],s=t[1]-c,f=r[1]-l,h=(o*(c-l)-f*(i-u))/(f*a-o*s);return[i+h*a,c+h*s]}function pr(n){var t=n[0],e=n[n.length-1];return!(t[0]-e[0]||t[1]-e[1])}function mr(n,t){var e={list:n.map(function(n,t){return{index:t,x:n[0],y:n[1]}}).sort(function(n,t){return n.y<t.y?-1:n.y>t.y?1:n.x<t.x?-1:n.x>t.x?1:0}),bottomSite:null},r={list:[],leftEnd:null,rightEnd:null,init:function(){r.leftEnd=r.createHalfEdge(null,"l"),r.rightEnd=r.createHalfEdge(null,"l"),r.leftEnd.r=r.rightEnd,r.rightEnd.l=r.leftEnd,r.list.unshift(r.leftEnd,r.rightEnd)},createHalfEdge:function(n,t){return{edge:n,side:t,vertex:null,l:null,r:null}},insert:function(n,t){t.l=n,t.r=n.r,n.r.l=t,n.r=t},leftBound:function(n){var t=r.leftEnd;do t=t.r;while(t!=r.rightEnd&&i.rightOf(t,n));return t=t.l},del:function(n){n.l.r=n.r,n.r.l=n.l,n.edge=null},right:function(n){return n.r},left:function(n){return n.l},leftRegion:function(n){return null==n.edge?e.bottomSite:n.edge.region[n.side]},rightRegion:function(n){return null==n.edge?e.bottomSite:n.edge.region[mc[n.side]]}},i={bisect:function(n,t){var e={region:{l:n,r:t},ep:{l:null,r:null}},r=t.x-n.x,i=t.y-n.y,u=r>0?r:-r,a=i>0?i:-i;return e.c=n.x*r+n.y*i+.5*(r*r+i*i),u>a?(e.a=1,e.b=i/r,e.c/=r):(e.b=1,e.a=r/i,e.c/=i),e},intersect:function(n,t){var e=n.edge,r=t.edge;if(!e||!r||e.region.r==r.region.r)return null;var i=e.a*r.b-e.b*r.a;if(Math.abs(i)<1e-10)return null;var u,a,o=(e.c*r.b-r.c*e.b)/i,c=(r.c*e.a-e.c*r.a)/i,l=e.region.r,s=r.region.r;l.y<s.y||l.y==s.y&&l.x<s.x?(u=n,a=e):(u=t,a=r);var f=o>=a.region.r.x;return f&&"l"===u.side||!f&&"r"===u.side?null:{x:o,y:c}},rightOf:function(n,t){var e=n.edge,r=e.region.r,i=t.x>r.x;if(i&&"l"===n.side)return 1;if(!i&&"r"===n.side)return 0;if(1===e.a){var u=t.y-r.y,a=t.x-r.x,o=0,c=0;if(!i&&e.b<0||i&&e.b>=0?c=o=u>=e.b*a:(c=t.x+t.y*e.b>e.c,e.b<0&&(c=!c),c||(o=1)),!o){var l=r.x-e.region.l.x;c=e.b*(a*a-u*u)<l*u*(1+2*a/l+e.b*e.b),e.b<0&&(c=!c)}}else{var s=e.c-e.a*t.x,f=t.y-s,h=t.x-r.x,g=s-r.y;c=f*f>h*h+g*g}return"l"===n.side?c:!c},endPoint:function(n,e,r){n.ep[e]=r,n.ep[mc[e]]&&t(n)},distance:function(n,t){var e=n.x-t.x,r=n.y-t.y;return Math.sqrt(e*e+r*r)}},u={list:[],insert:function(n,t,e){n.vertex=t,n.ystar=t.y+e;for(var r=0,i=u.list,a=i.length;a>r;r++){var o=i[r];if(!(n.ystar>o.ystar||n.ystar==o.ystar&&t.x>o.vertex.x))break}i.splice(r,0,n)},del:function(n){for(var t=0,e=u.list,r=e.length;r>t&&e[t]!=n;++t);e.splice(t,1)},empty:function(){return 0===u.list.length},nextEvent:function(n){for(var t=0,e=u.list,r=e.length;r>t;++t)if(e[t]==n)return e[t+1];return null},min:function(){var n=u.list[0];return{x:n.vertex.x,y:n.ystar}},extractMin:function(){return u.list.shift()}};r.init(),e.bottomSite=e.list.shift();for(var a,o,c,l,s,f,h,g,p,m,d,v,y,M=e.list.shift();;)if(u.empty()||(a=u.min()),M&&(u.empty()||M.y<a.y||M.y==a.y&&M.x<a.x))o=r.leftBound(M),c=r.right(o),h=r.rightRegion(o),v=i.bisect(h,M),f=r.createHalfEdge(v,"l"),r.insert(o,f),m=i.intersect(o,f),m&&(u.del(o),u.insert(o,m,i.distance(m,M))),o=f,f=r.createHalfEdge(v,"r"),r.insert(o,f),m=i.intersect(f,c),m&&u.insert(f,m,i.distance(m,M)),M=e.list.shift();else{if(u.empty())break;o=u.extractMin(),l=r.left(o),c=r.right(o),s=r.right(c),h=r.leftRegion(o),g=r.rightRegion(c),d=o.vertex,i.endPoint(o.edge,o.side,d),i.endPoint(c.edge,c.side,d),r.del(o),u.del(c),r.del(c),y="l",h.y>g.y&&(p=h,h=g,g=p,y="r"),v=i.bisect(h,g),f=r.createHalfEdge(v,y),r.insert(l,f),i.endPoint(v,mc[y],d),m=i.intersect(l,f),m&&(u.del(l),u.insert(l,m,i.distance(m,h))),m=i.intersect(f,s),m&&u.insert(f,m,i.distance(m,h))}for(o=r.right(r.leftEnd);o!=r.rightEnd;o=r.right(o))t(o.edge)}function dr(n){return n.x}function vr(n){return n.y}function yr(){return{leaf:!0,nodes:[],point:null,x:null,y:null}}function Mr(n,t,e,r,i,u){if(!n(t,e,r,i,u)){var a=.5*(e+i),o=.5*(r+u),c=t.nodes;c[0]&&Mr(n,c[0],e,r,a,o),c[1]&&Mr(n,c[1],a,r,i,o),c[2]&&Mr(n,c[2],e,o,a,u),c[3]&&Mr(n,c[3],a,o,i,u)}}function xr(n,t){n=ya.rgb(n),t=ya.rgb(t);var e=n.r,r=n.g,i=n.b,u=t.r-e,a=t.g-r,o=t.b-i;return function(n){return"#"+ct(Math.round(e+u*n))+ct(Math.round(r+a*n))+ct(Math.round(i+o*n))}}function br(n,t){var e,r={},i={};for(e in n)e in t?r[e]=Sr(n[e],t[e]):i[e]=n[e];for(e in t)e in n||(i[e]=t[e]);return function(n){for(e in r)i[e]=r[e](n);return i}}function _r(n,t){return t-=n=+n,function(e){return n+t*e}}function wr(n,t){var e,r,i,u,a,o=0,c=0,l=[],s=[];for(n+="",t+="",dc.lastIndex=0,r=0;e=dc.exec(t);++r)e.index&&l.push(t.substring(o,c=e.index)),s.push({i:l.length,x:e[0]}),l.push(null),o=dc.lastIndex;for(o<t.length&&l.push(t.substring(o)),r=0,u=s.length;(e=dc.exec(n))&&u>r;++r)if(a=s[r],a.x==e[0]){if(a.i)if(null==l[a.i+1])for(l[a.i-1]+=a.x,l.splice(a.i,1),i=r+1;u>i;++i)s[i].i--;else for(l[a.i-1]+=a.x+l[a.i+1],l.splice(a.i,2),i=r+1;u>i;++i)s[i].i-=2;else if(null==l[a.i+1])l[a.i]=a.x;else for(l[a.i]=a.x+l[a.i+1],l.splice(a.i+1,1),i=r+1;u>i;++i)s[i].i--;s.splice(r,1),u--,r--}else a.x=_r(parseFloat(e[0]),parseFloat(a.x));for(;u>r;)a=s.pop(),null==l[a.i+1]?l[a.i]=a.x:(l[a.i]=a.x+l[a.i+1],l.splice(a.i+1,1)),u--;return 1===l.length?null==l[0]?(a=s[0].x,function(n){return a(n)+""}):function(){return t}:function(n){for(r=0;u>r;++r)l[(a=s[r]).i]=a.x(n);return l.join("")}}function Sr(n,t){for(var e,r=ya.interpolators.length;--r>=0&&!(e=ya.interpolators[r](n,t)););return e}function Er(n,t){var e,r=[],i=[],u=n.length,a=t.length,o=Math.min(n.length,t.length);for(e=0;o>e;++e)r.push(Sr(n[e],t[e]));for(;u>e;++e)i[e]=n[e];for(;a>e;++e)i[e]=t[e];return function(n){for(e=0;o>e;++e)i[e]=r[e](n);return i}}function kr(n){return function(t){return 0>=t?0:t>=1?1:n(t)}}function Ar(n){return function(t){return 1-n(1-t)}}function Nr(n){return function(t){return.5*(.5>t?n(2*t):2-n(2-2*t))}}function qr(n){return n*n}function Tr(n){return n*n*n}function Cr(n){if(0>=n)return 0;if(n>=1)return 1;var t=n*n,e=t*n;return 4*(.5>n?e:3*(n-t)+e-.75)}function zr(n){return function(t){return Math.pow(t,n)}}function Dr(n){return 1-Math.cos(n*Ka/2)}function jr(n){return Math.pow(2,10*(n-1))}function Lr(n){return 1-Math.sqrt(1-n*n)}function Hr(n,t){var e;return arguments.length<2&&(t=.45),arguments.length?e=t/(2*Ka)*Math.asin(1/n):(n=1,e=t/4),function(r){return 1+n*Math.pow(2,10*-r)*Math.sin(2*(r-e)*Ka/t)}}function Fr(n){return n||(n=1.70158),function(t){return t*t*((n+1)*t-n)}}function Pr(n){return 1/2.75>n?7.5625*n*n:2/2.75>n?7.5625*(n-=1.5/2.75)*n+.75:2.5/2.75>n?7.5625*(n-=2.25/2.75)*n+.9375:7.5625*(n-=2.625/2.75)*n+.984375}function Or(n,t){n=ya.hcl(n),t=ya.hcl(t);var e=n.h,r=n.c,i=n.l,u=t.h-e,a=t.c-r,o=t.l-i;return isNaN(a)&&(a=0,r=isNaN(r)?t.c:r),isNaN(u)?(u=0,e=isNaN(e)?t.h:e):u>180?u-=360:-180>u&&(u+=360),function(n){return J(e+u*n,r+a*n,i+o*n)+""}}function Yr(n,t){n=ya.hsl(n),t=ya.hsl(t);var e=n.h,r=n.s,i=n.l,u=t.h-e,a=t.s-r,o=t.l-i;return isNaN(a)&&(a=0,r=isNaN(r)?t.s:r),isNaN(u)?(u=0,e=isNaN(e)?t.h:e):u>180?u-=360:-180>u&&(u+=360),function(n){return R(e+u*n,r+a*n,i+o*n)+""}}function Rr(n,t){n=ya.lab(n),t=ya.lab(t);var e=n.l,r=n.a,i=n.b,u=t.l-e,a=t.a-r,o=t.b-i;return function(n){return Q(e+u*n,r+a*n,i+o*n)+""}}function Ur(n,t){return t-=n,function(e){return Math.round(n+t*e)}}function Ir(n){var t=[n.a,n.b],e=[n.c,n.d],r=Xr(t),i=Vr(t,e),u=Xr(Zr(e,t,-i))||0;t[0]*e[1]<e[0]*t[1]&&(t[0]*=-1,t[1]*=-1,r*=-1,i*=-1),this.rotate=(r?Math.atan2(t[1],t[0]):Math.atan2(-e[0],e[1]))*eo,this.translate=[n.e,n.f],this.scale=[r,u],this.skew=u?Math.atan2(i,u)*eo:0}function Vr(n,t){return n[0]*t[0]+n[1]*t[1]}function Xr(n){var t=Math.sqrt(Vr(n,n));return t&&(n[0]/=t,n[1]/=t),t}function Zr(n,t,e){return n[0]+=e*t[0],n[1]+=e*t[1],n}function Br(n,t){var e,r=[],i=[],u=ya.transform(n),a=ya.transform(t),o=u.translate,c=a.translate,l=u.rotate,s=a.rotate,f=u.skew,h=a.skew,g=u.scale,p=a.scale;return o[0]!=c[0]||o[1]!=c[1]?(r.push("translate(",null,",",null,")"),i.push({i:1,x:_r(o[0],c[0])},{i:3,x:_r(o[1],c[1])})):c[0]||c[1]?r.push("translate("+c+")"):r.push(""),l!=s?(l-s>180?s+=360:s-l>180&&(l+=360),i.push({i:r.push(r.pop()+"rotate(",null,")")-2,x:_r(l,s)})):s&&r.push(r.pop()+"rotate("+s+")"),f!=h?i.push({i:r.push(r.pop()+"skewX(",null,")")-2,x:_r(f,h)}):h&&r.push(r.pop()+"skewX("+h+")"),g[0]!=p[0]||g[1]!=p[1]?(e=r.push(r.pop()+"scale(",null,",",null,")"),i.push({i:e-4,x:_r(g[0],p[0])},{i:e-2,x:_r(g[1],p[1])})):(1!=p[0]||1!=p[1])&&r.push(r.pop()+"scale("+p+")"),e=i.length,function(n){for(var t,u=-1;++u<e;)r[(t=i[u]).i]=t.x(n);return r.join("")}}function $r(n,t){return t=t-(n=+n)?1/(t-n):0,function(e){return(e-n)*t}}function Wr(n,t){return t=t-(n=+n)?1/(t-n):0,function(e){return Math.max(0,Math.min(1,(e-n)*t))}}function Jr(n){for(var t=n.source,e=n.target,r=Kr(t,e),i=[t];t!==r;)t=t.parent,i.push(t);for(var u=i.length;e!==r;)i.splice(u,0,e),e=e.parent;return i}function Gr(n){for(var t=[],e=n.parent;null!=e;)t.push(n),n=e,e=e.parent;return t.push(n),t}function Kr(n,t){if(n===t)return n;for(var e=Gr(n),r=Gr(t),i=e.pop(),u=r.pop(),a=null;i===u;)a=i,i=e.pop(),u=r.pop();return a}function Qr(n){n.fixed|=2}function ni(n){n.fixed&=-7}function ti(n){n.fixed|=4,n.px=n.x,n.py=n.y}function ei(n){n.fixed&=-5}function ri(n,t,e){var r=0,i=0;if(n.charge=0,!n.leaf)for(var u,a=n.nodes,o=a.length,c=-1;++c<o;)u=a[c],null!=u&&(ri(u,t,e),n.charge+=u.charge,r+=u.charge*u.cx,i+=u.charge*u.cy);if(n.point){n.leaf||(n.point.x+=Math.random()-.5,n.point.y+=Math.random()-.5);var l=t*e[n.point.index];n.charge+=n.pointCharge=l,r+=l*n.point.x,i+=l*n.point.y}n.cx=r/n.charge,n.cy=i/n.charge}function ii(n,t){return ya.rebind(n,t,"sort","children","value"),n.nodes=n,n.links=ci,n}function ui(n){return n.children}function ai(n){return n.value}function oi(n,t){return t.value-n.value}function ci(n){return ya.merge(n.map(function(n){return(n.children||[]).map(function(t){return{source:n,target:t}})}))}function li(n){return n.x}function si(n){return n.y}function fi(n,t,e){n.y0=t,n.y=e}function hi(n){return ya.range(n.length)}function gi(n){for(var t=-1,e=n[0].length,r=[];++t<e;)r[t]=0;return r}function pi(n){for(var t,e=1,r=0,i=n[0][1],u=n.length;u>e;++e)(t=n[e][1])>i&&(r=e,i=t);return r}function mi(n){return n.reduce(di,0)}function di(n,t){return n+t[1]}function vi(n,t){return yi(n,Math.ceil(Math.log(t.length)/Math.LN2+1))}function yi(n,t){for(var e=-1,r=+n[0],i=(n[1]-r)/t,u=[];++e<=t;)u[e]=i*e+r;return u}function Mi(n){return[ya.min(n),ya.max(n)]}function xi(n,t){return n.parent==t.parent?1:2}function bi(n){var t=n.children;return t&&t.length?t[0]:n._tree.thread}function _i(n){var t,e=n.children;return e&&(t=e.length)?e[t-1]:n._tree.thread}function wi(n,t){var e=n.children;if(e&&(i=e.length))for(var r,i,u=-1;++u<i;)t(r=wi(e[u],t),n)>0&&(n=r);return n}function Si(n,t){return n.x-t.x}function Ei(n,t){return t.x-n.x}function ki(n,t){return n.depth-t.depth}function Ai(n,t){function e(n,r){var i=n.children;if(i&&(a=i.length))for(var u,a,o=null,c=-1;++c<a;)u=i[c],e(u,o),o=u;t(n,r)}e(n,null)}function Ni(n){for(var t,e=0,r=0,i=n.children,u=i.length;--u>=0;)t=i[u]._tree,t.prelim+=e,t.mod+=e,e+=t.shift+(r+=t.change)}function qi(n,t,e){n=n._tree,t=t._tree;var r=e/(t.number-n.number);n.change+=r,t.change-=r,t.shift+=e,t.prelim+=e,t.mod+=e}function Ti(n,t,e){return n._tree.ancestor.parent==t.parent?n._tree.ancestor:e}function Ci(n,t){return n.value-t.value}function zi(n,t){var e=n._pack_next;n._pack_next=t,t._pack_prev=n,t._pack_next=e,e._pack_prev=t}function Di(n,t){n._pack_next=t,t._pack_prev=n}function ji(n,t){var e=t.x-n.x,r=t.y-n.y,i=n.r+t.r;return.999*i*i>e*e+r*r}function Li(n){function t(n){s=Math.min(n.x-n.r,s),f=Math.max(n.x+n.r,f),h=Math.min(n.y-n.r,h),g=Math.max(n.y+n.r,g)}if((e=n.children)&&(l=e.length)){var e,r,i,u,a,o,c,l,s=1/0,f=-1/0,h=1/0,g=-1/0;if(e.forEach(Hi),r=e[0],r.x=-r.r,r.y=0,t(r),l>1&&(i=e[1],i.x=i.r,i.y=0,t(i),l>2))for(u=e[2],Oi(r,i,u),t(u),zi(r,u),r._pack_prev=u,zi(u,i),i=r._pack_next,a=3;l>a;a++){Oi(r,i,u=e[a]);var p=0,m=1,d=1;for(o=i._pack_next;o!==i;o=o._pack_next,m++)if(ji(o,u)){p=1;break}if(1==p)for(c=r._pack_prev;c!==o._pack_prev&&!ji(c,u);c=c._pack_prev,d++);p?(d>m||m==d&&i.r<r.r?Di(r,i=o):Di(r=c,i),a--):(zi(r,u),i=u,t(u))}var v=(s+f)/2,y=(h+g)/2,M=0;for(a=0;l>a;a++)u=e[a],u.x-=v,u.y-=y,M=Math.max(M,u.r+Math.sqrt(u.x*u.x+u.y*u.y));n.r=M,e.forEach(Fi)}}function Hi(n){n._pack_next=n._pack_prev=n}function Fi(n){delete n._pack_next,delete n._pack_prev}function Pi(n,t,e,r){var i=n.children;if(n.x=t+=r*n.x,n.y=e+=r*n.y,n.r*=r,i)for(var u=-1,a=i.length;++u<a;)Pi(i[u],t,e,r)}function Oi(n,t,e){var r=n.r+e.r,i=t.x-n.x,u=t.y-n.y;if(r&&(i||u)){var a=t.r+e.r,o=i*i+u*u;a*=a,r*=r;var c=.5+(r-a)/(2*o),l=Math.sqrt(Math.max(0,2*a*(r+o)-(r-=o)*r-a*a))/(2*o);e.x=n.x+c*i+l*u,e.y=n.y+c*u-l*i}else e.x=n.x+r,e.y=n.y}function Yi(n){return 1+ya.max(n,function(n){return n.y})}function Ri(n){return n.reduce(function(n,t){return n+t.x},0)/n.length}function Ui(n){var t=n.children;return t&&t.length?Ui(t[0]):n}function Ii(n){var t,e=n.children;return e&&(t=e.length)?Ii(e[t-1]):n}function Vi(n){return{x:n.x,y:n.y,dx:n.dx,dy:n.dy}}function Xi(n,t){var e=n.x+t[3],r=n.y+t[0],i=n.dx-t[1]-t[3],u=n.dy-t[0]-t[2];return 0>i&&(e+=i/2,i=0),0>u&&(r+=u/2,u=0),{x:e,y:r,dx:i,dy:u}}function Zi(n){var t=n[0],e=n[n.length-1];return e>t?[t,e]:[e,t]}function Bi(n){return n.rangeExtent?n.rangeExtent():Zi(n.range())}function $i(n,t,e,r){var i=e(n[0],n[1]),u=r(t[0],t[1]);return function(n){return u(i(n))}}function Wi(n,t){var e,r=0,i=n.length-1,u=n[r],a=n[i];return u>a&&(e=r,r=i,i=e,e=u,u=a,a=e),n[r]=t.floor(u),n[i]=t.ceil(a),n}function Ji(n){return n?{floor:function(t){return Math.floor(t/n)*n},ceil:function(t){return Math.ceil(t/n)*n}}:kc}function Gi(n,t,e,r){var i=[],u=[],a=0,o=Math.min(n.length,t.length)-1;for(n[o]<n[0]&&(n=n.slice().reverse(),t=t.slice().reverse());++a<=o;)i.push(e(n[a-1],n[a])),u.push(r(t[a-1],t[a]));return function(t){var e=ya.bisect(n,t,1,o)-1;return u[e](i[e](t))}}function Ki(n,t,e,r){function i(){var i=Math.min(n.length,t.length)>2?Gi:$i,c=r?Wr:$r;return a=i(n,t,c,e),o=i(t,n,c,Sr),u}function u(n){return a(n)}var a,o;return u.invert=function(n){return o(n)},u.domain=function(t){return arguments.length?(n=t.map(Number),i()):n},u.range=function(n){return arguments.length?(t=n,i()):t},u.rangeRound=function(n){return u.range(n).interpolate(Ur)},u.clamp=function(n){return arguments.length?(r=n,i()):r},u.interpolate=function(n){return arguments.length?(e=n,i()):e},u.ticks=function(t){return ru(n,t)},u.tickFormat=function(t,e){return iu(n,t,e)},u.nice=function(t){return nu(n,t),i()},u.copy=function(){return Ki(n,t,e,r)},i()}function Qi(n,t){return ya.rebind(n,t,"range","rangeRound","interpolate","clamp")}function nu(n,t){return Wi(n,Ji(t?eu(n,t)[2]:tu(n)))}function tu(n){var t=Zi(n),e=t[1]-t[0];return Math.pow(10,Math.round(Math.log(e)/Math.LN10)-1)}function eu(n,t){var e=Zi(n),r=e[1]-e[0],i=Math.pow(10,Math.floor(Math.log(r/t)/Math.LN10)),u=t/r*i;return.15>=u?i*=10:.35>=u?i*=5:.75>=u&&(i*=2),e[0]=Math.ceil(e[0]/i)*i,e[1]=Math.floor(e[1]/i)*i+.5*i,e[2]=i,e}function ru(n,t){return ya.range.apply(ya,eu(n,t))}function iu(n,t,e){var r=-Math.floor(Math.log(eu(n,t)[2])/Math.LN10+.01);return ya.format(e?e.replace(wo,function(n,t,e,i,u,a,o,c,l,s){return[t,e,i,u,a,o,c,l||"."+(r-2*("%"===s)),s].join("")}):",."+r+"f")}function uu(n,t,e,r){function i(n){return(e?Math.log(0>n?0:n):-Math.log(n>0?0:-n))/Math.log(t)}function u(n){return e?Math.pow(t,n):-Math.pow(t,-n)}function a(t){return n(i(t))}return a.invert=function(t){return u(n.invert(t))},a.domain=function(t){return arguments.length?(e=t[0]>=0,n.domain((r=t.map(Number)).map(i)),a):r},a.base=function(e){return arguments.length?(t=+e,n.domain(r.map(i)),a):t},a.nice=function(){var t=Wi(r.map(i),e?Math:Nc);return n.domain(t),r=t.map(u),a},a.ticks=function(){var n=Zi(r),a=[],o=n[0],c=n[1],l=Math.floor(i(o)),s=Math.ceil(i(c)),f=t%1?2:t;if(isFinite(s-l)){if(e){for(;s>l;l++)for(var h=1;f>h;h++)a.push(u(l)*h);a.push(u(l))}else for(a.push(u(l));l++<s;)for(var h=f-1;h>0;h--)a.push(u(l)*h);for(l=0;a[l]<o;l++);for(s=a.length;a[s-1]>c;s--);a=a.slice(l,s)}return a},a.tickFormat=function(n,t){if(!arguments.length)return Ac;arguments.length<2?t=Ac:"function"!=typeof t&&(t=ya.format(t));var r,o=Math.max(.1,n/a.ticks().length),c=e?(r=1e-12,Math.ceil):(r=-1e-12,Math.floor);return function(n){return n/u(c(i(n)+r))<=o?t(n):""}},a.copy=function(){return uu(n.copy(),t,e,r)},Qi(a,n)}function au(n,t,e){function r(t){return n(i(t))}var i=ou(t),u=ou(1/t);return r.invert=function(t){return u(n.invert(t))},r.domain=function(t){return arguments.length?(n.domain((e=t.map(Number)).map(i)),r):e},r.ticks=function(n){return ru(e,n)},r.tickFormat=function(n,t){return iu(e,n,t)},r.nice=function(n){return r.domain(nu(e,n))},r.exponent=function(a){return arguments.length?(i=ou(t=a),u=ou(1/t),n.domain(e.map(i)),r):t},r.copy=function(){return au(n.copy(),t,e)},Qi(r,n)}function ou(n){return function(t){return 0>t?-Math.pow(-t,n):Math.pow(t,n)}}function cu(n,t){function e(t){return a[((u.get(t)||u.set(t,n.push(t)))-1)%a.length]}function r(t,e){return ya.range(n.length).map(function(n){return t+e*n})}var u,a,o;return e.domain=function(r){if(!arguments.length)return n;n=[],u=new i;for(var a,o=-1,c=r.length;++o<c;)u.has(a=r[o])||u.set(a,n.push(a));return e[t.t].apply(e,t.a)},e.range=function(n){return arguments.length?(a=n,o=0,t={t:"range",a:arguments},e):a},e.rangePoints=function(i,u){arguments.length<2&&(u=0);var c=i[0],l=i[1],s=(l-c)/(Math.max(1,n.length-1)+u);return a=r(n.length<2?(c+l)/2:c+s*u/2,s),o=0,t={t:"rangePoints",a:arguments},e},e.rangeBands=function(i,u,c){arguments.length<2&&(u=0),arguments.length<3&&(c=u);var l=i[1]<i[0],s=i[l-0],f=i[1-l],h=(f-s)/(n.length-u+2*c);return a=r(s+h*c,h),l&&a.reverse(),o=h*(1-u),t={t:"rangeBands",a:arguments},e},e.rangeRoundBands=function(i,u,c){arguments.length<2&&(u=0),arguments.length<3&&(c=u);var l=i[1]<i[0],s=i[l-0],f=i[1-l],h=Math.floor((f-s)/(n.length-u+2*c)),g=f-s-(n.length-u)*h;return a=r(s+Math.round(g/2),h),l&&a.reverse(),o=Math.round(h*(1-u)),t={t:"rangeRoundBands",a:arguments},e},e.rangeBand=function(){return o},e.rangeExtent=function(){return Zi(t.a[0])},e.copy=function(){return cu(n,t)},e.domain(n)}function lu(n,t){function e(){var e=0,u=t.length;for(i=[];++e<u;)i[e-1]=ya.quantile(n,e/u);return r}function r(n){return isNaN(n=+n)?void 0:t[ya.bisect(i,n)]}var i;return r.domain=function(t){return arguments.length?(n=t.filter(function(n){return!isNaN(n)}).sort(ya.ascending),e()):n},r.range=function(n){return arguments.length?(t=n,e()):t},r.quantiles=function(){return i},r.invertExtent=function(e){return e=t.indexOf(e),0>e?[0/0,0/0]:[e>0?i[e-1]:n[0],e<i.length?i[e]:n[n.length-1]]},r.copy=function(){return lu(n,t)},e()}function su(n,t,e){function r(t){return e[Math.max(0,Math.min(a,Math.floor(u*(t-n))))]}function i(){return u=e.length/(t-n),a=e.length-1,r}var u,a;return r.domain=function(e){return arguments.length?(n=+e[0],t=+e[e.length-1],i()):[n,t]},r.range=function(n){return arguments.length?(e=n,i()):e},r.invertExtent=function(t){return t=e.indexOf(t),t=0>t?0/0:t/u+n,[t,t+1/u]},r.copy=function(){return su(n,t,e)},i()}function fu(n,t){function e(e){return e>=e?t[ya.bisect(n,e)]:void 0}return e.domain=function(t){return arguments.length?(n=t,e):n},e.range=function(n){return arguments.length?(t=n,e):t},e.invertExtent=function(e){return e=t.indexOf(e),[n[e-1],n[e]]},e.copy=function(){return fu(n,t)},e}function hu(n){function t(n){return+n}return t.invert=t,t.domain=t.range=function(e){return arguments.length?(n=e.map(t),t):n},t.ticks=function(t){return ru(n,t)},t.tickFormat=function(t,e){return iu(n,t,e)},t.copy=function(){return hu(n)},t}function gu(n){return n.innerRadius}function pu(n){return n.outerRadius}function mu(n){return n.startAngle}function du(n){return n.endAngle}function vu(n){for(var t,e,r,i=-1,u=n.length;++i<u;)t=n[i],e=t[0],r=t[1]+Dc,t[0]=e*Math.cos(r),t[1]=e*Math.sin(r);return n}function yu(n){function t(t){function c(){m.push("M",o(n(v),f),s,l(n(d.reverse()),f),"Z")}for(var h,g,p,m=[],d=[],v=[],y=-1,M=t.length,x=pt(e),b=pt(i),_=e===r?function(){return g}:pt(r),w=i===u?function(){return p}:pt(u);++y<M;)a.call(this,h=t[y],y)?(d.push([g=+x.call(this,h,y),p=+b.call(this,h,y)]),v.push([+_.call(this,h,y),+w.call(this,h,y)])):d.length&&(c(),d=[],v=[]);return d.length&&c(),m.length?m.join(""):null}var e=Ie,r=Ie,i=0,u=Ve,a=Xt,o=Xe,c=o.key,l=o,s="L",f=.7;return t.x=function(n){return arguments.length?(e=r=n,t):r},t.x0=function(n){return arguments.length?(e=n,t):e},t.x1=function(n){return arguments.length?(r=n,t):r},t.y=function(n){return arguments.length?(i=u=n,t):u},t.y0=function(n){return arguments.length?(i=n,t):i},t.y1=function(n){return arguments.length?(u=n,t):u},t.defined=function(n){return arguments.length?(a=n,t):a},t.interpolate=function(n){return arguments.length?(c="function"==typeof n?o=n:(o=sc.get(n)||Xe).key,l=o.reverse||o,s=o.closed?"M":"L",t):c},t.tension=function(n){return arguments.length?(f=n,t):f},t}function Mu(n){return n.radius}function xu(n){return[n.x,n.y]}function bu(n){return function(){var t=n.apply(this,arguments),e=t[0],r=t[1]+Dc;return[e*Math.cos(r),e*Math.sin(r)]}}function _u(){return 64}function wu(){return"circle"}function Su(n){var t=Math.sqrt(n/Ka);return"M0,"+t+"A"+t+","+t+" 0 1,1 0,"+-t+"A"+t+","+t+" 0 1,1 0,"+t+"Z"}function Eu(n,t){return La(n,Yc),n.id=t,n}function ku(n,t,e,r){var i=n.id;return T(n,"function"==typeof e?function(n,u,a){n.__transition__[i].tween.set(t,r(e.call(n,n.__data__,u,a)))}:(e=r(e),function(n){n.__transition__[i].tween.set(t,e)}))}function Au(n){return null==n&&(n=""),function(){this.textContent=n}}function Nu(n,t,e,r){var u=n.__transition__||(n.__transition__={active:0,count:0}),a=u[e];if(!a){var o=r.time;a=u[e]={tween:new i,time:o,ease:r.ease,delay:r.delay,duration:r.duration},++u.count,ya.timer(function(r){function i(r){return u.active>e?l():(u.active=e,a.event&&a.event.start.call(n,s,t),a.tween.forEach(function(e,r){(r=r.call(n,s,t))&&p.push(r)}),c(r)?1:(xt(c,0,o),void 0))}function c(r){if(u.active!==e)return l();for(var i=(r-h)/g,o=f(i),c=p.length;c>0;)p[--c].call(n,o);return i>=1?(l(),a.event&&a.event.end.call(n,s,t),1):void 0}function l(){return--u.count?delete u[e]:delete n.__transition__,1}var s=n.__data__,f=a.ease,h=a.delay,g=a.duration,p=[];return r>=h?i(r):(xt(i,h,o),void 0)},0,o)}}function qu(n,t){n.attr("transform",function(n){return"translate("+t(n)+",0)"})}function Tu(n,t){n.attr("transform",function(n){return"translate(0,"+t(n)+")"})}function Cu(n,t,e){if(r=[],e&&t.length>1){for(var r,i,u,a=Zi(n.domain()),o=-1,c=t.length,l=(t[1]-t[0])/++e;++o<c;)for(i=e;--i>0;)(u=+t[o]-i*l)>=a[0]&&r.push(u);for(--o,i=0;++i<e&&(u=+t[o]+i*l)<a[1];)r.push(u)}return r}function zu(){this._=new Date(arguments.length>1?Date.UTC.apply(this,arguments):arguments[0])}function Du(n,t,e){function r(t){var e=n(t),r=u(e,1);return r-t>t-e?e:r}function i(e){return t(e=n(new Zc(e-1)),1),e}function u(n,e){return t(n=new Zc(+n),e),n}function a(n,r,u){var a=i(n),o=[];if(u>1)for(;r>a;)e(a)%u||o.push(new Date(+a)),t(a,1);else for(;r>a;)o.push(new Date(+a)),t(a,1);return o}function o(n,t,e){try{Zc=zu;var r=new zu;return r._=n,a(r,t,e)}finally{Zc=Date}}n.floor=n,n.round=r,n.ceil=i,n.offset=u,n.range=a;var c=n.utc=ju(n);return c.floor=c,c.round=ju(r),c.ceil=ju(i),c.offset=ju(u),c.range=o,n}function ju(n){return function(t,e){try{Zc=zu;var r=new zu;return r._=t,n(r,e)._}finally{Zc=Date}}}function Lu(n,t,e,r){for(var i,u,a=0,o=t.length,c=e.length;o>a;){if(r>=c)return-1;if(i=t.charCodeAt(a++),37===i){if(u=gl[t.charAt(a++)],!u||(r=u(n,e,r))<0)return-1}else if(i!=e.charCodeAt(r++))return-1}return r}function Hu(n){return new RegExp("^(?:"+n.map(ya.requote).join("|")+")","i")}function Fu(n){for(var t=new i,e=-1,r=n.length;++e<r;)t.set(n[e].toLowerCase(),e);return t}function Pu(n,t,e){var r=0>n?"-":"",i=(r?-n:n)+"",u=i.length;return r+(e>u?new Array(e-u+1).join(t)+i:i)}function Ou(n,t,e){il.lastIndex=0;var r=il.exec(t.substring(e));return r?(n.w=ul.get(r[0].toLowerCase()),e+r[0].length):-1}function Yu(n,t,e){el.lastIndex=0;var r=el.exec(t.substring(e));return r?(n.w=rl.get(r[0].toLowerCase()),e+r[0].length):-1}function Ru(n,t,e){pl.lastIndex=0;var r=pl.exec(t.substring(e,e+1));return r?(n.w=+r[0],e+r[0].length):-1}function Uu(n,t,e){pl.lastIndex=0;var r=pl.exec(t.substring(e));return r?(n.U=+r[0],e+r[0].length):-1}function Iu(n,t,e){pl.lastIndex=0;var r=pl.exec(t.substring(e));return r?(n.W=+r[0],e+r[0].length):-1}function Vu(n,t,e){cl.lastIndex=0;var r=cl.exec(t.substring(e));return r?(n.m=ll.get(r[0].toLowerCase()),e+r[0].length):-1}function Xu(n,t,e){al.lastIndex=0;var r=al.exec(t.substring(e));return r?(n.m=ol.get(r[0].toLowerCase()),e+r[0].length):-1}function Zu(n,t,e){return Lu(n,hl.c.toString(),t,e)}function Bu(n,t,e){return Lu(n,hl.x.toString(),t,e)}function $u(n,t,e){return Lu(n,hl.X.toString(),t,e)}function Wu(n,t,e){pl.lastIndex=0;var r=pl.exec(t.substring(e,e+4));return r?(n.y=+r[0],e+r[0].length):-1}function Ju(n,t,e){pl.lastIndex=0;var r=pl.exec(t.substring(e,e+2));return r?(n.y=Gu(+r[0]),e+r[0].length):-1}function Gu(n){return n+(n>68?1900:2e3)}function Ku(n,t,e){pl.lastIndex=0;var r=pl.exec(t.substring(e,e+2));return r?(n.m=r[0]-1,e+r[0].length):-1}function Qu(n,t,e){pl.lastIndex=0;var r=pl.exec(t.substring(e,e+2));return r?(n.d=+r[0],e+r[0].length):-1}function na(n,t,e){pl.lastIndex=0;var r=pl.exec(t.substring(e,e+3));return r?(n.j=+r[0],e+r[0].length):-1}function ta(n,t,e){pl.lastIndex=0;var r=pl.exec(t.substring(e,e+2));return r?(n.H=+r[0],e+r[0].length):-1}function ea(n,t,e){pl.lastIndex=0;var r=pl.exec(t.substring(e,e+2));return r?(n.M=+r[0],e+r[0].length):-1}function ra(n,t,e){pl.lastIndex=0;var r=pl.exec(t.substring(e,e+2));return r?(n.S=+r[0],e+r[0].length):-1}function ia(n,t,e){pl.lastIndex=0;var r=pl.exec(t.substring(e,e+3));return r?(n.L=+r[0],e+r[0].length):-1}function ua(n,t,e){var r=ml.get(t.substring(e,e+=2).toLowerCase());return null==r?-1:(n.p=r,e)}function aa(n){var t=n.getTimezoneOffset(),e=t>0?"-":"+",r=~~(Math.abs(t)/60),i=Math.abs(t)%60;return e+Pu(r,"0",2)+Pu(i,"0",2)}function oa(n,t,e){sl.lastIndex=0;var r=sl.exec(t.substring(e,e+1));return r?e+r[0].length:-1}function ca(n){return n.toISOString()}function la(n,t,e){function r(t){return n(t)}return r.invert=function(t){return sa(n.invert(t))},r.domain=function(t){return arguments.length?(n.domain(t),r):n.domain().map(sa)},r.nice=function(n){return r.domain(Wi(r.domain(),n))},r.ticks=function(e,i){var u=Zi(r.domain());if("function"!=typeof e){var a=u[1]-u[0],o=a/e,c=ya.bisect(vl,o);if(c==vl.length)return t.year(u,e);if(!c)return n.ticks(e).map(sa);o/vl[c-1]<vl[c]/o&&--c,e=t[c],i=e[1],e=e[0].range}return e(u[0],new Date(+u[1]+1),i)},r.tickFormat=function(){return e},r.copy=function(){return la(n.copy(),t,e)},Qi(r,n)}function sa(n){return new Date(n)}function fa(n){return function(t){for(var e=n.length-1,r=n[e];!r[1](t);)r=n[--e];return r[0](t)}}function ha(n){var t=new Date(n,0,1);return t.setFullYear(n),t}function ga(n){var t=n.getFullYear(),e=ha(t),r=ha(t+1);return t+(n-e)/(r-e)}function pa(n){var t=new Date(Date.UTC(n,0,1));return t.setUTCFullYear(n),t}function ma(n){var t=n.getUTCFullYear(),e=pa(t),r=pa(t+1);return t+(n-e)/(r-e)}function da(n){return JSON.parse(n.responseText)}function va(n){var t=Ma.createRange();return t.selectNode(Ma.body),t.createContextualFragment(n.responseText)}var ya={version:"3.2.8"};Date.now||(Date.now=function(){return+new Date});var Ma=document,xa=Ma.documentElement,ba=window;try{Ma.createElement("div").style.setProperty("opacity",0,"")}catch(_a){var wa=ba.Element.prototype,Sa=wa.setAttribute,Ea=wa.setAttributeNS,ka=ba.CSSStyleDeclaration.prototype,Aa=ka.setProperty;wa.setAttribute=function(n,t){Sa.call(this,n,t+"")},wa.setAttributeNS=function(n,t,e){Ea.call(this,n,t,e+"")},ka.setProperty=function(n,t,e){Aa.call(this,n,t+"",e)}}ya.ascending=function(n,t){return t>n?-1:n>t?1:n>=t?0:0/0},ya.descending=function(n,t){return n>t?-1:t>n?1:t>=n?0:0/0},ya.min=function(n,t){var e,r,i=-1,u=n.length;if(1===arguments.length){for(;++i<u&&!(null!=(e=n[i])&&e>=e);)e=void 0;for(;++i<u;)null!=(r=n[i])&&e>r&&(e=r)}else{for(;++i<u&&!(null!=(e=t.call(n,n[i],i))&&e>=e);)e=void 0;for(;++i<u;)null!=(r=t.call(n,n[i],i))&&e>r&&(e=r)}return e},ya.max=function(n,t){var e,r,i=-1,u=n.length;if(1===arguments.length){for(;++i<u&&!(null!=(e=n[i])&&e>=e);)e=void 0;for(;++i<u;)null!=(r=n[i])&&r>e&&(e=r)}else{for(;++i<u&&!(null!=(e=t.call(n,n[i],i))&&e>=e);)e=void 0;for(;++i<u;)null!=(r=t.call(n,n[i],i))&&r>e&&(e=r)}return e},ya.extent=function(n,t){var e,r,i,u=-1,a=n.length;if(1===arguments.length){for(;++u<a&&!(null!=(e=i=n[u])&&e>=e);)e=i=void 0;for(;++u<a;)null!=(r=n[u])&&(e>r&&(e=r),r>i&&(i=r))}else{for(;++u<a&&!(null!=(e=i=t.call(n,n[u],u))&&e>=e);)e=void 0;for(;++u<a;)null!=(r=t.call(n,n[u],u))&&(e>r&&(e=r),r>i&&(i=r))}return[e,i]},ya.sum=function(n,t){var e,r=0,i=n.length,u=-1;if(1===arguments.length)for(;++u<i;)isNaN(e=+n[u])||(r+=e);else for(;++u<i;)isNaN(e=+t.call(n,n[u],u))||(r+=e);return r},ya.mean=function(t,e){var r,i=t.length,u=0,a=-1,o=0;if(1===arguments.length)for(;++a<i;)n(r=t[a])&&(u+=(r-u)/++o);else for(;++a<i;)n(r=e.call(t,t[a],a))&&(u+=(r-u)/++o);return o?u:void 0},ya.quantile=function(n,t){var e=(n.length-1)*t+1,r=Math.floor(e),i=+n[r-1],u=e-r;return u?i+u*(n[r]-i):i},ya.median=function(t,e){return arguments.length>1&&(t=t.map(e)),t=t.filter(n),t.length?ya.quantile(t.sort(ya.ascending),.5):void 0},ya.bisector=function(n){return{left:function(t,e,r,i){for(arguments.length<3&&(r=0),arguments.length<4&&(i=t.length);i>r;){var u=r+i>>>1;n.call(t,t[u],u)<e?r=u+1:i=u}return r},right:function(t,e,r,i){for(arguments.length<3&&(r=0),arguments.length<4&&(i=t.length);i>r;){var u=r+i>>>1;e<n.call(t,t[u],u)?i=u:r=u+1}return r}}};var Na=ya.bisector(function(n){return n});ya.bisectLeft=Na.left,ya.bisect=ya.bisectRight=Na.right,ya.shuffle=function(n){for(var t,e,r=n.length;r;)e=0|Math.random()*r--,t=n[r],n[r]=n[e],n[e]=t;return n},ya.permute=function(n,t){for(var e=t.length,r=new Array(e);e--;)r[e]=n[t[e]];return r},ya.zip=function(){if(!(i=arguments.length))return[];for(var n=-1,e=ya.min(arguments,t),r=new Array(e);++n<e;)for(var i,u=-1,a=r[n]=new Array(i);++u<i;)a[u]=arguments[u][n];return r},ya.transpose=function(n){return ya.zip.apply(ya,n)},ya.keys=function(n){var t=[];for(var e in n)t.push(e);return t},ya.values=function(n){var t=[];for(var e in n)t.push(n[e]);return t},ya.entries=function(n){var t=[];for(var e in n)t.push({key:e,value:n[e]});return t},ya.merge=function(n){return Array.prototype.concat.apply([],n)},ya.range=function(n,t,r){if(arguments.length<3&&(r=1,arguments.length<2&&(t=n,n=0)),1/0===(t-n)/r)throw new Error("infinite range");var i,u=[],a=e(Math.abs(r)),o=-1;if(n*=a,t*=a,r*=a,0>r)for(;(i=n+r*++o)>t;)u.push(i/a);else for(;(i=n+r*++o)<t;)u.push(i/a);return u},ya.map=function(n){var t=new i;if(n instanceof i)n.forEach(function(n,e){t.set(n,e)});else for(var e in n)t.set(e,n[e]);return t},r(i,{has:function(n){return qa+n in this},get:function(n){return this[qa+n]},set:function(n,t){return this[qa+n]=t},remove:function(n){return n=qa+n,n in this&&delete this[n]},keys:function(){var n=[];return this.forEach(function(t){n.push(t)}),n},values:function(){var n=[];return this.forEach(function(t,e){n.push(e)}),n},entries:function(){var n=[];
return this.forEach(function(t,e){n.push({key:t,value:e})}),n},forEach:function(n){for(var t in this)t.charCodeAt(0)===Ta&&n.call(this,t.substring(1),this[t])}});var qa="\0",Ta=qa.charCodeAt(0);ya.nest=function(){function n(t,o,c){if(c>=a.length)return r?r.call(u,o):e?o.sort(e):o;for(var l,s,f,h,g=-1,p=o.length,m=a[c++],d=new i;++g<p;)(h=d.get(l=m(s=o[g])))?h.push(s):d.set(l,[s]);return t?(s=t(),f=function(e,r){s.set(e,n(t,r,c))}):(s={},f=function(e,r){s[e]=n(t,r,c)}),d.forEach(f),s}function t(n,e){if(e>=a.length)return n;var r=[],i=o[e++];return n.forEach(function(n,i){r.push({key:n,values:t(i,e)})}),i?r.sort(function(n,t){return i(n.key,t.key)}):r}var e,r,u={},a=[],o=[];return u.map=function(t,e){return n(e,t,0)},u.entries=function(e){return t(n(ya.map,e,0),0)},u.key=function(n){return a.push(n),u},u.sortKeys=function(n){return o[a.length-1]=n,u},u.sortValues=function(n){return e=n,u},u.rollup=function(n){return r=n,u},u},ya.set=function(n){var t=new u;if(n)for(var e=0,r=n.length;r>e;++e)t.add(n[e]);return t},r(u,{has:function(n){return qa+n in this},add:function(n){return this[qa+n]=!0,n},remove:function(n){return n=qa+n,n in this&&delete this[n]},values:function(){var n=[];return this.forEach(function(t){n.push(t)}),n},forEach:function(n){for(var t in this)t.charCodeAt(0)===Ta&&n.call(this,t.substring(1))}}),ya.behavior={},ya.rebind=function(n,t){for(var e,r=1,i=arguments.length;++r<i;)n[e=arguments[r]]=a(n,t,t[e]);return n};var Ca=["webkit","ms","moz","Moz","o","O"],za=l;try{za(xa.childNodes)[0].nodeType}catch(Da){za=c}ya.dispatch=function(){for(var n=new f,t=-1,e=arguments.length;++t<e;)n[arguments[t]]=h(n);return n},f.prototype.on=function(n,t){var e=n.indexOf("."),r="";if(e>=0&&(r=n.substring(e+1),n=n.substring(0,e)),n)return arguments.length<2?this[n].on(r):this[n].on(r,t);if(2===arguments.length){if(null==t)for(n in this)this.hasOwnProperty(n)&&this[n].on(r,null);return this}},ya.event=null,ya.requote=function(n){return n.replace(ja,"\\$&")};var ja=/[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g,La={}.__proto__?function(n,t){n.__proto__=t}:function(n,t){for(var e in t)n[e]=t[e]},Ha=function(n,t){return t.querySelector(n)},Fa=function(n,t){return t.querySelectorAll(n)},Pa=xa[o(xa,"matchesSelector")],Oa=function(n,t){return Pa.call(n,t)};"function"==typeof Sizzle&&(Ha=function(n,t){return Sizzle(n,t)[0]||null},Fa=function(n,t){return Sizzle.uniqueSort(Sizzle(n,t))},Oa=Sizzle.matchesSelector),ya.selection=function(){return Ia};var Ya=ya.selection.prototype=[];Ya.select=function(n){var t,e,r,i,u=[];n=v(n);for(var a=-1,o=this.length;++a<o;){u.push(t=[]),t.parentNode=(r=this[a]).parentNode;for(var c=-1,l=r.length;++c<l;)(i=r[c])?(t.push(e=n.call(i,i.__data__,c,a)),e&&"__data__"in i&&(e.__data__=i.__data__)):t.push(null)}return d(u)},Ya.selectAll=function(n){var t,e,r=[];n=y(n);for(var i=-1,u=this.length;++i<u;)for(var a=this[i],o=-1,c=a.length;++o<c;)(e=a[o])&&(r.push(t=za(n.call(e,e.__data__,o,i))),t.parentNode=e);return d(r)};var Ra={svg:"http://www.w3.org/2000/svg",xhtml:"http://www.w3.org/1999/xhtml",xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};ya.ns={prefix:Ra,qualify:function(n){var t=n.indexOf(":"),e=n;return t>=0&&(e=n.substring(0,t),n=n.substring(t+1)),Ra.hasOwnProperty(e)?{space:Ra[e],local:n}:n}},Ya.attr=function(n,t){if(arguments.length<2){if("string"==typeof n){var e=this.node();return n=ya.ns.qualify(n),n.local?e.getAttributeNS(n.space,n.local):e.getAttribute(n)}for(t in n)this.each(M(t,n[t]));return this}return this.each(M(n,t))},Ya.classed=function(n,t){if(arguments.length<2){if("string"==typeof n){var e=this.node(),r=(n=n.trim().split(/^|\s+/g)).length,i=-1;if(t=e.classList){for(;++i<r;)if(!t.contains(n[i]))return!1}else for(t=e.getAttribute("class");++i<r;)if(!b(n[i]).test(t))return!1;return!0}for(t in n)this.each(_(t,n[t]));return this}return this.each(_(n,t))},Ya.style=function(n,t,e){var r=arguments.length;if(3>r){if("string"!=typeof n){2>r&&(t="");for(e in n)this.each(S(e,n[e],t));return this}if(2>r)return ba.getComputedStyle(this.node(),null).getPropertyValue(n);e=""}return this.each(S(n,t,e))},Ya.property=function(n,t){if(arguments.length<2){if("string"==typeof n)return this.node()[n];for(t in n)this.each(E(t,n[t]));return this}return this.each(E(n,t))},Ya.text=function(n){return arguments.length?this.each("function"==typeof n?function(){var t=n.apply(this,arguments);this.textContent=null==t?"":t}:null==n?function(){this.textContent=""}:function(){this.textContent=n}):this.node().textContent},Ya.html=function(n){return arguments.length?this.each("function"==typeof n?function(){var t=n.apply(this,arguments);this.innerHTML=null==t?"":t}:null==n?function(){this.innerHTML=""}:function(){this.innerHTML=n}):this.node().innerHTML},Ya.append=function(n){return n=k(n),this.select(function(){return this.appendChild(n.apply(this,arguments))})},Ya.insert=function(n,t){return n=k(n),t=v(t),this.select(function(){return this.insertBefore(n.apply(this,arguments),t.apply(this,arguments))})},Ya.remove=function(){return this.each(function(){var n=this.parentNode;n&&n.removeChild(this)})},Ya.data=function(n,t){function e(n,e){var r,u,a,o=n.length,f=e.length,h=Math.min(o,f),g=new Array(f),p=new Array(f),m=new Array(o);if(t){var d,v=new i,y=new i,M=[];for(r=-1;++r<o;)d=t.call(u=n[r],u.__data__,r),v.has(d)?m[r]=u:v.set(d,u),M.push(d);for(r=-1;++r<f;)d=t.call(e,a=e[r],r),(u=v.get(d))?(g[r]=u,u.__data__=a):y.has(d)||(p[r]=A(a)),y.set(d,a),v.remove(d);for(r=-1;++r<o;)v.has(M[r])&&(m[r]=n[r])}else{for(r=-1;++r<h;)u=n[r],a=e[r],u?(u.__data__=a,g[r]=u):p[r]=A(a);for(;f>r;++r)p[r]=A(e[r]);for(;o>r;++r)m[r]=n[r]}p.update=g,p.parentNode=g.parentNode=m.parentNode=n.parentNode,c.push(p),l.push(g),s.push(m)}var r,u,a=-1,o=this.length;if(!arguments.length){for(n=new Array(o=(r=this[0]).length);++a<o;)(u=r[a])&&(n[a]=u.__data__);return n}var c=C([]),l=d([]),s=d([]);if("function"==typeof n)for(;++a<o;)e(r=this[a],n.call(r,r.parentNode.__data__,a));else for(;++a<o;)e(r=this[a],n);return l.enter=function(){return c},l.exit=function(){return s},l},Ya.datum=function(n){return arguments.length?this.property("__data__",n):this.property("__data__")},Ya.filter=function(n){var t,e,r,i=[];"function"!=typeof n&&(n=N(n));for(var u=0,a=this.length;a>u;u++){i.push(t=[]),t.parentNode=(e=this[u]).parentNode;for(var o=0,c=e.length;c>o;o++)(r=e[o])&&n.call(r,r.__data__,o)&&t.push(r)}return d(i)},Ya.order=function(){for(var n=-1,t=this.length;++n<t;)for(var e,r=this[n],i=r.length-1,u=r[i];--i>=0;)(e=r[i])&&(u&&u!==e.nextSibling&&u.parentNode.insertBefore(e,u),u=e);return this},Ya.sort=function(n){n=q.apply(this,arguments);for(var t=-1,e=this.length;++t<e;)this[t].sort(n);return this.order()},Ya.each=function(n){return T(this,function(t,e,r){n.call(t,t.__data__,e,r)})},Ya.call=function(n){var t=za(arguments);return n.apply(t[0]=this,t),this},Ya.empty=function(){return!this.node()},Ya.node=function(){for(var n=0,t=this.length;t>n;n++)for(var e=this[n],r=0,i=e.length;i>r;r++){var u=e[r];if(u)return u}return null},Ya.size=function(){var n=0;return this.each(function(){++n}),n};var Ua=[];ya.selection.enter=C,ya.selection.enter.prototype=Ua,Ua.append=Ya.append,Ua.empty=Ya.empty,Ua.node=Ya.node,Ua.call=Ya.call,Ua.size=Ya.size,Ua.select=function(n){for(var t,e,r,i,u,a=[],o=-1,c=this.length;++o<c;){r=(i=this[o]).update,a.push(t=[]),t.parentNode=i.parentNode;for(var l=-1,s=i.length;++l<s;)(u=i[l])?(t.push(r[l]=e=n.call(i.parentNode,u.__data__,l,o)),e.__data__=u.__data__):t.push(null)}return d(a)},Ua.insert=function(n,t){return arguments.length<2&&(t=z(this)),Ya.insert.call(this,n,t)},Ya.transition=function(){for(var n,t,e=Hc||++Rc,r=[],i=Fc||{time:Date.now(),ease:Cr,delay:0,duration:250},u=-1,a=this.length;++u<a;){r.push(n=[]);for(var o=this[u],c=-1,l=o.length;++c<l;)(t=o[c])&&Nu(t,c,e,i),n.push(t)}return Eu(r,e)},ya.select=function(n){var t=["string"==typeof n?Ha(n,Ma):n];return t.parentNode=xa,d([t])},ya.selectAll=function(n){var t=za("string"==typeof n?Fa(n,Ma):n);return t.parentNode=xa,d([t])};var Ia=ya.select(xa);Ya.on=function(n,t,e){var r=arguments.length;if(3>r){if("string"!=typeof n){2>r&&(t=!1);for(e in n)this.each(D(e,n[e],t));return this}if(2>r)return(r=this.node()["__on"+n])&&r._;e=!1}return this.each(D(n,t,e))};var Va=ya.map({mouseenter:"mouseover",mouseleave:"mouseout"});Va.forEach(function(n){"on"+n in Ma&&Va.remove(n)});var Xa=o(xa.style,"userSelect"),Za=0;ya.mouse=function(n){return F(n,p())};var Ba=/WebKit/.test(ba.navigator.userAgent)?-1:0;ya.touches=function(n,t){return arguments.length<2&&(t=p().touches),t?za(t).map(function(t){var e=F(n,t);return e.identifier=t.identifier,e}):[]},ya.behavior.drag=function(){function n(){this.on("mousedown.drag",a).on("touchstart.drag",o)}function t(){return ya.event.changedTouches[0].identifier}function e(n,t){return ya.touches(n).filter(function(n){return n.identifier===t})[0]}function r(n,t,e,r){return function(){function a(){if(!s)return o();var n=t(s,g),e=n[0]-m[0],r=n[1]-m[1];d|=e|r,m=n,f({type:"drag",x:n[0]+c[0],y:n[1]+c[1],dx:e,dy:r})}function o(){v.on(e+"."+p,null).on(r+"."+p,null),y(d&&ya.event.target===h),f({type:"dragend"})}var c,l=this,s=l.parentNode,f=i.of(l,arguments),h=ya.event.target,g=n(),p=null==g?"drag":"drag-"+g,m=t(s,g),d=0,v=ya.select(ba).on(e+"."+p,a).on(r+"."+p,o),y=H();u?(c=u.apply(l,arguments),c=[c.x-m[0],c.y-m[1]]):c=[0,0],f({type:"dragstart"})}}var i=m(n,"drag","dragstart","dragend"),u=null,a=r(s,ya.mouse,"mousemove","mouseup"),o=r(t,e,"touchmove","touchend");return n.origin=function(t){return arguments.length?(u=t,n):u},ya.rebind(n,i,"on")},ya.behavior.zoom=function(){function n(){this.on(w,o).on(Ja+".zoom",l).on(S,s).on("dblclick.zoom",f).on(k,c)}function t(n){return[(n[0]-x[0])/b,(n[1]-x[1])/b]}function e(n){return[n[0]*b+x[0],n[1]*b+x[1]]}function r(n){b=Math.max(_[0],Math.min(_[1],n))}function i(n,t){t=e(t),x[0]+=n[0]-t[0],x[1]+=n[1]-t[1]}function u(){v&&v.domain(d.range().map(function(n){return(n-x[0])/b}).map(d.invert)),M&&M.domain(y.range().map(function(n){return(n-x[1])/b}).map(y.invert))}function a(n){u(),n({type:"zoom",scale:b,translate:x})}function o(){function n(){c=1,i(ya.mouse(r),f),a(u)}function e(){l.on(S,ba===r?s:null).on(E,null),h(c&&ya.event.target===o)}var r=this,u=q.of(r,arguments),o=ya.event.target,c=0,l=ya.select(ba).on(S,n).on(E,e),f=t(ya.mouse(r)),h=H()}function c(){function n(){var n=ya.touches(h);return f=b,s={},n.forEach(function(n){s[n.identifier]=t(n)}),n}function e(){var t=Date.now(),e=n();if(1===e.length){if(500>t-p){var u=e[0],o=s[u.identifier];r(2*b),i(u,o),g(),a(m)}p=t}else if(e.length>1){var u=e[0],c=e[1],l=u[0]-c[0],f=u[1]-c[1];d=l*l+f*f}}function u(){var n=ya.touches(h),t=n[0],e=s[t.identifier];if(u=n[1]){var u,o=s[u.identifier],c=ya.event.scale;if(null==c){var l=(l=u[0]-t[0])*l+(l=u[1]-t[1])*l;c=d&&Math.sqrt(l/d)}t=[(t[0]+u[0])/2,(t[1]+u[1])/2],e=[(e[0]+o[0])/2,(e[1]+o[1])/2],r(c*f)}p=null,i(t,e),a(m)}function l(){ya.event.touches.length?n():(v.on(A,null).on(N,null),y.on(w,o).on(k,c),M())}var s,f,h=this,m=q.of(h,arguments),d=0,v=ya.select(ba).on(A,u).on(N,l),y=ya.select(h).on(w,null).on(k,e),M=H();e()}function l(){g(),h||(h=t(ya.mouse(this))),r(Math.pow(2,.002*$a())*b),i(ya.mouse(this),h),a(q.of(this,arguments))}function s(){h=null}function f(){var n=ya.mouse(this),e=t(n),u=Math.log(b)/Math.LN2;r(Math.pow(2,ya.event.shiftKey?Math.ceil(u)-1:Math.floor(u)+1)),i(n,e),a(q.of(this,arguments))}var h,p,d,v,y,M,x=[0,0],b=1,_=Wa,w="mousedown.zoom",S="mousemove.zoom",E="mouseup.zoom",k="touchstart.zoom",A="touchmove.zoom",N="touchend.zoom",q=m(n,"zoom");return n.translate=function(t){return arguments.length?(x=t.map(Number),u(),n):x},n.scale=function(t){return arguments.length?(b=+t,u(),n):b},n.scaleExtent=function(t){return arguments.length?(_=null==t?Wa:t.map(Number),n):_},n.x=function(t){return arguments.length?(v=t,d=t.copy(),x=[0,0],b=1,n):v},n.y=function(t){return arguments.length?(M=t,y=t.copy(),x=[0,0],b=1,n):M},ya.rebind(n,q,"on")};var $a,Wa=[0,1/0],Ja="onwheel"in Ma?($a=function(){return-ya.event.deltaY*(ya.event.deltaMode?120:1)},"wheel"):"onmousewheel"in Ma?($a=function(){return ya.event.wheelDelta},"mousewheel"):($a=function(){return-ya.event.detail},"MozMousePixelScroll");P.prototype.toString=function(){return this.rgb()+""},ya.hsl=function(n,t,e){return 1===arguments.length?n instanceof Y?O(n.h,n.s,n.l):lt(""+n,st,O):O(+n,+t,+e)};var Ga=Y.prototype=new P;Ga.brighter=function(n){return n=Math.pow(.7,arguments.length?n:1),O(this.h,this.s,this.l/n)},Ga.darker=function(n){return n=Math.pow(.7,arguments.length?n:1),O(this.h,this.s,n*this.l)},Ga.rgb=function(){return R(this.h,this.s,this.l)};var Ka=Math.PI,Qa=1e-6,no=Qa*Qa,to=Ka/180,eo=180/Ka;ya.hcl=function(n,t,e){return 1===arguments.length?n instanceof W?$(n.h,n.c,n.l):n instanceof K?nt(n.l,n.a,n.b):nt((n=ft((n=ya.rgb(n)).r,n.g,n.b)).l,n.a,n.b):$(+n,+t,+e)};var ro=W.prototype=new P;ro.brighter=function(n){return $(this.h,this.c,Math.min(100,this.l+io*(arguments.length?n:1)))},ro.darker=function(n){return $(this.h,this.c,Math.max(0,this.l-io*(arguments.length?n:1)))},ro.rgb=function(){return J(this.h,this.c,this.l).rgb()},ya.lab=function(n,t,e){return 1===arguments.length?n instanceof K?G(n.l,n.a,n.b):n instanceof W?J(n.l,n.c,n.h):ft((n=ya.rgb(n)).r,n.g,n.b):G(+n,+t,+e)};var io=18,uo=.95047,ao=1,oo=1.08883,co=K.prototype=new P;co.brighter=function(n){return G(Math.min(100,this.l+io*(arguments.length?n:1)),this.a,this.b)},co.darker=function(n){return G(Math.max(0,this.l-io*(arguments.length?n:1)),this.a,this.b)},co.rgb=function(){return Q(this.l,this.a,this.b)},ya.rgb=function(n,t,e){return 1===arguments.length?n instanceof ot?at(n.r,n.g,n.b):lt(""+n,at,R):at(~~n,~~t,~~e)};var lo=ot.prototype=new P;lo.brighter=function(n){n=Math.pow(.7,arguments.length?n:1);var t=this.r,e=this.g,r=this.b,i=30;return t||e||r?(t&&i>t&&(t=i),e&&i>e&&(e=i),r&&i>r&&(r=i),at(Math.min(255,~~(t/n)),Math.min(255,~~(e/n)),Math.min(255,~~(r/n)))):at(i,i,i)},lo.darker=function(n){return n=Math.pow(.7,arguments.length?n:1),at(~~(n*this.r),~~(n*this.g),~~(n*this.b))},lo.hsl=function(){return st(this.r,this.g,this.b)},lo.toString=function(){return"#"+ct(this.r)+ct(this.g)+ct(this.b)};var so=ya.map({aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074});so.forEach(function(n,t){so.set(n,it(t))}),ya.functor=pt,ya.xhr=dt(mt),ya.dsv=function(n,t){function e(n,e,u){arguments.length<3&&(u=e,e=null);var a=ya.xhr(n,t,u);return a.row=function(n){return arguments.length?a.response(null==(e=n)?r:i(n)):e},a.row(e)}function r(n){return e.parse(n.responseText)}function i(n){return function(t){return e.parse(t.responseText,n)}}function a(t){return t.map(o).join(n)}function o(n){return c.test(n)?'"'+n.replace(/\"/g,'""')+'"':n}var c=new RegExp('["'+n+"\n]"),l=n.charCodeAt(0);return e.parse=function(n,t){var r;return e.parseRows(n,function(n,e){if(r)return r(n,e-1);var i=new Function("d","return {"+n.map(function(n,t){return JSON.stringify(n)+": d["+t+"]"}).join(",")+"}");r=t?function(n,e){return t(i(n),e)}:i})},e.parseRows=function(n,t){function e(){if(s>=c)return a;if(i)return i=!1,u;var t=s;if(34===n.charCodeAt(t)){for(var e=t;e++<c;)if(34===n.charCodeAt(e)){if(34!==n.charCodeAt(e+1))break;++e}s=e+2;var r=n.charCodeAt(e+1);return 13===r?(i=!0,10===n.charCodeAt(e+2)&&++s):10===r&&(i=!0),n.substring(t+1,e).replace(/""/g,'"')}for(;c>s;){var r=n.charCodeAt(s++),o=1;if(10===r)i=!0;else if(13===r)i=!0,10===n.charCodeAt(s)&&(++s,++o);else if(r!==l)continue;return n.substring(t,s-o)}return n.substring(t)}for(var r,i,u={},a={},o=[],c=n.length,s=0,f=0;(r=e())!==a;){for(var h=[];r!==u&&r!==a;)h.push(r),r=e();(!t||(h=t(h,f++)))&&o.push(h)}return o},e.format=function(t){if(Array.isArray(t[0]))return e.formatRows(t);var r=new u,i=[];return t.forEach(function(n){for(var t in n)r.has(t)||i.push(r.add(t))}),[i.map(o).join(n)].concat(t.map(function(t){return i.map(function(n){return o(t[n])}).join(n)})).join("\n")},e.formatRows=function(n){return n.map(a).join("\n")},e},ya.csv=ya.dsv(",","text/csv"),ya.tsv=ya.dsv("	","text/tab-separated-values");var fo,ho,go,po,mo,vo=ba[o(ba,"requestAnimationFrame")]||function(n){setTimeout(n,17)};ya.timer=function(n,t,e){var r=arguments.length;2>r&&(t=0),3>r&&(e=Date.now());var i=e+t,u={callback:n,time:i,next:null};ho?ho.next=u:fo=u,ho=u,go||(po=clearTimeout(po),go=1,vo(Mt))},ya.timer.flush=function(){bt(),_t()};var yo=".",Mo=",",xo=[3,3],bo="$",_o=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"].map(wt);ya.formatPrefix=function(n,t){var e=0;return n&&(0>n&&(n*=-1),t&&(n=ya.round(n,St(n,t))),e=1+Math.floor(1e-12+Math.log(n)/Math.LN10),e=Math.max(-24,Math.min(24,3*Math.floor((0>=e?e+1:e-1)/3)))),_o[8+e/3]},ya.round=function(n,t){return t?Math.round(n*(t=Math.pow(10,t)))/t:Math.round(n)},ya.format=function(n){var t=wo.exec(n),e=t[1]||" ",r=t[2]||">",i=t[3]||"",u=t[4]||"",a=t[5],o=+t[6],c=t[7],l=t[8],s=t[9],f=1,h="",g=!1;switch(l&&(l=+l.substring(1)),(a||"0"===e&&"="===r)&&(a=e="0",r="=",c&&(o-=Math.floor((o-1)/4))),s){case"n":c=!0,s="g";break;case"%":f=100,h="%",s="f";break;case"p":f=100,h="%",s="r";break;case"b":case"o":case"x":case"X":"#"===u&&(u="0"+s.toLowerCase());case"c":case"d":g=!0,l=0;break;case"s":f=-1,s="r"}"#"===u?u="":"$"===u&&(u=bo),"r"!=s||l||(s="g"),null!=l&&("g"==s?l=Math.max(1,Math.min(21,l)):("e"==s||"f"==s)&&(l=Math.max(0,Math.min(20,l)))),s=So.get(s)||Et;var p=a&&c;return function(n){if(g&&n%1)return"";var t=0>n||0===n&&0>1/n?(n=-n,"-"):i;if(0>f){var m=ya.formatPrefix(n,l);n=m.scale(n),h=m.symbol}else n*=f;n=s(n,l);var d=n.lastIndexOf("."),v=0>d?n:n.substring(0,d),y=0>d?"":yo+n.substring(d+1);!a&&c&&(v=Eo(v));var M=u.length+v.length+y.length+(p?0:t.length),x=o>M?new Array(M=o-M+1).join(e):"";return p&&(v=Eo(x+v)),t+=u,n=v+y,("<"===r?t+n+x:">"===r?x+t+n:"^"===r?x.substring(0,M>>=1)+t+n+x.substring(M):t+(p?n:x+n))+h}};var wo=/(?:([^{])?([<>=^]))?([+\- ])?([$#])?(0)?(\d+)?(,)?(\.-?\d+)?([a-z%])?/i,So=ya.map({b:function(n){return n.toString(2)},c:function(n){return String.fromCharCode(n)},o:function(n){return n.toString(8)},x:function(n){return n.toString(16)},X:function(n){return n.toString(16).toUpperCase()},g:function(n,t){return n.toPrecision(t)},e:function(n,t){return n.toExponential(t)},f:function(n,t){return n.toFixed(t)},r:function(n,t){return(n=ya.round(n,St(n,t))).toFixed(Math.max(0,Math.min(20,St(n*(1+1e-15),t))))}}),Eo=mt;if(xo){var ko=xo.length;Eo=function(n){for(var t=n.length,e=[],r=0,i=xo[0];t>0&&i>0;)e.push(n.substring(t-=i,t+i)),i=xo[r=(r+1)%ko];return e.reverse().join(Mo)}}ya.geo={},kt.prototype={s:0,t:0,add:function(n){At(n,this.t,Ao),At(Ao.s,this.s,this),this.s?this.t+=Ao.t:this.s=Ao.t},reset:function(){this.s=this.t=0},valueOf:function(){return this.s}};var Ao=new kt;ya.geo.stream=function(n,t){n&&No.hasOwnProperty(n.type)?No[n.type](n,t):Nt(n,t)};var No={Feature:function(n,t){Nt(n.geometry,t)},FeatureCollection:function(n,t){for(var e=n.features,r=-1,i=e.length;++r<i;)Nt(e[r].geometry,t)}},qo={Sphere:function(n,t){t.sphere()},Point:function(n,t){var e=n.coordinates;t.point(e[0],e[1])},MultiPoint:function(n,t){for(var e,r=n.coordinates,i=-1,u=r.length;++i<u;)e=r[i],t.point(e[0],e[1])},LineString:function(n,t){qt(n.coordinates,t,0)},MultiLineString:function(n,t){for(var e=n.coordinates,r=-1,i=e.length;++r<i;)qt(e[r],t,0)},Polygon:function(n,t){Tt(n.coordinates,t)},MultiPolygon:function(n,t){for(var e=n.coordinates,r=-1,i=e.length;++r<i;)Tt(e[r],t)},GeometryCollection:function(n,t){for(var e=n.geometries,r=-1,i=e.length;++r<i;)Nt(e[r],t)}};ya.geo.area=function(n){return To=0,ya.geo.stream(n,zo),To};var To,Co=new kt,zo={sphere:function(){To+=4*Ka},point:s,lineStart:s,lineEnd:s,polygonStart:function(){Co.reset(),zo.lineStart=Ct},polygonEnd:function(){var n=2*Co;To+=0>n?4*Ka+n:n,zo.lineStart=zo.lineEnd=zo.point=s}};ya.geo.bounds=function(){function n(n,t){M.push(x=[s=n,h=n]),f>t&&(f=t),t>g&&(g=t)}function t(t,e){var r=zt([t*to,e*to]);if(v){var i=jt(v,r),u=[i[1],-i[0],0],a=jt(u,i);Ft(a),a=Pt(a);var c=t-p,l=c>0?1:-1,m=a[0]*eo*l,d=Math.abs(c)>180;if(d^(m>l*p&&l*t>m)){var y=a[1]*eo;y>g&&(g=y)}else if(m=(m+360)%360-180,d^(m>l*p&&l*t>m)){var y=-a[1]*eo;f>y&&(f=y)}else f>e&&(f=e),e>g&&(g=e);d?p>t?o(s,t)>o(s,h)&&(h=t):o(t,h)>o(s,h)&&(s=t):h>=s?(s>t&&(s=t),t>h&&(h=t)):t>p?o(s,t)>o(s,h)&&(h=t):o(t,h)>o(s,h)&&(s=t)}else n(t,e);v=r,p=t}function e(){b.point=t}function r(){x[0]=s,x[1]=h,b.point=n,v=null}function i(n,e){if(v){var r=n-p;y+=Math.abs(r)>180?r+(r>0?360:-360):r}else m=n,d=e;zo.point(n,e),t(n,e)}function u(){zo.lineStart()}function a(){i(m,d),zo.lineEnd(),Math.abs(y)>Qa&&(s=-(h=180)),x[0]=s,x[1]=h,v=null}function o(n,t){return(t-=n)<0?t+360:t}function c(n,t){return n[0]-t[0]}function l(n,t){return t[0]<=t[1]?t[0]<=n&&n<=t[1]:n<t[0]||t[1]<n}var s,f,h,g,p,m,d,v,y,M,x,b={point:n,lineStart:e,lineEnd:r,polygonStart:function(){b.point=i,b.lineStart=u,b.lineEnd=a,y=0,zo.polygonStart()},polygonEnd:function(){zo.polygonEnd(),b.point=n,b.lineStart=e,b.lineEnd=r,0>Co?(s=-(h=180),f=-(g=90)):y>Qa?g=90:-Qa>y&&(f=-90),x[0]=s,x[1]=h}};return function(n){g=h=-(s=f=1/0),M=[],ya.geo.stream(n,b);var t=M.length;if(t){M.sort(c);for(var e,r=1,i=M[0],u=[i];t>r;++r)e=M[r],l(e[0],i)||l(e[1],i)?(o(i[0],e[1])>o(i[0],i[1])&&(i[1]=e[1]),o(e[0],i[1])>o(i[0],i[1])&&(i[0]=e[0])):u.push(i=e);for(var a,e,p=-1/0,t=u.length-1,r=0,i=u[t];t>=r;i=e,++r)e=u[r],(a=o(i[1],e[0]))>p&&(p=a,s=e[0],h=i[1])}return M=x=null,1/0===s||1/0===f?[[0/0,0/0],[0/0,0/0]]:[[s,f],[h,g]]}}(),ya.geo.centroid=function(n){Do=jo=Lo=Ho=Fo=Po=Oo=Yo=Ro=Uo=Io=0,ya.geo.stream(n,Vo);var t=Ro,e=Uo,r=Io,i=t*t+e*e+r*r;return no>i&&(t=Po,e=Oo,r=Yo,Qa>jo&&(t=Lo,e=Ho,r=Fo),i=t*t+e*e+r*r,no>i)?[0/0,0/0]:[Math.atan2(e,t)*eo,V(r/Math.sqrt(i))*eo]};var Do,jo,Lo,Ho,Fo,Po,Oo,Yo,Ro,Uo,Io,Vo={sphere:s,point:Yt,lineStart:Ut,lineEnd:It,polygonStart:function(){Vo.lineStart=Vt},polygonEnd:function(){Vo.lineStart=Ut}},Xo=$t(Xt,Qt,te,ee),Zo=[-Ka,0],Bo=1e9;(ya.geo.conicEqualArea=function(){return oe(ce)}).raw=ce,ya.geo.albers=function(){return ya.geo.conicEqualArea().rotate([96,0]).center([-.6,38.7]).parallels([29.5,45.5]).scale(1070)},ya.geo.albersUsa=function(){function n(n){var u=n[0],a=n[1];return t=null,e(u,a),t||(r(u,a),t)||i(u,a),t}var t,e,r,i,u=ya.geo.albers(),a=ya.geo.conicEqualArea().rotate([154,0]).center([-2,58.5]).parallels([55,65]),o=ya.geo.conicEqualArea().rotate([157,0]).center([-3,19.9]).parallels([8,18]),c={point:function(n,e){t=[n,e]}};return n.invert=function(n){var t=u.scale(),e=u.translate(),r=(n[0]-e[0])/t,i=(n[1]-e[1])/t;return(i>=.12&&.234>i&&r>=-.425&&-.214>r?a:i>=.166&&.234>i&&r>=-.214&&-.115>r?o:u).invert(n)},n.stream=function(n){var t=u.stream(n),e=a.stream(n),r=o.stream(n);return{point:function(n,i){t.point(n,i),e.point(n,i),r.point(n,i)},sphere:function(){t.sphere(),e.sphere(),r.sphere()},lineStart:function(){t.lineStart(),e.lineStart(),r.lineStart()},lineEnd:function(){t.lineEnd(),e.lineEnd(),r.lineEnd()},polygonStart:function(){t.polygonStart(),e.polygonStart(),r.polygonStart()},polygonEnd:function(){t.polygonEnd(),e.polygonEnd(),r.polygonEnd()}}},n.precision=function(t){return arguments.length?(u.precision(t),a.precision(t),o.precision(t),n):u.precision()},n.scale=function(t){return arguments.length?(u.scale(t),a.scale(.35*t),o.scale(t),n.translate(u.translate())):u.scale()},n.translate=function(t){if(!arguments.length)return u.translate();var l=u.scale(),s=+t[0],f=+t[1];return e=u.translate(t).clipExtent([[s-.455*l,f-.238*l],[s+.455*l,f+.238*l]]).stream(c).point,r=a.translate([s-.307*l,f+.201*l]).clipExtent([[s-.425*l+Qa,f+.12*l+Qa],[s-.214*l-Qa,f+.234*l-Qa]]).stream(c).point,i=o.translate([s-.205*l,f+.212*l]).clipExtent([[s-.214*l+Qa,f+.166*l+Qa],[s-.115*l-Qa,f+.234*l-Qa]]).stream(c).point,n},n.scale(1070)};var $o,Wo,Jo,Go,Ko,Qo,nc={point:s,lineStart:s,lineEnd:s,polygonStart:function(){Wo=0,nc.lineStart=le},polygonEnd:function(){nc.lineStart=nc.lineEnd=nc.point=s,$o+=Math.abs(Wo/2)}},tc={point:se,lineStart:s,lineEnd:s,polygonStart:s,polygonEnd:s},ec={point:ge,lineStart:pe,lineEnd:me,polygonStart:function(){ec.lineStart=de},polygonEnd:function(){ec.point=ge,ec.lineStart=pe,ec.lineEnd=me}};ya.geo.path=function(){function n(n){return n&&("function"==typeof o&&u.pointRadius(+o.apply(this,arguments)),a&&a.valid||(a=i(u)),ya.geo.stream(n,a)),u.result()}function t(){return a=null,n}var e,r,i,u,a,o=4.5;return n.area=function(n){return $o=0,ya.geo.stream(n,i(nc)),$o},n.centroid=function(n){return Lo=Ho=Fo=Po=Oo=Yo=Ro=Uo=Io=0,ya.geo.stream(n,i(ec)),Io?[Ro/Io,Uo/Io]:Yo?[Po/Yo,Oo/Yo]:Fo?[Lo/Fo,Ho/Fo]:[0/0,0/0]},n.bounds=function(n){return Ko=Qo=-(Jo=Go=1/0),ya.geo.stream(n,i(tc)),[[Jo,Go],[Ko,Qo]]},n.projection=function(n){return arguments.length?(i=(e=n)?n.stream||Me(n):mt,t()):e},n.context=function(n){return arguments.length?(u=null==(r=n)?new fe:new ve(n),"function"!=typeof o&&u.pointRadius(o),t()):r},n.pointRadius=function(t){return arguments.length?(o="function"==typeof t?t:(u.pointRadius(+t),+t),n):o},n.projection(ya.geo.albersUsa()).context(null)},ya.geo.projection=xe,ya.geo.projectionMutator=be,(ya.geo.equirectangular=function(){return xe(we)}).raw=we.invert=we,ya.geo.rotation=function(n){function t(t){return t=n(t[0]*to,t[1]*to),t[0]*=eo,t[1]*=eo,t}return n=Se(n[0]%360*to,n[1]*to,n.length>2?n[2]*to:0),t.invert=function(t){return t=n.invert(t[0]*to,t[1]*to),t[0]*=eo,t[1]*=eo,t},t},ya.geo.circle=function(){function n(){var n="function"==typeof r?r.apply(this,arguments):r,t=Se(-n[0]*to,-n[1]*to,0).invert,i=[];return e(null,null,1,{point:function(n,e){i.push(n=t(n,e)),n[0]*=eo,n[1]*=eo}}),{type:"Polygon",coordinates:[i]}}var t,e,r=[0,0],i=6;return n.origin=function(t){return arguments.length?(r=t,n):r},n.angle=function(r){return arguments.length?(e=Ne((t=+r)*to,i*to),n):t},n.precision=function(r){return arguments.length?(e=Ne(t*to,(i=+r)*to),n):i},n.angle(90)},ya.geo.distance=function(n,t){var e,r=(t[0]-n[0])*to,i=n[1]*to,u=t[1]*to,a=Math.sin(r),o=Math.cos(r),c=Math.sin(i),l=Math.cos(i),s=Math.sin(u),f=Math.cos(u);return Math.atan2(Math.sqrt((e=f*a)*e+(e=l*s-c*f*o)*e),c*s+l*f*o)},ya.geo.graticule=function(){function n(){return{type:"MultiLineString",coordinates:t()}}function t(){return ya.range(Math.ceil(u/d)*d,i,d).map(h).concat(ya.range(Math.ceil(l/v)*v,c,v).map(g)).concat(ya.range(Math.ceil(r/p)*p,e,p).filter(function(n){return Math.abs(n%d)>Qa}).map(s)).concat(ya.range(Math.ceil(o/m)*m,a,m).filter(function(n){return Math.abs(n%v)>Qa}).map(f))}var e,r,i,u,a,o,c,l,s,f,h,g,p=10,m=p,d=90,v=360,y=2.5;return n.lines=function(){return t().map(function(n){return{type:"LineString",coordinates:n}})},n.outline=function(){return{type:"Polygon",coordinates:[h(u).concat(g(c).slice(1),h(i).reverse().slice(1),g(l).reverse().slice(1))]}},n.extent=function(t){return arguments.length?n.majorExtent(t).minorExtent(t):n.minorExtent()},n.majorExtent=function(t){return arguments.length?(u=+t[0][0],i=+t[1][0],l=+t[0][1],c=+t[1][1],u>i&&(t=u,u=i,i=t),l>c&&(t=l,l=c,c=t),n.precision(y)):[[u,l],[i,c]]},n.minorExtent=function(t){return arguments.length?(r=+t[0][0],e=+t[1][0],o=+t[0][1],a=+t[1][1],r>e&&(t=r,r=e,e=t),o>a&&(t=o,o=a,a=t),n.precision(y)):[[r,o],[e,a]]},n.step=function(t){return arguments.length?n.majorStep(t).minorStep(t):n.minorStep()},n.majorStep=function(t){return arguments.length?(d=+t[0],v=+t[1],n):[d,v]},n.minorStep=function(t){return arguments.length?(p=+t[0],m=+t[1],n):[p,m]},n.precision=function(t){return arguments.length?(y=+t,s=Te(o,a,90),f=Ce(r,e,y),h=Te(l,c,90),g=Ce(u,i,y),n):y},n.majorExtent([[-180,-90+Qa],[180,90-Qa]]).minorExtent([[-180,-80-Qa],[180,80+Qa]])},ya.geo.greatArc=function(){function n(){return{type:"LineString",coordinates:[t||r.apply(this,arguments),e||i.apply(this,arguments)]}}var t,e,r=ze,i=De;return n.distance=function(){return ya.geo.distance(t||r.apply(this,arguments),e||i.apply(this,arguments))},n.source=function(e){return arguments.length?(r=e,t="function"==typeof e?null:e,n):r},n.target=function(t){return arguments.length?(i=t,e="function"==typeof t?null:t,n):i},n.precision=function(){return arguments.length?n:0},n},ya.geo.interpolate=function(n,t){return je(n[0]*to,n[1]*to,t[0]*to,t[1]*to)},ya.geo.length=function(n){return rc=0,ya.geo.stream(n,ic),rc};var rc,ic={sphere:s,point:s,lineStart:Le,lineEnd:s,polygonStart:s,polygonEnd:s},uc=He(function(n){return Math.sqrt(2/(1+n))},function(n){return 2*Math.asin(n/2)});(ya.geo.azimuthalEqualArea=function(){return xe(uc)}).raw=uc;var ac=He(function(n){var t=Math.acos(n);return t&&t/Math.sin(t)},mt);(ya.geo.azimuthalEquidistant=function(){return xe(ac)}).raw=ac,(ya.geo.conicConformal=function(){return oe(Fe)}).raw=Fe,(ya.geo.conicEquidistant=function(){return oe(Pe)}).raw=Pe;var oc=He(function(n){return 1/n},Math.atan);(ya.geo.gnomonic=function(){return xe(oc)}).raw=oc,Oe.invert=function(n,t){return[n,2*Math.atan(Math.exp(t))-Ka/2]},(ya.geo.mercator=function(){return Ye(Oe)}).raw=Oe;var cc=He(function(){return 1},Math.asin);(ya.geo.orthographic=function(){return xe(cc)}).raw=cc;var lc=He(function(n){return 1/(1+n)},function(n){return 2*Math.atan(n)});(ya.geo.stereographic=function(){return xe(lc)}).raw=lc,Re.invert=function(n,t){return[Math.atan2(X(n),Math.cos(t)),V(Math.sin(t)/Z(n))]},(ya.geo.transverseMercator=function(){return Ye(Re)}).raw=Re,ya.geom={},ya.svg={},ya.svg.line=function(){return Ue(mt)};var sc=ya.map({linear:Xe,"linear-closed":Ze,step:Be,"step-before":$e,"step-after":We,basis:tr,"basis-open":er,"basis-closed":rr,bundle:ir,cardinal:Ke,"cardinal-open":Je,"cardinal-closed":Ge,monotone:sr});
sc.forEach(function(n,t){t.key=n,t.closed=/-closed$/.test(n)});var fc=[0,2/3,1/3,0],hc=[0,1/3,2/3,0],gc=[0,1/6,2/3,1/6];ya.geom.hull=function(n){function t(n){if(n.length<3)return[];var t,i,u,a,o,c,l,s,f,h,g,p,m=pt(e),d=pt(r),v=n.length,y=v-1,M=[],x=[],b=0;if(m===Ie&&r===Ve)t=n;else for(u=0,t=[];v>u;++u)t.push([+m.call(this,i=n[u],u),+d.call(this,i,u)]);for(u=1;v>u;++u)(t[u][1]<t[b][1]||t[u][1]==t[b][1]&&t[u][0]<t[b][0])&&(b=u);for(u=0;v>u;++u)u!==b&&(c=t[u][1]-t[b][1],o=t[u][0]-t[b][0],M.push({angle:Math.atan2(c,o),index:u}));for(M.sort(function(n,t){return n.angle-t.angle}),g=M[0].angle,h=M[0].index,f=0,u=1;y>u;++u){if(a=M[u].index,g==M[u].angle){if(o=t[h][0]-t[b][0],c=t[h][1]-t[b][1],l=t[a][0]-t[b][0],s=t[a][1]-t[b][1],o*o+c*c>=l*l+s*s){M[u].index=-1;continue}M[f].index=-1}g=M[u].angle,f=u,h=a}for(x.push(b),u=0,a=0;2>u;++a)M[a].index>-1&&(x.push(M[a].index),u++);for(p=x.length;y>a;++a)if(!(M[a].index<0)){for(;!fr(x[p-2],x[p-1],M[a].index,t);)--p;x[p++]=M[a].index}var _=[];for(u=p-1;u>=0;--u)_.push(n[x[u]]);return _}var e=Ie,r=Ve;return arguments.length?t(n):(t.x=function(n){return arguments.length?(e=n,t):e},t.y=function(n){return arguments.length?(r=n,t):r},t)},ya.geom.polygon=function(n){return La(n,pc),n};var pc=ya.geom.polygon.prototype=[];pc.area=function(){for(var n,t=-1,e=this.length,r=this[e-1],i=0;++t<e;)n=r,r=this[t],i+=n[1]*r[0]-n[0]*r[1];return.5*i},pc.centroid=function(n){var t,e,r=-1,i=this.length,u=0,a=0,o=this[i-1];for(arguments.length||(n=-1/(6*this.area()));++r<i;)t=o,o=this[r],e=t[0]*o[1]-o[0]*t[1],u+=(t[0]+o[0])*e,a+=(t[1]+o[1])*e;return[u*n,a*n]},pc.clip=function(n){for(var t,e,r,i,u,a,o=pr(n),c=-1,l=this.length-pr(this),s=this[l-1];++c<l;){for(t=n.slice(),n.length=0,i=this[c],u=t[(r=t.length-o)-1],e=-1;++e<r;)a=t[e],hr(a,s,i)?(hr(u,s,i)||n.push(gr(u,a,s,i)),n.push(a)):hr(u,s,i)&&n.push(gr(u,a,s,i)),u=a;o&&n.push(n[0]),s=i}return n},ya.geom.delaunay=function(n){var t=n.map(function(){return[]}),e=[];return mr(n,function(e){t[e.region.l.index].push(n[e.region.r.index])}),t.forEach(function(t,r){var i=n[r],u=i[0],a=i[1];t.forEach(function(n){n.angle=Math.atan2(n[0]-u,n[1]-a)}),t.sort(function(n,t){return n.angle-t.angle});for(var o=0,c=t.length-1;c>o;o++)e.push([i,t[o],t[o+1]])}),e},ya.geom.voronoi=function(n){function t(n){var t,u,a,o=n.map(function(){return[]}),c=pt(e),l=pt(r),s=n.length,f=1e6;if(c===Ie&&l===Ve)t=n;else for(t=new Array(s),a=0;s>a;++a)t[a]=[+c.call(this,u=n[a],a),+l.call(this,u,a)];if(mr(t,function(n){var t,e,r,i,u,a;1===n.a&&n.b>=0?(t=n.ep.r,e=n.ep.l):(t=n.ep.l,e=n.ep.r),1===n.a?(u=t?t.y:-f,r=n.c-n.b*u,a=e?e.y:f,i=n.c-n.b*a):(r=t?t.x:-f,u=n.c-n.a*r,i=e?e.x:f,a=n.c-n.a*i);var c=[r,u],l=[i,a];o[n.region.l.index].push(c,l),o[n.region.r.index].push(c,l)}),o=o.map(function(n,e){var r=t[e][0],i=t[e][1],u=n.map(function(n){return Math.atan2(n[0]-r,n[1]-i)}),a=ya.range(n.length).sort(function(n,t){return u[n]-u[t]});return a.filter(function(n,t){return!t||u[n]-u[a[t-1]]>Qa}).map(function(t){return n[t]})}),o.forEach(function(n,e){var r=n.length;if(!r)return n.push([-f,-f],[-f,f],[f,f],[f,-f]);if(!(r>2)){var i=t[e],u=n[0],a=n[1],o=i[0],c=i[1],l=u[0],s=u[1],h=a[0],g=a[1],p=Math.abs(h-l),m=g-s;if(Math.abs(m)<Qa){var d=s>c?-f:f;n.push([-f,d],[f,d])}else if(Qa>p){var v=l>o?-f:f;n.push([v,-f],[v,f])}else{var d=(l-o)*(g-s)>(h-l)*(s-c)?f:-f,y=Math.abs(m)-p;Math.abs(y)<Qa?n.push([0>m?d:-d,d]):(y>0&&(d*=-1),n.push([-f,d],[f,d]))}}}),i)for(a=0;s>a;++a)i.clip(o[a]);for(a=0;s>a;++a)o[a].point=n[a];return o}var e=Ie,r=Ve,i=null;return arguments.length?t(n):(t.x=function(n){return arguments.length?(e=n,t):e},t.y=function(n){return arguments.length?(r=n,t):r},t.clipExtent=function(n){if(!arguments.length)return i&&[i[0],i[2]];if(null==n)i=null;else{var e=+n[0][0],r=+n[0][1],u=+n[1][0],a=+n[1][1];i=ya.geom.polygon([[e,r],[e,a],[u,a],[u,r]])}return t},t.size=function(n){return arguments.length?t.clipExtent(n&&[[0,0],n]):i&&i[2]},t.links=function(n){var t,i,u,a=n.map(function(){return[]}),o=[],c=pt(e),l=pt(r),s=n.length;if(c===Ie&&l===Ve)t=n;else for(t=new Array(s),u=0;s>u;++u)t[u]=[+c.call(this,i=n[u],u),+l.call(this,i,u)];return mr(t,function(t){var e=t.region.l.index,r=t.region.r.index;a[e][r]||(a[e][r]=a[r][e]=!0,o.push({source:n[e],target:n[r]}))}),o},t.triangles=function(n){if(e===Ie&&r===Ve)return ya.geom.delaunay(n);for(var t,i=new Array(c),u=pt(e),a=pt(r),o=-1,c=n.length;++o<c;)(i[o]=[+u.call(this,t=n[o],o),+a.call(this,t,o)]).data=t;return ya.geom.delaunay(i).map(function(n){return n.map(function(n){return n.data})})},t)};var mc={l:"r",r:"l"};ya.geom.quadtree=function(n,t,e,r,i){function u(n){function u(n,t,e,r,i,u,a,o){if(!isNaN(e)&&!isNaN(r))if(n.leaf){var c=n.x,s=n.y;if(null!=c)if(Math.abs(c-e)+Math.abs(s-r)<.01)l(n,t,e,r,i,u,a,o);else{var f=n.point;n.x=n.y=n.point=null,l(n,f,c,s,i,u,a,o),l(n,t,e,r,i,u,a,o)}else n.x=e,n.y=r,n.point=t}else l(n,t,e,r,i,u,a,o)}function l(n,t,e,r,i,a,o,c){var l=.5*(i+o),s=.5*(a+c),f=e>=l,h=r>=s,g=(h<<1)+f;n.leaf=!1,n=n.nodes[g]||(n.nodes[g]=yr()),f?i=l:o=l,h?a=s:c=s,u(n,t,e,r,i,a,o,c)}var s,f,h,g,p,m,d,v,y,M=pt(o),x=pt(c);if(null!=t)m=t,d=e,v=r,y=i;else if(v=y=-(m=d=1/0),f=[],h=[],p=n.length,a)for(g=0;p>g;++g)s=n[g],s.x<m&&(m=s.x),s.y<d&&(d=s.y),s.x>v&&(v=s.x),s.y>y&&(y=s.y),f.push(s.x),h.push(s.y);else for(g=0;p>g;++g){var b=+M(s=n[g],g),_=+x(s,g);m>b&&(m=b),d>_&&(d=_),b>v&&(v=b),_>y&&(y=_),f.push(b),h.push(_)}var w=v-m,S=y-d;w>S?y=d+w:v=m+S;var E=yr();if(E.add=function(n){u(E,n,+M(n,++g),+x(n,g),m,d,v,y)},E.visit=function(n){Mr(n,E,m,d,v,y)},g=-1,null==t){for(;++g<p;)u(E,n[g],f[g],h[g],m,d,v,y);--g}else n.forEach(E.add);return f=h=n=s=null,E}var a,o=Ie,c=Ve;return(a=arguments.length)?(o=dr,c=vr,3===a&&(i=e,r=t,e=t=0),u(n)):(u.x=function(n){return arguments.length?(o=n,u):o},u.y=function(n){return arguments.length?(c=n,u):c},u.extent=function(n){return arguments.length?(null==n?t=e=r=i=null:(t=+n[0][0],e=+n[0][1],r=+n[1][0],i=+n[1][1]),u):null==t?null:[[t,e],[r,i]]},u.size=function(n){return arguments.length?(null==n?t=e=r=i=null:(t=e=0,r=+n[0],i=+n[1]),u):null==t?null:[r-t,i-e]},u)},ya.interpolateRgb=xr,ya.interpolateObject=br,ya.interpolateNumber=_r,ya.interpolateString=wr;var dc=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g;ya.interpolate=Sr,ya.interpolators=[function(n,t){var e=typeof t;return("string"===e?so.has(t)||/^(#|rgb\(|hsl\()/.test(t)?xr:wr:t instanceof P?xr:"object"===e?Array.isArray(t)?Er:br:_r)(n,t)}],ya.interpolateArray=Er;var vc=function(){return mt},yc=ya.map({linear:vc,poly:zr,quad:function(){return qr},cubic:function(){return Tr},sin:function(){return Dr},exp:function(){return jr},circle:function(){return Lr},elastic:Hr,back:Fr,bounce:function(){return Pr}}),Mc=ya.map({"in":mt,out:Ar,"in-out":Nr,"out-in":function(n){return Nr(Ar(n))}});ya.ease=function(n){var t=n.indexOf("-"),e=t>=0?n.substring(0,t):n,r=t>=0?n.substring(t+1):"in";return e=yc.get(e)||vc,r=Mc.get(r)||mt,kr(r(e.apply(null,Array.prototype.slice.call(arguments,1))))},ya.interpolateHcl=Or,ya.interpolateHsl=Yr,ya.interpolateLab=Rr,ya.interpolateRound=Ur,ya.transform=function(n){var t=Ma.createElementNS(ya.ns.prefix.svg,"g");return(ya.transform=function(n){if(null!=n){t.setAttribute("transform",n);var e=t.transform.baseVal.consolidate()}return new Ir(e?e.matrix:xc)})(n)},Ir.prototype.toString=function(){return"translate("+this.translate+")rotate("+this.rotate+")skewX("+this.skew+")scale("+this.scale+")"};var xc={a:1,b:0,c:0,d:1,e:0,f:0};ya.interpolateTransform=Br,ya.layout={},ya.layout.bundle=function(){return function(n){for(var t=[],e=-1,r=n.length;++e<r;)t.push(Jr(n[e]));return t}},ya.layout.chord=function(){function n(){var n,l,f,h,g,p={},m=[],d=ya.range(u),v=[];for(e=[],r=[],n=0,h=-1;++h<u;){for(l=0,g=-1;++g<u;)l+=i[h][g];m.push(l),v.push(ya.range(u)),n+=l}for(a&&d.sort(function(n,t){return a(m[n],m[t])}),o&&v.forEach(function(n,t){n.sort(function(n,e){return o(i[t][n],i[t][e])})}),n=(2*Ka-s*u)/n,l=0,h=-1;++h<u;){for(f=l,g=-1;++g<u;){var y=d[h],M=v[y][g],x=i[y][M],b=l,_=l+=x*n;p[y+"-"+M]={index:y,subindex:M,startAngle:b,endAngle:_,value:x}}r[y]={index:y,startAngle:f,endAngle:l,value:(l-f)/n},l+=s}for(h=-1;++h<u;)for(g=h-1;++g<u;){var w=p[h+"-"+g],S=p[g+"-"+h];(w.value||S.value)&&e.push(w.value<S.value?{source:S,target:w}:{source:w,target:S})}c&&t()}function t(){e.sort(function(n,t){return c((n.source.value+n.target.value)/2,(t.source.value+t.target.value)/2)})}var e,r,i,u,a,o,c,l={},s=0;return l.matrix=function(n){return arguments.length?(u=(i=n)&&i.length,e=r=null,l):i},l.padding=function(n){return arguments.length?(s=n,e=r=null,l):s},l.sortGroups=function(n){return arguments.length?(a=n,e=r=null,l):a},l.sortSubgroups=function(n){return arguments.length?(o=n,e=null,l):o},l.sortChords=function(n){return arguments.length?(c=n,e&&t(),l):c},l.chords=function(){return e||n(),e},l.groups=function(){return r||n(),r},l},ya.layout.force=function(){function n(n){return function(t,e,r,i){if(t.point!==n){var u=t.cx-n.x,a=t.cy-n.y,o=1/Math.sqrt(u*u+a*a);if(m>(i-e)*o){var c=t.charge*o*o;return n.px-=u*c,n.py-=a*c,!0}if(t.point&&isFinite(o)){var c=t.pointCharge*o*o;n.px-=u*c,n.py-=a*c}}return!t.charge}}function t(n){n.px=ya.event.x,n.py=ya.event.y,o.resume()}var e,r,i,u,a,o={},c=ya.dispatch("start","tick","end"),l=[1,1],s=.9,f=bc,h=_c,g=-30,p=.1,m=.8,d=[],v=[];return o.tick=function(){if((r*=.99)<.005)return c.end({type:"end",alpha:r=0}),!0;var t,e,o,f,h,m,y,M,x,b=d.length,_=v.length;for(e=0;_>e;++e)o=v[e],f=o.source,h=o.target,M=h.x-f.x,x=h.y-f.y,(m=M*M+x*x)&&(m=r*u[e]*((m=Math.sqrt(m))-i[e])/m,M*=m,x*=m,h.x-=M*(y=f.weight/(h.weight+f.weight)),h.y-=x*y,f.x+=M*(y=1-y),f.y+=x*y);if((y=r*p)&&(M=l[0]/2,x=l[1]/2,e=-1,y))for(;++e<b;)o=d[e],o.x+=(M-o.x)*y,o.y+=(x-o.y)*y;if(g)for(ri(t=ya.geom.quadtree(d),r,a),e=-1;++e<b;)(o=d[e]).fixed||t.visit(n(o));for(e=-1;++e<b;)o=d[e],o.fixed?(o.x=o.px,o.y=o.py):(o.x-=(o.px-(o.px=o.x))*s,o.y-=(o.py-(o.py=o.y))*s);c.tick({type:"tick",alpha:r})},o.nodes=function(n){return arguments.length?(d=n,o):d},o.links=function(n){return arguments.length?(v=n,o):v},o.size=function(n){return arguments.length?(l=n,o):l},o.linkDistance=function(n){return arguments.length?(f="function"==typeof n?n:+n,o):f},o.distance=o.linkDistance,o.linkStrength=function(n){return arguments.length?(h="function"==typeof n?n:+n,o):h},o.friction=function(n){return arguments.length?(s=+n,o):s},o.charge=function(n){return arguments.length?(g="function"==typeof n?n:+n,o):g},o.gravity=function(n){return arguments.length?(p=+n,o):p},o.theta=function(n){return arguments.length?(m=+n,o):m},o.alpha=function(n){return arguments.length?(n=+n,r?r=n>0?n:0:n>0&&(c.start({type:"start",alpha:r=n}),ya.timer(o.tick)),o):r},o.start=function(){function n(n,r){for(var i,u=t(e),a=-1,o=u.length;++a<o;)if(!isNaN(i=u[a][n]))return i;return Math.random()*r}function t(){if(!c){for(c=[],r=0;p>r;++r)c[r]=[];for(r=0;m>r;++r){var n=v[r];c[n.source.index].push(n.target),c[n.target.index].push(n.source)}}return c[e]}var e,r,c,s,p=d.length,m=v.length,y=l[0],M=l[1];for(e=0;p>e;++e)(s=d[e]).index=e,s.weight=0;for(e=0;m>e;++e)s=v[e],"number"==typeof s.source&&(s.source=d[s.source]),"number"==typeof s.target&&(s.target=d[s.target]),++s.source.weight,++s.target.weight;for(e=0;p>e;++e)s=d[e],isNaN(s.x)&&(s.x=n("x",y)),isNaN(s.y)&&(s.y=n("y",M)),isNaN(s.px)&&(s.px=s.x),isNaN(s.py)&&(s.py=s.y);if(i=[],"function"==typeof f)for(e=0;m>e;++e)i[e]=+f.call(this,v[e],e);else for(e=0;m>e;++e)i[e]=f;if(u=[],"function"==typeof h)for(e=0;m>e;++e)u[e]=+h.call(this,v[e],e);else for(e=0;m>e;++e)u[e]=h;if(a=[],"function"==typeof g)for(e=0;p>e;++e)a[e]=+g.call(this,d[e],e);else for(e=0;p>e;++e)a[e]=g;return o.resume()},o.resume=function(){return o.alpha(.1)},o.stop=function(){return o.alpha(0)},o.drag=function(){return e||(e=ya.behavior.drag().origin(mt).on("dragstart.force",Qr).on("drag.force",t).on("dragend.force",ni)),arguments.length?(this.on("mouseover.force",ti).on("mouseout.force",ei).call(e),void 0):e},ya.rebind(o,c,"on")};var bc=20,_c=1;ya.layout.hierarchy=function(){function n(t,a,o){var c=i.call(e,t,a);if(t.depth=a,o.push(t),c&&(l=c.length)){for(var l,s,f=-1,h=t.children=[],g=0,p=a+1;++f<l;)s=n(c[f],p,o),s.parent=t,h.push(s),g+=s.value;r&&h.sort(r),u&&(t.value=g)}else u&&(t.value=+u.call(e,t,a)||0);return t}function t(n,r){var i=n.children,a=0;if(i&&(o=i.length))for(var o,c=-1,l=r+1;++c<o;)a+=t(i[c],l);else u&&(a=+u.call(e,n,r)||0);return u&&(n.value=a),a}function e(t){var e=[];return n(t,0,e),e}var r=oi,i=ui,u=ai;return e.sort=function(n){return arguments.length?(r=n,e):r},e.children=function(n){return arguments.length?(i=n,e):i},e.value=function(n){return arguments.length?(u=n,e):u},e.revalue=function(n){return t(n,0),n},e},ya.layout.partition=function(){function n(t,e,r,i){var u=t.children;if(t.x=e,t.y=t.depth*i,t.dx=r,t.dy=i,u&&(a=u.length)){var a,o,c,l=-1;for(r=t.value?r/t.value:0;++l<a;)n(o=u[l],e,c=o.value*r,i),e+=c}}function t(n){var e=n.children,r=0;if(e&&(i=e.length))for(var i,u=-1;++u<i;)r=Math.max(r,t(e[u]));return 1+r}function e(e,u){var a=r.call(this,e,u);return n(a[0],0,i[0],i[1]/t(a[0])),a}var r=ya.layout.hierarchy(),i=[1,1];return e.size=function(n){return arguments.length?(i=n,e):i},ii(e,r)},ya.layout.pie=function(){function n(u){var a=u.map(function(e,r){return+t.call(n,e,r)}),o=+("function"==typeof r?r.apply(this,arguments):r),c=(("function"==typeof i?i.apply(this,arguments):i)-o)/ya.sum(a),l=ya.range(u.length);null!=e&&l.sort(e===wc?function(n,t){return a[t]-a[n]}:function(n,t){return e(u[n],u[t])});var s=[];return l.forEach(function(n){var t;s[n]={data:u[n],value:t=a[n],startAngle:o,endAngle:o+=t*c}}),s}var t=Number,e=wc,r=0,i=2*Ka;return n.value=function(e){return arguments.length?(t=e,n):t},n.sort=function(t){return arguments.length?(e=t,n):e},n.startAngle=function(t){return arguments.length?(r=t,n):r},n.endAngle=function(t){return arguments.length?(i=t,n):i},n};var wc={};ya.layout.stack=function(){function n(o,c){var l=o.map(function(e,r){return t.call(n,e,r)}),s=l.map(function(t){return t.map(function(t,e){return[u.call(n,t,e),a.call(n,t,e)]})}),f=e.call(n,s,c);l=ya.permute(l,f),s=ya.permute(s,f);var h,g,p,m=r.call(n,s,c),d=l.length,v=l[0].length;for(g=0;v>g;++g)for(i.call(n,l[0][g],p=m[g],s[0][g][1]),h=1;d>h;++h)i.call(n,l[h][g],p+=s[h-1][g][1],s[h][g][1]);return o}var t=mt,e=hi,r=gi,i=fi,u=li,a=si;return n.values=function(e){return arguments.length?(t=e,n):t},n.order=function(t){return arguments.length?(e="function"==typeof t?t:Sc.get(t)||hi,n):e},n.offset=function(t){return arguments.length?(r="function"==typeof t?t:Ec.get(t)||gi,n):r},n.x=function(t){return arguments.length?(u=t,n):u},n.y=function(t){return arguments.length?(a=t,n):a},n.out=function(t){return arguments.length?(i=t,n):i},n};var Sc=ya.map({"inside-out":function(n){var t,e,r=n.length,i=n.map(pi),u=n.map(mi),a=ya.range(r).sort(function(n,t){return i[n]-i[t]}),o=0,c=0,l=[],s=[];for(t=0;r>t;++t)e=a[t],c>o?(o+=u[e],l.push(e)):(c+=u[e],s.push(e));return s.reverse().concat(l)},reverse:function(n){return ya.range(n.length).reverse()},"default":hi}),Ec=ya.map({silhouette:function(n){var t,e,r,i=n.length,u=n[0].length,a=[],o=0,c=[];for(e=0;u>e;++e){for(t=0,r=0;i>t;t++)r+=n[t][e][1];r>o&&(o=r),a.push(r)}for(e=0;u>e;++e)c[e]=(o-a[e])/2;return c},wiggle:function(n){var t,e,r,i,u,a,o,c,l,s=n.length,f=n[0],h=f.length,g=[];for(g[0]=c=l=0,e=1;h>e;++e){for(t=0,i=0;s>t;++t)i+=n[t][e][1];for(t=0,u=0,o=f[e][0]-f[e-1][0];s>t;++t){for(r=0,a=(n[t][e][1]-n[t][e-1][1])/(2*o);t>r;++r)a+=(n[r][e][1]-n[r][e-1][1])/o;u+=a*n[t][e][1]}g[e]=c-=i?u/i*o:0,l>c&&(l=c)}for(e=0;h>e;++e)g[e]-=l;return g},expand:function(n){var t,e,r,i=n.length,u=n[0].length,a=1/i,o=[];for(e=0;u>e;++e){for(t=0,r=0;i>t;t++)r+=n[t][e][1];if(r)for(t=0;i>t;t++)n[t][e][1]/=r;else for(t=0;i>t;t++)n[t][e][1]=a}for(e=0;u>e;++e)o[e]=0;return o},zero:gi});ya.layout.histogram=function(){function n(n,u){for(var a,o,c=[],l=n.map(e,this),s=r.call(this,l,u),f=i.call(this,s,l,u),u=-1,h=l.length,g=f.length-1,p=t?1:1/h;++u<g;)a=c[u]=[],a.dx=f[u+1]-(a.x=f[u]),a.y=0;if(g>0)for(u=-1;++u<h;)o=l[u],o>=s[0]&&o<=s[1]&&(a=c[ya.bisect(f,o,1,g)-1],a.y+=p,a.push(n[u]));return c}var t=!0,e=Number,r=Mi,i=vi;return n.value=function(t){return arguments.length?(e=t,n):e},n.range=function(t){return arguments.length?(r=pt(t),n):r},n.bins=function(t){return arguments.length?(i="number"==typeof t?function(n){return yi(n,t)}:pt(t),n):i},n.frequency=function(e){return arguments.length?(t=!!e,n):t},n},ya.layout.tree=function(){function n(n,u){function a(n,t){var r=n.children,i=n._tree;if(r&&(u=r.length)){for(var u,o,l,s=r[0],f=s,h=-1;++h<u;)l=r[h],a(l,o),f=c(l,o,f),o=l;Ni(n);var g=.5*(s._tree.prelim+l._tree.prelim);t?(i.prelim=t._tree.prelim+e(n,t),i.mod=i.prelim-g):i.prelim=g}else t&&(i.prelim=t._tree.prelim+e(n,t))}function o(n,t){n.x=n._tree.prelim+t;var e=n.children;if(e&&(r=e.length)){var r,i=-1;for(t+=n._tree.mod;++i<r;)o(e[i],t)}}function c(n,t,r){if(t){for(var i,u=n,a=n,o=t,c=n.parent.children[0],l=u._tree.mod,s=a._tree.mod,f=o._tree.mod,h=c._tree.mod;o=_i(o),u=bi(u),o&&u;)c=bi(c),a=_i(a),a._tree.ancestor=n,i=o._tree.prelim+f-u._tree.prelim-l+e(o,u),i>0&&(qi(Ti(o,n,r),n,i),l+=i,s+=i),f+=o._tree.mod,l+=u._tree.mod,h+=c._tree.mod,s+=a._tree.mod;o&&!_i(a)&&(a._tree.thread=o,a._tree.mod+=f-s),u&&!bi(c)&&(c._tree.thread=u,c._tree.mod+=l-h,r=n)}return r}var l=t.call(this,n,u),s=l[0];Ai(s,function(n,t){n._tree={ancestor:n,prelim:0,mod:0,change:0,shift:0,number:t?t._tree.number+1:0}}),a(s),o(s,-s._tree.prelim);var f=wi(s,Ei),h=wi(s,Si),g=wi(s,ki),p=f.x-e(f,h)/2,m=h.x+e(h,f)/2,d=g.depth||1;return Ai(s,i?function(n){n.x*=r[0],n.y=n.depth*r[1],delete n._tree}:function(n){n.x=(n.x-p)/(m-p)*r[0],n.y=n.depth/d*r[1],delete n._tree}),l}var t=ya.layout.hierarchy().sort(null).value(null),e=xi,r=[1,1],i=!1;return n.separation=function(t){return arguments.length?(e=t,n):e},n.size=function(t){return arguments.length?(i=null==(r=t),n):i?null:r},n.nodeSize=function(t){return arguments.length?(i=null!=(r=t),n):i?r:null},ii(n,t)},ya.layout.pack=function(){function n(n,u){var a=e.call(this,n,u),o=a[0],c=i[0],l=i[1],s=null==t?Math.sqrt:"function"==typeof t?t:function(){return t};if(o.x=o.y=0,Ai(o,function(n){n.r=+s(n.value)}),Ai(o,Li),r){var f=r*(t?1:Math.max(2*o.r/c,2*o.r/l))/2;Ai(o,function(n){n.r+=f}),Ai(o,Li),Ai(o,function(n){n.r-=f})}return Pi(o,c/2,l/2,t?1:1/Math.max(2*o.r/c,2*o.r/l)),a}var t,e=ya.layout.hierarchy().sort(Ci),r=0,i=[1,1];return n.size=function(t){return arguments.length?(i=t,n):i},n.radius=function(e){return arguments.length?(t=null==e||"function"==typeof e?e:+e,n):t},n.padding=function(t){return arguments.length?(r=+t,n):r},ii(n,e)},ya.layout.cluster=function(){function n(n,u){var a,o=t.call(this,n,u),c=o[0],l=0;Ai(c,function(n){var t=n.children;t&&t.length?(n.x=Ri(t),n.y=Yi(t)):(n.x=a?l+=e(n,a):0,n.y=0,a=n)});var s=Ui(c),f=Ii(c),h=s.x-e(s,f)/2,g=f.x+e(f,s)/2;return Ai(c,i?function(n){n.x=(n.x-c.x)*r[0],n.y=(c.y-n.y)*r[1]}:function(n){n.x=(n.x-h)/(g-h)*r[0],n.y=(1-(c.y?n.y/c.y:1))*r[1]}),o}var t=ya.layout.hierarchy().sort(null).value(null),e=xi,r=[1,1],i=!1;return n.separation=function(t){return arguments.length?(e=t,n):e},n.size=function(t){return arguments.length?(i=null==(r=t),n):i?null:r},n.nodeSize=function(t){return arguments.length?(i=null!=(r=t),n):i?r:null},ii(n,t)},ya.layout.treemap=function(){function n(n,t){for(var e,r,i=-1,u=n.length;++i<u;)r=(e=n[i]).value*(0>t?0:t),e.area=isNaN(r)||0>=r?0:r}function t(e){var u=e.children;if(u&&u.length){var a,o,c,l=f(e),s=[],h=u.slice(),p=1/0,m="slice"===g?l.dx:"dice"===g?l.dy:"slice-dice"===g?1&e.depth?l.dy:l.dx:Math.min(l.dx,l.dy);for(n(h,l.dx*l.dy/e.value),s.area=0;(c=h.length)>0;)s.push(a=h[c-1]),s.area+=a.area,"squarify"!==g||(o=r(s,m))<=p?(h.pop(),p=o):(s.area-=s.pop().area,i(s,m,l,!1),m=Math.min(l.dx,l.dy),s.length=s.area=0,p=1/0);s.length&&(i(s,m,l,!0),s.length=s.area=0),u.forEach(t)}}function e(t){var r=t.children;if(r&&r.length){var u,a=f(t),o=r.slice(),c=[];for(n(o,a.dx*a.dy/t.value),c.area=0;u=o.pop();)c.push(u),c.area+=u.area,null!=u.z&&(i(c,u.z?a.dx:a.dy,a,!o.length),c.length=c.area=0);r.forEach(e)}}function r(n,t){for(var e,r=n.area,i=0,u=1/0,a=-1,o=n.length;++a<o;)(e=n[a].area)&&(u>e&&(u=e),e>i&&(i=e));return r*=r,t*=t,r?Math.max(t*i*p/r,r/(t*u*p)):1/0}function i(n,t,e,r){var i,u=-1,a=n.length,o=e.x,l=e.y,s=t?c(n.area/t):0;if(t==e.dx){for((r||s>e.dy)&&(s=e.dy);++u<a;)i=n[u],i.x=o,i.y=l,i.dy=s,o+=i.dx=Math.min(e.x+e.dx-o,s?c(i.area/s):0);i.z=!0,i.dx+=e.x+e.dx-o,e.y+=s,e.dy-=s}else{for((r||s>e.dx)&&(s=e.dx);++u<a;)i=n[u],i.x=o,i.y=l,i.dx=s,l+=i.dy=Math.min(e.y+e.dy-l,s?c(i.area/s):0);i.z=!1,i.dy+=e.y+e.dy-l,e.x+=s,e.dx-=s}}function u(r){var i=a||o(r),u=i[0];return u.x=0,u.y=0,u.dx=l[0],u.dy=l[1],a&&o.revalue(u),n([u],u.dx*u.dy/u.value),(a?e:t)(u),h&&(a=i),i}var a,o=ya.layout.hierarchy(),c=Math.round,l=[1,1],s=null,f=Vi,h=!1,g="squarify",p=.5*(1+Math.sqrt(5));return u.size=function(n){return arguments.length?(l=n,u):l},u.padding=function(n){function t(t){var e=n.call(u,t,t.depth);return null==e?Vi(t):Xi(t,"number"==typeof e?[e,e,e,e]:e)}function e(t){return Xi(t,n)}if(!arguments.length)return s;var r;return f=null==(s=n)?Vi:"function"==(r=typeof n)?t:"number"===r?(n=[n,n,n,n],e):e,u},u.round=function(n){return arguments.length?(c=n?Math.round:Number,u):c!=Number},u.sticky=function(n){return arguments.length?(h=n,a=null,u):h},u.ratio=function(n){return arguments.length?(p=n,u):p},u.mode=function(n){return arguments.length?(g=n+"",u):g},ii(u,o)},ya.random={normal:function(n,t){var e=arguments.length;return 2>e&&(t=1),1>e&&(n=0),function(){var e,r,i;do e=2*Math.random()-1,r=2*Math.random()-1,i=e*e+r*r;while(!i||i>1);return n+t*e*Math.sqrt(-2*Math.log(i)/i)}},logNormal:function(){var n=ya.random.normal.apply(ya,arguments);return function(){return Math.exp(n())}},irwinHall:function(n){return function(){for(var t=0,e=0;n>e;e++)t+=Math.random();return t/n}}},ya.scale={};var kc={floor:mt,ceil:mt};ya.scale.linear=function(){return Ki([0,1],[0,1],Sr,!1)},ya.scale.log=function(){return uu(ya.scale.linear().domain([0,1]),10,!0,[1,10])};var Ac=ya.format(".0e"),Nc={floor:function(n){return-Math.ceil(-n)},ceil:function(n){return-Math.floor(-n)}};ya.scale.pow=function(){return au(ya.scale.linear(),1,[0,1])},ya.scale.sqrt=function(){return ya.scale.pow().exponent(.5)},ya.scale.ordinal=function(){return cu([],{t:"range",a:[[]]})},ya.scale.category10=function(){return ya.scale.ordinal().range(qc)},ya.scale.category20=function(){return ya.scale.ordinal().range(Tc)},ya.scale.category20b=function(){return ya.scale.ordinal().range(Cc)},ya.scale.category20c=function(){return ya.scale.ordinal().range(zc)};var qc=[2062260,16744206,2924588,14034728,9725885,9197131,14907330,8355711,12369186,1556175].map(ut),Tc=[2062260,11454440,16744206,16759672,2924588,10018698,14034728,16750742,9725885,12955861,9197131,12885140,14907330,16234194,8355711,13092807,12369186,14408589,1556175,10410725].map(ut),Cc=[3750777,5395619,7040719,10264286,6519097,9216594,11915115,13556636,9202993,12426809,15186514,15190932,8666169,11356490,14049643,15177372,8077683,10834324,13528509,14589654].map(ut),zc=[3244733,7057110,10406625,13032431,15095053,16616764,16625259,16634018,3253076,7652470,10607003,13101504,7695281,10394312,12369372,14342891,6513507,9868950,12434877,14277081].map(ut);ya.scale.quantile=function(){return lu([],[])},ya.scale.quantize=function(){return su(0,1,[0,1])},ya.scale.threshold=function(){return fu([.5],[0,1])},ya.scale.identity=function(){return hu([0,1])},ya.svg.arc=function(){function n(){var n=t.apply(this,arguments),u=e.apply(this,arguments),a=r.apply(this,arguments)+Dc,o=i.apply(this,arguments)+Dc,c=(a>o&&(c=a,a=o,o=c),o-a),l=Ka>c?"0":"1",s=Math.cos(a),f=Math.sin(a),h=Math.cos(o),g=Math.sin(o);return c>=jc?n?"M0,"+u+"A"+u+","+u+" 0 1,1 0,"+-u+"A"+u+","+u+" 0 1,1 0,"+u+"M0,"+n+"A"+n+","+n+" 0 1,0 0,"+-n+"A"+n+","+n+" 0 1,0 0,"+n+"Z":"M0,"+u+"A"+u+","+u+" 0 1,1 0,"+-u+"A"+u+","+u+" 0 1,1 0,"+u+"Z":n?"M"+u*s+","+u*f+"A"+u+","+u+" 0 "+l+",1 "+u*h+","+u*g+"L"+n*h+","+n*g+"A"+n+","+n+" 0 "+l+",0 "+n*s+","+n*f+"Z":"M"+u*s+","+u*f+"A"+u+","+u+" 0 "+l+",1 "+u*h+","+u*g+"L0,0"+"Z"}var t=gu,e=pu,r=mu,i=du;return n.innerRadius=function(e){return arguments.length?(t=pt(e),n):t},n.outerRadius=function(t){return arguments.length?(e=pt(t),n):e},n.startAngle=function(t){return arguments.length?(r=pt(t),n):r},n.endAngle=function(t){return arguments.length?(i=pt(t),n):i},n.centroid=function(){var n=(t.apply(this,arguments)+e.apply(this,arguments))/2,u=(r.apply(this,arguments)+i.apply(this,arguments))/2+Dc;return[Math.cos(u)*n,Math.sin(u)*n]},n};var Dc=-Ka/2,jc=2*Ka-1e-6;ya.svg.line.radial=function(){var n=Ue(vu);return n.radius=n.x,delete n.x,n.angle=n.y,delete n.y,n},$e.reverse=We,We.reverse=$e,ya.svg.area=function(){return yu(mt)},ya.svg.area.radial=function(){var n=yu(vu);return n.radius=n.x,delete n.x,n.innerRadius=n.x0,delete n.x0,n.outerRadius=n.x1,delete n.x1,n.angle=n.y,delete n.y,n.startAngle=n.y0,delete n.y0,n.endAngle=n.y1,delete n.y1,n},ya.svg.chord=function(){function n(n,o){var c=t(this,u,n,o),l=t(this,a,n,o);return"M"+c.p0+r(c.r,c.p1,c.a1-c.a0)+(e(c,l)?i(c.r,c.p1,c.r,c.p0):i(c.r,c.p1,l.r,l.p0)+r(l.r,l.p1,l.a1-l.a0)+i(l.r,l.p1,c.r,c.p0))+"Z"}function t(n,t,e,r){var i=t.call(n,e,r),u=o.call(n,i,r),a=c.call(n,i,r)+Dc,s=l.call(n,i,r)+Dc;return{r:u,a0:a,a1:s,p0:[u*Math.cos(a),u*Math.sin(a)],p1:[u*Math.cos(s),u*Math.sin(s)]}}function e(n,t){return n.a0==t.a0&&n.a1==t.a1}function r(n,t,e){return"A"+n+","+n+" 0 "+ +(e>Ka)+",1 "+t}function i(n,t,e,r){return"Q 0,0 "+r}var u=ze,a=De,o=Mu,c=mu,l=du;return n.radius=function(t){return arguments.length?(o=pt(t),n):o},n.source=function(t){return arguments.length?(u=pt(t),n):u},n.target=function(t){return arguments.length?(a=pt(t),n):a},n.startAngle=function(t){return arguments.length?(c=pt(t),n):c},n.endAngle=function(t){return arguments.length?(l=pt(t),n):l},n},ya.svg.diagonal=function(){function n(n,i){var u=t.call(this,n,i),a=e.call(this,n,i),o=(u.y+a.y)/2,c=[u,{x:u.x,y:o},{x:a.x,y:o},a];return c=c.map(r),"M"+c[0]+"C"+c[1]+" "+c[2]+" "+c[3]}var t=ze,e=De,r=xu;return n.source=function(e){return arguments.length?(t=pt(e),n):t},n.target=function(t){return arguments.length?(e=pt(t),n):e},n.projection=function(t){return arguments.length?(r=t,n):r},n},ya.svg.diagonal.radial=function(){var n=ya.svg.diagonal(),t=xu,e=n.projection;return n.projection=function(n){return arguments.length?e(bu(t=n)):t},n},ya.svg.symbol=function(){function n(n,r){return(Lc.get(t.call(this,n,r))||Su)(e.call(this,n,r))}var t=wu,e=_u;return n.type=function(e){return arguments.length?(t=pt(e),n):t},n.size=function(t){return arguments.length?(e=pt(t),n):e},n};var Lc=ya.map({circle:Su,cross:function(n){var t=Math.sqrt(n/5)/2;return"M"+-3*t+","+-t+"H"+-t+"V"+-3*t+"H"+t+"V"+-t+"H"+3*t+"V"+t+"H"+t+"V"+3*t+"H"+-t+"V"+t+"H"+-3*t+"Z"},diamond:function(n){var t=Math.sqrt(n/(2*Oc)),e=t*Oc;return"M0,"+-t+"L"+e+",0"+" 0,"+t+" "+-e+",0"+"Z"},square:function(n){var t=Math.sqrt(n)/2;return"M"+-t+","+-t+"L"+t+","+-t+" "+t+","+t+" "+-t+","+t+"Z"},"triangle-down":function(n){var t=Math.sqrt(n/Pc),e=t*Pc/2;return"M0,"+e+"L"+t+","+-e+" "+-t+","+-e+"Z"},"triangle-up":function(n){var t=Math.sqrt(n/Pc),e=t*Pc/2;return"M0,"+-e+"L"+t+","+e+" "+-t+","+e+"Z"}});ya.svg.symbolTypes=Lc.keys();var Hc,Fc,Pc=Math.sqrt(3),Oc=Math.tan(30*to),Yc=[],Rc=0;Yc.call=Ya.call,Yc.empty=Ya.empty,Yc.node=Ya.node,Yc.size=Ya.size,ya.transition=function(n){return arguments.length?Hc?n.transition():n:Ia.transition()},ya.transition.prototype=Yc,Yc.select=function(n){var t,e,r,i=this.id,u=[];n=v(n);for(var a=-1,o=this.length;++a<o;){u.push(t=[]);for(var c=this[a],l=-1,s=c.length;++l<s;)(r=c[l])&&(e=n.call(r,r.__data__,l,a))?("__data__"in r&&(e.__data__=r.__data__),Nu(e,l,i,r.__transition__[i]),t.push(e)):t.push(null)}return Eu(u,i)},Yc.selectAll=function(n){var t,e,r,i,u,a=this.id,o=[];n=y(n);for(var c=-1,l=this.length;++c<l;)for(var s=this[c],f=-1,h=s.length;++f<h;)if(r=s[f]){u=r.__transition__[a],e=n.call(r,r.__data__,f,c),o.push(t=[]);for(var g=-1,p=e.length;++g<p;)(i=e[g])&&Nu(i,g,a,u),t.push(i)}return Eu(o,a)},Yc.filter=function(n){var t,e,r,i=[];"function"!=typeof n&&(n=N(n));for(var u=0,a=this.length;a>u;u++){i.push(t=[]);for(var e=this[u],o=0,c=e.length;c>o;o++)(r=e[o])&&n.call(r,r.__data__,o)&&t.push(r)}return Eu(i,this.id)},Yc.tween=function(n,t){var e=this.id;return arguments.length<2?this.node().__transition__[e].tween.get(n):T(this,null==t?function(t){t.__transition__[e].tween.remove(n)}:function(r){r.__transition__[e].tween.set(n,t)})},Yc.attr=function(n,t){function e(){this.removeAttribute(o)}function r(){this.removeAttributeNS(o.space,o.local)}function i(n){return null==n?e:(n+="",function(){var t,e=this.getAttribute(o);return e!==n&&(t=a(e,n),function(n){this.setAttribute(o,t(n))})})}function u(n){return null==n?r:(n+="",function(){var t,e=this.getAttributeNS(o.space,o.local);return e!==n&&(t=a(e,n),function(n){this.setAttributeNS(o.space,o.local,t(n))})})}if(arguments.length<2){for(t in n)this.attr(t,n[t]);return this}var a="transform"==n?Br:Sr,o=ya.ns.qualify(n);return ku(this,"attr."+n,t,o.local?u:i)},Yc.attrTween=function(n,t){function e(n,e){var r=t.call(this,n,e,this.getAttribute(i));return r&&function(n){this.setAttribute(i,r(n))}}function r(n,e){var r=t.call(this,n,e,this.getAttributeNS(i.space,i.local));return r&&function(n){this.setAttributeNS(i.space,i.local,r(n))}}var i=ya.ns.qualify(n);return this.tween("attr."+n,i.local?r:e)},Yc.style=function(n,t,e){function r(){this.style.removeProperty(n)}function i(t){return null==t?r:(t+="",function(){var r,i=ba.getComputedStyle(this,null).getPropertyValue(n);return i!==t&&(r=Sr(i,t),function(t){this.style.setProperty(n,r(t),e)})})}var u=arguments.length;if(3>u){if("string"!=typeof n){2>u&&(t="");for(e in n)this.style(e,n[e],t);return this}e=""}return ku(this,"style."+n,t,i)},Yc.styleTween=function(n,t,e){function r(r,i){var u=t.call(this,r,i,ba.getComputedStyle(this,null).getPropertyValue(n));return u&&function(t){this.style.setProperty(n,u(t),e)}}return arguments.length<3&&(e=""),this.tween("style."+n,r)},Yc.text=function(n){return ku(this,"text",n,Au)},Yc.remove=function(){return this.each("end.transition",function(){var n;!this.__transition__&&(n=this.parentNode)&&n.removeChild(this)})},Yc.ease=function(n){var t=this.id;return arguments.length<1?this.node().__transition__[t].ease:("function"!=typeof n&&(n=ya.ease.apply(ya,arguments)),T(this,function(e){e.__transition__[t].ease=n}))},Yc.delay=function(n){var t=this.id;return T(this,"function"==typeof n?function(e,r,i){e.__transition__[t].delay=0|n.call(e,e.__data__,r,i)}:(n|=0,function(e){e.__transition__[t].delay=n}))},Yc.duration=function(n){var t=this.id;return T(this,"function"==typeof n?function(e,r,i){e.__transition__[t].duration=Math.max(1,0|n.call(e,e.__data__,r,i))}:(n=Math.max(1,0|n),function(e){e.__transition__[t].duration=n}))},Yc.each=function(n,t){var e=this.id;if(arguments.length<2){var r=Fc,i=Hc;Hc=e,T(this,function(t,r,i){Fc=t.__transition__[e],n.call(t,t.__data__,r,i)}),Fc=r,Hc=i}else T(this,function(r){var i=r.__transition__[e];(i.event||(i.event=ya.dispatch("start","end"))).on(n,t)});return this},Yc.transition=function(){for(var n,t,e,r,i=this.id,u=++Rc,a=[],o=0,c=this.length;c>o;o++){a.push(n=[]);for(var t=this[o],l=0,s=t.length;s>l;l++)(e=t[l])&&(r=Object.create(e.__transition__[i]),r.delay+=r.duration,Nu(e,l,u,r)),n.push(e)}return Eu(a,u)},ya.svg.axis=function(){function n(n){n.each(function(){var n,f=ya.select(this),h=null==l?e.ticks?e.ticks.apply(e,c):e.domain():l,g=null==t?e.tickFormat?e.tickFormat.apply(e,c):String:t,p=Cu(e,h,s),m=f.selectAll(".tick.minor").data(p,String),d=m.enter().insert("line",".tick").attr("class","tick minor").style("opacity",1e-6),v=ya.transition(m.exit()).style("opacity",1e-6).remove(),y=ya.transition(m).style("opacity",1),M=f.selectAll(".tick.major").data(h,String),x=M.enter().insert("g",".domain").attr("class","tick major").style("opacity",1e-6),b=ya.transition(M.exit()).style("opacity",1e-6).remove(),_=ya.transition(M).style("opacity",1),w=Bi(e),S=f.selectAll(".domain").data([0]),E=(S.enter().append("path").attr("class","domain"),ya.transition(S)),k=e.copy(),A=this.__chart__||k;
this.__chart__=k,x.append("line"),x.append("text");var N=x.select("line"),q=_.select("line"),T=M.select("text").text(g),C=x.select("text"),z=_.select("text");switch(r){case"bottom":n=qu,d.attr("y2",u),y.attr("x2",0).attr("y2",u),N.attr("y2",i),C.attr("y",Math.max(i,0)+o),q.attr("x2",0).attr("y2",i),z.attr("x",0).attr("y",Math.max(i,0)+o),T.attr("dy",".71em").style("text-anchor","middle"),E.attr("d","M"+w[0]+","+a+"V0H"+w[1]+"V"+a);break;case"top":n=qu,d.attr("y2",-u),y.attr("x2",0).attr("y2",-u),N.attr("y2",-i),C.attr("y",-(Math.max(i,0)+o)),q.attr("x2",0).attr("y2",-i),z.attr("x",0).attr("y",-(Math.max(i,0)+o)),T.attr("dy","0em").style("text-anchor","middle"),E.attr("d","M"+w[0]+","+-a+"V0H"+w[1]+"V"+-a);break;case"left":n=Tu,d.attr("x2",-u),y.attr("x2",-u).attr("y2",0),N.attr("x2",-i),C.attr("x",-(Math.max(i,0)+o)),q.attr("x2",-i).attr("y2",0),z.attr("x",-(Math.max(i,0)+o)).attr("y",0),T.attr("dy",".32em").style("text-anchor","end"),E.attr("d","M"+-a+","+w[0]+"H0V"+w[1]+"H"+-a);break;case"right":n=Tu,d.attr("x2",u),y.attr("x2",u).attr("y2",0),N.attr("x2",i),C.attr("x",Math.max(i,0)+o),q.attr("x2",i).attr("y2",0),z.attr("x",Math.max(i,0)+o).attr("y",0),T.attr("dy",".32em").style("text-anchor","start"),E.attr("d","M"+a+","+w[0]+"H0V"+w[1]+"H"+a)}if(e.rangeBand){var D=k.rangeBand()/2,j=function(n){return k(n)+D};x.call(n,j),_.call(n,j)}else x.call(n,A),_.call(n,k),b.call(n,k),d.call(n,A),y.call(n,k),v.call(n,k)})}var t,e=ya.scale.linear(),r=Uc,i=6,u=6,a=6,o=3,c=[10],l=null,s=0;return n.scale=function(t){return arguments.length?(e=t,n):e},n.orient=function(t){return arguments.length?(r=t in Ic?t+"":Uc,n):r},n.ticks=function(){return arguments.length?(c=arguments,n):c},n.tickValues=function(t){return arguments.length?(l=t,n):l},n.tickFormat=function(e){return arguments.length?(t=e,n):t},n.tickSize=function(t,e){if(!arguments.length)return i;var r=arguments.length-1;return i=+t,u=r>1?+e:i,a=r>0?+arguments[r]:i,n},n.tickPadding=function(t){return arguments.length?(o=+t,n):o},n.tickSubdivide=function(t){return arguments.length?(s=+t,n):s},n};var Uc="bottom",Ic={top:1,right:1,bottom:1,left:1};ya.svg.brush=function(){function n(u){u.each(function(){var u,a=ya.select(this),s=a.selectAll(".background").data([0]),f=a.selectAll(".extent").data([0]),h=a.selectAll(".resize").data(l,String);a.style("pointer-events","all").on("mousedown.brush",i).on("touchstart.brush",i),s.enter().append("rect").attr("class","background").style("visibility","hidden").style("cursor","crosshair"),f.enter().append("rect").attr("class","extent").style("cursor","move"),h.enter().append("g").attr("class",function(n){return"resize "+n}).style("cursor",function(n){return Vc[n]}).append("rect").attr("x",function(n){return/[ew]$/.test(n)?-3:null}).attr("y",function(n){return/^[ns]/.test(n)?-3:null}).attr("width",6).attr("height",6).style("visibility","hidden"),h.style("display",n.empty()?"none":null),h.exit().remove(),o&&(u=Bi(o),s.attr("x",u[0]).attr("width",u[1]-u[0]),e(a)),c&&(u=Bi(c),s.attr("y",u[0]).attr("height",u[1]-u[0]),r(a)),t(a)})}function t(n){n.selectAll(".resize").attr("transform",function(n){return"translate("+s[+/e$/.test(n)][0]+","+s[+/^s/.test(n)][1]+")"})}function e(n){n.select(".extent").attr("x",s[0][0]),n.selectAll(".extent,.n>rect,.s>rect").attr("width",s[1][0]-s[0][0])}function r(n){n.select(".extent").attr("y",s[0][1]),n.selectAll(".extent,.e>rect,.w>rect").attr("height",s[1][1]-s[0][1])}function i(){function i(){var n=ya.event.changedTouches;return n?ya.touches(M,n)[0]:ya.mouse(M)}function l(){32==ya.event.keyCode&&(k||(v=null,N[0]-=s[1][0],N[1]-=s[1][1],k=2),g())}function h(){32==ya.event.keyCode&&2==k&&(N[0]+=s[1][0],N[1]+=s[1][1],k=0,g())}function p(){var n=i(),u=!1;y&&(n[0]+=y[0],n[1]+=y[1]),k||(ya.event.altKey?(v||(v=[(s[0][0]+s[1][0])/2,(s[0][1]+s[1][1])/2]),N[0]=s[+(n[0]<v[0])][0],N[1]=s[+(n[1]<v[1])][1]):v=null),S&&m(n,o,0)&&(e(_),u=!0),E&&m(n,c,1)&&(r(_),u=!0),u&&(t(_),b({type:"brush",mode:k?"move":"resize"}))}function m(n,t,e){var r,i,a=Bi(t),o=a[0],c=a[1],l=N[e],h=s[1][e]-s[0][e];return k&&(o-=l,c-=h+l),r=f[e]?Math.max(o,Math.min(c,n[e])):n[e],k?i=(r+=l)+h:(v&&(l=Math.max(o,Math.min(c,2*v[e]-r))),r>l?(i=r,r=l):i=l),s[0][e]!==r||s[1][e]!==i?(u=null,s[0][e]=r,s[1][e]=i,!0):void 0}function d(){p(),_.style("pointer-events","all").selectAll(".resize").style("display",n.empty()?"none":null),ya.select("body").style("cursor",null),q.on("mousemove.brush",null).on("mouseup.brush",null).on("touchmove.brush",null).on("touchend.brush",null).on("keydown.brush",null).on("keyup.brush",null),A(),b({type:"brushend"})}var v,y,M=this,x=ya.select(ya.event.target),b=a.of(M,arguments),_=ya.select(M),w=x.datum(),S=!/^(n|s)$/.test(w)&&o,E=!/^(e|w)$/.test(w)&&c,k=x.classed("extent"),A=H(),N=i(),q=ya.select(ba).on("keydown.brush",l).on("keyup.brush",h);if(ya.event.changedTouches?q.on("touchmove.brush",p).on("touchend.brush",d):q.on("mousemove.brush",p).on("mouseup.brush",d),k)N[0]=s[0][0]-N[0],N[1]=s[0][1]-N[1];else if(w){var T=+/w$/.test(w),C=+/^n/.test(w);y=[s[1-T][0]-N[0],s[1-C][1]-N[1]],N[0]=s[T][0],N[1]=s[C][1]}else ya.event.altKey&&(v=N.slice());_.style("pointer-events","none").selectAll(".resize").style("display",null),ya.select("body").style("cursor",x.style("cursor")),b({type:"brushstart"}),p()}var u,a=m(n,"brushstart","brush","brushend"),o=null,c=null,l=Xc[0],s=[[0,0],[0,0]],f=[!0,!0];return n.x=function(t){return arguments.length?(o=t,l=Xc[!o<<1|!c],n):o},n.y=function(t){return arguments.length?(c=t,l=Xc[!o<<1|!c],n):c},n.clamp=function(t){return arguments.length?(o&&c?f=[!!t[0],!!t[1]]:(o||c)&&(f[+!o]=!!t),n):o&&c?f:o||c?f[+!o]:null},n.extent=function(t){var e,r,i,a,l;return arguments.length?(u=[[0,0],[0,0]],o&&(e=t[0],r=t[1],c&&(e=e[0],r=r[0]),u[0][0]=e,u[1][0]=r,o.invert&&(e=o(e),r=o(r)),e>r&&(l=e,e=r,r=l),s[0][0]=0|e,s[1][0]=0|r),c&&(i=t[0],a=t[1],o&&(i=i[1],a=a[1]),u[0][1]=i,u[1][1]=a,c.invert&&(i=c(i),a=c(a)),i>a&&(l=i,i=a,a=l),s[0][1]=0|i,s[1][1]=0|a),n):(t=u||s,o&&(e=t[0][0],r=t[1][0],u||(e=s[0][0],r=s[1][0],o.invert&&(e=o.invert(e),r=o.invert(r)),e>r&&(l=e,e=r,r=l))),c&&(i=t[0][1],a=t[1][1],u||(i=s[0][1],a=s[1][1],c.invert&&(i=c.invert(i),a=c.invert(a)),i>a&&(l=i,i=a,a=l))),o&&c?[[e,i],[r,a]]:o?[e,r]:c&&[i,a])},n.clear=function(){return u=null,s[0][0]=s[0][1]=s[1][0]=s[1][1]=0,n},n.empty=function(){return o&&s[0][0]===s[1][0]||c&&s[0][1]===s[1][1]},ya.rebind(n,a,"on")};var Vc={n:"ns-resize",e:"ew-resize",s:"ns-resize",w:"ew-resize",nw:"nwse-resize",ne:"nesw-resize",se:"nwse-resize",sw:"nesw-resize"},Xc=[["n","e","s","w","nw","ne","se","sw"],["e","w"],["n","s"],[]];ya.time={};var Zc=Date,Bc=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"];zu.prototype={getDate:function(){return this._.getUTCDate()},getDay:function(){return this._.getUTCDay()},getFullYear:function(){return this._.getUTCFullYear()},getHours:function(){return this._.getUTCHours()},getMilliseconds:function(){return this._.getUTCMilliseconds()},getMinutes:function(){return this._.getUTCMinutes()},getMonth:function(){return this._.getUTCMonth()},getSeconds:function(){return this._.getUTCSeconds()},getTime:function(){return this._.getTime()},getTimezoneOffset:function(){return 0},valueOf:function(){return this._.valueOf()},setDate:function(){$c.setUTCDate.apply(this._,arguments)},setDay:function(){$c.setUTCDay.apply(this._,arguments)},setFullYear:function(){$c.setUTCFullYear.apply(this._,arguments)},setHours:function(){$c.setUTCHours.apply(this._,arguments)},setMilliseconds:function(){$c.setUTCMilliseconds.apply(this._,arguments)},setMinutes:function(){$c.setUTCMinutes.apply(this._,arguments)},setMonth:function(){$c.setUTCMonth.apply(this._,arguments)},setSeconds:function(){$c.setUTCSeconds.apply(this._,arguments)},setTime:function(){$c.setTime.apply(this._,arguments)}};var $c=Date.prototype,Wc="%a %b %e %X %Y",Jc="%m/%d/%Y",Gc="%H:%M:%S",Kc=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],Qc=["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],nl=["January","February","March","April","May","June","July","August","September","October","November","December"],tl=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];ya.time.year=Du(function(n){return n=ya.time.day(n),n.setMonth(0,1),n},function(n,t){n.setFullYear(n.getFullYear()+t)},function(n){return n.getFullYear()}),ya.time.years=ya.time.year.range,ya.time.years.utc=ya.time.year.utc.range,ya.time.day=Du(function(n){var t=new Zc(2e3,0);return t.setFullYear(n.getFullYear(),n.getMonth(),n.getDate()),t},function(n,t){n.setDate(n.getDate()+t)},function(n){return n.getDate()-1}),ya.time.days=ya.time.day.range,ya.time.days.utc=ya.time.day.utc.range,ya.time.dayOfYear=function(n){var t=ya.time.year(n);return Math.floor((n-t-6e4*(n.getTimezoneOffset()-t.getTimezoneOffset()))/864e5)},Bc.forEach(function(n,t){n=n.toLowerCase(),t=7-t;var e=ya.time[n]=Du(function(n){return(n=ya.time.day(n)).setDate(n.getDate()-(n.getDay()+t)%7),n},function(n,t){n.setDate(n.getDate()+7*Math.floor(t))},function(n){var e=ya.time.year(n).getDay();return Math.floor((ya.time.dayOfYear(n)+(e+t)%7)/7)-(e!==t)});ya.time[n+"s"]=e.range,ya.time[n+"s"].utc=e.utc.range,ya.time[n+"OfYear"]=function(n){var e=ya.time.year(n).getDay();return Math.floor((ya.time.dayOfYear(n)+(e+t)%7)/7)}}),ya.time.week=ya.time.sunday,ya.time.weeks=ya.time.sunday.range,ya.time.weeks.utc=ya.time.sunday.utc.range,ya.time.weekOfYear=ya.time.sundayOfYear,ya.time.format=function(n){function t(t){for(var r,i,u,a=[],o=-1,c=0;++o<e;)37===n.charCodeAt(o)&&(a.push(n.substring(c,o)),null!=(i=fl[r=n.charAt(++o)])&&(r=n.charAt(++o)),(u=hl[r])&&(r=u(t,null==i?"e"===r?" ":"0":i)),a.push(r),c=o+1);return a.push(n.substring(c,o)),a.join("")}var e=n.length;return t.parse=function(t){var e={y:1900,m:0,d:1,H:0,M:0,S:0,L:0},r=Lu(e,n,t,0);if(r!=t.length)return null;"p"in e&&(e.H=e.H%12+12*e.p);var i=new Zc;return"j"in e?i.setFullYear(e.y,0,e.j):"w"in e&&("W"in e||"U"in e)?(i.setFullYear(e.y,0,1),i.setFullYear(e.y,0,"W"in e?(e.w+6)%7+7*e.W-(i.getDay()+5)%7:e.w+7*e.U-(i.getDay()+6)%7)):i.setFullYear(e.y,e.m,e.d),i.setHours(e.H,e.M,e.S,e.L),i},t.toString=function(){return n},t};var el=Hu(Kc),rl=Fu(Kc),il=Hu(Qc),ul=Fu(Qc),al=Hu(nl),ol=Fu(nl),cl=Hu(tl),ll=Fu(tl),sl=/^%/,fl={"-":"",_:" ",0:"0"},hl={a:function(n){return Qc[n.getDay()]},A:function(n){return Kc[n.getDay()]},b:function(n){return tl[n.getMonth()]},B:function(n){return nl[n.getMonth()]},c:ya.time.format(Wc),d:function(n,t){return Pu(n.getDate(),t,2)},e:function(n,t){return Pu(n.getDate(),t,2)},H:function(n,t){return Pu(n.getHours(),t,2)},I:function(n,t){return Pu(n.getHours()%12||12,t,2)},j:function(n,t){return Pu(1+ya.time.dayOfYear(n),t,3)},L:function(n,t){return Pu(n.getMilliseconds(),t,3)},m:function(n,t){return Pu(n.getMonth()+1,t,2)},M:function(n,t){return Pu(n.getMinutes(),t,2)},p:function(n){return n.getHours()>=12?"PM":"AM"},S:function(n,t){return Pu(n.getSeconds(),t,2)},U:function(n,t){return Pu(ya.time.sundayOfYear(n),t,2)},w:function(n){return n.getDay()},W:function(n,t){return Pu(ya.time.mondayOfYear(n),t,2)},x:ya.time.format(Jc),X:ya.time.format(Gc),y:function(n,t){return Pu(n.getFullYear()%100,t,2)},Y:function(n,t){return Pu(n.getFullYear()%1e4,t,4)},Z:aa,"%":function(){return"%"}},gl={a:Ou,A:Yu,b:Vu,B:Xu,c:Zu,d:Qu,e:Qu,H:ta,I:ta,j:na,L:ia,m:Ku,M:ea,p:ua,S:ra,U:Uu,w:Ru,W:Iu,x:Bu,X:$u,y:Ju,Y:Wu,"%":oa},pl=/^\s*\d+/,ml=ya.map({am:0,pm:1});ya.time.format.utc=function(n){function t(n){try{Zc=zu;var t=new Zc;return t._=n,e(t)}finally{Zc=Date}}var e=ya.time.format(n);return t.parse=function(n){try{Zc=zu;var t=e.parse(n);return t&&t._}finally{Zc=Date}},t.toString=e.toString,t};var dl=ya.time.format.utc("%Y-%m-%dT%H:%M:%S.%LZ");ya.time.format.iso=Date.prototype.toISOString&&+new Date("2000-01-01T00:00:00.000Z")?ca:dl,ca.parse=function(n){var t=new Date(n);return isNaN(t)?null:t},ca.toString=dl.toString,ya.time.second=Du(function(n){return new Zc(1e3*Math.floor(n/1e3))},function(n,t){n.setTime(n.getTime()+1e3*Math.floor(t))},function(n){return n.getSeconds()}),ya.time.seconds=ya.time.second.range,ya.time.seconds.utc=ya.time.second.utc.range,ya.time.minute=Du(function(n){return new Zc(6e4*Math.floor(n/6e4))},function(n,t){n.setTime(n.getTime()+6e4*Math.floor(t))},function(n){return n.getMinutes()}),ya.time.minutes=ya.time.minute.range,ya.time.minutes.utc=ya.time.minute.utc.range,ya.time.hour=Du(function(n){var t=n.getTimezoneOffset()/60;return new Zc(36e5*(Math.floor(n/36e5-t)+t))},function(n,t){n.setTime(n.getTime()+36e5*Math.floor(t))},function(n){return n.getHours()}),ya.time.hours=ya.time.hour.range,ya.time.hours.utc=ya.time.hour.utc.range,ya.time.month=Du(function(n){return n=ya.time.day(n),n.setDate(1),n},function(n,t){n.setMonth(n.getMonth()+t)},function(n){return n.getMonth()}),ya.time.months=ya.time.month.range,ya.time.months.utc=ya.time.month.utc.range;var vl=[1e3,5e3,15e3,3e4,6e4,3e5,9e5,18e5,36e5,108e5,216e5,432e5,864e5,1728e5,6048e5,2592e6,7776e6,31536e6],yl=[[ya.time.second,1],[ya.time.second,5],[ya.time.second,15],[ya.time.second,30],[ya.time.minute,1],[ya.time.minute,5],[ya.time.minute,15],[ya.time.minute,30],[ya.time.hour,1],[ya.time.hour,3],[ya.time.hour,6],[ya.time.hour,12],[ya.time.day,1],[ya.time.day,2],[ya.time.week,1],[ya.time.month,1],[ya.time.month,3],[ya.time.year,1]],Ml=[[ya.time.format("%Y"),Xt],[ya.time.format("%B"),function(n){return n.getMonth()}],[ya.time.format("%b %d"),function(n){return 1!=n.getDate()}],[ya.time.format("%a %d"),function(n){return n.getDay()&&1!=n.getDate()}],[ya.time.format("%I %p"),function(n){return n.getHours()}],[ya.time.format("%I:%M"),function(n){return n.getMinutes()}],[ya.time.format(":%S"),function(n){return n.getSeconds()}],[ya.time.format(".%L"),function(n){return n.getMilliseconds()}]],xl=ya.scale.linear(),bl=fa(Ml);yl.year=function(n,t){return xl.domain(n.map(ga)).ticks(t).map(ha)},ya.time.scale=function(){return la(ya.scale.linear(),yl,bl)};var _l=yl.map(function(n){return[n[0].utc,n[1]]}),wl=[[ya.time.format.utc("%Y"),Xt],[ya.time.format.utc("%B"),function(n){return n.getUTCMonth()}],[ya.time.format.utc("%b %d"),function(n){return 1!=n.getUTCDate()}],[ya.time.format.utc("%a %d"),function(n){return n.getUTCDay()&&1!=n.getUTCDate()}],[ya.time.format.utc("%I %p"),function(n){return n.getUTCHours()}],[ya.time.format.utc("%I:%M"),function(n){return n.getUTCMinutes()}],[ya.time.format.utc(":%S"),function(n){return n.getUTCSeconds()}],[ya.time.format.utc(".%L"),function(n){return n.getUTCMilliseconds()}]],Sl=fa(wl);return _l.year=function(n,t){return xl.domain(n.map(ma)).ticks(t).map(pa)},ya.time.scale.utc=function(){return la(ya.scale.linear(),_l,Sl)},ya.text=dt(function(n){return n.responseText}),ya.json=function(n,t){return vt(n,"application/json",da,t)},ya.html=function(n,t){return vt(n,"text/html",va,t)},ya.xml=dt(function(n){return n.responseXML}),ya}();
/* http://keith-wood.name/svg.html
   SVG for jQuery v1.4.5.
   Written by Keith Wood (kbwood{at}iinet.com.au) August 2007.
   Dual licensed under the GPL (http://dev.jquery.com/browser/trunk/jquery/GPL-LICENSE.txt) and 
   MIT (http://dev.jquery.com/browser/trunk/jquery/MIT-LICENSE.txt) licenses. 
   Please attribute the author if you use it. */

(function (jQuery) { // Hide scope, no jQuery conflict
    
    /* Determine whether a given ActiveX control is available.
       @param  classId  (string) the ID for the ActiveX control
       @return  (boolean) true if found, false if not */
    function detectActiveX(classId) {
	try {
	    return !!(window.ActiveXObject && new ActiveXObject(classId));
	}
	catch (e) {
	    return false;
	}
    }

    /* SVG manager.
       Use the singleton instance of this class, jQuery.svg, 
       to interact with the SVG functionality. */
    function SVGManager() {
	this._settings = []; // Settings to be remembered per SVG object
	this._extensions = []; // List of SVG extensions added to SVGWrapper
	// for each entry [0] is extension name, [1] is extension class (function)
	// the function takes one parameter - the SVGWrapper instance
	this.regional = []; // Localisations, indexed by language, '' for default (English)
	this.regional[''] = {errorLoadingText: 'Error loading',
			     notSupportedText: 'This browser does not support SVG'};
	this.local = this.regional['']; // Current localisation
	this._uuid = new Date().getTime();
	this._renesis = detectActiveX('RenesisX.RenesisCtrl');
    }
        
    var PROP_NAME = 'svgwrapper';
    
    jQuery.extend(SVGManager.prototype, {
	/* Class name added to elements to indicate already configured with SVG. */
	markerClassName: 'hasSVG',
	
	/* SVG namespace. */
	svgNS: 'http://www.w3.org/2000/svg',
	/* XLink namespace. */
	xlinkNS: 'http://www.w3.org/1999/xlink',
	
	/* SVG wrapper class. */
	_wrapperClass: SVGWrapper,
	
	/* Camel-case versions of attribute names containing dashes or are reserved words. */
	_attrNames: {class_: 'class', in_: 'in',
		     alignmentBaseline: 'alignment-baseline', baselineShift: 'baseline-shift',
		     clipPath: 'clip-path', clipRule: 'clip-rule',
		     colorInterpolation: 'color-interpolation',
		     colorInterpolationFilters: 'color-interpolation-filters',
		     colorRendering: 'color-rendering', dominantBaseline: 'dominant-baseline',
		     enableBackground: 'enable-background', fillOpacity: 'fill-opacity',
		     fillRule: 'fill-rule', floodColor: 'flood-color',
		     floodOpacity: 'flood-opacity', fontFamily: 'font-family',
		     fontSize: 'font-size', fontSizeAdjust: 'font-size-adjust',
		     fontStretch: 'font-stretch', fontStyle: 'font-style',
		     fontVariant: 'font-variant', fontWeight: 'font-weight',
		     glyphOrientationHorizontal: 'glyph-orientation-horizontal',
		     glyphOrientationVertical: 'glyph-orientation-vertical',
		     horizAdvX: 'horiz-adv-x', horizOriginX: 'horiz-origin-x',
		     imageRendering: 'image-rendering', letterSpacing: 'letter-spacing',
		     lightingColor: 'lighting-color', markerEnd: 'marker-end',
		     markerMid: 'marker-mid', markerStart: 'marker-start',
		     stopColor: 'stop-color', stopOpacity: 'stop-opacity',
		     strikethroughPosition: 'strikethrough-position',
		     strikethroughThickness: 'strikethrough-thickness',
		     strokeDashArray: 'stroke-dasharray', strokeDashOffset: 'stroke-dashoffset',
		     strokeLineCap: 'stroke-linecap', strokeLineJoin: 'stroke-linejoin',
		     strokeMiterLimit: 'stroke-miterlimit', strokeOpacity: 'stroke-opacity',
		     strokeWidth: 'stroke-width', textAnchor: 'text-anchor',
		     textDecoration: 'text-decoration', textRendering: 'text-rendering',
		     underlinePosition: 'underline-position', underlineThickness: 'underline-thickness',
		     vertAdvY: 'vert-adv-y', vertOriginY: 'vert-origin-y',
		     wordSpacing: 'word-spacing', writingMode: 'writing-mode'},
	
	/* Add the SVG object to its container. */
	_attachSVG: function(container, settings) {
	    var svg = (container.namespaceURI == this.svgNS ? container : null);
	    container = (svg ? null : container);
	    if (jQuery(container || svg).hasClass(this.markerClassName)) {
		return;
	    }
	    if (typeof settings == 'string') {
		settings = {loadURL: settings};
	    }
	    else if (typeof settings == 'function') {
		settings = {onLoad: settings};
	    }
	    jQuery(container || svg).addClass(this.markerClassName);
	    try {
		if (!svg) {
		    svg = document.createElementNS(this.svgNS, 'svg');
		    svg.setAttribute('version', '1.1');
		    if (container.clientWidth > 0) {
			svg.setAttribute('width', container.clientWidth);
		    }
		    if (container.clientHeight > 0) {
			svg.setAttribute('height', container.clientHeight);
		    }
		    container.appendChild(svg);
		}
		this._afterLoad(container, svg, settings || {});
	    }
	    catch (e) {
		if (jQuery.browser.msie) {
		    if (!container.id) {
			container.id = 'svg' + (this._uuid++);
		    }
		    this._settings[container.id] = settings;
		    container.innerHTML = '<embed type="image/svg+xml" width="100%" ' +
			'height="100%" src="' + (settings.initPath || '') + 'blank.svg" ' +
			'pluginspage="http://www.adobe.com/svg/viewer/install/main.html"/>';
		}
		else {
		    container.innerHTML = '<p class="svg_error">' +
			this.local.notSupportedText + '</p>';
		}
	    }
	},
	
	/* SVG callback after loading - register SVG root. */
	_registerSVG: function() {
	    var i;
	    for (i = 0; i < document.embeds.length; i++) { // Check all
		var container = document.embeds[i].parentNode;
		if (!jQuery(container).hasClass(jQuery.svg.markerClassName) || // Not SVG
		    jQuery.data(container, PROP_NAME)) { // Already done
		    continue;
		}
		var svg = null;
		try {
		    svg = document.embeds[i].getSVGDocument();
		}
		catch(e) {
		    setTimeout(jQuery.svg._registerSVG, 250); // Renesis takes longer to load
		    return;
		}
		svg = (svg ? svg.documentElement : null);
		if (svg) {
		    jQuery.svg._afterLoad(container, svg);
		}
	    }
	},
	
	/* Post-processing once loaded. */
	_afterLoad: function(container, svg, settings) {
	    var settings = settings || this._settings[container.id];
	    this._settings[container ? container.id : ''] = null;
	    var wrapper = new this._wrapperClass(svg, container);
	    jQuery.data(container || svg, PROP_NAME, wrapper);
	    try {
		if (settings.loadURL) { // Load URL
		    wrapper.load(settings.loadURL, settings);
		}
		if (settings.settings) { // Additional settings
		    wrapper.configure(settings.settings);
		}
		if (settings.onLoad && !settings.loadURL) { // Onload callback
		    settings.onLoad.apply(container || svg, [wrapper]);
		}
	    }
	    catch (e) {
		alert(e);
	    }
	},
	
	/* Return the SVG wrapper created for a given container.
	   @param  container  (string) selector for the container or
	   (element) the container for the SVG object or
	   jQuery collection - first entry is the container
	   @return  (SVGWrapper) the corresponding SVG wrapper element, or null if not attached */
	_getSVG: function(container) {
	    container = (typeof container == 'string' ? jQuery(container)[0] :
			 (container.jquery ? container[0] : container));
	    return jQuery.data(container, PROP_NAME);
	},
	
	/* Remove the SVG functionality from a div.
	   @param  container  (element) the container for the SVG object */
	_destroySVG: function(container) {
	    var jQuerycontainer = jQuery(container);
	    if (!jQuerycontainer.hasClass(this.markerClassName)) {
		return;
	    }
	    jQuerycontainer.removeClass(this.markerClassName);
	    if (container.namespaceURI != this.svgNS) {
		jQuerycontainer.empty();
	    }
	    jQuery.removeData(container, PROP_NAME);
	},
	
	/* Extend the SVGWrapper object with an embedded class.
	   The constructor function must take a single parameter that is
	   a reference to the owning SVG root object. This allows the 
	   extension to access the basic SVG functionality.
	   @param  name      (string) the name of the SVGWrapper attribute to access the new class
	   @param  extClass  (function) the extension class constructor */
	addExtension: function(name, extClass) {
	    this._extensions.push([name, extClass]);
	},
	
	/* Does this node belong to SVG?
	   @param  node  (element) the node to be tested
	   @return  (boolean) true if an SVG node, false if not */
	isSVGElem: function(node) {
	    return (node.nodeType == 1 && node.namespaceURI == jQuery.svg.svgNS);
	}
    });
    
    /* The main SVG interface, which encapsulates the SVG element.
       Obtain a reference from jQuery().svg('get') */
    function SVGWrapper(svg, container) {
	this._svg = svg; // The SVG root node
	this._container = container; // The containing div
	for (var i = 0; i < jQuery.svg._extensions.length; i++) {
	    var extension = jQuery.svg._extensions[i];
	    this[extension[0]] = new extension[1](this);
	}
    }
    
    jQuery.extend(SVGWrapper.prototype, {

	/*
	  high level graphics
	*/

	/* Draw a donut slice.
	   @param center (int) radius of the full circle
	   @param inner (int) radius of the inner circle of the current slice
	   @param outer (int) radius of the outer circle of the current slice
	   @param startAngle (int) angle of the start of the slice (in degrees)
	   @param endAngle (int) angle of the end of the slice (in degrees)
	   @param settings (object) any key/value pairs for the SVG element
	   @return (element) the new shape node */
	donutslice: function(params) {
	    var center = params.center;
	    var inner = params.inner;
	    var outer = params.outer;
	    var startAngle = params.startAngle;
	    var endAngle = params.endAngle;
	    var settings = params.settings;

	    var r1 = ((outer - 1) / 2);
	    var r2 = ((inner - 1) / 2);

	    var startAngleRad = Math.PI*startAngle/180;
	    var endAngleRad = Math.PI*endAngle/180;

	    var x1inner = parseInt(center + r2*Math.cos(startAngleRad));
	    var y1inner = parseInt(center + r2*Math.sin(startAngleRad));

	    var x2inner = parseInt(center + r2*Math.cos(endAngleRad));
	    var y2inner = parseInt(center + r2*Math.sin(endAngleRad));

	    var x1outer = parseInt(center + r1*Math.cos(startAngleRad));
	    var y1outer = parseInt(center + r1*Math.sin(startAngleRad));

	    var x2outer = parseInt(center + r1*Math.cos(endAngleRad));
	    var y2outer = parseInt(center + r1*Math.sin(endAngleRad));

	    r1 = parseInt(r1);
	    r2 = parseInt(r2);

	    var path = "M"+x1inner+","+y1inner+"  L"+x1outer+","+y1outer+"  A"+r1+","+r1+" 0 0,1 "+x2outer+","+y2outer+" L"+x2inner+","+y2inner+"  A"+r2+","+r2+" 0 0,0 "+x1inner+","+y1inner;

	    return this.path(path, settings);
	},

	axis: function(params) {
	    var start = params.start; // start pixel of the axis in the SVG
	    var end = params.end; // end pixel of the axis in the SVG
	    var shift = params.shift; // shift from left (vertical) or top (horizontal) of the axis
	    var min = params.min == null ? 0 : params.min; // minimum value of the scale
	    var max = params.max == null ? 100 : params.max; // maximum value of the scale

	    var showLabels = params.showLabels == null ? true : false;
	    var labels = params.labels; // array of labels if the labels should not be the value
	    var labelRotation = params.labelRotation == null ? 0 : params.labelRotation; // degrees the labels should be rotated
	    var labelFontSize = params.labelFontSize == null ? 12 : params.labelFontSize;
	    var labelFontWeight = params.labelFontWeight == null ? 100 : params.labelFontWeight;
	    var labelFontFamily = params.labelFontFamily == null ? "Helvetica" : params.labelFontFamily;

	    var minorTicks = params.minorTicks == null ? 4 : params.minorTicks; // number of minor ticks between major ticks
	    var minorTickLength = params.minorTickLength == null ? 5 : params.minorTickLength;
	    var majorTickLength = params.majorTickLength == null ? 10 : params.majorTickLenght;
	    var minorTickShift = params.minorTickShift == null ? 0 : params.minorTickShift;
	    var majorTickShift = params.majorTickShift == null ? 0 : params.majorTickShift;
	    var majorTicks = params.majorTicks == null ? 10 : params.majorTicks; // number of major ticks on the axis
	    var scale = params.scale == null ? "linear" : params.scale;
	    var direction = params.direction == null ? "horizontal" : params.direction;

	    var length = end - start;

	    // create group
	    var g = this.group();

	    // create baseline
	    var x1 = direction == "horizontal" ? start : shift;
	    var y1 = direction == "horizontal" ? shift : start;
	    var x2 = direction == "horizontal" ? end : shift;
	    var y2 = direction == "horizontal" ? shift : end;
	    this.line(g, x1, y1, x2, y2, { stroke: "black", strokeWidth: 1 });

	    // create ticks
	    var tickpos = start;
	    x1 = direction == "horizontal" ? tickpos : shift + majorTickShift;
	    y1 = direction == "horizontal" ? shift + majorTickShift : tickpos;
	    x2 = direction == "horizontal" ? tickpos : shift + majorTickShift - majorTickLength;
	    y2 = direction == "horizontal" ? shift + majorTickShift + majorTickLength : tickpos;
	    var x1m = direction == "horizontal" ? tickpos : shift + minorTickShift;
	    var y1m = direction == "horizontal" ? shift + minorTickShift : tickpos;
	    var x2m = direction == "horizontal" ? tickpos : shift + minorTickShift - minorTickLength;
	    var y2m = direction == "horizontal" ? shift + minorTickShift + minorTickLength : tickpos;

	    var majorTickSpace = Math.floor(length / majorTicks);
	    var minorTickSpace = Math.floor(majorTickSpace / (minorTicks + 1));
	    
	    for (var i=0; i<=majorTicks; i++) {
		this.line(g, x1, y1, x2, y2, { stroke: "black", strokeWidth: 1 });
		if (showLabels) {
		    var text = (min + ((direction == "horizontal" ? i : majorTicks - i) * ((max - min) / majorTicks))).formatString();
		    if (labels && labels.length) {
			text = labels[i];
		    }
		    var lx = x1 + (direction == "horizontal" ? 0 : (-1 * (majorTickLength + majorTickShift) - 1));
		    var ly = y1 + parseInt(labelFontSize / (direction == "horizontal" ? 1 : 3)) + (direction == "horizontal" ?  (majorTickLength + majorTickShift + 1) : 0);
		    this.text(g, lx, ly, text, { textAnchor: (direction == "horizontal" ? (labelRotation == null ? "middle" : "end") : "end"), fontSize: labelFontSize+'px', stroke: "black", fontWeight: labelFontWeight, fontFamily: labelFontFamily, transform: (labelRotation == null ? "" : "rotate(-"+labelRotation+","+lx+","+ly+")") });
		}
		if (majorTicks != i) {
		    for (var h=0; h<minorTicks; h++) {
			if (direction == 'horizontal') {
			    x1m += minorTickSpace;
			    x2m += minorTickSpace;
			} else {
			    y1m += minorTickSpace;
			    y2m += minorTickSpace;
			}
			this.line(g, x1m, y1m, x2m, y2m, { stroke: "black", strokeWidth: 1 });
		    }
		}
		if (direction == 'horizontal') {
		    x1 += majorTickSpace;
		    x2 += majorTickSpace;
		} else {
		    y1 += majorTickSpace;
		    y2 += majorTickSpace;
		}
		if (direction == 'horizontal') {
		    x1m = x1;
		    x2m = x2;
		} else {
		    y1m = y1;
		    y2m = y2;
		}
	    }
	    
	    return g;
	},

	legend: function(params) {
	    var top = params.top == null ? 0 : params.top;
	    var left = params.left == null ? 0 : params.left;
	    var labels = params.labels;
	    var colors = params.colors;
	    var fontSize = params.fontSize == null ? 12 : params.fontSize;
	    var fontWeight = params.fontWeight == null ? "normal" : params.fontWeight;
	    var fontFamily = params.fontFamily == null ? "Helvetica" : params.fontFamily;
	    var labelSpacing = params.labelSpacing == null ? 10 : params.labelSpacing;

	    var g = this.group();
	    for (var i=0; i<labels.length; i++) {
		this.rect(g, left, top, fontSize, fontSize, { stroke: "white", strokeWidth: 0, fill: colors[i] });
		this.text(g, left + fontSize + fontSize, top + fontSize - 2, labels[i], { stroke: "black", fontSize: fontSize, fontFamily: fontFamily, fontWeight: fontWeight });
		top += fontSize + labelSpacing;
	    }

	    return g;
	},

	/*
	  end of high level graphics
	 */

	/* Retrieve the width of the SVG object. */
	_width: function() {
	    return (this._container ? this._container.clientWidth : this._svg.width);
	},
	
	/* Retrieve the height of the SVG object. */
	_height: function() {
	    return (this._container ? this._container.clientHeight : this._svg.height);
	},
	
	/* Retrieve the root SVG element.
	   @return  the top-level SVG element */
	root: function() {
	    return this._svg;
	},
	
	/* Configure a SVG node.
	   @param  node      (element, optional) the node to configure
	   @param  settings  (object) additional settings for the root
	   @param  clear     (boolean) true to remove existing attributes first,
	   false to add to what is already there (optional)
	   @return  (SVGWrapper) this root */
	configure: function(node, settings, clear) {
	    if (!node.nodeName) {
		clear = settings;
		settings = node;
		node = this._svg;
	    }
	    if (clear) {
		for (var i = node.attributes.length - 1; i >= 0; i--) {
		    var attr = node.attributes.item(i);
		    if (!(attr.nodeName == 'onload' || attr.nodeName == 'version' || 
			  attr.nodeName.substring(0, 5) == 'xmlns')) {
			node.attributes.removeNamedItem(attr.nodeName);
		    }
		}
	    }
	    for (var attrName in settings) {
		node.setAttribute(jQuery.svg._attrNames[attrName] || attrName, settings[attrName]);
	    }
	    return this;
	},
	
	/* Locate a specific element in the SVG document.
	   @param  id  (string) the element's identifier
	   @return  (element) the element reference, or null if not found */
	getElementById: function(id) {
	    return this._svg.ownerDocument.getElementById(id);
	},
	
	/* Change the attributes for a SVG node.
	   @param  element   (SVG element) the node to change
	   @param  settings  (object) the new settings
	   @return  (SVGWrapper) this root */
	change: function(element, settings) {
	    if (element) {
		for (var name in settings) {
		    if (settings[name] == null) {
			element.removeAttribute(jQuery.svg._attrNames[name] || name);
		    }
		    else {
			element.setAttribute(jQuery.svg._attrNames[name] || name, settings[name]);
		    }
		}
	    }
	    return this;
	},
	
	/* Check for parent being absent and adjust arguments accordingly. */
	_args: function(values, names, optSettings) {
	    names.splice(0, 0, 'parent');
	    names.splice(names.length, 0, 'settings');
	    var args = {};
	    var offset = 0;
	    if (values[0] != null && values[0].jquery) {
		values[0] = values[0][0];
	    }
	    if (values[0] != null && !(typeof values[0] == 'object' && values[0].nodeName)) {
		args['parent'] = null;
		offset = 1;
	    }
	    for (var i = 0; i < values.length; i++) {
		args[names[i + offset]] = values[i];
	    }
	    if (optSettings) {
		jQuery.each(optSettings, function(i, value) {
		    if (typeof args[value] == 'object') {
			args.settings = args[value];
			args[value] = null;
		    }
		});
	    }
	    return args;
	},
	
	/* Add a title.
	   @param  parent    (element or jQuery) the parent node for the new title (optional)
	   @param  text      (string) the text of the title
	   @param  settings  (object) additional settings for the title (optional)
	   @return  (element) the new title node */
	title: function(parent, text, settings) {
	    var args = this._args(arguments, ['text']);
	    var node = this._makeNode(args.parent, 'title', args.settings || {});
	    node.appendChild(this._svg.ownerDocument.createTextNode(args.text));
	    return node;
	},
	
	/* Add a description.
	   @param  parent    (element or jQuery) the parent node for the new description (optional)
	   @param  text      (string) the text of the description
	   @param  settings  (object) additional settings for the description (optional)
	   @return  (element) the new description node */
	describe: function(parent, text, settings) {
	    var args = this._args(arguments, ['text']);
	    var node = this._makeNode(args.parent, 'desc', args.settings || {});
	    node.appendChild(this._svg.ownerDocument.createTextNode(args.text));
	    return node;
	},
	
	/* Add a definitions node.
	   @param  parent    (element or jQuery) the parent node for the new definitions (optional)
	   @param  id        (string) the ID of this definitions (optional)
	   @param  settings  (object) additional settings for the definitions (optional)
	   @return  (element) the new definitions node */
	defs: function(parent, id, settings) {
	    var args = this._args(arguments, ['id'], ['id']);
	    return this._makeNode(args.parent, 'defs', jQuery.extend(
		(args.id ? {id: args.id} : {}), args.settings || {}));
	},
	
	/* Add a symbol definition.
	   @param  parent    (element or jQuery) the parent node for the new symbol (optional)
	   @param  id        (string) the ID of this symbol
	   @param  x1        (number) the left coordinate for this symbol
	   @param  y1        (number) the top coordinate for this symbol
	   @param  width     (number) the width of this symbol
	   @param  height    (number) the height of this symbol
	   @param  settings  (object) additional settings for the symbol (optional)
	   @return  (element) the new symbol node */
	symbol: function(parent, id, x1, y1, width, height, settings) {
	    var args = this._args(arguments, ['id', 'x1', 'y1', 'width', 'height']);
	    return this._makeNode(args.parent, 'symbol', jQuery.extend({id: args.id,
									viewBox: args.x1 + ' ' + args.y1 + ' ' + args.width + ' ' + args.height},
								       args.settings || {}));
	},
	
	/* Add a marker definition.
	   @param  parent    (element or jQuery) the parent node for the new marker (optional)
	   @param  id        (string) the ID of this marker
	   @param  refX      (number) the x-coordinate for the reference point
	   @param  refY      (number) the y-coordinate for the reference point
	   @param  mWidth    (number) the marker viewport width
	   @param  mHeight   (number) the marker viewport height
	   @param  orient    (string or int) 'auto' or angle (degrees) (optional)
	   @param  settings  (object) additional settings for the marker (optional)
	   @return  (element) the new marker node */
	marker: function(parent, id, refX, refY, mWidth, mHeight, orient, settings) {
	    var args = this._args(arguments, ['id', 'refX', 'refY',
					      'mWidth', 'mHeight', 'orient'], ['orient']);
	    return this._makeNode(args.parent, 'marker', jQuery.extend(
		{id: args.id, refX: args.refX, refY: args.refY, markerWidth: args.mWidth, 
		 markerHeight: args.mHeight, orient: args.orient || 'auto'}, args.settings || {}));
	},
	
	/* Add a style node.
	   @param  parent    (element or jQuery) the parent node for the new node (optional)
	   @param  styles    (string) the CSS styles
	   @param  settings  (object) additional settings for the node (optional)
	   @return  (element) the new style node */
	style: function(parent, styles, settings) {
	    var args = this._args(arguments, ['styles']);
	    var node = this._makeNode(args.parent, 'style', jQuery.extend(
		{type: 'text/css'}, args.settings || {}));
	    node.appendChild(this._svg.ownerDocument.createTextNode(args.styles));
	    if (jQuery.browser.opera) {
		jQuery('head').append('<style type="text/css">' + args.styles + '</style>');
	    }
	    return node;
	},
	
	/* Add a script node.
	   @param  parent    (element or jQuery) the parent node for the new node (optional)
	   @param  script    (string) the JavaScript code
	   @param  type      (string) the MIME type for the code (optional, default 'text/javascript')
	   @param  settings  (object) additional settings for the node (optional)
	   @return  (element) the new script node */
	script: function(parent, script, type, settings) {
	    var args = this._args(arguments, ['script', 'type'], ['type']);
	    var node = this._makeNode(args.parent, 'script', jQuery.extend(
		{type: args.type || 'text/javascript'}, args.settings || {}));
	    node.appendChild(this._svg.ownerDocument.createTextNode(args.script));
	    if (!jQuery.browser.mozilla) {
		jQuery.globalEval(args.script);
	    }
	    return node;
	},
	
	/* Add a linear gradient definition.
	   Specify all of x1, y1, x2, y2 or none of them.
	   @param  parent    (element or jQuery) the parent node for the new gradient (optional)
	   @param  id        (string) the ID for this gradient
	   @param  stops     (string[][]) the gradient stops, each entry is
	   [0] is offset (0.0-1.0 or 0%-100%), [1] is colour, 
	   [2] is opacity (optional)
	   @param  x1        (number) the x-coordinate of the gradient start (optional)
	   @param  y1        (number) the y-coordinate of the gradient start (optional)
	   @param  x2        (number) the x-coordinate of the gradient end (optional)
	   @param  y2        (number) the y-coordinate of the gradient end (optional)
	   @param  settings  (object) additional settings for the gradient (optional)
	   @return  (element) the new gradient node */
	linearGradient: function(parent, id, stops, x1, y1, x2, y2, settings) {
	    var args = this._args(arguments,
				  ['id', 'stops', 'x1', 'y1', 'x2', 'y2'], ['x1']);
	    var sets = jQuery.extend({id: args.id}, 
				     (args.x1 != null ? {x1: args.x1, y1: args.y1, x2: args.x2, y2: args.y2} : {}));
	    return this._gradient(args.parent, 'linearGradient', 
				  jQuery.extend(sets, args.settings || {}), args.stops);
	},
	
	/* Add a radial gradient definition.
	   Specify all of cx, cy, r, fx, fy or none of them.
	   @param  parent    (element or jQuery) the parent node for the new gradient (optional)
	   @param  id        (string) the ID for this gradient
	   @param  stops     (string[][]) the gradient stops, each entry
	   [0] is offset, [1] is colour, [2] is opacity (optional)
	   @param  cx        (number) the x-coordinate of the largest circle centre (optional)
	   @param  cy        (number) the y-coordinate of the largest circle centre (optional)
	   @param  r         (number) the radius of the largest circle (optional)
	   @param  fx        (number) the x-coordinate of the gradient focus (optional)
	   @param  fy        (number) the y-coordinate of the gradient focus (optional)
	   @param  settings  (object) additional settings for the gradient (optional)
	   @return  (element) the new gradient node */
	radialGradient: function(parent, id, stops, cx, cy, r, fx, fy, settings) {
	    var args = this._args(arguments,
				  ['id', 'stops', 'cx', 'cy', 'r', 'fx', 'fy'], ['cx']);
	    var sets = jQuery.extend({id: args.id}, (args.cx != null ?
						     {cx: args.cx, cy: args.cy, r: args.r, fx: args.fx, fy: args.fy} : {}));
	    return this._gradient(args.parent, 'radialGradient', 
				  jQuery.extend(sets, args.settings || {}), args.stops);
	},
	
	/* Add a gradient node. */
	_gradient: function(parent, name, settings, stops) {
	    var node = this._makeNode(parent, name, settings);
	    for (var i = 0; i < stops.length; i++) {
		var stop = stops[i];
		this._makeNode(node, 'stop', jQuery.extend(
		    {offset: stop[0], stopColor: stop[1]}, 
		    (stop[2] != null ? {stopOpacity: stop[2]} : {})));
	    }
	    return node;
	},
	
	/* Add a pattern definition.
	   Specify all of vx, vy, xwidth, vheight or none of them.
	   @param  parent    (element or jQuery) the parent node for the new pattern (optional)
	   @param  id        (string) the ID for this pattern
	   @param  x         (number) the x-coordinate for the left edge of the pattern
	   @param  y         (number) the y-coordinate for the top edge of the pattern
	   @param  width     (number) the width of the pattern
	   @param  height    (number) the height of the pattern
	   @param  vx        (number) the minimum x-coordinate for view box (optional)
	   @param  vy        (number) the minimum y-coordinate for the view box (optional)
	   @param  vwidth    (number) the width of the view box (optional)
	   @param  vheight   (number) the height of the view box (optional)
	   @param  settings  (object) additional settings for the pattern (optional)
	   @return  (element) the new pattern node */
	pattern: function(parent, id, x, y, width, height, vx, vy, vwidth, vheight, settings) {
	    var args = this._args(arguments, ['id', 'x', 'y', 'width', 'height',
					      'vx', 'vy', 'vwidth', 'vheight'], ['vx']);
	    var sets = jQuery.extend({id: args.id, x: args.x, y: args.y,
				      width: args.width, height: args.height}, (args.vx != null ?
										{viewBox: args.vx + ' ' + args.vy + ' ' + args.vwidth + ' ' + args.vheight} : {}));
	    return this._makeNode(args.parent, 'pattern', jQuery.extend(sets, args.settings || {}));
	},
	
	/* Add a clip path definition.
	   @param  parent  (element) the parent node for the new element (optional)
	   @param  id      (string) the ID for this path
	   @param  units   (string) either 'userSpaceOnUse' (default) or 'objectBoundingBox' (optional)
	   @return  (element) the new clipPath node */
	clipPath: function(parent, id, units, settings) {
	    var args = this._args(arguments, ['id', 'units']);
	    args.units = args.units || 'userSpaceOnUse';
	    return this._makeNode(args.parent, 'clipPath', jQuery.extend(
		{id: args.id, clipPathUnits: args.units}, args.settings || {}));
	},
	
	/* Add a mask definition.
	   @param  parent    (element or jQuery) the parent node for the new mask (optional)
	   @param  id        (string) the ID for this mask
	   @param  x         (number) the x-coordinate for the left edge of the mask
	   @param  y         (number) the y-coordinate for the top edge of the mask
	   @param  width     (number) the width of the mask
	   @param  height    (number) the height of the mask
	   @param  settings  (object) additional settings for the mask (optional)
	   @return  (element) the new mask node */
	mask: function(parent, id, x, y, width, height, settings) {
	    var args = this._args(arguments, ['id', 'x', 'y', 'width', 'height']);
	    return this._makeNode(args.parent, 'mask', jQuery.extend(
		{id: args.id, x: args.x, y: args.y, width: args.width, height: args.height},
		args.settings || {}));
	},
	
	/* Create a new path object.
	   @return  (SVGPath) a new path object */
	createPath: function() {
	    return new SVGPath();
	},
	
	/* Create a new text object.
	   @return  (SVGText) a new text object */
	createText: function() {
	    return new SVGText();
	},
	
	/* Add an embedded SVG element.
	   Specify all of vx, vy, vwidth, vheight or none of them.
	   @param  parent    (element or jQuery) the parent node for the new node (optional)
	   @param  x         (number) the x-coordinate for the left edge of the node
	   @param  y         (number) the y-coordinate for the top edge of the node
	   @param  width     (number) the width of the node
	   @param  height    (number) the height of the node
	   @param  vx        (number) the minimum x-coordinate for view box (optional)
	   @param  vy        (number) the minimum y-coordinate for the view box (optional)
	   @param  vwidth    (number) the width of the view box (optional)
	   @param  vheight   (number) the height of the view box (optional)
	   @param  settings  (object) additional settings for the node (optional)
	   @return  (element) the new node */
	svg: function(parent, x, y, width, height, vx, vy, vwidth, vheight, settings) {
	    var args = this._args(arguments, ['x', 'y', 'width', 'height',
					      'vx', 'vy', 'vwidth', 'vheight'], ['vx']);
	    var sets = jQuery.extend({x: args.x, y: args.y, width: args.width, height: args.height}, 
				     (args.vx != null ? {viewBox: args.vx + ' ' + args.vy + ' ' +
							 args.vwidth + ' ' + args.vheight} : {}));
	    return this._makeNode(args.parent, 'svg', jQuery.extend(sets, args.settings || {}));
	},
	
	/* Create a group.
	   @param  parent    (element or jQuery) the parent node for the new group (optional)
	   @param  id        (string) the ID of this group (optional)
	   @param  settings  (object) additional settings for the group (optional)
	   @return  (element) the new group node */
	group: function(parent, id, settings) {
	    var args = this._args(arguments, ['id'], ['id']);
	    return this._makeNode(args.parent, 'g', jQuery.extend({id: args.id}, args.settings || {}));
	},
	
	/* Add a usage reference.
	   Specify all of x, y, width, height or none of them.
	   @param  parent    (element or jQuery) the parent node for the new node (optional)
	   @param  x         (number) the x-coordinate for the left edge of the node (optional)
	   @param  y         (number) the y-coordinate for the top edge of the node (optional)
	   @param  width     (number) the width of the node (optional)
	   @param  height    (number) the height of the node (optional)
	   @param  ref       (string) the ID of the definition node
	   @param  settings  (object) additional settings for the node (optional)
	   @return  (element) the new node */
	use: function(parent, x, y, width, height, ref, settings) {
	    var args = this._args(arguments, ['x', 'y', 'width', 'height', 'ref']);
	    if (typeof args.x == 'string') {
		args.ref = args.x;
		args.settings = args.y;
		args.x = args.y = args.width = args.height = null;
	    }
	    var node = this._makeNode(args.parent, 'use', jQuery.extend(
		{x: args.x, y: args.y, width: args.width, height: args.height},
		args.settings || {}));
	    node.setAttributeNS(jQuery.svg.xlinkNS, 'href', args.ref);
	    return node;
	},
	
	/* Add a link, which applies to all child elements.
	   @param  parent    (element or jQuery) the parent node for the new link (optional)
	   @param  ref       (string) the target URL
	   @param  settings  (object) additional settings for the link (optional)
	   @return  (element) the new link node */
	link: function(parent, ref, settings) {
	    var args = this._args(arguments, ['ref']);
	    var node = this._makeNode(args.parent, 'a', args.settings);
	    node.setAttributeNS(jQuery.svg.xlinkNS, 'href', args.ref);
	    return node;
	},
	
	/* Add an image.
	   @param  parent    (element or jQuery) the parent node for the new image (optional)
	   @param  x         (number) the x-coordinate for the left edge of the image
	   @param  y         (number) the y-coordinate for the top edge of the image
	   @param  width     (number) the width of the image
	   @param  height    (number) the height of the image
	   @param  ref       (string) the path to the image
	   @param  settings  (object) additional settings for the image (optional)
	   @return  (element) the new image node */
	image: function(parent, x, y, width, height, ref, settings) {
	    var args = this._args(arguments, ['x', 'y', 'width', 'height', 'ref']);
	    var node = this._makeNode(args.parent, 'image', jQuery.extend(
		{x: args.x, y: args.y, width: args.width, height: args.height},
		args.settings || {}));
	    node.setAttributeNS(jQuery.svg.xlinkNS, 'href', args.ref);
	    return node;
	},
	
	/* Draw a path.
	   @param  parent    (element or jQuery) the parent node for the new shape (optional)
	   @param  path      (string or SVGPath) the path to draw
	   @param  settings  (object) additional settings for the shape (optional)
	   @return  (element) the new shape node */
	path: function(parent, path, settings) {
	    var args = this._args(arguments, ['path']);
	    return this._makeNode(args.parent, 'path', jQuery.extend(
		{d: (args.path.path ? args.path.path() : args.path)}, args.settings || {}));
	},
	
	/* Draw a rectangle.
	   Specify both of rx and ry or neither.
	   @param  parent    (element or jQuery) the parent node for the new shape (optional)
	   @param  x         (number) the x-coordinate for the left edge of the rectangle
	   @param  y         (number) the y-coordinate for the top edge of the rectangle
	   @param  width     (number) the width of the rectangle
	   @param  height    (number) the height of the rectangle
	   @param  rx        (number) the x-radius of the ellipse for the rounded corners (optional)
	   @param  ry        (number) the y-radius of the ellipse for the rounded corners (optional)
	   @param  settings  (object) additional settings for the shape (optional)
	   @return  (element) the new shape node */
	rect: function(parent, x, y, width, height, rx, ry, settings) {
	    var args = this._args(arguments, ['x', 'y', 'width', 'height', 'rx', 'ry'], ['rx']);
	    return this._makeNode(args.parent, 'rect', jQuery.extend(
		{x: args.x, y: args.y, width: args.width, height: args.height},
		(args.rx ? {rx: args.rx, ry: args.ry} : {}), args.settings || {}));
	},
	
	/* Draw a circle.
	   @param  parent    (element or jQuery) the parent node for the new shape (optional)
	   @param  cx        (number) the x-coordinate for the centre of the circle
	   @param  cy        (number) the y-coordinate for the centre of the circle
	   @param  r         (number) the radius of the circle
	   @param  settings  (object) additional settings for the shape (optional)
	   @return  (element) the new shape node */
	circle: function(parent, cx, cy, r, settings) {
	    var args = this._args(arguments, ['cx', 'cy', 'r']);
	    return this._makeNode(args.parent, 'circle', jQuery.extend(
		{cx: args.cx, cy: args.cy, r: args.r}, args.settings || {}));
	},
	
	/* Draw an ellipse.
	   @param  parent    (element or jQuery) the parent node for the new shape (optional)
	   @param  cx        (number) the x-coordinate for the centre of the ellipse
	   @param  cy        (number) the y-coordinate for the centre of the ellipse
	   @param  rx        (number) the x-radius of the ellipse
	   @param  ry        (number) the y-radius of the ellipse
	   @param  settings  (object) additional settings for the shape (optional)
	   @return  (element) the new shape node */
	ellipse: function(parent, cx, cy, rx, ry, settings) {
	    var args = this._args(arguments, ['cx', 'cy', 'rx', 'ry']);
	    return this._makeNode(args.parent, 'ellipse', jQuery.extend(
		{cx: args.cx, cy: args.cy, rx: args.rx, ry: args.ry}, args.settings || {}));
	},
	
	/* Draw a line.
	   @param  parent    (element or jQuery) the parent node for the new shape (optional)
	   @param  x1        (number) the x-coordinate for the start of the line
	   @param  y1        (number) the y-coordinate for the start of the line
	   @param  x2        (number) the x-coordinate for the end of the line
	   @param  y2        (number) the y-coordinate for the end of the line
	   @param  settings  (object) additional settings for the shape (optional)
	   @return  (element) the new shape node */
	line: function(parent, x1, y1, x2, y2, settings) {
	    var args = this._args(arguments, ['x1', 'y1', 'x2', 'y2']);
	    return this._makeNode(args.parent, 'line', jQuery.extend(
		{x1: args.x1, y1: args.y1, x2: args.x2, y2: args.y2}, args.settings || {}));
	},
	
	/* Draw a polygonal line.
	   @param  parent    (element or jQuery) the parent node for the new shape (optional)
	   @param  points    (number[][]) the x-/y-coordinates for the points on the line
	   @param  settings  (object) additional settings for the shape (optional)
	   @return  (element) the new shape node */
	polyline: function(parent, points, settings) {
	    var args = this._args(arguments, ['points']);
	    return this._poly(args.parent, 'polyline', args.points, args.settings);
	},
	
	/* Draw a polygonal shape.
	   @param  parent    (element or jQuery) the parent node for the new shape (optional)
	   @param  points    (number[][]) the x-/y-coordinates for the points on the shape
	   @param  settings  (object) additional settings for the shape (optional)
	   @return  (element) the new shape node */
	polygon: function(parent, points, settings) {
	    var args = this._args(arguments, ['points']);
	    return this._poly(args.parent, 'polygon', args.points, args.settings);
	},
	
	/* Draw a polygonal line or shape. */
	_poly: function(parent, name, points, settings) {
	    var ps = '';
	    for (var i = 0; i < points.length; i++) {
		ps += points[i].join() + ' ';
	    }
	    return this._makeNode(parent, name, jQuery.extend(
		{points: jQuery.trim(ps)}, settings || {}));
	},
	
	/* Draw text.
	   Specify both of x and y or neither of them.
	   @param  parent    (element or jQuery) the parent node for the text (optional)
	   @param  x         (number or number[]) the x-coordinate(s) for the text (optional)
	   @param  y         (number or number[]) the y-coordinate(s) for the text (optional)
	   @param  value     (string) the text content or
	   (SVGText) text with spans and references
	   @param  settings  (object) additional settings for the text (optional)
	   @return  (element) the new text node */
	text: function(parent, x, y, value, settings) {
	    var args = this._args(arguments, ['x', 'y', 'value']);
	    if (typeof args.x == 'string' && arguments.length < 4) {
		args.value = args.x;
		args.settings = args.y;
		args.x = args.y = null;
	    }
	    return this._text(args.parent, 'text', args.value, jQuery.extend(
		{x: (args.x && isArray(args.x) ? args.x.join(' ') : args.x),
		 y: (args.y && isArray(args.y) ? args.y.join(' ') : args.y)}, 
		args.settings || {}));
	},
	
	/* Draw text along a path.
	   @param  parent    (element or jQuery) the parent node for the text (optional)
	   @param  path      (string) the ID of the path
	   @param  value     (string) the text content or
	   (SVGText) text with spans and references
	   @param  settings  (object) additional settings for the text (optional)
	   @return  (element) the new text node */
	textpath: function(parent, path, value, settings) {
	    var args = this._args(arguments, ['path', 'value']);
	    var node = this._text(args.parent, 'textPath', args.value, args.settings || {});
	    node.setAttributeNS(jQuery.svg.xlinkNS, 'href', args.path);
	    return node;
	},
	
	/* Draw text. */
	_text: function(parent, name, value, settings) {
	    var node = this._makeNode(parent, name, settings);
	    if (typeof value == 'number') {
		value = value.toString();
	    }
	    if (typeof value == 'string') {
		node.appendChild(node.ownerDocument.createTextNode(value));
	    }
	    else {
		for (var i = 0; i < value._parts.length; i++) {
		    var part = value._parts[i];
		    if (part[0] == 'tspan') {
			var child = this._makeNode(node, part[0], part[2]);
			child.appendChild(node.ownerDocument.createTextNode(part[1]));
			node.appendChild(child);
		    }
		    else if (part[0] == 'tref') {
			var child = this._makeNode(node, part[0], part[2]);
			child.setAttributeNS(jQuery.svg.xlinkNS, 'href', part[1]);
			node.appendChild(child);
		    }
		    else if (part[0] == 'textpath') {
			var set = jQuery.extend({}, part[2]);
			set.href = null;
			var child = this._makeNode(node, part[0], set);
			child.setAttributeNS(jQuery.svg.xlinkNS, 'href', part[2].href);
			child.appendChild(node.ownerDocument.createTextNode(part[1]));
			node.appendChild(child);
		    }
		    else { // straight text
			node.appendChild(node.ownerDocument.createTextNode(part[1]));
		    }
		}
	    }
	    return node;
	},
	
	/* Add a custom SVG element.
	   @param  parent    (element or jQuery) the parent node for the new element (optional)
	   @param  name      (string) the name of the element
	   @param  settings  (object) additional settings for the element (optional)
	   @return  (element) the new custom node */
	other: function(parent, name, settings) {
	    var args = this._args(arguments, ['name']);
	    return this._makeNode(args.parent, args.name, args.settings || {});
	},
	
	/* Create a shape node with the given settings. */
	_makeNode: function(parent, name, settings) {
	    parent = parent || this._svg;
	    var node = this._svg.ownerDocument.createElementNS(jQuery.svg.svgNS, name);
	    for (var name in settings) {
		var value = settings[name];
		if (value != null && value != null && 
		    (typeof value != 'string' || value != '')) {
		    node.setAttribute(jQuery.svg._attrNames[name] || name, value);
		}
	    }
	    parent.appendChild(node);
	    return node;
	},
	
	/* Add an existing SVG node to the diagram.
	   @param  parent  (element or jQuery) the parent node for the new node (optional)
	   @param  node    (element) the new node to add or
	   (string) the jQuery selector for the node or
	   (jQuery collection) set of nodes to add
	   @return  (SVGWrapper) this wrapper */
	add: function(parent, node) {
	    var args = this._args((arguments.length == 1 ? [null, parent] : arguments), ['node']);
	    var svg = this;
	    args.parent = args.parent || this._svg;
	    args.node = (args.node.jquery ? args.node : jQuery(args.node));
	    try {
		if (jQuery.svg._renesis) {
		    throw 'Force traversal';
		}
		args.parent.appendChild(args.node.cloneNode(true));
	    }
	    catch (e) {
		args.node.each(function() {
		    var child = svg._cloneAsSVG(this);
		    if (child) {
			args.parent.appendChild(child);
		    }
		});
	    }
	    return this;
	},
	
	/* Clone an existing SVG node and add it to the diagram.
	   @param  parent  (element or jQuery) the parent node for the new node (optional)
	   @param  node    (element) the new node to add or
	   (string) the jQuery selector for the node or
	   (jQuery collection) set of nodes to add
	   @return  (element[]) collection of new nodes */
	clone: function(parent, node) {
	    var svg = this;
	    var args = this._args((arguments.length == 1 ? [null, parent] : arguments), ['node']);
	    args.parent = args.parent || this._svg;
	    args.node = (args.node.jquery ? args.node : jQuery(args.node));
	    var newNodes = [];
	    args.node.each(function() {
		var child = svg._cloneAsSVG(this);
		if (child) {
		    child.id = '';
		    args.parent.appendChild(child);
		    newNodes.push(child);
		}
	    });
	    return newNodes;
	},
	
	/* SVG nodes must belong to the SVG namespace, so clone and ensure this is so.
	   @param  node  (element) the SVG node to clone
	   @return  (element) the cloned node */
	_cloneAsSVG: function(node) {
	    var newNode = null;
	    if (node.nodeType == 1) { // element
		newNode = this._svg.ownerDocument.createElementNS(
		    jQuery.svg.svgNS, this._checkName(node.nodeName));
		for (var i = 0; i < node.attributes.length; i++) {
		    var attr = node.attributes.item(i);
		    if (attr.nodeName != 'xmlns' && attr.nodeValue) {
			if (attr.prefix == 'xlink') {
			    newNode.setAttributeNS(jQuery.svg.xlinkNS,
						   attr.localName || attr.baseName, attr.nodeValue);
			}
			else {
			    newNode.setAttribute(this._checkName(attr.nodeName), attr.nodeValue);
			}
		    }
		}
		for (var i = 0; i < node.childNodes.length; i++) {
		    var child = this._cloneAsSVG(node.childNodes[i]);
		    if (child) {
			newNode.appendChild(child);
		    }
		}
	    }
	    else if (node.nodeType == 3) { // text
		if (jQuery.trim(node.nodeValue)) {
		    newNode = this._svg.ownerDocument.createTextNode(node.nodeValue);
		}
	    }
	    else if (node.nodeType == 4) { // CDATA
		if (jQuery.trim(node.nodeValue)) {
		    try {
			newNode = this._svg.ownerDocument.createCDATASection(node.nodeValue);
		    }
		    catch (e) {
			newNode = this._svg.ownerDocument.createTextNode(
			    node.nodeValue.replace(/&/g, '&amp;').
				replace(/</g, '&lt;').replace(/>/g, '&gt;'));
		    }
		}
	    }
	    return newNode;
	},
	
	/* Node names must be lower case and without SVG namespace prefix. */
	_checkName: function(name) {
	    name = (name.substring(0, 1) >= 'A' && name.substring(0, 1) <= 'Z' ?
		    name.toLowerCase() : name);
	    return (name.substring(0, 4) == 'svg:' ? name.substring(4) : name);
	},
	
	/* Load an external SVG document.
	   @param  url       (string) the location of the SVG document or
	   the actual SVG content
	   @param  settings  (boolean) see addTo below or
	   (function) see onLoad below or
	   (object) additional settings for the load with attributes below:
	   addTo       (boolean) true to add to what's already there,
	   or false to clear the canvas first
	   changeSize  (boolean) true to allow the canvas size to change,
	   or false to retain the original
	   onLoad      (function) callback after the document has loaded,
	   'this' is the container, receives SVG object and
	   optional error message as a parameter
	   parent      (string or element or jQuery) the parent to load
	   into, defaults to top-level svg element
	   @return  (SVGWrapper) this root */
	load: function(url, settings) {
	    settings = (typeof settings == 'boolean' ? {addTo: settings} :
			(typeof settings == 'function' ? {onLoad: settings} :
			 (typeof settings == 'string' ? {parent: settings} : 
			  (typeof settings == 'object' && settings.nodeName ? {parent: settings} :
			   (typeof settings == 'object' && settings.jquery ? {parent: settings} :
			    settings || {})))));
	    if (!settings.parent && !settings.addTo) {
		this.clear(false);
	    }
	    var size = [this._svg.getAttribute('width'), this._svg.getAttribute('height')];
	    var wrapper = this;
	    // Report a problem with the load
	    var reportError = function(message) {
		message = jQuery.svg.local.errorLoadingText + ': ' + message;
		if (settings.onLoad) {
		    settings.onLoad.apply(wrapper._container || wrapper._svg, [wrapper, message]);
		}
		else {
		    wrapper.text(null, 10, 20, message);
		}
	    };
	    // Create a DOM from SVG content
	    var loadXML4IE = function(data) {
		var xml = new ActiveXObject('Microsoft.XMLDOM');
		xml.validateOnParse = false;
		xml.resolveExternals = false;
		xml.async = false;
		xml.loadXML(data);
		if (xml.parseError.errorCode != 0) {
		    reportError(xml.parseError.reason);
		    return null;
		}
		return xml;
	    };
	    // Load the SVG DOM
	    var loadSVG = function(data) {
		if (!data) {
		    return;
		}
		if (data.documentElement.nodeName != 'svg') {
		    var errors = data.getElementsByTagName('parsererror');
		    var messages = (errors.length ? errors[0].getElementsByTagName('div') : []); // Safari
		    reportError(!errors.length ? '???' :
				(messages.length ? messages[0] : errors[0]).firstChild.nodeValue);
		    return;
		}
		var parent = (settings.parent ? jQuery(settings.parent)[0] : wrapper._svg);
		var attrs = {};
		for (var i = 0; i < data.documentElement.attributes.length; i++) {
		    var attr = data.documentElement.attributes.item(i);
		    if (!(attr.nodeName == 'version' || attr.nodeName.substring(0, 5) == 'xmlns')) {
			attrs[attr.nodeName] = attr.nodeValue;
		    }
		}
		wrapper.configure(parent, attrs, !settings.parent);
		var nodes = data.documentElement.childNodes;
		for (var i = 0; i < nodes.length; i++) {
		    try {
			if (jQuery.svg._renesis) {
			    throw 'Force traversal';
			}
			parent.appendChild(wrapper._svg.ownerDocument.importNode(nodes[i], true));
			if (nodes[i].nodeName == 'script') {
			    jQuery.globalEval(nodes[i].textContent);
			}
		    }
		    catch (e) {
			wrapper.add(parent, nodes[i]);
		    }
		}
		if (!settings.changeSize) {
		    wrapper.configure(parent, {width: size[0], height: size[1]});
		}
		if (settings.onLoad) {
		    settings.onLoad.apply(wrapper._container || wrapper._svg, [wrapper]);
		}
	    };
	    if (url.match('<svg')) { // Inline SVG
		loadSVG(jQuery.browser.msie ? loadXML4IE(url) :
			new DOMParser().parseFromString(url, 'text/xml'));
	    }
	    else { // Remote SVG
		jQuery.ajax({url: url, dataType: (jQuery.browser.msie ? 'text' : 'xml'),
			     success: function(xml) {
				 loadSVG(jQuery.browser.msie ? loadXML4IE(xml) : xml);
			     }, error: function(http, message, exc) {
				 reportError(message + (exc ? ' ' + exc.message : ''));
			     }});
	    }
	    return this;
	},
	
	/* Delete a specified node.
	   @param  node  (element or jQuery) the drawing node to remove
	   @return  (SVGWrapper) this root */
	remove: function(node) {
	    node = (node.jquery ? node[0] : node);
	    node.parentNode.removeChild(node);
	    return this;
	},
	
	/* Delete everything in the current document.
	   @param  attrsToo  (boolean) true to clear any root attributes as well,
	   false to leave them (optional)
	   @return  (SVGWrapper) this root */
	clear: function(attrsToo) {
	    if (attrsToo) {
		this.configure({}, true);
	    }
	    while (this._svg.firstChild) {
		this._svg.removeChild(this._svg.firstChild);
	    }
	    return this;
	},
	
	/* Serialise the current diagram into an SVG text document.
	   @param  node  (SVG element) the starting node (optional)
	   @return  (string) the SVG as text */
	toSVG: function(node) {
	    node = node || this._svg;
	    return (typeof XMLSerializer == 'undefined' ? this._toSVG(node) :
		    new XMLSerializer().serializeToString(node));
	},
	
	/* Serialise one node in the SVG hierarchy. */
	_toSVG: function(node) {
	    var svgDoc = '';
	    if (!node) {
		return svgDoc;
	    }
	    if (node.nodeType == 3) { // Text
		svgDoc = node.nodeValue;
	    }
	    else if (node.nodeType == 4) { // CDATA
		svgDoc = '<![CDATA[' + node.nodeValue + ']]>';
	    }
	    else { // Element
		svgDoc = '<' + node.nodeName;
		if (node.attributes) {
		    for (var i = 0; i < node.attributes.length; i++) {
			var attr = node.attributes.item(i);
			if (!(jQuery.trim(attr.nodeValue) == '' || attr.nodeValue.match(/^\[object/) ||
			      attr.nodeValue.match(/^function/))) {
			    svgDoc += ' ' + (attr.namespaceURI == jQuery.svg.xlinkNS ? 'xlink:' : '') + 
				attr.nodeName + '="' + attr.nodeValue + '"';
			}
		    }
		}	
		if (node.firstChild) {
		    svgDoc += '>';
		    var child = node.firstChild;
		    while (child) {
			svgDoc += this._toSVG(child);
			child = child.nextSibling;
		    }
		    svgDoc += '</' + node.nodeName + '>';
		}
		else {
		    svgDoc += '/>';
		}
	    }
	    return svgDoc;
	}
    });
    
    /* Helper to generate an SVG path.
       Obtain an instance from the SVGWrapper object.
       String calls together to generate the path and use its value:
       var path = root.createPath();
       root.path(null, path.move(100, 100).line(300, 100).line(200, 300).close(), {fill: 'red'});
       or
       root.path(null, path.move(100, 100).line([[300, 100], [200, 300]]).close(), {fill: 'red'}); */
    function SVGPath() {
	this._path = '';
    }
    
    jQuery.extend(SVGPath.prototype, {
	/* Prepare to create a new path.
	   @return  (SVGPath) this path */
	reset: function() {
	    this._path = '';
	    return this;
	},
	
	/* Move the pointer to a position.
	   @param  x         (number) x-coordinate to move to or
	   (number[][]) x-/y-coordinates to move to
	   @param  y         (number) y-coordinate to move to (omitted if x is array)
	   @param  relative  (boolean) true for coordinates relative to the current point,
	   false for coordinates being absolute
	   @return  (SVGPath) this path */
	move: function(x, y, relative) {
	    relative = (isArray(x) ? y : relative);
	    return this._coords((relative ? 'm' : 'M'), x, y);
	},
	
	/* Draw a line to a position.
	   @param  x         (number) x-coordinate to move to or
	   (number[][]) x-/y-coordinates to move to
	   @param  y         (number) y-coordinate to move to (omitted if x is array)
	   @param  relative  (boolean) true for coordinates relative to the current point,
	   false for coordinates being absolute
	   @return  (SVGPath) this path */
	line: function(x, y, relative) {
	    relative = (isArray(x) ? y : relative);
	    return this._coords((relative ? 'l' : 'L'), x, y);
	},
	
	/* Draw a horizontal line to a position.
	   @param  x         (number) x-coordinate to draw to or
	   (number[]) x-coordinates to draw to
	   @param  relative  (boolean) true for coordinates relative to the current point,
	   false for coordinates being absolute
	   @return  (SVGPath) this path */
	horiz: function(x, relative) {
	    this._path += (relative ? 'h' : 'H') + (isArray(x) ? x.join(' ') : x);
	    return this;
	},
	
	/* Draw a vertical line to a position.
	   @param  y         (number) y-coordinate to draw to or
	   (number[]) y-coordinates to draw to
	   @param  relative  (boolean) true for coordinates relative to the current point,
	   false for coordinates being absolute
	   @return  (SVGPath) this path */
	vert: function(y, relative) {
	    this._path += (relative ? 'v' : 'V') + (isArray(y) ? y.join(' ') : y);
	    return this;
	},
	
	/* Draw a cubic Bézier curve.
	   @param  x1        (number) x-coordinate of beginning control point or
	   (number[][]) x-/y-coordinates of control and end points to draw to
	   @param  y1        (number) y-coordinate of beginning control point (omitted if x1 is array)
	   @param  x2        (number) x-coordinate of ending control point (omitted if x1 is array)
	   @param  y2        (number) y-coordinate of ending control point (omitted if x1 is array)
	   @param  x         (number) x-coordinate of curve end (omitted if x1 is array)
	   @param  y         (number) y-coordinate of curve end (omitted if x1 is array)
	   @param  relative  (boolean) true for coordinates relative to the current point,
	   false for coordinates being absolute
	   @return  (SVGPath) this path */
	curveC: function(x1, y1, x2, y2, x, y, relative) {
	    relative = (isArray(x1) ? y1 : relative);
	    return this._coords((relative ? 'c' : 'C'), x1, y1, x2, y2, x, y);
	},
	
	/* Continue a cubic Bézier curve.
	   Starting control point is the reflection of the previous end control point.
	   @param  x2        (number) x-coordinate of ending control point or
	   (number[][]) x-/y-coordinates of control and end points to draw to
	   @param  y2        (number) y-coordinate of ending control point (omitted if x2 is array)
	   @param  x         (number) x-coordinate of curve end (omitted if x2 is array)
	   @param  y         (number) y-coordinate of curve end (omitted if x2 is array)
	   @param  relative  (boolean) true for coordinates relative to the current point,
	   false for coordinates being absolute
	   @return  (SVGPath) this path */
	smoothC: function(x2, y2, x, y, relative) {
	    relative = (isArray(x2) ? y2 : relative);
	    return this._coords((relative ? 's' : 'S'), x2, y2, x, y);
	},
	
	/* Draw a quadratic Bézier curve.
	   @param  x1        (number) x-coordinate of control point or
	   (number[][]) x-/y-coordinates of control and end points to draw to
	   @param  y1        (number) y-coordinate of control point (omitted if x1 is array)
	   @param  x         (number) x-coordinate of curve end (omitted if x1 is array)
	   @param  y         (number) y-coordinate of curve end (omitted if x1 is array)
	   @param  relative  (boolean) true for coordinates relative to the current point,
	   false for coordinates being absolute
	   @return  (SVGPath) this path */
	curveQ: function(x1, y1, x, y, relative) {
	    relative = (isArray(x1) ? y1 : relative);
	    return this._coords((relative ? 'q' : 'Q'), x1, y1, x, y);
	},
	
	/* Continue a quadratic Bézier curve.
	   Control point is the reflection of the previous control point.
	   @param  x         (number) x-coordinate of curve end or
	   (number[][]) x-/y-coordinates of points to draw to
	   @param  y         (number) y-coordinate of curve end (omitted if x is array)
	   @param  relative  (boolean) true for coordinates relative to the current point,
	   false for coordinates being absolute
	   @return  (SVGPath) this path */
	smoothQ: function(x, y, relative) {
	    relative = (isArray(x) ? y : relative);
	    return this._coords((relative ? 't' : 'T'), x, y);
	},
	
	/* Generate a path command with (a list of) coordinates. */
	_coords: function(cmd, x1, y1, x2, y2, x3, y3) {
	    if (isArray(x1)) {
		for (var i = 0; i < x1.length; i++) {
		    var cs = x1[i];
		    this._path += (i == 0 ? cmd : ' ') + cs[0] + ',' + cs[1] +
			(cs.length < 4 ? '' : ' ' + cs[2] + ',' + cs[3] +
			 (cs.length < 6 ? '': ' ' + cs[4] + ',' + cs[5]));
		}
	    }
	    else {
		this._path += cmd + x1 + ',' + y1 + 
		    (x2 == null ? '' : ' ' + x2 + ',' + y2 +
		     (x3 == null ? '' : ' ' + x3 + ',' + y3));
	    }
	    return this;
	},
	
	/* Draw an arc to a position.
	   @param  rx         (number) x-radius of arc or
	   (number/boolean[][]) x-/y-coordinates and flags for points to draw to
	   @param  ry         (number) y-radius of arc (omitted if rx is array)
	   @param  xRotate    (number) x-axis rotation (degrees, clockwise) (omitted if rx is array)
	   @param  large      (boolean) true to draw the large part of the arc,
	   false to draw the small part (omitted if rx is array)
	   @param  clockwise  (boolean) true to draw the clockwise arc,
	   false to draw the anti-clockwise arc (omitted if rx is array)
	   @param  x          (number) x-coordinate of arc end (omitted if rx is array)
	   @param  y          (number) y-coordinate of arc end (omitted if rx is array)
	   @param  relative   (boolean) true for coordinates relative to the current point,
	   false for coordinates being absolute
	   @return  (SVGPath) this path */
	arc: function(rx, ry, xRotate, large, clockwise, x, y, relative) {
	    relative = (isArray(rx) ? ry : relative);
	    this._path += (relative ? 'a' : 'A');
	    if (isArray(rx)) {
		for (var i = 0; i < rx.length; i++) {
		    var cs = rx[i];
		    this._path += (i == 0 ? '' : ' ') + cs[0] + ',' + cs[1] + ' ' +
			cs[2] + ' ' + (cs[3] ? '1' : '0') + ',' +
			(cs[4] ? '1' : '0') + ' ' + cs[5] + ',' + cs[6];
		}
	    }
	    else {
		this._path += rx + ',' + ry + ' ' + xRotate + ' ' +
		    (large ? '1' : '0') + ',' + (clockwise ? '1' : '0') + ' ' + x + ',' + y;
	    }
	    return this;
	},
	
	/* Close the current path.
	   @return  (SVGPath) this path */
	close: function() {
	    this._path += 'z';
	    return this;
	},
	
	/* Return the string rendering of the specified path.
	   @return  (string) stringified path */
	path: function() {
	    return this._path;
	}
    });
    
    SVGPath.prototype.moveTo = SVGPath.prototype.move;
    SVGPath.prototype.lineTo = SVGPath.prototype.line;
    SVGPath.prototype.horizTo = SVGPath.prototype.horiz;
    SVGPath.prototype.vertTo = SVGPath.prototype.vert;
    SVGPath.prototype.curveCTo = SVGPath.prototype.curveC;
    SVGPath.prototype.smoothCTo = SVGPath.prototype.smoothC;
    SVGPath.prototype.curveQTo = SVGPath.prototype.curveQ;
    SVGPath.prototype.smoothQTo = SVGPath.prototype.smoothQ;
    SVGPath.prototype.arcTo = SVGPath.prototype.arc;
    
    /* Helper to generate an SVG text object.
       Obtain an instance from the SVGWrapper object.
       String calls together to generate the text and use its value:
       var text = root.createText();
       root.text(null, x, y, text.string('This is ').
       span('red', {fill: 'red'}).string('!'), {fill: 'blue'}); */
    function SVGText() {
	this._parts = []; // The components of the text object
    }
    
    jQuery.extend(SVGText.prototype, {
	/* Prepare to create a new text object.
	   @return  (SVGText) this text */
	reset: function() {
	    this._parts = [];
	    return this;
	},
	
	/* Add a straight string value.
	   @param  value  (string) the actual text
	   @return  (SVGText) this text object */
	string: function(value) {
	    this._parts[this._parts.length] = ['text', value];
	    return this;
	},
	
	/* Add a separate text span that has its own settings.
	   @param  value     (string) the actual text
	   @param  settings  (object) the settings for this text
	   @return  (SVGText) this text object */
	span: function(value, settings) {
	    this._parts[this._parts.length] = ['tspan', value, settings];
	    return this;
	},
	
	/* Add a reference to a previously defined text string.
	   @param  id        (string) the ID of the actual text
	   @param  settings  (object) the settings for this text
	   @return  (SVGText) this text object */
	ref: function(id, settings) {
	    this._parts[this._parts.length] = ['tref', id, settings];
	    return this;
	},
	
	/* Add text drawn along a path.
	   @param  id        (string) the ID of the path
	   @param  value     (string) the actual text
	   @param  settings  (object) the settings for this text
	   @return  (SVGText) this text object */
	path: function(id, value, settings) {
	    this._parts[this._parts.length] = ['textpath', value, 
					       jQuery.extend({href: id}, settings || {})];
	    return this;
	}
    });
    
    /* Attach the SVG functionality to a jQuery selection.
       @param  command  (string) the command to run (optional, default 'attach')
       @param  options  (object) the new settings to use for these SVG instances
       @return jQuery (object) for chaining further calls */
    jQuery.fn.svg = function(options) {
	var otherArgs = Array.prototype.slice.call(arguments, 1);
	if (typeof options == 'string' && options == 'get') {
	    return jQuery.svg['_' + options + 'SVG'].apply(jQuery.svg, [this[0]].concat(otherArgs));
	}
	return this.each(function() {
	    if (typeof options == 'string') {
		jQuery.svg['_' + options + 'SVG'].apply(jQuery.svg, [this].concat(otherArgs));
	    }
	    else {
		jQuery.svg._attachSVG(this, options || {});
	    } 
	});
    };
    
    //====================
    /* Helper Functions */
    //====================

    /* Determine whether an object is an array. */
    function isArray(a) {
	return (a && a.constructor == Array);
    }
    
    /* Calculate log10 */
    function log10(val) {
	if (val == 0) {
	    return 0;
	}
	return Math.log(val) / Math.LN10;
    }
    
    /* Round a number to a given number of decimal points. */
    function roundNumber(num, dec) {
	return Math.round(num * Math.pow(10, dec)) / Math.pow(10, dec);
    }

    // Singleton primary SVG interface
    jQuery.svg = new SVGManager();

    //============
    /* Graphing */
    //============
    
    jQuery.svg.addExtension('graph', SVGGraph);
    
    // Singleton primary SVG graphing interface
    jQuery.svg.graphing = new SVGGraphing();
    
    function SVGGraphing() {
	this.regional = [];
	this.regional[''] = {percentageText: 'Percentage'};
	this.region = this.regional[''];
    }
    
    jQuery.extend(SVGGraphing.prototype, {
	_chartTypes: [],
	
	/* Add a new chart rendering type to the package.
	   The rendering object must implement the following functions:
	   getTitle(), getDescription(), getOptions(), drawChart(graph).
	   @param  id         (string) the ID of this graph renderer
	   @param  chartType  (object) the object implementing this chart type */
	addChartType: function(id, chartType) {
	    this._chartTypes[id] = chartType;
	},
	
	/* Retrieve the list of chart types.
	   @return  (object[string]) the array of chart types indexed by ID */
	chartTypes: function() {
	    return this._chartTypes;
	}
    });
    
    /* Extension point for SVG graphing.
       Access through svg.graph. */
    function SVGGraph(wrapper) {
	this._wrapper = wrapper; // The attached SVG wrapper object
	this._drawNow = false; // True for immediate update, false to wait for redraw call
	for (var id in jQuery.svg.graphing._chartTypes) {
	    this._chartType = jQuery.svg.graphing._chartTypes[id]; // Use first graph renderer
	    break;
	}
	this._chartOptions = {}; // Extra options for the graph type
	// The graph title and settings
	this._title = {value: '', offset: 25, settings: {textAnchor: 'middle'}};
	this._area = [0.1, 0.1, 0.8, 0.9]; // The chart area: left, top, right, bottom,
	// > 1 in pixels, <= 1 as proportion
	this._chartFormat = {fill: 'none', stroke: 'black'}; // The formatting for the chart area
	this._gridlines = []; // The formatting of the x- and y-gridlines
	this._series = []; // The series to be plotted, each is an object
	this._onstatus = null; // The callback function for status updates
	this._chartCont = this._wrapper.svg(0, 0, 0, 0, {class_: 'svg-graph'}); // The main container for the graph
	
	this.xAxis = new SVGGraphAxis(this); // The main x-axis
	this.xAxis.title('', 40);
	this.yAxis = new SVGGraphAxis(this); // The main y-axis
	this.yAxis.title('', 40);
	this.x2Axis = null; // The secondary x-axis
	this.y2Axis = new SVGGraphAxis(this); // The secondary y-axis
	this.legend = new SVGGraphLegend(this); // The chart legend
	this._drawNow = true;
    }
    
    jQuery.extend(SVGGraph.prototype, {
	
	/* Useful indexes. */
	X: 0,
	Y: 1,
	W: 2,
	H: 3,
	L: 0,
	T: 1,
	R: 2,
	B: 3,
	
	/* Standard percentage axis. */
	_percentageAxis: new SVGGraphAxis(this, jQuery.svg.graphing.region.percentageText, 0, 100, 10, 0),
	
	/* Set or retrieve the container for the graph.
	   @param  cont  (SVG element) the container for the graph
	   @return  (SVGGraph) this graph object or
	   (SVG element) the current container (if no parameters) */
	container: function(cont) {
	    if (arguments.length == 0) {
		return this._chartCont;
	    }
	    this._chartCont = cont;
	    return this;
	},
	
	/* Set or retrieve the type of chart to be rendered.
	   See jQuery.svg.graphing.getChartTypes() for the list of available types.
	   @param  id       (string) the ID of the chart type
	   @param  options  (object) additional settings for this chart type (optional)
	   @return  (SVGGraph) this graph object or
	   (string) the chart type (if no parameters)
	   @deprecated  use type() */
	chartType: function(id, options) {
	    return (arguments.length == 0 ? this.type() : this.type(id, options));
	},
	
	/* Set or retrieve the type of chart to be rendered.
	   See jQuery.svg.graphing.getChartTypes() for the list of available types.
	   @param  id       (string) the ID of the chart type
	   @param  options  (object) additional settings for this chart type (optional)
	   @return  (SVGGraph) this graph object or
	   (string) the chart type (if no parameters) */
	type: function(id, options) {
	    if (arguments.length == 0) {
		return this._chartType;
	    }
	    var chartType = jQuery.svg.graphing._chartTypes[id];
	    if (chartType) {
		this._chartType = chartType;
		this._chartOptions = jQuery.extend({}, options || {});
	    }
	    this._drawGraph();
	    return this;
	},
	
	/* Set or retrieve additional options for the particular chart type.
	   @param  options  (object) the extra options
	   @return  (SVGGraph) this graph object or
	   (object) the chart options (if no parameters)
	   @deprecated  use options() */
	chartOptions: function(options) {
	    return(arguments.length == 0 ? this.options() : this.options(options));
	},
	
	/* Set or retrieve additional options for the particular chart type.
	   @param  options  (object) the extra options
	   @return  (SVGGraph) this graph object or
	   (object) the chart options (if no parameters) */
	options: function(options) {
	    if (arguments.length == 0) {
		return this._chartOptions;
	    }
	    this._chartOptions = jQuery.extend({}, options);
	    this._drawGraph();
	    return this;
	},
	
	/* Set or retrieve the background of the graph chart.
	   @param  fill      (string) how to fill the chart background
	   @param  stroke    (string) the colour of the outline (optional)
	   @param  settings  (object) additional formatting for the chart background (optional)
	   @return  (SVGGraph) this graph object or
	   (object) the chart format (if no parameters)
	   @deprecated  use format() */
	chartFormat: function(fill, stroke, settings) {
	    return (arguments.length == 0 ? this.format() : this.format(fill, stroke, settings));
	},
	
	/* Set or retrieve the background of the graph chart.
	   @param  fill      (string) how to fill the chart background
	   @param  stroke    (string) the colour of the outline (optional)
	   @param  settings  (object) additional formatting for the chart background (optional)
	   @return  (SVGGraph) this graph object or
	   (object) the chart format (if no parameters) */
	format: function(fill, stroke, settings) {
	    if (arguments.length == 0) {
		return this._chartFormat;
	    }
	    if (typeof stroke == 'object') {
		settings = stroke;
		stroke = null;
	    }
	    this._chartFormat = jQuery.extend({fill: fill},
					      (stroke ? {stroke: stroke} : {}), settings || {});
	    this._drawGraph();
	    return this;
	},
	
	/* Set or retrieve the main chart area.
	   @param  left    (number) > 1 is pixels, <= 1 is proportion of width or
	   (number[4]) for left, top, right, bottom
	   @param  top     (number) > 1 is pixels, <= 1 is proportion of height
	   @param  right   (number) > 1 is pixels, <= 1 is proportion of width
	   @param  bottom  (number) > 1 is pixels, <= 1 is proportion of height
	   @return  (SVGGraph) this graph object or
	   (number[4]) the chart area: left, top, right, bottom (if no parameters)
	   @deprecated use area() */
	chartArea: function(left, top, right, bottom) {
	    return (arguments.length == 0 ? this.area() : this.area(left, top, right, bottom));
	},
	
	/* Set or retrieve the main chart area.
	   @param  left    (number) > 1 is pixels, <= 1 is proportion of width or
	   (number[4]) for left, top, right, bottom
	   @param  top     (number) > 1 is pixels, <= 1 is proportion of height
	   @param  right   (number) > 1 is pixels, <= 1 is proportion of width
	   @param  bottom  (number) > 1 is pixels, <= 1 is proportion of height
	   @return  (SVGGraph) this graph object or
	   (number[4]) the chart area: left, top, right, bottom (if no parameters) */
	area: function(left, top, right, bottom) {
	    if (arguments.length == 0) {
		return this._area;
	    }
	    this._area = (isArray(left) ? left : [left, top, right, bottom]);
	    this._drawGraph();
	    return this;
	},
	
	/* Set or retrieve the gridlines formatting for the graph chart.
	   @param  xSettings  (string) the colour of the gridlines along the x-axis, or
	   (object) formatting for the gridlines along the x-axis, or
	   null for none
	   @param  ySettings  (string) the colour of the gridlines along the y-axis, or
	   (object) formatting for the gridlines along the y-axis, or
	   null for none
	   @return  (SVGGraph) this graph object or
	   (object[2]) the gridlines formatting (if no parameters) */
	gridlines: function(xSettings, ySettings) {
	    if (arguments.length == 0) {
		return this._gridlines;
	    }
	    this._gridlines = [(typeof xSettings == 'string' ? {stroke: xSettings} : xSettings),
			       (typeof ySettings == 'string' ? {stroke: ySettings} : ySettings)];
	    if (this._gridlines[0] == null && this._gridlines[1] == null) {
		this._gridlines = [];
	    }
	    this._drawGraph();
	    return this;
	},
	
	/* Set or retrieve the title of the graph and its formatting.
	   @param  value     (string) the title
	   @param  offset    (number) the vertical positioning of the title
           > 1 is pixels, <= 1 is proportion of width (optional)
	   @param  colour    (string) the colour of the title (optional)
	   @param  settings  (object) formatting for the title (optional)
	   @return  (SVGGraph) this graph object or
	   (object) value, offset, and settings for the title (if no parameters) */
	title: function(value, offset, colour, settings) {
	    if (arguments.length == 0) {
		return this._title;
	    }
	    if (typeof offset != 'number') {
		settings = colour;
		colour = offset;
		offset = null;
	    }
	    if (typeof colour != 'string') {
		settings = colour;
		colour = null;
	    }
	    this._title = {value: value, offset: offset || this._title.offset,
			   settings: jQuery.extend({textAnchor: 'middle'},
						   (colour ? {fill: colour} : {}), settings || {})};
	    this._drawGraph();
	    return this;
	},
	
	/* Add a series of values to be plotted on the graph.
	   @param  name         (string) the name of this series (optional)
	   @param  values       (number[]) the values to be plotted
	   @param  fill         (string) how the plotted values are filled
	   @param  stroke       (string) the colour of the plotted lines (optional)
	   @param  strokeWidth  (number) the width of the plotted lines (optional)
	   @param  settings     (object) additional settings for the plotted values (optional)
	   @return  (SVGGraph) this graph object */
	addSeries: function(name, values, fill, stroke, strokeWidth, settings) {
	    this._series.push(new SVGGraphSeries(
		this, name, values, fill, stroke, strokeWidth, settings));
	    this._drawGraph();
	    return this;
	},
	
	/* Retrieve the series wrappers.
	   @param  i  (number) the series index (optional)
	   @return  (SVGGraphSeries) the specified series or
	   (SVGGraphSeries[]) the list of series */
	series: function(i) {
	    return (arguments.length > 0 ? this._series[i] : null) || this._series;
	},
	
	/* Suppress drawing of the graph until redraw() is called.
	   @return  (SVGGraph) this graph object */
	noDraw: function() {
	    this._drawNow = false;
	    return this;
	},
	
	/* Redraw the entire graph with the current settings and values.
	   @return  (SVGGraph) this graph object */
	redraw: function() {
	    this._drawNow = true;
	    this._drawGraph();
	    return this;
	},
	
	/* Set the callback function for status updates.
	   @param  onstatus  (function) the callback function
	   @return  (SVGGraph) this graph object */
	status: function(onstatus) {
	    this._onstatus = onstatus;
	    return this;
	},
	
	/* Actually draw the graph (if allowed) based on the graph type set. */
	_drawGraph: function() {
	    if (!this._drawNow) {
		return;
	    }
	    while (this._chartCont.firstChild) {
		this._chartCont.removeChild(this._chartCont.firstChild);
	    }
	    if (!this._chartCont.parent) {
		this._wrapper._svg.appendChild(this._chartCont);
	    }
	    // Set sizes if not already there
	    if (!this._chartCont.width) {
		this._chartCont.setAttribute('width',
					     parseInt(this._chartCont.getAttribute('width'), 10) || this._wrapper._width());
	    }
	    else if (this._chartCont.width.baseVal) {
		this._chartCont.width.baseVal.value =
		    this._chartCont.width.baseVal.value || this._wrapper._width();
	    }
	    else {
		this._chartCont.width = this._chartCont.width || this._wrapper._width();
	    }
	    if (!this._chartCont.height) {
		this._chartCont.setAttribute('height',
					     parseInt(this._chartCont.getAttribute('height'), 10) || this._wrapper._height());
	    }
	    else if (this._chartCont.height.baseVal) {
		this._chartCont.height.baseVal.value =
		    this._chartCont.height.baseVal.value || this._wrapper._height();
	    }
	    else {
		this._chartCont.height = this._chartCont.height || this._wrapper._height();
	    }
	    this._chartType.drawGraph(this);
	},
	
	/* Decode an attribute value.
	   @param  node  the node to examine
	   @param  name  the attribute name
	   @return  the actual value */
	_getValue: function(node, name) {
	    return (!node[name] ? parseInt(node.getAttribute(name), 10) :
		    (node[name].baseVal ? node[name].baseVal.value : node[name]));
	},
	
	/* Draw the graph title - centred. */
	_drawTitle: function() {
	    this._wrapper.text(this._chartCont, this._getValue(this._chartCont, 'width') / 2,
			       this._title.offset, this._title.value, this._title.settings);
	},
	
	/* Calculate the actual dimensions of the chart area.
	   @param  area  (number[4]) the area values to evaluate (optional)
	   @return  (number[4]) an array of dimension values: left, top, width, height */
	_getDims: function(area) {
	    area = area || this._area;
	    var availWidth = this._getValue(this._chartCont, 'width');
	    var availHeight = this._getValue(this._chartCont, 'height');
	    var left = (area[this.L] > 1 ? area[this.L] : availWidth * area[this.L]);
	    var top = (area[this.T] > 1 ? area[this.T] : availHeight * area[this.T]);
	    var width = (area[this.R] > 1 ? area[this.R] : availWidth * area[this.R]) - left;
	    var height = (area[this.B] > 1 ? area[this.B] : availHeight * area[this.B]) - top;
	    return [left, top, width, height];
	},
	
	/* Draw the chart background, including gridlines.
	   @param  noXGrid  (boolean) true to suppress the x-gridlines, false to draw them (optional)
	   @param  noYGrid  (boolean) true to suppress the y-gridlines, false to draw them (optional)
	   @return  (element) the background group element */
	_drawChartBackground: function(noXGrid, noYGrid) {
	    var bg = this._wrapper.group(this._chartCont, {class_: 'background'});
	    var dims = this._getDims();
	    this._wrapper.rect(bg, dims[this.X], dims[this.Y], dims[this.W], dims[this.H], this._chartFormat);
	    if (this._gridlines[0] && this.yAxis._ticks.major && !noYGrid) {
		this._drawGridlines(bg, this.yAxis, true, dims, this._gridlines[0]);
	    }
	    if (this._gridlines[1] && this.xAxis._ticks.major && !noXGrid) {
		this._drawGridlines(bg, this.xAxis, false, dims, this._gridlines[1]);
	    }
	    return bg;
	},
	
	/* Draw one set of gridlines.
	   @param  bg      (element) the background group element
	   @param  axis    (SVGGraphAxis) the axis definition
	   @param  horiz   (boolean) true if horizontal, false if vertical
	   @param  dims    (number[]) the left, top, width, height of the chart area
	   @param  format  (object) additional settings for the gridlines */
	_drawGridlines: function(bg, axis, horiz, dims, format) {
	    var g = this._wrapper.group(bg, format);
	    var scale = (horiz ? dims[this.H] : dims[this.W]) / (axis._scale.max - axis._scale.min);
	    var major = Math.floor(axis._scale.min / axis._ticks.major) * axis._ticks.major;
	    major = (major < axis._scale.min ? major + axis._ticks.major : major);
	    while (major <= axis._scale.max) {
		var v = (horiz ? axis._scale.max - major : major - axis._scale.min) * scale +
		    (horiz ? dims[this.Y] : dims[this.X]);
		this._wrapper.line(g, (horiz ? dims[this.X] : v), (horiz ? v : dims[this.Y]),
				   (horiz ? dims[this.X] + dims[this.W] : v), (horiz ? v : dims[this.Y] + dims[this.H]));
		major += axis._ticks.major;
	    }
	},
	
	/* Draw the axes in their standard configuration.
	   @param  noX  (boolean) true to suppress the x-axes, false to draw it (optional) */
	_drawAxes: function(noX) {
	    var dims = this._getDims();
	    if (this.xAxis && !noX) {
		if (this.xAxis._title) {
		    this._wrapper.text(this._chartCont, dims[this.X] + dims[this.W] / 2,
				       dims[this.Y] + dims[this.H] + this.xAxis._titleOffset,
				       this.xAxis._title, this.xAxis._titleFormat);
		}
		this._drawAxis(this.xAxis, 'xAxis', dims[this.X], dims[this.Y] + dims[this.H],
			       dims[this.X] + dims[this.W], dims[this.Y] + dims[this.H]);
	    }
	    if (this.yAxis) {
		if (this.yAxis._title) {
		    this.yAxis._titleOffset = dims[this.X] - (this.yAxis._titleFontSize || 14);
		    this._wrapper.text(this._chartCont, 0, 0, this.yAxis._title, jQuery.extend({textAnchor: 'middle',
												transform: 'translate(' + (dims[this.X] - this.yAxis._titleOffset) + ',' +
												(dims[this.Y] + dims[this.H] / 2) + ') rotate(-90)'}, this.yAxis._titleFormat || {}));
		}
		this._drawAxis(this.yAxis, 'yAxis', dims[this.X], dims[this.Y],
			       dims[this.X], dims[this.Y] + dims[this.H]);
	    }
	    if (this.x2Axis && !noX) {
		if (this.x2Axis._title) {
		    this._wrapper.text(this._chartCont, dims[this.X] + dims[this.W] / 2,
				       dims[this.X] - this.x2Axis._titleOffset, this.x2Axis._title, this.x2Axis._titleFormat);
		}
		this._drawAxis(this.x2Axis, 'x2Axis', dims[this.X], dims[this.Y],
			       dims[this.X] + dims[this.W], dims[this.Y]);
	    }
	    if (this.y2Axis) {
		if (this.y2Axis._title) {
		    var titlePos = this._getValue(this._chartCont, 'width') - 10;
		    this._wrapper.text(this._chartCont, 0, 0, this.y2Axis._title, jQuery.extend({textAnchor: 'middle',
												 transform: 'translate(' + titlePos +
												 ',' + (dims[this.Y] + dims[this.H] / 2) + ') rotate(90)'}, this.y2Axis._titleFormat || {}));
		}
		this._drawAxis(this.y2Axis, 'y2Axis', dims[this.X] + dims[this.W], dims[this.Y],
			       dims[this.X] + dims[this.W], dims[this.Y] + dims[this.H]);
	    }
	},
	
	/* Draw an axis and its tick marks.
	   @param  axis  (SVGGraphAxis) the axis definition
	   @param  id    (string) the identifier for the axis group element
	   @param  x1    (number) starting x-coodinate for the axis
	   @param  y1    (number) starting y-coodinate for the axis
	   @param  x2    (number) ending x-coodinate for the axis
	   @param  y2    (number) ending y-coodinate for the axis */
	_drawAxis: function(axis, id, x1, y1, x2, y2) {
	    var horiz = (y1 == y2);
	    var gl = this._wrapper.group(this._chartCont, jQuery.extend({class_: id}, axis._lineFormat));
	    var gt = this._wrapper.group(this._chartCont, jQuery.extend({class_: id + 'Labels',
									 textAnchor: (horiz ? 'middle' : (id=='y2Axis' ? 'left' : 'end'))}, axis._labelFormat));
	    this._wrapper.line(gl, x1, y1, x2, y2);
	    if (axis._ticks.major) {
		var bottomRight = (x2 > (this._getValue(this._chartCont, 'width') / 2) &&
				   y2 > (this._getValue(this._chartCont, 'height') / 2));
		var scale = (horiz ? x2 - x1 : y2 - y1) / (axis._scale.max - axis._scale.min);
		var size = axis._ticks.size;
		var major = Math.floor(axis._scale.min / axis._ticks.major) * axis._ticks.major;
		major = (major < axis._scale.min ? major + axis._ticks.major : major);
		var minor = (!axis._ticks.minor ? axis._scale.max + 1 :
			     Math.floor(axis._scale.min / axis._ticks.minor) * axis._ticks.minor);
		minor = (minor < axis._scale.min ? minor + axis._ticks.minor : minor);
		var offsets = this._getTickOffsets(axis, bottomRight);
		var count = 0;
		while (major <= axis._scale.max || minor <= axis._scale.max) {
		    var cur = Math.min(major, minor);
		    var len = (cur == major ? size : size / 2);
		    var v = (horiz ? x1 : y1) +
			(horiz ? cur - axis._scale.min : axis._scale.max - cur) * scale;
		    if (cur == major) {

			// fix floating point error
			var maj_str = cur.toString();
			var tick_str = axis._ticks.major.toString();
		    
			// round to a maximum of 3 significant digits
			if (tick_str.substr(tick_str.indexOf('.')+1).length > 3) {
			    tick_str = tick_str.substr(0, tick_str.indexOf('.')+4);
			}
			
			// fail if the max is smaller than the smallest number displayable with
			// three significant digits
			if (parseFloat(tick_str) < 0.001) {
			    return;
			}
			if (maj_str.substr(maj_str.indexOf('.')+1).length > tick_str.substr(tick_str.indexOf('.')+1).length) {
			    maj_str = parseFloat(major.toFixed(tick_str.substr(tick_str.indexOf('.')+1).length));
			}
			
			this._wrapper.line(gl, (horiz ? v : x1 + len * offsets[0]),
				       (horiz ? y1 + len * offsets[0] : v),
				       (horiz ? v : x1 + len * offsets[1]),
				       (horiz ? y1 + len * offsets[1] : v));
		    
			var pretty_cur = maj_str;
			if (this.shortAxisLabels) {
			    pretty_cur = Math.floor(pretty_cur) + '';
			    if (pretty_cur.length > 12) {
				pretty_cur = cur / 1000000000000;
				pretty_cur = pretty_cur.formatString(1)+' T';
			    } else if (pretty_cur.length > 9) {
				pretty_cur = cur / 1000000000;
				pretty_cur = pretty_cur.formatString(1)+' G';
			    } else if (pretty_cur.length > 6) {
				pretty_cur = cur / 1000000;
				pretty_cur = pretty_cur.formatString(1)+' M';
			    } else if (pretty_cur.length > 3) {
				pretty_cur = cur / 1000;
				pretty_cur = pretty_cur.formatString(1)+' K';
			    }
			}

			var logtext = this._wrapper.createText().string('10').span(cur, {dy: -10, fontSize: 10});
			this._wrapper.text(gt, (horiz ? v : (id=='y2Axis' ? x1 + size + 5 : x1 - size - 5)), (horiz ? y1 + 2 * size : v + 5),
					   (axis._labels ? axis._labels[count++] : ((axis._scale.type == 'log') ? logtext : pretty_cur)));
		    }
		    
		    if (axis._scale.type == 'log') {
			major += (cur == major ? 1 : 0);
			minor += (cur == minor ? 1 : 0);
		    } else {
			major += (cur == major ? axis._ticks.major : 0);
			minor += (cur == minor ? axis._ticks.minor : 0);
		    }
		}
	    }
	},
	
	/* Calculate offsets based on axis and tick positions.
	   @param  axis         (SVGGraphAxis) the axis definition
	   @param  bottomRight  (boolean) true if this axis is appearing on the bottom or
	   right of the chart area, false if to the top or left
	   @return  (number[2]) the array of offset multipliers (-1..+1) */
	_getTickOffsets: function(axis, bottomRight) {
	    return [(axis._ticks.position == (bottomRight ? 'in' : 'out') ||
		     axis._ticks.position == 'both' ? -1 : 0),
		    (axis._ticks.position == (bottomRight ? 'out' : 'in') ||
		     axis._ticks.position == 'both' ? +1 : 0), ];
	},
	
	/* Retrieve the standard percentage axis.
	   @return  (SVGGraphAxis) percentage axis */
	_getPercentageAxis: function() {
	    this._percentageAxis._title = jQuery.svg.graphing.region.percentageText;
	    return this._percentageAxis;
	},
	
	/* Calculate the column totals across all the series. */
	_getTotals: function() {
	    var totals = [];
	    var numVal = (this._series.length ? this._series[0]._values.length : 0);
	    for (var i = 0; i < numVal; i++) {
		totals[i] = 0;
		for (var j = 0; j < this._series.length; j++) {
		    totals[i] += this._series[j]._values[i];
		}
	    }
	    return totals;
	},
	
	/* Draw the chart legend. */
	_drawLegend: function() {
	    if (!this.legend._show) {
		return;
	    }
	    var g = this._wrapper.group(this._chartCont, {class_: 'legend'});
	    var dims = this._getDims(this.legend._area);
	    this._wrapper.rect(g, dims[this.X], dims[this.Y], dims[this.W], dims[this.H],
			       this.legend._bgSettings);
	    var horiz = false;// dims[this.W] > dims[this.H];
	    var numSer = this._series.length;
	    var offset = (horiz ? dims[this.W] : dims[this.H]) / numSer;
	    var xBase = dims[this.X] + 5;
	    var yBase = dims[this.Y] + ((horiz ? dims[this.H] : offset) + this.legend._sampleSize) / 2;
	    for (var i = 0; i < numSer; i++) {
		var series = this._series[i];
		this._wrapper.rect(g, xBase + (horiz ? i * offset : 0),
				   yBase + (horiz ? 0 : i * offset) - this.legend._sampleSize,
				   this.legend._sampleSize, this.legend._sampleSize,
				   {fill: series._fill, stroke: series._stroke, strokeWidth: 1});
		this._wrapper.text(g, xBase + (horiz ? i * offset : 0) + this.legend._sampleSize + 5,
				   yBase + (horiz ? 0 : i * offset), series._name, this.legend._textSettings);
	    }
	},
	
	/* Show the current value status on hover. */
	_showStatus: function(elem, label, value) {
	    var status = this._onstatus;
	    if (this._onstatus) {
		jQuery(elem).hover(function(event) { status.apply(this, [label, value, 'mouseover', event]); },
				   function(event) { status.apply(this, ['', 0, 'mouseout', event]); });
		jQuery(elem).click(function(event) { status.apply(this, [label, value, 'click', event]); });
	    }
	}
    });
    
    /* Details about each graph series.
       @param  graph        (SVGGraph) the owning graph
       @param  name         (string) the name of this series (optional)
       @param  values       (number[]) the list of values to be plotted
       @param  fill         (string) how the series should be displayed
       @param  stroke       (string) the colour of the (out)line for the series (optional)
       @param  strokeWidth  (number) the width of the (out)line for the series (optional)
       @param  settings     (object) additional formatting settings (optional)
       @return  (SVGGraphSeries) the new series object */
    function SVGGraphSeries(graph, name, values, fill, stroke, strokeWidth, settings) {
	if (typeof name != 'string') {
	    settings = strokeWidth;
	    strokeWidth = stroke;
	    stroke = fill;
	    fill = values;
	    values = name;
	    name = null;
	}
	if (typeof stroke != 'string') {
	    settings = strokeWidth;
	    strokeWidth = stroke;
	    stroke = null;
	}
	if (typeof strokeWidth != 'number') {
	    settings = strokeWidth;
	    strokeWidth = null;
	}
	this._graph = graph; // The owning graph
	this._name = name || ''; // The name of this series
	this._values = values || []; // The list of values for this series
	this._axis = 1; // Which axis this series applies to: 1 = primary, 2 = secondary
	this._fill = fill || 'green'; // How the series is plotted
	this._stroke = stroke || 'black'; // The colour for the (out)line
	this._strokeWidth = strokeWidth || 1; // The (out)line width
	this._settings = settings || {}; // Additional formatting settings for the series
    }
    
    jQuery.extend(SVGGraphSeries.prototype, {
	
	/* Set or retrieve the name for this series.
	   @param  name    (string) the series' name
	   @return  (SVGGraphSeries) this series object or
	   (string) the series name (if no parameters) */
	name: function(name) {
	    if (arguments.length == 0) {
		return this._name;
	    }
	    this._name = name;
	    this._graph._drawGraph();
	    return this;
	},
	
	/* Set or retrieve the values for this series.
	   @param  name    (string) the series' name (optional)
	   @param  values  (number[]) the values to be graphed
	   @return  (SVGGraphSeries) this series object or
	   (number[]) the series values (if no parameters) */
	values: function(name, values) {
	    if (arguments.length == 0) {
		return this._values;
	    }
	    if (isArray(name)) {
		values = name;
		name = null;
	    }
	    this._name = name || this._name;
	    this._values = values;
	    this._graph._drawGraph();
	    return this;
	},
	
	/* Set or retrieve the formatting for this series.
	   @param  fill         (string) how the values are filled when plotted
	   @param  stroke       (string) the (out)line colour (optional)
	   @param  strokeWidth  (number) the line's width (optional)
	   @param  settings     (object) additional formatting settings for the series (optional)
	   @return  (SVGGraphSeries) this series object or
	   (object) formatting settings (if no parameters) */
	format: function(fill, stroke, strokeWidth, settings) {
	    if (arguments.length == 0) {
		return jQuery.extend({fill: this._fill, stroke: this._stroke,
				      strokeWidth: this._strokeWidth}, this._settings);
	    }
	    if (typeof stroke != 'string') {
		settings = strokeWidth;
		strokeWidth = stroke;
		stroke = null;
	    }
	    if (typeof strokeWidth != 'number') {
		settings = strokeWidth;
		strokeWidth = null;
	    }
	    this._fill = fill || this._fill;
	    this._stroke = stroke || this._stroke;
	    this._strokeWidth = strokeWidth || this._strokeWidth;
	    jQuery.extend(this._settings, settings || {});
	    this._graph._drawGraph();
	    return this;
	},
	
	/* Return to the parent graph. */
	end: function() {
	    return this._graph;
	}
    });
    
    /* Details about each graph axis.
       @param  graph  (SVGGraph) the owning graph
       @param  title  (string) the title of the axis
       @param  min    (number) the minimum value displayed on this axis
       @param  max    (number) the maximum value displayed on this axis
       @param  major  (number) the distance between major ticks
       @param  minor  (number) the distance between minor ticks (optional)
       @return  (SVGGraphAxis) the new axis object */
    function SVGGraphAxis(graph, title, min, max, major, minor, type) {
	this._graph = graph; // The owning graph
	this._title = title || ''; // Title of this axis
	this._titleFormat = {}; // Formatting settings for the title
	this._titleOffset = 0; // The offset for positioning the title
	this._labels = null; // List of labels for this axis - one per possible value across all series
	this._labelFormat = {}; // Formatting settings for the labels
	this._lineFormat = {stroke: 'black', strokeWidth: 1}; // Formatting settings for the axis lines
	this._ticks = {major: major || 10, minor: minor || 0, size: 10, position: 'out'}; // Tick mark options
	this._scale = {min: min || 0, max: max || 100, type: type || 'linear' }; // Axis scale settings
	this._crossAt = 0; // Where this axis crosses the other one
    }
    
    jQuery.extend(SVGGraphAxis.prototype, {
	
	/* Set or retrieve the scale for this axis.
	   @param  min  (number) the minimum value shown
	   @param  max  (number) the maximum value shown
	   @return  (SVGGraphAxis) this axis object or
	   (object) min and max values (if no parameters) */
	scale: function(min, max, type) {
	    if (arguments.length == 0) {
		return this._scale;
	    }
	    this._scale.min = (type == 'log' && min != 0) ? log10(min) : min;
	    this._scale.max = (type == 'log' && max != 0) ? log10(max) : max;
	    this._scale.type = type || 'linear';
	    this._graph._drawGraph();
	    return this;
	},
	
	/* Set or retrieve the ticks for this axis.
	   @param  major     (number) the distance between major ticks
	   @param  minor     (number) the distance between minor ticks
	   @param  size      (number) the length of the major ticks (minor are half) (optional)
	   @param  position  (string) the location of the ticks:
	   'in', 'out', 'both' (optional)
	   @return  (SVGGraphAxis) this axis object or
	   (object) major, minor, size, and position values (if no parameters) */
	ticks: function(major, minor, size, position, type) {
	    if (arguments.length == 0) {
		return this._ticks;
	    }
	    if (typeof size == 'string') {
		position = size;
		size = null;
	    }
	    this._ticks.major = (type == 'log' && major != 0) ? 2 : major;
	    this._ticks.minor = (type == 'log' && minor != 0) ? 1 : minor;
	    this._ticks.size = size || this._ticks.size;
	    this._ticks.position = position || this._ticks.position;
	    this._graph._drawGraph();
	    return this;
	},
	
	/* Set or retrieve the title for this axis.
	   @param  title   (string) the title text
	   @param  offset  (number) the distance to offset the title position (optional)
	   @param  colour  (string) how to colour the title (optional) 
	   @param  format  (object) formatting settings for the title (optional)
	   @return  (SVGGraphAxis) this axis object or
	   (object) title, offset, and format values (if no parameters) */
	title: function(title, offset, colour, format) {
	    if (arguments.length == 0) {
		return {title: this._title, offset: this._titleOffset, format: this._titleFormat};
	    }
	    if (typeof offset != 'number') {
		format = colour;
		colour = offset;
		offset = null;
	    }
	    if (typeof colour != 'string') {
		format = colour;
		colour = null;
	    }
	    this._title = title;
	    this._titleOffset = (offset != null ? offset : this._titleOffset);
	    if (colour || format) {
		this._titleFormat = jQuery.extend(format || {}, (colour ? {fill: colour} : {}));
	    }
	    this._graph._drawGraph();
	    return this;
	},
	
	/* Set or retrieve the labels for this axis.
	   @param  labels  (string[]) the text for each entry
	   @param  colour  (string) how to colour the labels (optional) 
	   @param  format  (object) formatting settings for the labels (optional)
	   @return  (SVGGraphAxis) this axis object or
	   (object) labels and format values (if no parameters) */
	labels: function(labels, colour, format) {
	    if (arguments.length == 0) {
		return {labels: this._labels, format: this._labelFormat};
	    }
	    if (typeof colour != 'string') {
		format = colour;
		colour = null;
	    }
	    this._labels = labels;
	    if (colour || format) {
		this._labelFormat = jQuery.extend(format || {}, (colour ? {fill: colour} : {}));
	    }
	    this._graph._drawGraph();
	    return this;
	},
	
	/* Set or retrieve the line formatting for this axis.
	   @param  colour    (string) the line's colour
	   @param  width     (number) the line's width (optional)
	   @param  settings  (object) additional formatting settings for the line (optional)
	   @return  (SVGGraphAxis) this axis object or
	   (object) line formatting values (if no parameters) */
	line: function(colour, width, settings) {
	    if (arguments.length == 0) {
		return this._lineFormat;
	    }
	    if (typeof width == 'object') {
		settings = width;
		width = null;
	    }
	    jQuery.extend(this._lineFormat, {stroke: colour},
			  (width ? {strokeWidth: width} : {}), settings || {});
	    this._graph._drawGraph();
	    return this;
	},
	
	/* Return to the parent graph. */
	end: function() {
	    return this._graph;
	}
    });
    
    /* Details about the graph legend.
       @param  graph         (SVGGraph) the owning graph
       @param  bgSettings    (object) additional formatting settings for the legend background (optional)
       @param  textSettings  (object) additional formatting settings for the legend text (optional)
       @return  (SVGGraphLegend) the new legend object */
    function SVGGraphLegend(graph, bgSettings, textSettings) {
	this._graph = graph; // The owning graph
	this._show = true; // Show the legend?
	this._area = [0.9, 0.1, 1.0, 0.9]; // The legend area: left, top, right, bottom,
	// > 1 in pixels, <= 1 as proportion
	this._sampleSize = 15; // Size of sample box
	this._bgSettings = bgSettings || {stroke: 'gray'}; // Additional formatting settings for the legend background
	this._textSettings = textSettings || {}; // Additional formatting settings for the text
    }
    
    jQuery.extend(SVGGraphLegend.prototype, {
	
	/* Set or retrieve whether the legend should be shown.
	   @param  show  (boolean) true to display it, false to hide it
	   @return  (SVGGraphLegend) this legend object or
	   (boolean) show the legend? (if no parameters) */
	show: function(show) {
	    if (arguments.length == 0) {
		return this._show;
	    }
	    this._show = show;
	    this._graph._drawGraph();
	    return this;
	},
	
	/* Set or retrieve the legend area.
	   @param  left    (number) > 1 is pixels, <= 1 is proportion of width or
	   (number[4]) for left, top, right, bottom
	   @param  top     (number) > 1 is pixels, <= 1 is proportion of height
	   @param  right   (number) > 1 is pixels, <= 1 is proportion of width
	   @param  bottom  (number) > 1 is pixels, <= 1 is proportion of height
	   @return  (SVGGraphLegend) this legend object or
	   (number[4]) the legend area: left, top, right, bottom (if no parameters) */
	area: function(left, top, right, bottom) {
	    if (arguments.length == 0) {
		return this._area;
	    }
	    this._area = (isArray(left) ? left : [left, top, right, bottom]);
	    this._graph._drawGraph();
	    return this;
	},
	
	/* Set or retrieve additional settings for the legend area.
	   @param  sampleSize    (number) the size of the sample box to display (optional)
	   @param  bgSettings    (object) additional formatting settings for the legend background
	   @param  textSettings  (object) additional formatting settings for the legend text (optional)
	   @return  (SVGGraphLegend) this legend object or
	   (object) bgSettings and textSettings for the legend (if no parameters) */
	settings: function(sampleSize, bgSettings, textSettings) {
	    if (arguments.length == 0) {
		return {sampleSize: this._sampleSize, bgSettings: this._bgSettings,
			textSettings: this._textSettings};
	    }
	    if (typeof sampleSize != 'number') {
		textSettings = bgSettings;
		bgSettings = sampleSize;
		sampleSize = null;
	    }
	    this._sampleSize = sampleSize || this._sampleSize;
	    this._bgSettings = bgSettings;
	    this._textSettings = textSettings || this._textSettings;
	    this._graph._drawGraph();
	    return this;
	},
	
	/* Return to the parent graph. */
	end: function() {
	    return this._graph;
	}
    });
    
    var barOptions = ['barWidth (number) - the width of each bar',
		      'barGap (number) - the gap between sets of bars'];

    /* Draw a deviation chart. */
    function SVGDeviationChart() {
    }
    
    jQuery.extend(SVGDeviationChart.prototype, {
	
	/* Retrieve the display title for this chart type.
	   @return  the title */
	title: function() {
	    return 'deviation chart';
	},
	
	/* Retrieve a description of this chart type.
	   @return  its description */
	description: function() {
	    return 'Compare sets of values as vertical bars with deviations in grouped categories.';
	},
	
	/* Retrieve a list of the options that may be set for this chart type.
	   @return  options list */
	options: function() {
	    return barOptions;
	},
	
	/* Actually draw the graph in this type's style.
	   @param  graph  (object) the SVGGraph object */
	drawGraph: function(graph) {
	    graph._drawChartBackground(true);
	    var barWidth = graph._chartOptions.barWidth || 20;
	    var barGap = graph._chartOptions.barGap || 10;
	    var numSer = graph._series.length;
	    var numVal = (numSer ? (graph._series[0])._values.length : 0);
	    var dims = graph._getDims();
	    var xScale = dims[graph.W] / ((numSer * barWidth + barGap) * numVal + barGap);
	    var yScale = dims[graph.H] / (graph.yAxis._scale.max - graph.yAxis._scale.min);
	    this._chart = graph._wrapper.group(graph._chartCont, {class_: 'chart'});
	    for (var i = 0; i < numSer; i++) {
		this._drawSeries(graph, i, numSer, barWidth, barGap, dims, xScale, yScale);
	    }
	    graph._drawTitle();
	    graph._drawAxes(true);
	    this._drawXAxis(graph, numSer, numVal, barWidth, barGap, dims, xScale);
	    graph._drawLegend();
	},
	
	/* Plot an individual series. */
	_drawSeries: function(graph, cur, numSer, barWidth, barGap, dims, xScale, yScale, type) {
	    var series = graph._series[cur];
	    var g; 
	    if (typeof(series._fill) == 'object') {
		g = graph._wrapper.group(this._chart,
					 jQuery.extend({class_: 'series' + cur, stroke: series._stroke,
							strokeWidth: series._strokeWidth}, series._settings || {}));
	    } else {
		g = graph._wrapper.group(this._chart,
					 jQuery.extend({class_: 'series' + cur, fill: series._fill, stroke: series._stroke,
							strokeWidth: series._strokeWidth}, series._settings || {}));
	    }
	    for (var i = 0; i < series._values.length; i++) {
		var xoffset = dims[graph.X] + xScale * (barGap + i * (numSer * barWidth + barGap) + (cur * barWidth));
		var data = series._values[i];
		
		if (graph.yAxis._scale.type == 'log') {
		    data.upper = log10(data.upper);
		    data.median = log10(data.median);
		    data.max = log10(data.max);
		    data.lower = log10(data.lower);
		    data.min = log10(data.min);
		}

		var yshift = dims[graph.Y];
		// median - upper
		graph._wrapper.rect(g, xoffset + 1, Math.ceil((graph.yAxis._scale.max - data.upper) * yScale + yshift), parseInt(barWidth - 2), parseInt((data.upper - data.median) * yScale), 0, 0, { stroke: 'black', strokeWidth: 1, fill: series._fill[i] });
		
		// median - lower
		graph._wrapper.rect(g, xoffset + 1, parseInt((graph.yAxis._scale.max - data.median) * yScale + yshift), parseInt(barWidth - 2), parseInt((data.median - data.lower) * yScale), 0, 0, { stroke: 'black', strokeWidth: 1, fill: series._fill[i] });

		// max - upper
		var mu = 
		graph._wrapper.line(g, xoffset + 1 + parseInt(barWidth / 6), parseInt((graph.yAxis._scale.max - data.max) * yScale + 1 + yshift), parseInt(xoffset + 1 + barWidth - 2 - parseInt(barWidth / 6)), parseInt((graph.yAxis._scale.max - data.max) * yScale + 1 + yshift), { stroke: 'black', strokeWidth: 1 });
		graph._wrapper.line(g, xoffset + parseInt(barWidth / 2), parseInt((graph.yAxis._scale.max - data.max) * yScale + 1 + yshift), parseInt(xoffset + parseInt(barWidth / 2)), parseInt((graph.yAxis._scale.max - data.upper) * yScale + 1 + yshift), { stroke: 'black', strokeWidth: 1, strokeDashArray: "2,2" });

		
		// lower - min
		graph._wrapper.line(g, xoffset + 1 + parseInt(barWidth / 6), parseInt((graph.yAxis._scale.max - data.min) * yScale - 1 + yshift), parseInt(xoffset + 1 + barWidth - 2 - parseInt(barWidth / 6)), parseInt((graph.yAxis._scale.max - data.min) * yScale - 1 + yshift), { stroke: 'black', strokeWidth: 1 });
		graph._wrapper.line(g, xoffset + parseInt(barWidth / 2), parseInt((graph.yAxis._scale.max - data.lower) * yScale - 1 + yshift), parseInt(xoffset + parseInt(barWidth / 2)), parseInt((graph.yAxis._scale.max - data.min) * yScale - 1 + yshift), { stroke: 'black', strokeWidth: 1, strokeDashArray: "2,2" });
	    }
	},
	
	/* Draw the x-axis and its ticks. */
	_drawXAxis: function(graph, numSer, numVal, barWidth, barGap, dims, xScale) {
	    var axis = graph.xAxis;
	    if (axis._title) {
		graph._wrapper.text(graph._chartCont, dims[graph.X] + dims[graph.W] / 2,
				    parseInt(graph._chartCont.attributes[3].value),//dims[graph.Y] + dims[graph.H] + axis._titleOffset,
				    axis._title, jQuery.extend({textAnchor: 'middle'}, axis._titleFormat || {}));
	    }
	    var gl = graph._wrapper.group(graph._chartCont, jQuery.extend({class_: 'xAxis'}, axis._lineFormat));
	    var labelTextAnchor = axis.labelRotation ? "end" : "middle";
	    var gt = graph._wrapper.group(graph._chartCont, jQuery.extend({class_: 'xAxisLabels',
									   textAnchor: labelTextAnchor}, axis._labelFormat));
	    graph._wrapper.line(gl, dims[graph.X], dims[graph.Y] + dims[graph.H],
				dims[graph.X] + dims[graph.W], dims[graph.Y] + dims[graph.H]);
	    if (axis._ticks.major) {
		var offsets = graph._getTickOffsets(axis, true);
		for (var i = 0; i < numSer; i++) {
		    var x = dims[graph.X] + (xScale * barGap) + (barWidth / 2) + (i * (barWidth * xScale));
		    graph._wrapper.line(gl, x, dims[graph.Y] + dims[graph.H] + offsets[0] * axis._ticks.size,
					x, dims[graph.Y] + dims[graph.H] + offsets[1] * axis._ticks.size);
		}
		for (var i = 0; i < numSer; i++) {
		    var x = dims[graph.X] + (xScale * barGap) + (barWidth / 2) + (i * (barWidth * xScale));
		    graph._wrapper.text(gt, x, dims[graph.Y] + dims[graph.H] + 2 * axis._ticks.size,
					(axis._labels ? axis._labels[i] : graph._series[i]._name), (axis.labelRotation ? { textAnchor: "end", transform: "rotate("+axis.labelRotation+", "+x+", "+(dims[graph.Y] + dims[graph.H] + 2 * axis._ticks.size)+")"} : { textAnchor: "end", transform: "rotate(-50, "+x+", "+(dims[graph.Y] + dims[graph.H] + 2 * axis._ticks.size)+")"}));
		}
	    }
	}
    });
    
    /* Draw a standard grouped column bar chart. */
    function SVGColumnChart() {
    }
    
    jQuery.extend(SVGColumnChart.prototype, {
	
	/* Retrieve the display title for this chart type.
	   @return  the title */
	title: function() {
	    return 'Basic column chart';
	},
	
	/* Retrieve a description of this chart type.
	   @return  its description */
	description: function() {
	    return 'Compare sets of values as vertical bars with grouped categories.';
	},
	
	/* Retrieve a list of the options that may be set for this chart type.
	   @return  options list */
	options: function() {
	    return barOptions;
	},
	
	/* Actually draw the graph in this type's style.
	   @param  graph  (object) the SVGGraph object */
	drawGraph: function(graph) {
	    graph._drawChartBackground(true);
	    var barWidth = graph._chartOptions.barWidth || 10;
	    var barGap = graph._chartOptions.barGap || 10;
	    var numSer = graph._series.length;
	    var barCount = 0;
	    for (var i=0; i<numSer; i++) {
		if (! graph._series[i]._settings.hasOwnProperty('seriesType') || graph._series[i]._settings.seriesType!='line') {
		    barCount++;
		}
	    }
	    var numVal = (numSer ? (graph._series[0])._values.length : 0);
	    var dims = graph._getDims();
	    var xScale = dims[graph.W] / ((barCount * barWidth + barGap) * numVal + barGap);
	    var yScale = dims[graph.H] / (graph.yAxis._scale.max - graph.yAxis._scale.min);
	    var y2Scale = graph.y2Axis ? dims[graph.H] / (graph.y2Axis._scale.max - graph.y2Axis._scale.min) : 0;
	    this._chart = graph._wrapper.group(graph._chartCont, {class_: 'chart'});
	    var barNum = 0;
	    for (var i = 0; i < numSer; i++) {
		if (graph._series[i]._settings.isY2) {
		    this._drawSeries(graph, barNum, barCount, barWidth, barGap, dims, xScale, y2Scale);
		} else {
		    this._drawSeries(graph, barNum, barCount, barWidth, barGap, dims, xScale, yScale);
		}
		if (! graph._series[i]._settings.hasOwnProperty('seriesType') || graph._series[i]._settings.seriesType!='line') {
		    barNum++;
		}
	    }
	    graph._drawTitle();
	    graph._drawAxes(true);
	    this._drawXAxis(graph, barNum, numVal, barWidth, barGap, dims, xScale);
	    graph._drawLegend();
	},
	
	/* Plot an individual series. */
	_drawSeries: function(graph, cur, numSer, barWidth, barGap, dims, xScale, yScale, type) {
	    var series = graph._series[cur];
	    if (series._settings.hasOwnProperty('seriesType') && series._settings.seriesType=='line') {
		var path = graph._wrapper.createPath();
		var circles = [];
		for (var i = 0; i < series._values.length; i++) {
		    var x = dims[graph.X] + xScale * (barGap / 2 + (i + 0.5) * (numSer * barWidth + barGap));
		    var y = dims[graph.Y] + ((series._settings.isY2 ? graph.y2Axis._scale.max : graph.yAxis._scale.max) - series._values[i]) * yScale;
		    if (i === 0) {
			path.move(x, y);
		    }
		    else {
			path.line(x, y);
		    }
		    circles.push( [ x, y ]);
		}
		if (! series._settings.noLines) {
		    graph._wrapper.path(this._chart, path,
					jQuery.extend({id: 'series' + cur, fill: 'none', stroke: (series._stroke=="white") ? "black" : series._stroke,
						       strokeWidth: series._strokeWidth}, series._settings || {}));
		}
		for (i=0;i<circles.length;i++) {
		    var c = graph._wrapper.circle(this._chart, circles[i][0], circles[i][1], 3, { fill: 'white', strokeWidth: 1, stroke: (series._stroke=="white") ? "black" : series._stroke, onmouseover: "this.setAttribute('r', parseInt(this.getAttribute('r')) + 1)", onmouseout: "this.setAttribute('r', parseInt(this.getAttribute('r')) - 1)" });
		    graph._showStatus(c, series._name, series._values[i]);
		}
	    } else {
		var g; 
		if (typeof(series._fill) == 'object') {
		    g = graph._wrapper.group(this._chart,
					     jQuery.extend({class_: 'series' + cur, stroke: series._stroke,
							    strokeWidth: series._strokeWidth}, series._settings || {}));
		} else {
		    g = graph._wrapper.group(this._chart,
					     jQuery.extend({class_: 'series' + cur, fill: series._fill, stroke: series._stroke,
							    strokeWidth: series._strokeWidth}, series._settings || {}));
		}
		for (var i = 0; i < series._values.length; i++) {
		    var r = graph._wrapper.rect(g,
						dims[graph.X] + xScale * (barGap + i * (numSer * barWidth + barGap) + (cur * barWidth)),
						dims[graph.Y] + yScale * (graph.yAxis._scale.max - ((graph.yAxis._scale.type == 'log') ? log10(series._values[i]) : series._values[i])),
						xScale * barWidth, yScale * ((graph.yAxis._scale.type == 'log') ? log10(series._values[i]) : series._values[i]), (typeof(series._fill) == 'object') ? { fill: series._fill[i] } : {});
		    graph._showStatus(r, series._name, series._values[i]);
		}
	    }
	},
	
	/* Draw the x-axis and its ticks. */
	_drawXAxis: function(graph, numSer, numVal, barWidth, barGap, dims, xScale) {
	    var axis = graph.xAxis;
	    if (axis._title) {
		graph._wrapper.text(graph._chartCont, dims[graph.X] + dims[graph.W] / 2,
				    parseInt(graph._chartCont.attributes[3].value),//dims[graph.Y] + dims[graph.H] + axis._titleOffset,
				    axis._title, jQuery.extend({textAnchor: 'middle'}, axis._titleFormat || {}));
	    }
	    var gl = graph._wrapper.group(graph._chartCont, jQuery.extend({class_: 'xAxis'}, axis._lineFormat));
	    var labelTextAnchor = axis.labelRotation ? "end" : "middle";
	    var gt = graph._wrapper.group(graph._chartCont, jQuery.extend({class_: 'xAxisLabels',
									   textAnchor: labelTextAnchor}, axis._labelFormat));
	    graph._wrapper.line(gl, dims[graph.X], dims[graph.Y] + dims[graph.H],
				dims[graph.X] + dims[graph.W], dims[graph.Y] + dims[graph.H]);
	    if (axis._ticks.major) {
		var offsets = graph._getTickOffsets(axis, true);
		for (var i = 1; i < numVal; i++) {
		    var x = dims[graph.X] + xScale * (barGap / 2 + i * (numSer * barWidth + barGap));
		    graph._wrapper.line(gl, x, dims[graph.Y] + dims[graph.H] + offsets[0] * axis._ticks.size,
					x, dims[graph.Y] + dims[graph.H] + offsets[1] * axis._ticks.size);
		}
		for (var i = 0; i < numVal; i++) {
		    var x = dims[graph.X] + xScale * (barGap / 2 + (i + 0.5) * (numSer * barWidth + barGap));
		    graph._wrapper.text(gt, x, dims[graph.Y] + dims[graph.H] + 2 * axis._ticks.size,
					(axis._labels ? axis._labels[i] : '' + i), (axis.labelRotation ? { transform: "rotate("+axis.labelRotation+", "+x+", "+(dims[graph.Y] + dims[graph.H] + 2 * axis._ticks.size)+")"} : null));
		}
	    }
	}
    });
    
    /* Draw a stacked column bar chart. */
    function SVGStackedColumnChart() {
    }
    
    jQuery.extend(SVGStackedColumnChart.prototype, {
	
	/* Retrieve the display title for this chart type.
	   @return  the title */
	title: function() {
	    return 'Stacked column chart';
	},
	
	/* Retrieve a description of this chart type.
	   @return  its description */
	description: function() {
	    return 'Compare sets of values as vertical bars showing ' +
		'relative contributions to the whole for each category.';
	},
	
	/* Retrieve a list of the options that may be set for this chart type.
	   @return  options list */
	options: function() {
	    return barOptions;
	},
	
	/* Actually draw the graph in this type's style.
	   @param  graph  (object) the SVGGraph object */
	drawGraph: function(graph) {
	    var bg = graph._drawChartBackground(true, true);
	    var dims = graph._getDims();
	    if (graph._gridlines[0] && graph.xAxis._ticks.major) {
		graph._drawGridlines(bg, graph._getPercentageAxis(), true, dims, graph._gridlines[0]);
	    }
	    var barWidth = graph._chartOptions.barWidth || 10;
	    var barGap = graph._chartOptions.barGap || 10;
	    var numSer = graph._series.length;
	    var numVal = (numSer ? (graph._series[0])._values.length : 0);
	    var xScale = dims[graph.W] / ((barWidth + barGap) * numVal + barGap);
	    var yScale = dims[graph.H];
	    this._chart = graph._wrapper.group(graph._chartCont, {class_: 'chart'});
	    this._drawColumns(graph, numSer, numVal, barWidth, barGap, dims, xScale, yScale);
	    graph._drawTitle();
	    graph._wrapper.text(graph._chartCont, 0, 0, jQuery.svg.graphing.region.percentageText,
				jQuery.extend({textAnchor: 'middle', transform: 'translate(' +
					       (dims[graph.X] - graph.yAxis._titleOffset) + ',' +
					       (dims[graph.Y] + dims[graph.H] / 2) + ') rotate(-90)'}, graph.yAxis._titleFormat || {}));
	    var pAxis = jQuery.extend({}, graph._getPercentageAxis());
	    jQuery.extend(pAxis._labelFormat, graph.yAxis._labelFormat || {});
	    graph._drawAxis(pAxis, 'yAxis', dims[graph.X], dims[graph.Y],
			    dims[graph.X], dims[graph.Y] + dims[graph.H]);
	    this._drawXAxis(graph, numVal, barWidth, barGap, dims, xScale);
	    graph._drawLegend();
	},
	
	/* Plot all of the columns. */
	_drawColumns: function(graph, numSer, numVal, barWidth, barGap, dims, xScale, yScale) {
	    var totals = graph._getTotals();
	    var accum = [];
	    for (var i = 0; i < numVal; i++) {
		accum[i] = 0;
	    }
	    for (var s = 0; s < numSer; s++) {
		var series = graph._series[s];
		var g = graph._wrapper.group(this._chart,
					     jQuery.extend({class_: 'series' + s, fill: series._fill,
							    stroke: series._stroke, strokeWidth: series._strokeWidth},
							   series._settings || {}));
		for (var i = 0; i < series._values.length; i++) {
		    accum[i] += series._values[i];
		    var r = graph._wrapper.rect(g,
						dims[graph.X] + xScale * (barGap + i * (barWidth + barGap)),
						dims[graph.Y] + yScale * (totals[i] - accum[i]) / totals[i],
						xScale * barWidth, yScale * series._values[i] / totals[i]);
		    graph._showStatus(r, series._name,
				      roundNumber(series._values[i] / totals[i] * 100, 2));
		}
	    }
	},
	
	/* Draw the x-axis and its ticks. */
	_drawXAxis: function(graph, numVal, barWidth, barGap, dims, xScale) {
	    var axis = graph.xAxis;
	    if (axis._title) {
		graph._wrapper.text(graph._chartCont, dims[graph.X] + dims[graph.W] / 2,
				    dims[graph.Y] + dims[graph.H] + axis._titleOffset,
				    axis._title, jQuery.extend({textAnchor: 'middle'}, axis._titleFormat || {}));
	    }
	    var gl = graph._wrapper.group(graph._chartCont, jQuery.extend({class_: 'xAxis'}, axis._lineFormat));
	    var gt = graph._wrapper.group(graph._chartCont, jQuery.extend({class_: 'xAxisLabels',
									   textAnchor: 'middle'}, axis._labelFormat));
	    graph._wrapper.line(gl, dims[graph.X], dims[graph.Y] + dims[graph.H],
				dims[graph.X] + dims[graph.W], dims[graph.Y] + dims[graph.H]);
	    if (axis._ticks.major) {
		var offsets = graph._getTickOffsets(axis, true);
		for (var i = 1; i < numVal; i++) {
		    var x = dims[graph.X] + xScale * (barGap / 2 + i * (barWidth + barGap));
		    graph._wrapper.line(gl, x, dims[graph.Y] + dims[graph.H] + offsets[0] * axis._ticks.size,
					x, dims[graph.Y] + dims[graph.H] + offsets[1] * axis._ticks.size);
		}
		for (var i = 0; i < numVal; i++) {
		    var x = dims[graph.X] + xScale * (barGap / 2 + (i + 0.5) * (barWidth + barGap));
		    graph._wrapper.text(gt, x, dims[graph.Y] + dims[graph.H] + 2 * axis._ticks.size,
					(axis._labels ? axis._labels[i] : '' + i));
		}
	    }
	}
    });
    
    /* Draw a stacked column bar chart. */
    function SVGStackedAreaChart() {
    }
    
    jQuery.extend(SVGStackedAreaChart.prototype, {
	
	/* Retrieve the display title for this chart type.
	   @return  the title */
	title: function() {
	    return 'Stacked area chart';
	},
	
	/* Retrieve a description of this chart type.
	   @return  its description */
	description: function() {
	    return 'Compare sets of values as areas showing ' +
		'relative contributions to the whole for each category.';
	},
	
	/* Retrieve a list of the options that may be set for this chart type.
	   @return  options list */
	options: function() {
	    return barOptions;
	},
	
	/* Actually draw the graph in this type's style.
	   @param  graph  (object) the SVGGraph object */
	drawGraph: function(graph) {
	    var bg = graph._drawChartBackground(true, true);
	    var dims = graph._getDims();
	    if (graph._gridlines[0] && graph.xAxis._ticks.major) {
		graph._drawGridlines(bg, graph._getPercentageAxis(), true, dims, graph._gridlines[0]);
	    }
	    var numSer = graph._series.length;
	    var numVal = (numSer ? (graph._series[0])._values.length : 0);
	    var xScale = dims[graph.W] / numVal;
	    var yScale = dims[graph.H];
	    this._chart = graph._wrapper.group(graph._chartCont, {class_: 'chart'});
	    this._drawAreas(graph, numSer, numVal, dims, xScale, yScale);
	    graph._drawTitle();
	    graph._wrapper.text(graph._chartCont, 0, 0, jQuery.svg.graphing.region.percentageText,
				jQuery.extend({textAnchor: 'middle', transform: 'translate(' +
					       (dims[graph.X] - graph.yAxis._titleOffset) + ',' +
					       (dims[graph.Y] + dims[graph.H] / 2) + ') rotate(-90)'}, graph.yAxis._titleFormat || {}));
	    var pAxis = jQuery.extend({}, graph._getPercentageAxis());
	    jQuery.extend(pAxis._labelFormat, graph.yAxis._labelFormat || {});
	    graph._drawAxis(pAxis, 'yAxis', dims[graph.X], dims[graph.Y],
			    dims[graph.X], dims[graph.Y] + dims[graph.H]);
	    this._drawXAxis(graph, numVal, dims, xScale);
	    graph._drawLegend();
	},
	
	/* Plot all of the areas. */
	_drawAreas: function(graph, numSer, numVal, dims, xScale, yScale) {
	    var totals = graph._getTotals();
	    var accum = [];
	    var max = 0;
	    for (var i=0;i<totals.length;i++) {
		if (totals[i] > max) {
		    max = totals[i];
		}
	    }
	    for (var i = 0; i < numVal; i++) {
		accum[i] = 0;
	    }

	    var paths = [];
	    for (var s = 0; s < numSer; s++) {
		paths[s] = "";
		var series = graph._series[s];
		for (var i = 0; i < series._values.length; i++) {
		    accum[i] += series._values[i];
		    paths[s] += (i===0) ? "M" : "L";
		    var yVal = (dims[graph.Y] + yScale * (totals[i] - accum[i]) / totals[i]);
		    if (! graph.normalizeStackedArea) {
			yVal = dims[graph.Y] + yScale - (yScale / max * (accum[i] - series._values[i]));
		    }
		    paths[s] += (dims[graph.X] + xScale * i) + "," + yVal;
		    if (i == series._values.length - 1) {
			paths[s] += "L" + (dims[graph.X] + xScale * (i+1)) + "," + yVal;
		    }
		}

		if (s===0 && graph.normalizeStackedArea) {
		    paths[s] += "L"+(dims[graph.X] + xScale * series._values.length)+","+(dims[graph.Y] + dims[graph.H])+"L"+dims[graph.X]+","+(dims[graph.Y] + dims[graph.H]);
		} else {
		    for (var i = series._values.length - 1; i > -1 ; i--) {
			var yVal = (dims[graph.Y] + yScale * (totals[i] - accum[i] + series._values[i]) / totals[i]);
			if (! graph.normalizeStackedArea) {
			    yVal = dims[graph.Y] + yScale - (yScale / max * accum[i]);
			}
			if (i == series._values.length - 1) {
			    paths[s] += "L" + (dims[graph.X] + xScale * (i+1)) + "," + yVal;
			}
			paths[s] += "L"+(dims[graph.X] + xScale * i) + "," + yVal;
		    }
		}
	    }
	    for (i=0;i<paths.length;i++) {
		var series = graph._series[i];
		graph._wrapper.path(this._chart, paths[i], { fill: series._fill, stroke: series._stroke, strokeWidth: series._strokeWidth});
	    }
	},
	
	/* Draw the x-axis and its ticks. */
	_drawXAxis: function(graph, numVal, dims, xScale) {
	    var axis = graph.xAxis;
	    if (axis._title) {
		graph._wrapper.text(graph._chartCont, dims[graph.X] + dims[graph.W] / 2,
				    dims[graph.Y] + dims[graph.H] + axis._titleOffset,
				    axis._title, jQuery.extend({textAnchor: 'middle'}, axis._titleFormat || {}));
	    }
	    var gl = graph._wrapper.group(graph._chartCont, jQuery.extend({class_: 'xAxis'}, axis._lineFormat));
	    var gt = graph._wrapper.group(graph._chartCont, jQuery.extend({class_: 'xAxisLabels',
									   textAnchor: 'middle'}, axis._labelFormat));
	    graph._wrapper.line(gl, dims[graph.X], dims[graph.Y] + dims[graph.H],
				dims[graph.X] + dims[graph.W], dims[graph.Y] + dims[graph.H]);
	    
	    if (axis._ticks.major) {
		var offsets = graph._getTickOffsets(axis, true);
		for (var i = 1; i < numVal; i++) {
		    if (i % axis._ticks.major > 0) {
			continue;
		    }
		    var x = dims[graph.X] + xScale * i;
		    graph._wrapper.line(gl, x, dims[graph.Y] + dims[graph.H] + offsets[0] * axis._ticks.size,
					x, dims[graph.Y] + dims[graph.H] + offsets[1] * axis._ticks.size);
		}
		for (var i = 0; i < numVal; i++) {
		    if (i % axis._ticks.major > 0) {
			continue;
		    }
		    var x = dims[graph.X] + xScale * (i + 0.5);
		    graph._wrapper.text(gt, x, dims[graph.Y] + dims[graph.H] + 2 * axis._ticks.size,
					(axis._labels ? axis._labels[i] : '' + i));
		}
	    }
	}
    });
    
    /* Draw a standard grouped row bar chart. */
    function SVGRowChart() {
    }
    
    jQuery.extend(SVGRowChart.prototype, {
	
	/* Retrieve the display title for this chart type.
	   @return  the title */
	title: function() {
	    return 'Basic row chart';
	},
	
	/* Retrieve a description of this chart type.
	   @return  its description */
	description: function() {
	    return 'Compare sets of values as horizontal rows with grouped categories.';
	},
	
	/* Retrieve a list of the options that may be set for this chart type.
	   @return  options list */
	options: function() {
	    return barOptions;
	},
	
	/* Actually draw the graph in this type's style.
	   @param  graph  (object) the SVGGraph object */
	drawGraph: function(graph) {
	    var bg = graph._drawChartBackground(true, true);
	    var dims = graph._getDims();
	    graph._drawGridlines(bg, graph.yAxis, false, dims, graph._gridlines[0]);
	    var barWidth = graph._chartOptions.barWidth || 10;
	    var barGap = graph._chartOptions.barGap || 10;
	    var numSer = graph._series.length;
	    var numVal = (numSer ? (graph._series[0])._values.length : 0);
	    var xScale = dims[graph.W] / (graph.yAxis._scale.max - graph.yAxis._scale.min);
	    var yScale = dims[graph.H] / ((numSer * barWidth + barGap) * numVal + barGap);
	    this._chart = graph._wrapper.group(graph._chartCont, {class_: 'chart'});
	    for (var i = 0; i < numSer; i++) {
		this._drawSeries(graph, i, numSer, barWidth, barGap, dims, xScale, yScale);
	    }
	    graph._drawTitle();
	    this._drawAxes(graph, numSer, numVal, barWidth, barGap, dims, yScale);
	    graph._drawLegend();
	},
	
	/* Plot an individual series. */
	_drawSeries: function(graph, cur, numSer, barWidth, barGap, dims, xScale, yScale) {
	    var series = graph._series[cur];
	    var g = graph._wrapper.group(this._chart,
					 jQuery.extend({class_: 'series' + cur, fill: series._fill,
							stroke: series._stroke, strokeWidth: series._strokeWidth},
						       series._settings || {}));
	    for (var i = 0; i < series._values.length; i++) {
		var r = graph._wrapper.rect(g,
					    dims[graph.X] + xScale * (0 - graph.yAxis._scale.min),
					    dims[graph.Y] + yScale * (barGap + i * (numSer * barWidth + barGap) + (cur * barWidth)),
					    xScale * series._values[i], yScale * barWidth);
		graph._showStatus(r, series._name, series._values[i]);
	    }
	},
	
	/* Draw the axes for this graph. */
	_drawAxes: function(graph, numSer, numVal, barWidth, barGap, dims, yScale) {
	    // X-axis
	    var axis = graph.yAxis;
	    if (axis) {
		if (axis._title) {
		    graph._wrapper.text(graph._chartCont, dims[graph.X] + dims[graph.W] / 2,
					dims[graph.Y] + dims[graph.H] + axis._titleOffset, axis._title, axis._titleFormat);
		}
		graph._drawAxis(axis, 'xAxis', dims[graph.X], dims[graph.Y] + dims[graph.H],
				dims[graph.X] + dims[graph.W], dims[graph.Y] + dims[graph.H]);
	    }
	    // Y-axis
	    var axis = graph.xAxis;
	    if (axis._title) {
		graph._wrapper.text(graph._chartCont, 0, 0, axis._title, jQuery.extend({textAnchor: 'middle',
											transform: 'translate(' + (dims[graph.X] - axis._titleOffset) + ',' +
											(dims[graph.Y] + dims[graph.H] / 2) + ') rotate(-90)'}, axis._titleFormat || {}));
	    }
	    var gl = graph._wrapper.group(graph._chartCont, jQuery.extend({class_: 'yAxis'}, axis._lineFormat));
	    var gt = graph._wrapper.group(graph._chartCont, jQuery.extend(
		{class_: 'yAxisLabels', textAnchor: 'end'}, axis._labelFormat));
	    graph._wrapper.line(gl, dims[graph.X], dims[graph.Y], dims[graph.X], dims[graph.Y] + dims[graph.H]);
	    if (axis._ticks.major) {
		var offsets = graph._getTickOffsets(axis, false);
		for (var i = 1; i < numVal; i++) {
		    var y = dims[graph.Y] + yScale * (barGap / 2 + i * (numSer * barWidth + barGap));
		    graph._wrapper.line(gl, dims[graph.X] + offsets[0] * axis._ticks.size, y,
					dims[graph.X] + offsets[1] * axis._ticks.size, y);
		}
		for (var i = 0; i < numVal; i++) {
		    var y = dims[graph.Y] + yScale * (barGap / 2 + (i + 0.5) * (numSer * barWidth + barGap));
		    graph._wrapper.text(gt, dims[graph.X] - axis._ticks.size, y,
					(axis._labels ? axis._labels[i] : '' + i));
		}
	    }
	}
    });
    
    /* Draw a stacked row bar chart. */
    function SVGStackedRowChart() {
    }
    
    jQuery.extend(SVGStackedRowChart.prototype, {
	
	/* Retrieve the display title for this chart type.
	   @return  the title */
	title: function() {
	    return 'Stacked row chart';
	},
	
	/* Retrieve a description of this chart type.
	   @return  its description */
	description: function() {
	    return 'Compare sets of values as horizontal bars showing ' +
		'relative contributions to the whole for each category.';
	},
	
	/* Retrieve a list of the options that may be set for this chart type.
	   @return  options list */
	options: function() {
	    return barOptions;
	},
	
	/* Actually draw the graph in this type's style.
	   @param  graph  (object) the SVGGraph object */
	drawGraph: function(graph) {
	    var bg = graph._drawChartBackground(true, true);
	    var dims = graph._getDims();
	    if (graph._gridlines[0] && graph.xAxis._ticks.major) {
		graph._drawGridlines(bg, graph._getPercentageAxis(), false, dims, graph._gridlines[0]);
	    }
	    var barWidth = graph._chartOptions.barWidth || 10;
	    var barGap = graph._chartOptions.barGap || 10;
	    var numSer = graph._series.length;
	    var numVal = (numSer ? (graph._series[0])._values.length : 0);
	    var xScale = dims[graph.W];
	    var yScale = dims[graph.H] / ((barWidth + barGap) * numVal + barGap);
	    this._chart = graph._wrapper.group(graph._chartCont, {class_: 'chart'});
	    this._drawRows(graph, numSer, numVal, barWidth, barGap, dims, xScale, yScale);
	    graph._drawTitle();
	    graph._wrapper.text(graph._chartCont, dims[graph.X] + dims[graph.W] / 2,
				dims[graph.Y] + dims[graph.H] + graph.xAxis._titleOffset,
				jQuery.svg.graphing.region.percentageText,
				jQuery.extend({textAnchor: 'middle'}, graph.yAxis._titleFormat || {}));
	    var pAxis = jQuery.extend({}, graph._getPercentageAxis());
	    jQuery.extend(pAxis._labelFormat, graph.yAxis._labelFormat || {});
	    graph._drawAxis(pAxis, 'xAxis', dims[graph.X], dims[graph.Y] + dims[graph.H],
			    dims[graph.X] + dims[graph.W], dims[graph.Y] + dims[graph.H]);
	    this._drawYAxis(graph, numVal, barWidth, barGap, dims, yScale);
	    graph._drawLegend();
	},
	
	/* Plot all of the rows. */
	_drawRows: function(graph, numSer, numVal, barWidth, barGap, dims, xScale, yScale) {
	    var totals = graph._getTotals();
	    var accum = [];
	    for (var i = 0; i < numVal; i++) {
		accum[i] = 0;
	    }
	    for (var s = 0; s < numSer; s++) {
		var series = graph._series[s];
		var g = graph._wrapper.group(this._chart,
					     jQuery.extend({class_: 'series' + s, fill: series._fill,
							    stroke: series._stroke, strokeWidth: series._strokeWidth},
							   series._settings || {}));
		for (var i = 0; i < series._values.length; i++) {
		    var r = graph._wrapper.rect(g,
						dims[graph.X] + xScale * accum[i] / totals[i],
						dims[graph.Y] + yScale * (barGap + i * (barWidth + barGap)),
						xScale * series._values[i] / totals[i], yScale * barWidth);
		    graph._showStatus(r, series._name,
				      roundNumber(series._values[i] / totals[i] * 100, 2));
		    accum[i] += series._values[i];
		}
	    }
	},
	
	/* Draw the y-axis and its ticks. */
	_drawYAxis: function(graph, numVal, barWidth, barGap, dims, yScale) {
	    var axis = graph.xAxis;
	    if (axis._title) {
		graph._wrapper.text(graph._chartCont, 0, 0, axis._title, jQuery.extend({textAnchor: 'middle',
											transform: 'translate(' + (dims[graph.X] - axis._titleOffset) + ',' +
											(dims[graph.Y] + dims[graph.H] / 2) + ') rotate(-90)'}, axis._titleFormat || {}));
	    }
	    var gl = graph._wrapper.group(graph._chartCont,
					  jQuery.extend({class_: 'yAxis'}, axis._lineFormat));
	    var gt = graph._wrapper.group(graph._chartCont,
					  jQuery.extend({class_: 'yAxisLabels', textAnchor: 'end'}, axis._labelFormat));
	    graph._wrapper.line(gl, dims[graph.X], dims[graph.Y],
				dims[graph.X], dims[graph.Y] + dims[graph.H]);
	    if (axis._ticks.major) {
		var offsets = graph._getTickOffsets(axis, false);
		for (var i = 1; i < numVal; i++) {
		    var y = dims[graph.Y] + yScale * (barGap / 2 + i * (barWidth + barGap));
		    graph._wrapper.line(gl, dims[graph.X] + offsets[0] * axis._ticks.size, y,
					dims[graph.X] + offsets[1] * axis._ticks.size, y);
		}
		for (var i = 0; i < numVal; i++) {
		    var y = dims[graph.Y] + yScale * (barGap / 2 + (i + 0.5) * (barWidth + barGap));
		    graph._wrapper.text(gt, dims[graph.X] - axis._ticks.size, y,
					(axis._labels ? axis._labels[i] : '' + i));
		}
	    }
	}
    });
    
    /* Draw a standard line chart. */
    function SVGLineChart() {
    }
    
    jQuery.extend(SVGLineChart.prototype, {
	
	/* Retrieve the display title for this chart type.
	   @return  the title */
	title: function() {
	    return 'Basic line chart';
	},
	
	/* Retrieve a description of this chart type.
	   @return  its description */
	description: function() {
	    return 'Compare sets of values as continuous lines.';
	},
	
	/* Retrieve a list of the options that may be set for this chart type.
	   @return  options list */
	options: function() {
	    return [];
	},
	
	/* Actually draw the graph in this type's style.
	   @param  graph  (object) the SVGGraph object */
	drawGraph: function(graph) {
	    graph._drawChartBackground();
	    var dims = graph._getDims();

	    graph.xAxis._scale.max = graph._series[0]._values.length - 1;

	    var xScale = dims[graph.W] / (graph.xAxis._scale.max - graph.xAxis._scale.min);
	    var yScale = dims[graph.H] / (graph.yAxis._scale.max - graph.yAxis._scale.min);
	    this._chart = graph._wrapper.group(graph._chartCont, {class_: 'chart'});
	    for (var i = 0; i < graph._series.length; i++) {
		this._drawSeries(graph, i, dims, xScale, yScale);
	    }
	    graph._drawTitle();
	    graph._drawAxes(true);
	    this._drawXAxis(graph, graph._series[0]._values.length, dims, xScale);
	    graph._drawLegend();
	},
	
	/* Plot an individual series. */
	_drawSeries: function(graph, cur, dims, xScale, yScale) {
	    var series = graph._series[cur];
	    var path = graph._wrapper.createPath();
	    var circles = [];
	    for (var i = 0; i < series._values.length; i++) {
		var x = dims[graph.X] + i * xScale;
		var y = dims[graph.Y] + (graph.yAxis._scale.max - series._values[i]) * yScale;
		if (i === 0) {
		    path.move(x, y);
		}
		else {
		    path.line(x, y);
		}
		circles.push( [ x, y ]);
	    }
	    if (! series._settings.noLines) {
		graph._wrapper.path(this._chart, path,
				    jQuery.extend({id: 'series' + cur, fill: 'none', stroke: (series._stroke=="white") ? "black" : series._stroke,
						   strokeWidth: series._strokeWidth}, series._settings || {}));
	    }
	    for (i=0;i<circles.length;i++) {
		var c = graph._wrapper.circle(this._chart, circles[i][0], circles[i][1], 3, { fill: 'white', strokeWidth: 1, stroke: (series._stroke=="white") ? "black" : series._stroke, onmouseover: "this.setAttribute('r', parseInt(this.getAttribute('r')) + 1)", onmouseout: "this.setAttribute('r', parseInt(this.getAttribute('r')) - 1)" });
		graph._showStatus(c, series._name, series._values[i]);
	    }
	},

	/* Draw the x-axis and its ticks. */
	_drawXAxis: function(graph, numVal, dims, xScale) {
	    var axis = graph.xAxis;
	    if (axis._title) {
		graph._wrapper.text(graph._chartCont, dims[graph.X] + dims[graph.W] / 2,
				    dims[graph.Y] + dims[graph.H] + axis._titleOffset,
				    axis._title, jQuery.extend({textAnchor: 'middle'}, axis._titleFormat || {}));
	    }
	    var gl = graph._wrapper.group(graph._chartCont, jQuery.extend({class_: 'xAxis'}, axis._lineFormat));
	    var labelTextAnchor = axis.labelRotation ? "end" : "middle";
	    var gt = graph._wrapper.group(graph._chartCont, jQuery.extend({class_: 'xAxisLabels',
									   textAnchor: labelTextAnchor}, axis._labelFormat));
	    graph._wrapper.line(gl, dims[graph.X], dims[graph.Y] + dims[graph.H],
				dims[graph.X] + dims[graph.W], dims[graph.Y] + dims[graph.H]);
	    if (axis._ticks.major) {
		var offsets = graph._getTickOffsets(axis, true);
		for (var i = 1; i < numVal; i++) {
		    var x = dims[graph.X] + xScale * i;
		    graph._wrapper.line(gl, x, dims[graph.Y] + dims[graph.H] + offsets[0] * axis._ticks.size,
					x, dims[graph.Y] + dims[graph.H] + offsets[1] * axis._ticks.size);
		}
		for (var i = 0; i < numVal; i++) {
		    var x = dims[graph.X] + xScale * i;
		    graph._wrapper.text(gt, x, dims[graph.Y] + dims[graph.H] + 2 * axis._ticks.size,
					(axis._labels ? axis._labels[i] : '' + i), (axis.labelRotation ? { transform: "rotate("+axis.labelRotation+", "+x+", "+(dims[graph.Y] + dims[graph.H] + 2 * axis._ticks.size)+")"} : null));
		}
	    }
	}
    });
    
    /* Draw a standard pie chart. */
    function SVGPieChart() {
    }
    
    jQuery.extend(SVGPieChart.prototype, {
	
	_options: ['explode (number or number[]) - indexes of sections to explode out of the pie',
		   'explodeDist (number) - the distance to move an exploded section',
		   'pieGap (number) - the distance between pies for multiple values'],
	
	/* Retrieve the display title for this chart type.
	   @return  the title */
	title: function() {
	    return 'Pie chart';
	},
	
	/* Retrieve a description of this chart type.
	   @return  its description */
	description: function() {
	    return 'Compare relative sizes of values as contributions to the whole.';
	},
	
	/* Retrieve a list of the options that may be set for this chart type.
	   @return  options list */
	options: function() {
	    return this._options;
	},
	
	/* Actually draw the graph in this type's style.
	   @param  graph  (object) the SVGGraph object */
	drawGraph: function(graph) {
	    graph._drawChartBackground(true, true);
	    this._chart = graph._wrapper.group(graph._chartCont, {class_: 'chart'});
	    var dims = graph._getDims();
	    this._drawSeries(graph, dims);
	    graph._drawTitle();
	    graph._drawLegend();
	},
	
	/* Plot all the series. */
	_drawSeries: function(graph, dims) {
	    var totals = graph._getTotals();
	    var numSer = graph._series.length;
	    var numVal = (numSer ? (graph._series[0])._values.length : 0);
	    var path = graph._wrapper.createPath();
	    var explode = []; //graph._chartOptions.explode || [];
	    explode = (isArray(explode) ? explode : [explode]);
	    var explodeDist = graph._chartOptions.explodeDist || 10;
	    var pieGap = (numVal <= 1 ? 0 : graph._chartOptions.pieGap || 10);
	    var xBase = (dims[graph.W] - (numVal * pieGap) - pieGap) / numVal / 2;
	    var yBase = dims[graph.H] / 2;
	    var radius = Math.min(xBase, yBase) - (explode.length > 0 ? explodeDist : 0);
	    var gt = graph._wrapper.group(graph._chartCont, jQuery.extend(
		{class_: 'xAxisLabels', textAnchor: 'middle'}, graph.xAxis._labelFormat));
	    var gl = [];
	    for (var i = 0; i < numVal; i++) {
		var cx = dims[graph.X] + xBase + (i * (2 * Math.min(xBase, yBase) + pieGap)) + pieGap;
		var cy = dims[graph.Y] + yBase;
		var curTotal = 0;
		for (var j = 0; j < numSer; j++) {
		    var series = graph._series[j];
		    if (i === 0) {
			gl[j] = graph._wrapper.group(this._chart, jQuery.extend({class_: 'series' + j,
										 fill: series._fill, stroke: series._stroke,
										 strokeWidth: series._strokeWidth}, series._settings || {}));
		    }
		    if (series._values[i] === 0) {
			continue;
		    }
		    var start = (curTotal / totals[i]) * 2 * Math.PI;
		    curTotal += series._values[i];
		    var end = (curTotal / totals[i]) * 2 * Math.PI;
		    var exploding = false;
		    for (var k = 0; k < explode.length; k++) {
			if (explode[k] == j) {
			    exploding = true;
			    break;
			}
		    }
		    var x = cx + (exploding ? explodeDist * Math.cos((start + end) / 2) : 0);
		    var y = cy + (exploding ? explodeDist * Math.sin((start + end) / 2) : 0);
		    var p = graph._wrapper.path(gl[j], path.reset().move(x, y).
						line(x + radius * Math.cos(start), y + radius * Math.sin(start)).
						arc(radius, radius, 0, (end - start < Math.PI ? 0 : 1), 1,
						    x + radius * Math.cos(end), y + radius * Math.sin(end)).close());
		    graph._showStatus(p, series._name,
				      roundNumber((end - start) / 2 / Math.PI * 100, 2));
		}
		if (graph.xAxis && graph.xAxis._labels[i]) {
		    graph._wrapper.text(gt, cx, dims[graph.Y] + dims[graph.H] + graph.xAxis._titleOffset,
					graph.xAxis._labels[i]);
		}
	    }
	}
    });
    
    // Basic chart types
    jQuery.svg.graphing.addChartType('column', new SVGColumnChart());
    jQuery.svg.graphing.addChartType('stackedColumn', new SVGStackedColumnChart());
    jQuery.svg.graphing.addChartType('row', new SVGRowChart());
    jQuery.svg.graphing.addChartType('stackedRow', new SVGStackedRowChart());
    jQuery.svg.graphing.addChartType('line', new SVGLineChart());
    jQuery.svg.graphing.addChartType('pie', new SVGPieChart());
    jQuery.svg.graphing.addChartType('stackedArea', new SVGStackedAreaChart());
    jQuery.svg.graphing.addChartType('deviation', new SVGDeviationChart());
    
    //============
    /* Plotting */
    //============
    
    jQuery.svg.addExtension('plot', SVGPlot);
    
    /* Extension point for SVG plotting.
       Access through svg.plot. */
    function SVGPlot(wrapper) {
	this._wrapper = wrapper; // The attached SVG wrapper object
	this._drawNow = false; // True for immediate update, false to wait for redraw call
	// The plot title and settings
	this._title = {value: '', offset: 25, settings: {textAnchor: 'middle'}};
	this._area = [0.1, 0.1, 0.8, 0.9]; // The chart area: left, top, right, bottom,
	// > 1 in pixels, <= 1 as proportion
	this._areaFormat = {fill: 'none', stroke: 'black'}; // The formatting for the plot area
	this._gridlines = []; // The formatting of the x- and y-gridlines
	this._equalXY = false; // True for equal-sized x- and y-units, false to fill available space
	this._functions = []; // The functions to be plotted, each is an object
	this.plotPoints = []; // The points to be plotted
	this._onstatus = null; // The callback function for status updates
	this._uuid = new Date().getTime();
	this._plotCont = this._wrapper.svg(0, 0, 0, 0, {class_: 'svg-plot'}); // The main container for the plot
	
	this.xAxis = new SVGPlotAxis(this); // The main x-axis
	this.xAxis.title('', 40);
	this.yAxis = new SVGPlotAxis(this); // The main y-axis
	this.yAxis.title('', 40);
	this.legend = new SVGPlotLegend(this); // The plot legend
	this._drawNow = true;
    }
    
    jQuery.extend(SVGPlot.prototype, {
	
	/* Useful indexes. */
	X: 0,
	Y: 1,
	W: 2,
	H: 3,
	L: 0,
	T: 1,
	R: 2,
	B: 3,
	
	/* Set or retrieve the container for the plot.
	   @param  cont  (SVG element) the container for the plot
	   @return  (SVGPlot) this plot object or
	   (SVG element) the current container (if no parameters) */
	container: function(cont) {
	    if (arguments.length === 0) {
		return this._plotCont;
	    }
	    this._plotCont = cont;
	    return this;
	},
	
	/* Set or retrieve the main plotting area.
	   @param  left    (number) > 1 is pixels, <= 1 is proportion of width or
	   (number[4]) for left, top, right, bottom
	   @param  top     (number) > 1 is pixels, <= 1 is proportion of height
	   @param  right   (number) > 1 is pixels, <= 1 is proportion of width
	   @param  bottom  (number) > 1 is pixels, <= 1 is proportion of height
	   @return  (SVGPlot) this plot object or
	   (number[4]) the plotting area: left, top, right, bottom (if no parameters) */
	area: function(left, top, right, bottom) {
	    if (arguments.length === 0) {
		return this._area;
	    }
	    this._area = (isArray(left) ? left : [left, top, right, bottom]);
	    this._drawPlot();
	    return this;
	},
	
	/* Set or retrieve the background of the plot area.
	   @param  fill      (string) how to fill the area background
	   @param  stroke    (string) the colour of the outline (optional)
	   @param  settings  (object) additional formatting for the area background (optional)
	   @return  (SVGPlot) this plot object or
	   (object) the area format (if no parameters) */
	format: function(fill, stroke, settings) {
	    if (arguments.length === 0) {
		return this._areaFormat;
	    }
	    if (typeof stroke == 'object') {
		settings = stroke;
		stroke = null;
	    }
	    this._areaFormat = jQuery.extend({fill: fill},
					     (stroke ? {stroke: stroke} : {}), settings || {});
	    this._drawPlot();
	    return this;
	},
	
	/* Set or retrieve the gridlines formatting for the plot area.
	   @param  xSettings  (string) the colour of the gridlines along the x-axis, or
	   (object) formatting for the gridlines along the x-axis, or
	   null for none
	   @param  ySettings  (string) the colour of the gridlines along the y-axis, or
	   (object) formatting for the gridlines along the y-axis, or
	   null for none
	   @return  (SVGPlot) this plot object or
	   (object[2]) the gridlines formatting (if no parameters) */
	gridlines: function(xSettings, ySettings) {
	    if (arguments.length === 0) {
		return this._gridlines;
	    }
	    this._gridlines = [(typeof xSettings == 'string' ? {stroke: xSettings} : xSettings),
			       (typeof ySettings == 'string' ? {stroke: ySettings} : ySettings)];
	    if (this._gridlines[0] === null && this._gridlines[1] === null) {
		this._gridlines = [];
	    }
	    this._drawPlot();
	    return this;
	},
	
	/* Set or retrieve the equality of the x- and y-axes.
	   @param  value  (boolean) true for equal x- and y-units, false to fill the available space
	   @return  (SVGPlot) this plot object or
	   (boolean) the current setting (if no parameters) */
	equalXY: function(value) {
	    if (arguments.length === 0) {
		return this._equalXY;
	    }
	    this._equalXY = value;
	    return this;
	},
	
	/* Set or retrieve the title of the plot and its formatting.
	   @param  value     (string) the title
	   @param  offset    (number) the vertical positioning of the title
           > 1 is pixels, <= 1 is proportion of width (optional)
	   @param  colour    (string) the colour of the title (optional)
	   @param  settings  (object) formatting for the title (optional)
	   @return  (SVGPlot) this plot object or
	   (object) value, offset, and settings for the title (if no parameters) */
	title: function(value, offset, colour, settings) {
	    if (arguments.length === 0) {
		return this._title;
	    }
	    if (typeof offset != 'number') {
		settings = colour;
		colour = offset;
		offset = null;
	    }
	    if (typeof colour != 'string') {
		settings = colour;
		colour = null;
	    }
	    this._title = {value: value, offset: offset || this._title.offset,
			   settings: jQuery.extend({textAnchor: 'middle', fontSize: '15px' },
						   (colour ? {fill: colour} : {}), settings || {})};
	    this._drawPlot();
	    return this;
	},
	
	/* Add a function to be plotted on the plot.
	   @param  name         (string) the name of this series (optional)
	   @param  fn           (function) the function to be plotted
	   @param  range        (number[2]) the range of values to plot (optional)
	   @param  points       (number) the number of points to plot within this range (optional)
	   @param  stroke       (string) the colour of the plotted lines (optional)
	   @param  strokeWidth  (number) the width of the plotted lines (optional)
	   @param  settings     (object) additional settings for the plotted values (optional)
	   @return  (SVGPlot) this plot object */
	addFunction: function(name, fn, range, points, stroke, strokeWidth, settings) {
	    this._functions.push(new SVGPlotFunction(
		this, name, fn, range, points, stroke, strokeWidth, settings));
	    this._drawPlot();
	    return this;
	},
	
	/* Retrieve the function wrappers.
	   @param  i  (number) the function index (optional)
	   @return  (SVGPlotFunction) the specified function or
	   (SVGPlotFunction[]) the list of functions */
	functions: function(i) {
	    return (arguments.length > 0 ? this._functions[i] : null) || this._functions;
	},
	
	/* Suppress drawing of the plot until redraw() is called.
	   @return  (SVGPlot) this plot object */
	noDraw: function() {
	    this._drawNow = false;
	    return this;
	},
	
	/* Redraw the entire plot with the current settings and values.
	   @return  (SVGPlot) this plot object */
	redraw: function() {
	    this._drawNow = true;
	    this._drawPlot();
	    return this;
	},
	
	/* Set the callback function for status updates.
	   @param  onstatus  (function) the callback function
	   @return  (SVGPlot) this plot object */
	status: function(onstatus) {
	    this._onstatus = onstatus;
	    return this;
	},
	
	/* Actually draw the plot (if allowed). */
	_drawPlot: function() {
	    if (!this._drawNow) {
		return;
	    }
	    while (this._plotCont.firstChild) {
		this._plotCont.removeChild(this._plotCont.firstChild);
	    }
	    if (!this._plotCont.parent) {
		this._wrapper._svg.appendChild(this._plotCont);
	    }
	    // Set sizes if not already there
	    if (!this._plotCont.width) {
		this._plotCont.setAttribute('width',
					    parseInt(this._plotCont.getAttribute('width'), 10) || this._wrapper._width());
	    }
	    else if (this._plotCont.width.baseVal) {
		this._plotCont.width.baseVal.value =
		    this._plotCont.width.baseVal.value || this._wrapper._width();
	    }
	    else {
		this._plotCont.width = this._plotCont.width || this._wrapper._width();
	    }
	    if (!this._plotCont.height) {
		this._plotCont.setAttribute('height',
					    parseInt(this._plotCont.getAttribute('height'), 10) || this._wrapper._height());
	    }
	    else if (this._plotCont.height.baseVal) {
		this._plotCont.height.baseVal.value =
		    this._plotCont.height.baseVal.value || this._wrapper._height();
	    }
	    else {
		this._plotCont.height = this._plotCont.height || this._wrapper._height();
	    }
	    this._drawChartBackground();
	    var dims = this._getDims();
	    var clip = this._wrapper.other(this._plotCont, 'clipPath', {id: 'clip' + this._uuid});
	    this._wrapper.rect(clip, dims[this.X], dims[this.Y], dims[this.W], dims[this.H]);
	    this._plot = this._wrapper.group(this._plotCont,
					     {class_: 'foreground', clipPath: 'url(#clip' + this._uuid + ')'});
	    this._drawAxis(true);
	    this._drawAxis(false);
	    for (var i = 0; i < this._functions.length; i++) {
		this._plotFunction(this._functions[i], i);
	    }
	    if (this.plotPoints.length) {
		for (var i = 0; i < this.plotPoints.length; i++) {
		    if (this.connected) {
			this._plotConnectedPoints(this.plotPoints[i], i);
		    } else {
			this._plotPoints(this.plotPoints[i], i);
		    }
		}
	    }
	    this._drawTitle();
	    this._drawLegend();
	},
	
	/* Decode an attribute value.
	   @param  node  the node to examine
	   @param  name  the attribute name
	   @return  the actual value */
	_getValue: function(node, name) {
	    return (!node[name] ? parseInt(node.getAttribute(name), 10) :
		    (node[name].baseVal ? node[name].baseVal.value : node[name]));
	},
	
	/* Calculate the actual dimensions of the plot area.
	   @param  area  (number[4]) the area values to evaluate (optional)
	   @return  (number[4]) an array of dimension values: left, top, width, height */
	_getDims: function(area) {
	    var otherArea = (area !== null);
	    area = area || this._area;
	    var availWidth = this._getValue(this._plotCont, 'width');
	    var availHeight = this._getValue(this._plotCont, 'height');
	    var left = (area[this.L] > 1 ? area[this.L] : availWidth * area[this.L]);
	    var top = (area[this.T] > 1 ? area[this.T] : availHeight * area[this.T]);
	    var width = (area[this.R] > 1 ? area[this.R] : availWidth * area[this.R]) - left;
	    var height = (area[this.B] > 1 ? area[this.B] : availHeight * area[this.B]) - top;
	    if (this._equalXY && !otherArea) {
		var scale = Math.min(width / (this.xAxis._scale.max - this.xAxis._scale.min),
				     height / (this.yAxis._scale.max - this.yAxis._scale.min));
		width = scale * (this.xAxis._scale.max - this.xAxis._scale.min);
		height = scale * (this.yAxis._scale.max - this.yAxis._scale.min);
	    }
	    return [left, top, width, height];
	},
	
	/* Calculate the scaling factors for the plot area.
	   @return  (number[2]) the x- and y-scaling factors */
	_getScales: function() {
	    var dims = this._getDims();
	    return [dims[this.W] / (this.xAxis._scale.max - this.xAxis._scale.min),
		    dims[this.H] /  (this.yAxis._scale.max - this.yAxis._scale.min)];
	},
	
	/* Draw the chart background, including gridlines.
	   @param  noXGrid  (boolean) true to suppress the x-gridlines, false to draw them (optional)
	   @param  noYGrid  (boolean) true to suppress the y-gridlines, false to draw them (optional)
	   @return  (element) the background group element */
	_drawChartBackground: function(noXGrid, noYGrid) {
	    var bg = this._wrapper.group(this._plotCont, {class_: 'background'});
	    var dims = this._getDims();
	    this._wrapper.rect(bg, dims[this.X], dims[this.Y], dims[this.W], dims[this.H], this._areaFormat);
	    if (this._gridlines[0] && this.yAxis._ticks.major && !noYGrid) {
		this._drawGridlines(bg, true, this._gridlines[0], dims);
	    }
	    if (this._gridlines[1] && this.xAxis._ticks.major && !noXGrid) {
		this._drawGridlines(bg, false, this._gridlines[1], dims);
	    }
	    return bg;
	},
	
	/* Draw one set of gridlines.
	   @param  bg      (element) the background group element
	   @param  horiz   (boolean) true if horizontal, false if vertical
	   @param  format  (object) additional settings for the gridlines */
	_drawGridlines: function(bg, horiz, format, dims) {
	    var g = this._wrapper.group(bg, format);
	    var axis = (horiz ? this.yAxis : this.xAxis);
	    var scales = this._getScales();
	    var major = Math.floor(axis._scale.min / axis._ticks.major) * axis._ticks.major;
	    major += (major <= axis._scale.min ? axis._ticks.major : 0);
	    while (major < axis._scale.max) {
		var v = (horiz ? axis._scale.max - major : major - axis._scale.min) *
		    scales[horiz ? 1 : 0] + (horiz ? dims[this.Y] : dims[this.X]);
		this._wrapper.line(g, (horiz ? dims[this.X] : v), (horiz ? v : dims[this.Y]),
				   (horiz ? dims[this.X] + dims[this.W] : v), (horiz ? v : dims[this.Y] + dims[this.H]));
		major += axis._ticks.major;
	    }
	},
	
	/* Draw an axis, its tick marks, and title.
	   @param  horiz  (boolean) true for x-axis, false for y-axis */
	_drawAxis: function(horiz) {
	    var id = (horiz ? 'x' : 'y') + 'Axis';
	    var axis = (horiz ? this.xAxis : this.yAxis);
	    var axis2 = (horiz ? this.yAxis : this.xAxis);
	    var dims = this._getDims();
	    var scales = this._getScales();
	    var gl = this._wrapper.group(this._plot, jQuery.extend({class_: id}, axis._lineFormat));
	    var gt = this._wrapper.group(this._plot, jQuery.extend({class_: id + 'Labels',
								    textAnchor: (horiz ? 'middle' : 'end')}, axis._labelFormat));
	    var zero = (horiz ? axis2._scale.max : -axis2._scale.min) *
		scales[horiz ? 1 : 0] + (horiz ? dims[this.Y] : dims[this.X]);
	    this._wrapper.line(gl, (horiz ? dims[this.X] : zero), (horiz ? zero : dims[this.Y]),
			       (horiz ? dims[this.X] + dims[this.W] : zero),
			       (horiz ? zero : dims[this.Y] + dims[this.H]), { strokeWidth: 1.5 });
	    if (axis._ticks.major) {
		var size = axis._ticks.size;
		var major = Math.floor(axis._scale.min / axis._ticks.major) * axis._ticks.major;
		major = (major < axis._scale.min ? major + axis._ticks.major : major);
		var minor = (!axis._ticks.minor ? axis._scale.max + 1 :
			     Math.floor(axis._scale.min / axis._ticks.minor) * axis._ticks.minor);
		minor = (minor < axis._scale.min ? minor + axis._ticks.minor : minor);
		var offsets = [(axis._ticks.position == 'nw' || axis._ticks.position == 'both' ? -1 : 0),
			       (axis._ticks.position == 'se' || axis._ticks.position == 'both' ? +1 : 0)];
		while (major <= axis._scale.max || minor <= axis._scale.max) {
		    var cur = Math.min(major, minor);
		    var len = (cur == major ? size : size / 2);
		    var xy = (horiz ? cur - axis._scale.min : axis._scale.max - cur) *
			scales[horiz ? 0 : 1] + (horiz ? dims[this.X] : dims[this.Y]);
		    this._wrapper.line(this._plotCont, 
				       (horiz ? xy : zero + len * offsets[0]),
				       (horiz ? zero + len * offsets[0] : xy),
				       (horiz ? xy : zero + len * offsets[1]),
				       (horiz ? zero + len * offsets[1] : xy));
		    if (cur == major && cur !== 0) {
			
			// always plot the axis text at the very left / bottom of the plot
			var zeroo = (horiz ? dims[this.Y] + dims[this.H] : dims[this.X]);
			var logtext = this._wrapper.createText().string('10').span(cur, {dy: -10, fontSize: 10});
			this._wrapper.text(this._plotCont, (horiz ? xy : zeroo - size),
					   (horiz ? zeroo + size + 12 : xy + (size / 2)),
					   (axis._scale.type == 'log') ? logtext : ''+cur,
					   { textAnchor: (horiz ? 'middle' : 'end')});
		    }
		    major += (cur == major ? axis._ticks.major : 0);
		    minor += (cur == minor ? axis._ticks.minor : 0);
		    
		    // fix floating point error
		    var maj_str = major.toString();
		    var tick_str = axis._ticks.major.toString();
		    
		    // round to a maximum of 3 significant digits
		    if (tick_str.substr(tick_str.indexOf('.')+1).length > 3) {
			tick_str = tick_str.substr(0, tick_str.indexOf('.')+4);
		    }
		    
		    // fail if the max is smaller than the smallest number displayable with
		    // three significant digits
		    if (parseFloat(tick_str) < 0.001) {
			return;
		    }
		    if (maj_str.substr(maj_str.indexOf('.')+1).length > tick_str.substr(tick_str.indexOf('.')+1).length) {
			major = parseFloat(major.toFixed(tick_str.substr(tick_str.indexOf('.')+1).length));
		    }
		}
	    }
	    if (axis._title) {
		if (horiz) {
		    this._wrapper.text(this._plotCont, dims[this.X] + dims[this.W] / 2,
				       dims[this.Y] + dims[this.H] + axis._titleOffset,
				       axis._title, axis._titleFormat);
		} else {
		    this._wrapper.text(this._plotCont,
				       0,
				       0,
				       axis._title,
				       jQuery.extend({textAnchor: 'middle', transform: 'translate(' + (dims[this.X] - axis._titleOffset) + ',' + (dims[this.Y] + dims[this.H] / 2) + ') rotate(-90)'}, axis._titleFormat || {}));
		    
		}
	    }
	},
	
	/* Plot an individual function. */
	_plotFunction: function(fn, cur) {
	    var dims = this._getDims();
	    var scales = this._getScales();
	    var path = this._wrapper.createPath();
	    var range = fn._range || [this.xAxis._scale.min, this.xAxis._scale.max];
	    var xScale = (range[1] - range[0]) / fn._points;
	    var first = true;
	    for (var i = 0; i <= fn._points; i++) {
		var x = range[0] + i * xScale;
		if (x > this.xAxis._scale.max + xScale) {
		    break;
		}
		if (x < this.xAxis._scale.min - xScale) {
		    continue;
		}
		var px = (x - this.xAxis._scale.min) * scales[0] + dims[this.X];
		var py = dims[this.H] - ((fn._fn(x) - this.yAxis._scale.min) * scales[1]) + dims[this.Y];
		path[(first ? 'move' : 'line') + 'To'](px, py);
		first = false;
	    }
	    var p = this._wrapper.path(this._plot, path,
				       jQuery.extend({class_: 'fn' + cur, fill: 'none', stroke: fn._stroke,
						      strokeWidth: fn._strokeWidth}, fn._settings || {}));
	    this._showStatus(p, fn._name);
	},
	
	/* Plot a list of points */
	_plotPoints: function(points, series) {
	    var scales = this._getScales();
	    var dims = this._getDims();
	    var zerox = dims[0] - (this.xAxis._scale.min * scales[0]);
	    var zeroy = dims[1] + dims[3] + (this.yAxis._scale.min * scales[1]);
	    var psettings = { size: this.series[series].pointSize || 6, shape: this.series[series].shape, 'filled': this.series[series].filled || false, color: this.series[series].color };
	    for (i=0;i<points.length;i++) {
		var p = points[i];
		jQuery.extend(p, psettings);
		pxscaled = ((this.xAxis._scale.type == 'log') ? log10(p.x) : p.x );
		pyscaled = ((this.yAxis._scale.type == 'log') ? log10(p.y) : p.y )
		p.imgX = pxscaled * scales[0] + zerox;
		p.imgY = zeroy - (pyscaled * scales[1]);
		var title = p.title ? p.title : "";
		switch (p.shape) {
		case 'circle':
		    p.svg = this._wrapper.circle(this._plot, pxscaled * scales[0] + zerox, zeroy - (pyscaled * scales[1]), p.size / 2, { fill: p.filled ? p.color : 'none', strokeWidth: 1, stroke: p.color, title: title });
		    break;
		case 'square':
		    p.svg = this._wrapper.rect(this._plot, pxscaled * scales[0] + zerox - (p.size / 2), zeroy - (pyscaled * scales[1]) - (p.size / 2), p.size, p.size, { fill: p.filled ? p.color : 'none', strokeWidth: 1, stroke: p.color, title: title });
		    break;
		case 'triangle':
		    p.svg = this._wrapper.polygon(this._plot, [ [ pxscaled * scales[0] + zerox - (p.size / 2), zeroy - (pyscaled * scales[1]) - (p.size / 2) ],
								[ pxscaled * scales[0] + zerox + (p.size / 2), zeroy - (pyscaled * scales[1]) - (p.size / 2) ],
								[ pxscaled * scales[0] + zerox, zeroy - (pyscaled * scales[1]) + (p.size / 2) ] ], { fill: p.filled ? p.color : 'none', strokeWidth: 1, stroke: p.color, title: title });
		    break;
		}
	    }
	},
	
	/* Plot a list of points */
	_plotConnectedPoints: function(points, series) {
	    var scales = this._getScales();
	    var dims = this._getDims();
	    var zerox = dims[0] - (this.xAxis._scale.min * scales[0]);
	    var zeroy = dims[1] + dims[3] + (this.yAxis._scale.min * scales[1]);
	    var psettings = { size: 8, shape: this.series[series].shape, line: this.series[series].color || 'blue', fill: this.series[series].fillColor || 'black' };
	    for (i=0;i<points.length;i++) {
		var p = points[i];
		jQuery.extend(p, psettings);
		p.imgX = ((this.xAxis._scale.type == 'log') ? log10(p.x) : p.x ) * scales[0] + zerox;
		p.imgY = zeroy - (((this.yAxis._scale.type == 'log') ? log10(p.y) : p.y ) * scales[1]);
		if (i>0) {
		    this._wrapper.line(this._plot, ((this.xAxis._scale.type == 'log') ? log10(points[i-1].x) : points[i-1].x ) * scales[0] + zerox, zeroy - (((this.yAxis._scale.type == 'log') ? log10(points[i-1].y) : points[i-1].y ) * scales[1]), ((this.xAxis._scale.type == 'log') ? log10(p.x) : p.x ) * scales[0] + zerox, zeroy - (((this.yAxis._scale.type == 'log') ? log10(p.y) : p.y ) * scales[1]), { strokeWidth: 2, stroke: this.series[series].color || 'blue' });
		}
		if (this.showDots) {
		    var title = p.title ? p.title : "";
		    p.svg = this._wrapper.circle(this._plot, ((this.xAxis._scale.type == 'log') ? log10(p.x) : p.x ) * scales[0] + zerox, zeroy - (((this.yAxis._scale.type == 'log') ? log10(p.y) : p.y ) * scales[1]), p.size / 2, { fill: p.fill, strokeWidth: 2, stroke: p.line, onmouseover: "this.setAttribute('r', parseInt(this.getAttribute('r')) + 1)", onmouseout: "this.setAttribute('r', parseInt(this.getAttribute('r')) - 1)", title: title });
		}
	    }
	},
	
	pointsInBounds: function(x1, y1, x2, y2) {
	    var points = this.plotPoints;
	    var retval = [];
	    for (i=0;i<points.length;i++) {
		for (h=0;h<points[i].length;h++) {
		    if (points[i][h].imgX >= x1 && points[i][h].imgX <= x2 && points[i][h].imgY >= y1 && points[i][h].imgY <= y2) {
			points[i][h]['series'] = i;
			retval.push(points[i][h]);
		    }
		}
	    }
	    return retval;
	},
	
	/* Draw the plot title - centred. */
	_drawTitle: function() {
	    this._wrapper.text(this._plotCont, this._getValue(this._plotCont, 'width') / 2,
			       this._title.offset, this._title.value, this._title.settings);
	},
	
	/* Draw the chart legend. */
	_drawLegend: function() {
	    if (!this.legend._show) {
		return;
	    }
	    var g = this._wrapper.group(this._plotCont, {class_: 'legend'});
	    var dims = this._getDims(this.legend._area);
	    var horiz = false;// dims[this.W] > dims[this.H];
	    var numFn = this._functions.length || this.series.length;
	    var offset = (horiz ? dims[this.W] : dims[this.H]) / numFn;
	    var xBase = dims[this.X] + 5;
	    var yBase = dims[this.Y] + ((horiz ? dims[this.H] : offset) + this.legend._sampleSize) / 2;
	    for (var i = 0; i < numFn; i++) {
		var fn = this._functions.lenth ? this._functions[i] : this.series[i];
		this._wrapper.rect(g, xBase + (horiz ? i * offset : 0),
				   yBase + (horiz ? 0 : i * offset) - this.legend._sampleSize,
				   this.legend._sampleSize, this.legend._sampleSize, {fill: fn._stroke ? fn._stroke : fn.color });
		this._wrapper.text(g, xBase + (horiz ? i * offset : 0) + this.legend._sampleSize + 5,
				   yBase + (horiz ? 0 : i * offset), fn._name ? fn._name : fn.name, this.legend._textSettings);
	    }
	},
	
	/* Show the current value status on hover. */
	_showStatus: function(elem, label) {
	    var status = this._onstatus;
	    if (this._onstatus) {
		jQuery(elem).hover(function(evt) { status.apply(this, [label]); },
				   function() { status.apply(this, ['']); });
	    }
	}
    });
    
    /* Details about each plot function.
       @param  plot         (SVGPlot) the owning plot
       @param  name         (string) the name of this function (optional)
       @param  fn           (function) the function to be plotted
       @param  range        (number[2]) the range of values to be plotted (optional)
       @param  points       (number) the number of points to plot within this range (optional)
       @param  stroke       (string) the colour of the (out)line for the plot (optional)
       @param  strokeWidth  (number) the width of the (out)line for the plot (optional)
       @param  settings     (object) additional formatting settings (optional)
       @return  (SVGPlotFunction) the new plot function object */
    function SVGPlotFunction(plot, name, fn, range, points, stroke, strokeWidth, settings) {
	if (typeof name != 'string') {
	    settings = strokeWidth;
	    strokeWidth = stroke;
	    stroke = points;
	    points = range;
	    range = fn;
	    fn = name;
	    name = null;
	}
	if (!isArray(range)) {
	    settings = strokeWidth;
	    strokeWidth = stroke;
	    stroke = points;
	    points = range;
	    range = null;
	}
	if (typeof points != 'number') {
	    settings = strokeWidth;
	    strokeWidth = stroke;
	    stroke = points;
	    points = null;
	}
	if (typeof stroke != 'string') {
	    settings = strokeWidth;
	    strokeWidth = stroke;
	    stroke = null;
	}
	if (typeof strokeWidth != 'number') {
	    settings = strokeWidth;
	    strokeWidth = null;
	}
	this._plot = plot; // The owning plot
	this._name = name || ''; // Display name
	this._fn = fn || identity; // The actual function: y = fn(x)
	this._range = range; // The range of values plotted
	this._points = points || 100; // The number of points plotted
	this._stroke = stroke || 'black'; // The line colour
	this._strokeWidth = strokeWidth || 1; // The line width
	this._settings = settings || {}; // Any other settings
    }
    
    jQuery.extend(SVGPlotFunction.prototype, {
	
	/* Set or retrieve the name for this function.
	   @param  name    (string) the function's name
	   @return  (SVGPlotFunction) this plot function object or
	   (string) the function name (if no parameters) */
	name: function(name) {
	    if (arguments.length === 0) {
		return this._name;
	    }
	    this._name = name;
	    this._plot._drawPlot();
	    return this;
	},
	
	/* Set or retrieve the function to be plotted.
	   @param  name  (string) the function's name (optional)
	   @param  fn    (function) the function to be ploted
	   @return  (SVGPlotFunction) this plot function object or
	   (function) the actual function (if no parameters) */
	fn: function(name, fn) {
	    if (arguments.length === 0) {
		return this._fn;
	    }
	    if (typeof name == 'function') {
		fn = name;
		name = null;
	    }
	    this._name = name || this._name;
	    this._fn = fn;
	    this._plot._drawPlot();
	    return this;
	},
	
	/* Set or retrieve the range of values to be plotted.
	   @param  min  (number) the minimum value to be plotted
	   @param  max  (number) the maximum value to be plotted
	   @return  (SVGPlotFunction) this plot function object or
	   (number[2]) the value range (if no parameters) */
	range: function(min, max) {
	    if (arguments.length === 0) {
		return this._range;
	    }
	    this._range = (min === null ? null : [min, max]);
	    this._plot._drawPlot();
	    return this;
	},
	
	/* Set or retrieve the number of points to be plotted.
	   @param  value  (number) the number of points to plot
	   @return  (SVGPlotFunction) this plot function object or
	   (number) the number of points (if no parameters) */
	points: function(value) {
	    if (arguments.length === 0) {
		return this._points;
	    }
	    this._points = value;
	    this._plot._drawPlot();
	    return this;
	},
	
	/* Set or retrieve the formatting for this function.
	   @param  stroke       (string) the (out)line colour
	   @param  strokeWidth  (number) the line's width (optional)
	   @param  settings     (object) additional formatting settings for the function (optional)
	   @return  (SVGPlotFunction) this plot function object or
	   (object) formatting settings (if no parameters) */
	format: function(stroke, strokeWidth, settings) {
	    if (arguments.length === 0) {
		return jQuery.extend({stroke: this._stroke,
				      strokeWidth: this._strokeWidth}, this._settings);
	    }
	    if (typeof strokeWidth != 'number') {
		settings = strokeWidth;
		strokeWidth = null;
	    }
	    this._stroke = stroke || this._stroke;
	    this._strokeWidth = strokeWidth || this._strokeWidth;
	    jQuery.extend(this._settings, settings || {});
	    this._plot._drawPlot();
	    return this;
	},
	
	/* Return to the parent plot. */
	end: function() {
	    return this._plot;
	}
    });
    
    /* Default function to plot.
       @param  x  (number) the input value
       @return  (number) the same value */
    function identity(x) {
	return x;
    }
    
    /* Details about each plot axis.
       @param  plot   (SVGPlot) the owning plot
       @param  title  (string) the title of the axis
       @param  min    (number) the minimum value displayed on this axis
       @param  max    (number) the maximum value displayed on this axis
       @param  major  (number) the distance between major ticks
       @param  minor  (number) the distance between minor ticks (optional)
       @return  (SVGPlotAxis) the new axis object */
    function SVGPlotAxis(plot, title, min, max, major, minor) {
	this._plot = plot; // The owning plot
	this._title = title || ''; // The plot's title
	this._titleFormat = { textAnchor: 'middle' }; // Formatting settings for the title
	this._titleOffset = 0; // The offset for positioning the title
	this._labelFormat = { }; // Formatting settings for the labels
	this._lineFormat = {stroke: 'black', strokeWidth: 1}; // Formatting settings for the axis lines
	this._ticks = {major: major || 10, minor: minor || 0, size: 10, position: 'both'}; // Tick mark options
	this._scale = {min: min || 0, max: max || 100}; // Axis scale settings
	this._crossAt = 0; // Where this axis crosses the other one. */
    }
    
    jQuery.extend(SVGPlotAxis.prototype, {
	
	/* Set or retrieve the scale for this axis.
	   @param  min  (number) the minimum value shown
	   @param  max  (number) the maximum value shown
	   @return  (SVGPlotAxis) this axis object or
	   (object) min and max values (if no parameters) */
	scale: function(min, max, type) {
	    if (arguments.length === 0) {
		return this._scale;
	    }
	    this._scale.min = (type == 'log' && min !== 0) ? log10(min) : min;
	    this._scale.max = (type == 'log' && max !== 0) ? log10(max) : max;
	    this._scale.type = type;
	    this._plot._drawPlot();
	    return this;
	},
	
	/* Set or retrieve the ticks for this axis.
	   @param  major     (number) the distance between major ticks
	   @param  minor     (number) the distance between minor ticks
	   @param  size      (number) the length of the major ticks (minor are half) (optional)
	   @param  position  (string) the location of the ticks:
	   'nw', 'se', 'both' (optional)
	   @return  (SVGPlotAxis) this axis object or
	   (object) major, minor, size, and position values (if no parameters) */
	ticks: function(major, minor, size, position, type) {
	    if (arguments.length === 0) {
		return this._ticks;
	    }
	    if (typeof size == 'string') {
		position = size;
		size = null;
	    }
	    this._ticks.major = (type == 'log' && major !== 0) ? 1 : major;
	    this._ticks.minor = (type == 'log' && minor !== 0) ? 1 : minor;
	    this._ticks.size = size || this._ticks.size;
	    this._ticks.position = position || this._ticks.position;
	    this._plot._drawPlot();
	    return this;
	},
	
	/* Set or retrieve the title for this axis.
	   @param  title   (string) the title text
	   @param  offset  (number) the distance to offset the title position (optional)
	   @param  colour  (string) how to colour the title (optional) 
	   @param  format  (object) formatting settings for the title (optional)
	   @return  (SVGPlotAxis) this axis object or
	   (object) title, offset, and format values (if no parameters) */
	title: function(title, offset, colour, format) {
	    if (arguments.length === 0) {
		return {title: this._title, offset: this._titleOffset, format: this._titleFormat};
	    }
	    if (typeof offset != 'number') {
		format = colour;
		colour = offset;
		offset = null;
	    }
	    if (typeof colour != 'string') {
		format = colour;
		colour = null;
	    }
	    this._title = title;
	    this._titleOffset = (offset !== null ? offset : this._titleOffset);
	    if (colour || format) {
		this._titleFormat = jQuery.extend(format || {}, (colour ? {fill: colour} : {}));
	    }
	    this._plot._drawPlot();
	    return this;
	},
	
	/* Set or retrieve the label format for this axis.
	   @param  colour  (string) how to colour the labels (optional) 
	   @param  format  (object) formatting settings for the labels (optional)
	   @return  (SVGPlotAxis) this axis object or
	   (object) format values (if no parameters) */
	format: function(colour, format) {
	    if (arguments.length === 0) {
		return this._labelFormat;
	    }
	    if (typeof colour != 'string') {
		format = colour;
		colour = null;
	    }
	    this._labelFormat = jQuery.extend(format || {}, (colour ? {fill: colour} : {}));
	    this._plot._drawPlot();
	    return this;
	},
	
	/* Set or retrieve the line formatting for this axis.
	   @param  colour    (string) the line's colour
	   @param  width     (number) the line's width (optional)
	   @param  settings  (object) additional formatting settings for the line (optional)
	   @return  (SVGPlotAxis) this axis object or
	   (object) line formatting values (if no parameters) */
	line: function(colour, width, settings) {
	    if (arguments.length === 0) {
		return this._lineFormat;
	    }
	    if (typeof width != 'number') {
		settings = width;
		width = null;
	    }
	    jQuery.extend(this._lineFormat, {stroke: colour, strokeWidth:
					     width || this._lineFormat.strokeWidth}, settings || {});
	    this._plot._drawPlot();
	    return this;
	},
	
	/* Return to the parent plot. */
	end: function() {
	    return this._plot;
	}
    });
    
    /* Details about the plot legend.
       @param  plot          (SVGPlot) the owning plot
       @param  bgSettings    (object) additional formatting settings for the legend background (optional)
       @param  textSettings  (object) additional formatting settings for the legend text (optional)
       @return  (SVGPlotLegend) the new legend object */
    function SVGPlotLegend(plot, bgSettings, textSettings) {
	this._plot = plot; // The owning plot
	this._show = true; // Show the legend?
	this._area = [0.9, 0.1, 1.0, 0.9]; // The legend area: left, top, right, bottom,
	// > 1 in pixels, <= 1 as proportion
	this._sampleSize = 15; // Size of sample box
	this._bgSettings = bgSettings || {stroke: 'gray'}; // Additional formatting settings for the legend background
	this._textSettings = textSettings || {}; // Additional formatting settings for the text
    }
    
    jQuery.extend(SVGPlotLegend.prototype, {
	
	/* Set or retrieve whether the legend should be shown.
	   @param  show  (boolean) true to display it, false to hide it
	   @return  (SVGPlotLegend) this legend object or
	   (boolean) show the legend? (if no parameters) */
	show: function(show) {
	    if (arguments.length === 0) {
		return this._show;
	    }
	    this._show = show;
	    this._plot._drawPlot();
	    return this;
	},
	
	/* Set or retrieve the legend area.
	   @param  left    (number) > 1 is pixels, <= 1 is proportion of width or
	   (number[4]) for left, top, right, bottom
	   @param  top     (number) > 1 is pixels, <= 1 is proportion of height
	   @param  right   (number) > 1 is pixels, <= 1 is proportion of width
	   @param  bottom  (number) > 1 is pixels, <= 1 is proportion of height
	   @return  (SVGPlotLegend) this legend object or
	   (number[4]) the legend area: left, top, right, bottom (if no parameters) */
	area: function(left, top, right, bottom) {
	    if (arguments.length === 0) {
		return this._area;
	    }
	    this._area = (isArray(left) ? left : [left, top, right, bottom]);
	    this._plot._drawPlot();
	    return this;
	},
	
	/* Set or retrieve additional settings for the legend area.
	   @param  sampleSize    (number) the size of the sample box to display (optional)
	   @param  bgSettings    (object) additional formatting settings for the legend background
	   @param  textSettings  (object) additional formatting settings for the legend text (optional)
	   @return  (SVGPlotLegend) this legend object or
	   (object) bgSettings and textSettings for the legend (if no parameters) */
	settings: function(sampleSize, bgSettings, textSettings) {
	    if (arguments.length === 0) {
		return {sampleSize: this._sampleSize, bgSettings: this._bgSettings,
			textSettings: this._textSettings};
	    }
	    if (typeof sampleSize == 'object') {
		textSettings = bgSettings;
		bgSettings = sampleSize;
		sampleSize = null;
	    }
	    this._sampleSize = sampleSize || this._sampleSize;
	    this._bgSettings = bgSettings;
	    this._textSettings = textSettings || this._textSettings;
	    this._plot._drawPlot();
	    return this;
	},
	
	/* Return to the parent plot. */
	end: function() {
	    return this._plot;
	}
    });

    // css
    jQuery("<style>")
	.prop("type", "text/css")
	.html("\
svg:svg {\
    display: none;\
}\
\
.svg_error {\
    color: red;\
    font-weight: bold;\
}\
\
.marquee {\
    fill-opacity: 0.2;\
    stroke: #000;\
    stroke-dasharray: 2,4;\
    vector-effect:non-scaling-stroke;\
}")
	.appendTo("head");
    
})(jQuery);

//===================
/* Drag-Select-Box */
//===================
(function createMarquee(global){
    var svgNS = 'http://www.w3.org/2000/svg',
    svg   = document.createElementNS(svgNS,'svg'),
    pt    = svg.createSVGPoint();
    
    global.trackMarquee = function(forElement,onRelease,onDrag){
	forElement.addEventListener('mousedown',function(evt){
	    var point0 = getLocalCoordinatesFromMouseEvent(forElement,evt);
	    var marquee = document.createElementNS(svgNS,'rect');
	    marquee.setAttribute('class','marquee');
	    updateMarquee(marquee,point0,point0);
	    forElement.appendChild(marquee);
	    document.documentElement.addEventListener('mousemove',trackMouseMove,false);
	    document.documentElement.addEventListener('mouseup',stopTrackingMove,false);
	    function trackMouseMove(evt){
		var point1 = getLocalCoordinatesFromMouseEvent(forElement,evt);
		updateMarquee(marquee,point0,point1);
		if (onDrag) callWithBBox(onDrag,marquee);
	    }
	    function stopTrackingMove(){
		document.documentElement.removeEventListener('mousemove',trackMouseMove,false);
		document.documentElement.removeEventListener('mouseup',stopTrackingMove,false);
		forElement.removeChild(marquee);
		if (onRelease) callWithBBox(onRelease,marquee,forElement);
	    }
	},false);
    };
    
    function callWithBBox(func,rect,elem){
	var x = rect.getAttribute('x')*1,
        y = rect.getAttribute('y')*1,
        w = rect.getAttribute('width')*1,
        h = rect.getAttribute('height')*1;
	func(jQuery("#"+elem.parentNode.id).svg('get').plot.pointsInBounds(x,y,x+w,y+h));
    }
    
    function updateMarquee(rect,p0,p1){
	var xs = [p0.x,p1.x].sort(sortByNumber),
        ys = [p0.y,p1.y].sort(sortByNumber);
	rect.setAttribute('x',xs[0]);
	rect.setAttribute('y',ys[0]);
	rect.setAttribute('width', xs[1]-xs[0]);
	rect.setAttribute('height',ys[1]-ys[0]);
    }
    
    function getLocalCoordinatesFromMouseEvent(el,evt){
	pt.x = evt.clientX; pt.y = evt.clientY;
	return pt.matrixTransform(el.getScreenCTM().inverse());
    }
    
    function sortByNumber(a,b){ return a-b; }

    // Enable animation for all of these SVG numeric attributes -
    // named as svg-* or svg* (with first character upper case)
    jQuery.each(['x', 'y', 'width', 'height', 'rx', 'ry', 'cx', 'cy', 'r', 'x1', 'y1', 'x2', 'y2',
		 'stroke-width', 'strokeWidth', 'opacity', 'fill-opacity', 'fillOpacity',
		 'stroke-opacity', 'strokeOpacity', 'stroke-dashoffset', 'strokeDashOffset',
		 'font-size', 'fontSize', 'font-weight', 'fontWeight',
		 'letter-spacing', 'letterSpacing', 'word-spacing', 'wordSpacing'],
		function(i, attrName) {
		    var ccName = attrName.charAt(0).toUpperCase() + attrName.substr(1);
		    if (jQuery.cssProps) {
			jQuery.cssProps['svg' + ccName] = jQuery.cssProps['svg-' + attrName] = attrName;
		    }
		    jQuery.fx.step['svg' + ccName] = jQuery.fx.step['svg-' + attrName] = function(fx) {
			var realAttrName = jQuery.svg._attrNames[attrName] || attrName;
			var attr = fx.elem.attributes.getNamedItem(realAttrName);
			if (!fx.set) {
			    fx.start = (attr ? parseFloat(attr.nodeValue) : 0);
			    var offset = (jQuery.fn.jquery >= '1.6' ? '' :
					  fx.options.curAnim['svg' + ccName] || fx.options.curAnim['svg-' + attrName]);
			    if (/^[+-]=/.exec(offset)) {
				fx.end = fx.start + parseFloat(offset.replace(/=/, ''));
			    }
			    jQuery(fx.elem).css(realAttrName, '');
			    fx.set = true;
			}
			var value = (fx.pos * (fx.end - fx.start) + fx.start) + (fx.unit == '%' ? '%' : '');
			(attr ? attr.nodeValue = value : fx.elem.setAttribute(realAttrName, value));
		    };
		}
	       );

    // Enable animation for the SVG strokeDashArray attribute
    jQuery.fx.step['svgStrokeDashArray'] = jQuery.fx.step['svg-strokeDashArray'] =
	jQuery.fx.step['svgStroke-dasharray'] = jQuery.fx.step['svg-stroke-dasharray'] = function(fx) {
	    var attr = fx.elem.attributes.getNamedItem('stroke-dasharray');
	    if (!fx.set) {
		fx.start = parseDashArray(attr ? attr.nodeValue : '');
		var offset = (jQuery.fn.jquery >= '1.6' ? fx.end :
			      fx.options.curAnim['svgStrokeDashArray'] || fx.options.curAnim['svg-strokeDashArray'] ||
			      fx.options.curAnim['svgStroke-dasharray'] || fx.options.curAnim['svg-stroke-dasharray']);
		fx.end = parseDashArray(offset);
		if (/^[+-]=/.exec(offset)) {
		    offset = offset.split(/[, ]+/);
		    if (offset.length % 2 == 1) { // Must have an even number
			var len = offset.length;
			for (var i = 0; i < len; i++) { // So repeat
			    offset.push(offset[i]);
			}
		    }
		    for (var i = 0; i < offset.length; i++) {
			if (/^[+-]=/.exec(offset[i])) {
			    fx.end[i] = fx.start[i] + parseFloat(offset[i].replace(/=/, ''));
			}
		    }
		}
		fx.set = true;
	    }
	    var value = jQuery.map(fx.start, function(n, i) {
		return (fx.pos * (fx.end[i] - n) + n);
	    }).join(',');
	    (attr ? attr.nodeValue = value : fx.elem.setAttribute('stroke-dasharray', value));
	};

    /* Parse a strokeDashArray definition: dash, gap, ...
       @param  value  (string) the definition
       @return  (number[2n]) the extracted values */
    function parseDashArray(value) {
	var dashArray = value.split(/[, ]+/);
	for (var i = 0; i < dashArray.length; i++) {
	    dashArray[i] = parseFloat(dashArray[i]);
	    if (isNaN(dashArray[i])) {
		dashArray[i] = 0;
	    }
	}
	if (dashArray.length % 2 == 1) { // Must have an even number
	    var len = dashArray.length;
	    for (var i = 0; i < len; i++) { // So repeat
		dashArray.push(dashArray[i]);
	    }
	}
	return dashArray;
    }

    // Enable animation for the SVG viewBox attribute
    jQuery.fx.step['svgViewBox'] = jQuery.fx.step['svg-viewBox'] = function(fx) {
	var attr = fx.elem.attributes.getNamedItem('viewBox');
	if (!fx.set) {
	    fx.start = parseViewBox(attr ? attr.nodeValue : '');
	    var offset = (jQuery.fn.jquery >= '1.6' ? fx.end :
			  fx.options.curAnim['svgViewBox'] || fx.options.curAnim['svg-viewBox']);
	    fx.end = parseViewBox(offset);
	    if (/^[+-]=/.exec(offset)) {
		offset = offset.split(/[, ]+/);
		while (offset.length < 4) {
		    offset.push('0');
		}
		for (var i = 0; i < 4; i++) {
		    if (/^[+-]=/.exec(offset[i])) {
			fx.end[i] = fx.start[i] + parseFloat(offset[i].replace(/=/, ''));
		    }
		}
	    }
	    fx.set = true;
	}
	var value = jQuery.map(fx.start, function(n, i) {
	    return (fx.pos * (fx.end[i] - n) + n);
	}).join(' ');
	(attr ? attr.nodeValue = value : fx.elem.setAttribute('viewBox', value));
    };

    /* Parse a viewBox definition: x, y, width, height.
       @param  value  (string) the definition
       @return  (number[4]) the extracted values */
    function parseViewBox(value) {
	var viewBox = value.split(/[, ]+/);
	for (var i = 0; i < viewBox.length; i++) {
	    viewBox[i] = parseFloat(viewBox[i]);
	    if (isNaN(viewBox[i])) {
		viewBox[i] = 0;
	    }
	}
	while (viewBox.length < 4) {
	    viewBox.push(0);
	}
	return viewBox;
    }

    // Enable animation for the SVG transform attribute
    jQuery.fx.step['svgTransform'] = jQuery.fx.step['svg-transform'] = function(fx) {
	var attr = fx.elem.attributes.getNamedItem('transform');
	if (!fx.set) {
	    fx.start = parseTransform(attr ? attr.nodeValue : '');
	    fx.end = parseTransform(fx.end, fx.start);
	    fx.set = true;
	}
	var transform = '';
	for (var i = 0; i < fx.end.order.length; i++) {
	    switch (fx.end.order.charAt(i)) {
	    case 't':
		transform += ' translate(' +
		    (fx.pos * (fx.end.translateX - fx.start.translateX) + fx.start.translateX) + ',' +
		    (fx.pos * (fx.end.translateY - fx.start.translateY) + fx.start.translateY) + ')';
		break;
	    case 's':
		transform += ' scale(' +
		    (fx.pos * (fx.end.scaleX - fx.start.scaleX) + fx.start.scaleX) + ',' +
		    (fx.pos * (fx.end.scaleY - fx.start.scaleY) + fx.start.scaleY) + ')';
		break;
	    case 'r':
		transform += ' rotate(' +
		    (fx.pos * (fx.end.rotateA - fx.start.rotateA) + fx.start.rotateA) + ',' +
		    (fx.pos * (fx.end.rotateX - fx.start.rotateX) + fx.start.rotateX) + ',' +
		    (fx.pos * (fx.end.rotateY - fx.start.rotateY) + fx.start.rotateY) + ')';
		break;
	    case 'x':
		transform += ' skewX(' +
		    (fx.pos * (fx.end.skewX - fx.start.skewX) + fx.start.skewX) + ')';
	    case 'y':
		transform += ' skewY(' +
		    (fx.pos * (fx.end.skewY - fx.start.skewY) + fx.start.skewY) + ')';
		break;
	    case 'm':
		var matrix = '';
		for (var j = 0; j < 6; j++) {
		    matrix += ',' + (fx.pos * (fx.end.matrix[j] - fx.start.matrix[j]) + fx.start.matrix[j]);
		}				
		transform += ' matrix(' + matrix.substr(1) + ')';
		break;
	    }
	}
	(attr ? attr.nodeValue = transform : fx.elem.setAttribute('transform', transform));
    };

    /* Decode a transform string and extract component values.
       @param  value     (string) the transform string to parse
       @param  original  (object) the settings from the original node
       @return  (object) the combined transformation attributes */
    function parseTransform(value, original) {
	value = value || '';
	if (typeof value == 'object') {
	    value = value.nodeValue;
	}
	var transform = jQuery.extend({translateX: 0, translateY: 0, scaleX: 0, scaleY: 0,
				       rotateA: 0, rotateX: 0, rotateY: 0, skewX: 0, skewY: 0,
				       matrix: [0, 0, 0, 0, 0, 0]}, original || {});
	transform.order = '';
	var pattern = /([a-zA-Z]+)\(\s*([+-]?[\d\.]+)\s*(?:[\s,]\s*([+-]?[\d\.]+)\s*(?:[\s,]\s*([+-]?[\d\.]+)\s*(?:[\s,]\s*([+-]?[\d\.]+)\s*[\s,]\s*([+-]?[\d\.]+)\s*[\s,]\s*([+-]?[\d\.]+)\s*)?)?)?\)/g;
	var result = pattern.exec(value);
	while (result) {
	    switch (result[1]) {
	    case 'translate':
		transform.order += 't';
		transform.translateX = parseFloat(result[2]);
		transform.translateY = (result[3] ? parseFloat(result[3]) : 0);
		break;
	    case 'scale':
		transform.order += 's';
		transform.scaleX = parseFloat(result[2]);
		transform.scaleY = (result[3] ? parseFloat(result[3]) : transform.scaleX);
		break;
	    case 'rotate':
		transform.order += 'r';
		transform.rotateA = parseFloat(result[2]);
		transform.rotateX = (result[3] ? parseFloat(result[3]) : 0);
		transform.rotateY = (result[4] ? parseFloat(result[4]) : 0);
		break;
	    case 'skewX':
		transform.order += 'x';
		transform.skewX = parseFloat(result[2]);
		break;
	    case 'skewY':
		transform.order += 'y';
		transform.skewY = parseFloat(result[2]);
		break;
	    case 'matrix':
		transform.order += 'm';
		transform.matrix = [parseFloat(result[2]), parseFloat(result[3]),
				    parseFloat(result[4]), parseFloat(result[5]),
				    parseFloat(result[6]), parseFloat(result[7])];
		break;
	    }
	    result = pattern.exec(value);
	}
	if (transform.order == 'm' && Math.abs(transform.matrix[0]) == Math.abs(transform.matrix[3]) &&
	    transform.matrix[1] != 0 && Math.abs(transform.matrix[1]) == Math.abs(transform.matrix[2])) {
	    // Simple rotate about origin and translate
	    var angle = Math.acos(transform.matrix[0]) * 180 / Math.PI;
	    angle = (transform.matrix[1] < 0 ? 360 - angle : angle);
	    transform.order = 'rt';
	    transform.rotateA = angle;
	    transform.rotateX = transform.rotateY = 0;
	    transform.translateX = transform.matrix[4];
	    transform.translateY = transform.matrix[5];
	}
	return transform;
    }

    // Enable animation for all of these SVG colour properties - based on jquery.color.js
    jQuery.each(['fill', 'stroke'],
		function(i, attrName) {
		    var ccName = attrName.charAt(0).toUpperCase() + attrName.substr(1);
		    jQuery.fx.step['svg' + ccName] = jQuery.fx.step['svg-' + attrName] = function(fx) {
			if (!fx.set) {
			    fx.start = jQuery.svg._getColour(fx.elem, attrName);
			    var toNone = (fx.end == 'none');
			    fx.end = (toNone ? jQuery.svg._getColour(fx.elem.parentNode, attrName) : jQuery.svg._getRGB(fx.end));
			    fx.end[3] = toNone;
			    jQuery(fx.elem).css(attrName, '');
			    fx.set = true;
			}
			var attr = fx.elem.attributes.getNamedItem(attrName);
			var colour = 'rgb(' + [
			    Math.min(Math.max(parseInt((fx.pos * (fx.end[0] - fx.start[0])) + fx.start[0], 10), 0), 255),
			    Math.min(Math.max(parseInt((fx.pos * (fx.end[1] - fx.start[1])) + fx.start[1], 10), 0), 255),
			    Math.min(Math.max(parseInt((fx.pos * (fx.end[2] - fx.start[2])) + fx.start[2], 10), 0), 255)
			].join(',') + ')';
			colour = (fx.end[3] && fx.state == 1 ? 'none' : colour);
			(attr ? attr.nodeValue = colour : fx.elem.setAttribute(attrName, colour));
		    }
		}
	       );

    /* Find this attribute value somewhere up the node hierarchy.
       @param  elem  (element) the starting element to find the attribute
       @param  attr  (string) the attribute name
       @return  (number[3]) RGB components for the attribute colour */
    jQuery.svg._getColour = function(elem, attr) {
	elem = jQuery(elem);
	var colour;
	do {
	    colour = elem.attr(attr) || elem.css(attr);
	    // Keep going until we find an element that has colour, or exit SVG
	    if ((colour != '' && colour != 'none') || elem.hasClass(jQuery.svg.markerClassName)) {
		break; 
	    }
	} while (elem = elem.parent());
	return jQuery.svg._getRGB(colour);
    };

    /* Parse strings looking for common colour formats.
       @param  colour  (string) colour description to parse
       @return  (number[3]) RGB components of this colour */
    jQuery.svg._getRGB = function(colour) {
	var result;
	// Check if we're already dealing with an array of colors
	if (colour && colour.constructor == Array) {
	    return (colour.length == 3 || colour.length == 4 ? colour : colours['none']);
	}
	// Look for rgb(num,num,num)
	if (result = /^rgb\(\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*\)jQuery/.exec(colour)) {
	    return [parseInt(result[1], 10), parseInt(result[2], 10), parseInt(result[3], 10)];
	}
	// Look for rgb(num%,num%,num%)
	if (result = /^rgb\(\s*([0-9]+(?:\.[0-9]+)?)\%\s*,\s*([0-9]+(?:\.[0-9]+)?)\%\s*,\s*([0-9]+(?:\.[0-9]+)?)\%\s*\)jQuery/.exec(colour)) {
	    return [parseFloat(result[1]) * 2.55, parseFloat(result[2]) * 2.55,
		    parseFloat(result[3]) * 2.55];
	}
	// Look for #a0b1c2
	if (result = /^#([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})jQuery/.exec(colour)) {
	    return [parseInt(result[1], 16), parseInt(result[2], 16), parseInt(result[3], 16)];
	}
	// Look for #abc
	if (result = /^#([a-fA-F0-9])([a-fA-F0-9])([a-fA-F0-9])jQuery/.exec(colour)) {
	    return [parseInt(result[1] + result[1], 16), parseInt(result[2] + result[2], 16),
		    parseInt(result[3] + result[3], 16)];
	}
	// Otherwise, we're most likely dealing with a named color
	return colours[jQuery.trim(colour).toLowerCase()] || colours['none'];
    };

    // The SVG named colours
    var colours = {
	'':						[255, 255, 255, 1],
	none:					[255, 255, 255, 1],
	aliceblue:				[240, 248, 255],
	antiquewhite:			[250, 235, 215],
	aqua:					[0, 255, 255],
	aquamarine:				[127, 255, 212],
	azure:					[240, 255, 255],
	beige:					[245, 245, 220],
	bisque:					[255, 228, 196],
	black:					[0, 0, 0],
	blanchedalmond:			[255, 235, 205],
	blue:					[0, 0, 255],
	blueviolet:				[138, 43, 226],
	brown:					[165, 42, 42],
	burlywood:				[222, 184, 135],
	cadetblue:				[95, 158, 160],
	chartreuse:				[127, 255, 0],
	chocolate:				[210, 105, 30],
	coral:					[255, 127, 80],
	cornflowerblue:			[100, 149, 237],
	cornsilk:				[255, 248, 220],
	crimson:				[220, 20, 60],
	cyan:					[0, 255, 255],
	darkblue:				[0, 0, 139],
	darkcyan:				[0, 139, 139],
	darkgoldenrod:			[184, 134, 11],
	darkgray:				[169, 169, 169],
	darkgreen:				[0, 100, 0],
	darkgrey:				[169, 169, 169],
	darkkhaki:				[189, 183, 107],
	darkmagenta:			[139, 0, 139],
	darkolivegreen:			[85, 107, 47],
	darkorange:				[255, 140, 0],
	darkorchid:				[153, 50, 204],
	darkred:				[139, 0, 0],
	darksalmon:				[233, 150, 122],
	darkseagreen:			[143, 188, 143],
	darkslateblue:			[72, 61, 139],
	darkslategray:			[47, 79, 79],
	darkslategrey:			[47, 79, 79],
	darkturquoise:			[0, 206, 209],
	darkviolet:				[148, 0, 211],
	deeppink:				[255, 20, 147],
	deepskyblue:			[0, 191, 255],
	dimgray:				[105, 105, 105],
	dimgrey:				[105, 105, 105],
	dodgerblue:				[30, 144, 255],
	firebrick:				[178, 34, 34],
	floralwhite:			[255, 250, 240],
	forestgreen:			[34, 139, 34],
	fuchsia:				[255, 0, 255],
	gainsboro:				[220, 220, 220],
	ghostwhite:				[248, 248, 255],
	gold:					[255, 215, 0],
	goldenrod:				[218, 165, 32],
	gray:					[128, 128, 128],
	grey:					[128, 128, 128],
	green:					[0, 128, 0],
	greenyellow:			[173, 255, 47],
	honeydew:				[240, 255, 240],
	hotpink:				[255, 105, 180],
	indianred:				[205, 92, 92],
	indigo:					[75, 0, 130],
	ivory:					[255, 255, 240],
	khaki:					[240, 230, 140],
	lavender:				[230, 230, 250],
	lavenderblush:			[255, 240, 245],
	lawngreen:				[124, 252, 0],
	lemonchiffon:			[255, 250, 205],
	lightblue:				[173, 216, 230],
	lightcoral:				[240, 128, 128],
	lightcyan:				[224, 255, 255],
	lightgoldenrodyellow:	[250, 250, 210],
	lightgray:				[211, 211, 211],
	lightgreen:				[144, 238, 144],
	lightgrey:				[211, 211, 211],
	lightpink:				[255, 182, 193],
	lightsalmon:			[255, 160, 122],
	lightseagreen:			[32, 178, 170],
	lightskyblue:			[135, 206, 250],
	lightslategray:			[119, 136, 153],
	lightslategrey:			[119, 136, 153],
	lightsteelblue:			[176, 196, 222],
	lightyellow:			[255, 255, 224],
	lime:					[0, 255, 0],
	limegreen:				[50, 205, 50],
	linen:					[250, 240, 230],
	magenta:				[255, 0, 255],
	maroon:					[128, 0, 0],
	mediumaquamarine:		[102, 205, 170],
	mediumblue:				[0, 0, 205],
	mediumorchid:			[186, 85, 211],
	mediumpurple:			[147, 112, 219],
	mediumseagreen:			[60, 179, 113],
	mediumslateblue:		[123, 104, 238],
	mediumspringgreen:		[0, 250, 154],
	mediumturquoise:		[72, 209, 204],
	mediumvioletred:		[199, 21, 133],
	midnightblue:			[25, 25, 112],
	mintcream:				[245, 255, 250],
	mistyrose:				[255, 228, 225],
	moccasin:				[255, 228, 181],
	navajowhite:			[255, 222, 173],
	navy:					[0, 0, 128],
	oldlace:				[253, 245, 230],
	olive:					[128, 128, 0],
	olivedrab:				[107, 142, 35],
	orange:					[255, 165, 0],
	orangered:				[255, 69, 0],
	orchid:					[218, 112, 214],
	palegoldenrod:			[238, 232, 170],
	palegreen:				[152, 251, 152],
	paleturquoise:			[175, 238, 238],
	palevioletred:			[219, 112, 147],
	papayawhip:				[255, 239, 213],
	peachpuff:				[255, 218, 185],
	peru:					[205, 133, 63],
	pink:					[255, 192, 203],
	plum:					[221, 160, 221],
	powderblue:				[176, 224, 230],
	purple:					[128, 0, 128],
	red:					[255, 0, 0],
	rosybrown:				[188, 143, 143],
	royalblue:				[65, 105, 225],
	saddlebrown:			[139, 69, 19],
	salmon:					[250, 128, 114],
	sandybrown:				[244, 164, 96],
	seagreen:				[46, 139, 87],
	seashell:				[255, 245, 238],
	sienna:					[160, 82, 45],
	silver:					[192, 192, 192],
	skyblue:				[135, 206, 235],
	slateblue:				[106, 90, 205],
	slategray:				[112, 128, 144],
	slategrey:				[112, 128, 144],
	snow:					[255, 250, 250],
	springgreen:			[0, 255, 127],
	steelblue:				[70, 130, 180],
	tan:					[210, 180, 140],
	teal:					[0, 128, 128],
	thistle:				[216, 191, 216],
	tomato:					[255, 99, 71],
	turquoise:				[64, 224, 208],
	violet:					[238, 130, 238],
	wheat:					[245, 222, 179],
	white:					[255, 255, 255],
	whitesmoke:				[245, 245, 245],
	yellow:					[255, 255, 0],
	yellowgreen:			[154, 205, 50]
    };

})(window);
/*

    Easy widget to serve as a tabbed container.

    var $tabs = $('#tabs').kbaseTabs(
        {
            tabPosition : 'bottom', //or left or right or top. Defaults to 'top'
            canDelete : true,       //whether or not the tab can be removed. Defaults to false.
            tabs : [
                {
                    tab : 'T1',                                     //name of the tab
                    content : $('<div></div>').html("I am a tab"),  //jquery object to stuff into the content
                    canDelete : false,                              //override the canDelete param on a per tab basis
                },
                {
                    tab : 'T2',
                    content : $('<div></div>').html("I am a tab 2"),
                },
                {
                    tab : 'T3',
                    content : $('<div></div>').html("I am a tab 3"),
                    show : true,                                    //boolean. This tab gets shown by default. If not specified, the first tab is shown
                },
            ],
        }
    );

    useful methods would be:

    $('#tabs').kbaseTabs('showTab', 'T1');
    $('#tabs').kbaseTabs('addTab', tabObject);  //the tabObject defined up above

*/

(function( $, undefined ) {


    $.KBWidget({

		  name: "kbaseTabs",

        version: "1.0.0",

        _accessors : ['tabsHeight'],

        options: {
            tabPosition : 'top',
            canDelete : false,
            borderColor : 'lightgray',
        },

        init: function(options) {

            this._super(options);

            this.data('tabs', {});
            this.data('nav', {});

            this.appendUI( $( this.$elem ) );

            return this;

        },

        appendUI : function ($elem, tabs) {

            if (tabs == undefined) {
                tabs = this.options.tabs;
            }

            var $block =
                $('<div></div>')
                    .addClass('tabbable')
            ;

            var $tabs = $('<div></div>')
                .addClass('tab-content')
                .attr('id', 'tabs-content')
                .css('height', this.tabsHeight())
            ;
            var $nav = $('<ul></ul>')
                .addClass('nav nav-tabs')
                .attr('id', 'tabs-nav')
            ;
            $block.append($nav).append($tabs);
            /*if (this.options.tabPosition == 'top') {
                $block.addClass('tabs-above');
                $block.append($nav).append($tabs);
            }
            else if (this.options.tabPosition == 'bottom') {
                $block.addClass('tabs-below');
                $block.append($tabs).append($nav);
            }
            else if (this.options.tabPosition == 'left') {
                $block.addClass('tabs-left');
                $block.append($nav).append($tabs);
            }
            else if (this.options.tabPosition == 'right') {
                $block.addClass('tabs-right');
                $block.append($tabs).append($nav);
            }*/

            this._rewireIds($block, this);

            $elem.append($block);

            if (tabs) {
                $.each(
                    tabs,
                    $.proxy(function (idx, tab) {
                        this.addTab(tab);
                    }, this)
                );
            }

        },

        addTab : function (tab) {

            if (tab.canDelete == undefined) {
                tab.canDelete = this.options.canDelete;
            }

            var $tab = $('<div></div>')
                .addClass('tab-pane fade')
                .append(tab.content);

            if (this.options.border) {
                $tab.css('border', 'solid ' + this.options.borderColor);
                $tab.css('border-width', '0px 1px 0px 1px');
                $tab.css('padding', '3px');
            }

            var $that = this;   //thanks bootstrap! You suck!


            var $nav = $('<li></li>')
                .css('white-space', 'nowrap')
                .append(
                    $('<a></a>')
                        .attr('href', '#')
                        .text(tab.tab)
                        .attr('data-tab', tab.tab)
                        .bind('click',
                            function (e) {
                                e.preventDefault();
                                e.stopPropagation();

                                var previous = $that.data('tabs-nav').find('.active:last a')[0];

                                //we can't just call 'show' directly, since it requires an href or data-target attribute
                                //on the link which MUST be an idref to something else in the dom. We don't have those,
                                //so we just do what show does and call activate directly.
                                //
                                //oh, but we can't just say $(this).tab('activate',...) because bootstrap is specifically
                                //wired up not to pass along any arguments to methods invoked in this manner.
                                //
                                //Because bootstrap -sucks-.
                                $.fn.tab.Constructor.prototype.activate.call(
                                    $(this),
                                    $(this).parent('li'),
                                    $that.data('tabs-nav')
                                );

                                $.fn.tab.Constructor.prototype.activate.call(
                                    $(this),
                                    $tab,
                                    $tab.parent(),
                                    function () {
                                        $(this).trigger({
                                            type            : 'shown',
                                            relatedTarget   : previous
                                        })
                                    });

                            }
                        )
                    .append(
                        $('<button></button>')
                            .addClass('btn btn-default btn-xs')
                            .append($('<i></i>').addClass(this.closeIcon()))
                            .css('padding', '0px')
                            .css('width', '22px')
                            .css('height', '22px')
                            .css('margin-left', '10px')
                            .attr('title', this.deleteTabToolTip(tab.tab))
                            .tooltip()
                            .bind('click', $.proxy(function (e) {
                                e.preventDefault();
                                e.stopPropagation();

                                if (tab.deleteCallback != undefined) {
                                    tab.deleteCallback(tab.tab);
                                }
                                else {
                                    this.deletePrompt(tab.tab);
                                }
                            },this))
                    )
                )
            ;

            if (! tab.canDelete) {
                $nav.find('button').remove();
            }

            this.data('tabs')[tab.tab] = $tab;
            this.data('nav')[tab.tab] = $nav;

            this.data('tabs-content').append($tab);
            this.data('tabs-nav').append($nav);

            var tabCount = 0;
            for (t in this.data('tabs')) { tabCount++; }
            if (tab.show || tabCount == 1) {
                this.showTab(tab.tab);
            }
        },

        closeIcon : function () { return 'icon-remove'; },

        deleteTabToolTip : function (tabName) {
            return 'Remove ' + tabName;
        },

        hasTab : function(tabName) {
            return this.data('tabs')[tabName];
        },

        showTab : function (tab) {
            if (this.shouldShowTab(tab)) {
                this.data('nav')[tab].find('a').trigger('click');
            }
        },

        removeTab : function (tabName) {
            var $tab = this.data('tabs')[tabName];
            var $nav = this.data('nav')[tabName];

            if ($nav.hasClass('active')) {
                if ($nav.next('li').length) {
                    $nav.next().find('a').trigger('click');
                }
                else {
                    $nav.prev('li').find('a').trigger('click');
                }
            }

            $tab.remove();
            $nav.remove();

            this.data('tabs')[tabName] = undefined;
            this.data('nav')[tabName] = undefined;
        },

        shouldShowTab : function (tab) { return 1; },

        deletePrompt : function(tabName) {
            var $deleteModal = $('<div></div>').kbaseDeletePrompt(
                {
                    name     : tabName,
                    callback : this.deleteTabCallback(tabName),
                }
            );

            $deleteModal.openPrompt();
        },

        deleteTabCallback : function (tabName) {
            return $.proxy(function(e, $prompt) {
                if ($prompt != undefined) {
                    $prompt.closePrompt();
                }

                if (this.shouldDeleteTab(tabName)) {
                    this.removeTab(tabName);
                }
            }, this);
        },

        shouldDeleteTab : function (tabName) { return 1; },

        activeTab : function() {
            var activeNav = this.data('tabs-nav').find('.active:last a')[0];
            return $(activeNav).attr('data-tab');
        },

    });

}( jQuery ) );

 /**
 * File upload widget.
 * Upload objects to the workspace service.
 *
 * Options:
 *   $anchor - HTML anchor: click on this element to create dialog
 *   ws_parent - parent object
 *
 * Author: Dan Gunter <dkgunter@lbl.gov>
 * Created: 27 Aug 2013
 */

// Jquery UI widget style
(function($, undefined) {

    var MissingOptionError = function(argname) {
        var e = new Error("missing option: '" + argname + "'");
        e.name = "MissingOptionError";
        return e;
    }

    var FileReaderError = function(filename) {
        var e = new Error("reading file: '" + filename + "'");
        e.name = "FileReaderError";
        return e;
    }

	$.KBWidget({
        name: "kbaseUploadWidget", 
        parent: 'kbaseWidget',
		version: "0.0.1",
        isLoggedIn: false,
		options: { },
        /**
         * Initialize the widget.
         *
         * @param options
         * @returns {*}
         */
		init: function(options) {
            this._super(options);
            // process options
            if (options.ws_parent === undefined)
                throw MissingOptionError('ws_parent');
            this.ws_p = options.ws_parent;            
            // defaults for instance vars
            this.desc_elem = this.type_elem = null;
            // create the dialog
            this.data_types = [];
            this.createDialog();
            var that = this;
            options.$anchor.on("click", function() {
                that.render();
            });
            return this;
		},

        /**
         * Create the dialog if data types are accessible.
         */
        createDialog: function() {
            var r  = this._getDataTypes(), self = this;
            console.debug("got from _getDataTypes: ", r);
            if (r !== undefined) {
                // jfc, there has to be an easier way to do this!
                r.done(function() { self._createDialog(self); });
            }
        },

        /**
         * Populate data types
         *
         * @return jQuery Promise object
         */
        _getDataTypes: function() {
            var _fn = "_getDataTypes.";
            if (this.data_types.length > 0) {
                return $.Deferred();
            }
            var _p = this.ws_p; // alias
            if (_p.ws_client == null) {
                console.error("Cannot get data types because no client");
                return undefined;
            }
            console.debug(_fn + "get_types.begin");
            var _this = this;
            var r = _p.ws_client.get_types(
                function(result) { 
                    $.each(result, function(key, value) { _this.data_types.push(value);});
                },
                function(result) { 
                    console.error(_fn + "get_types.failed msg=", result.error.message); 
                }                        
            );
            return r;
        },

        /**
         * Create the dialog widget
         *
         * @returns {*}
         */
        _createDialog: function(self) {
            self.cur_files = [];
            var _fn = "createDialog.";
            console.debug(_fn + "begin", "self=", self);
            var _p = self.ws_p; // alias
            var opts = {
                modal: true,
                closeOnEscape: true,
                title: 'Upload file',
                autoOpen: false,
                width: '50em'
            };
            self.dlg = self.$elem.dialog(opts);
            self.dlg.empty(); // make idempotent
            // Build form programmatically
            var $frm = $('<form>').addClass('form-horizontal');
            var fields = {
                'filename': {
                    type:'file',
                    id:'kb-up-filename',
                    label: 'Filename:',
                    desc_id: 'kb-up-desc'
                },
                'datatype': {
                    type:'select',
                    id:'dataset_type',
                    label:'Dataset Type:',
                    options: self.data_types
                },
                'dataset': {
                    type:'text',
                    id:'dataset_name',
                    label:'Dataset Name:',
                    placeholder: "Name or identifying phrase",
                    modified: false
                }
            };
            // Add each field
            var that = self;
            $.each(fields, function(key, value) {
                var $frm_grp = $('<div>').addClass('control-group');
                var $frm_controls = $('<div>').addClass('controls');
                // Build and add the label
                var $label = $('<label class="control-label" for="' + value.id + '">' + value.label + '</label>');
                $frm_grp.append($label);
                // Build and add the control
                var $control = null;
                switch (value.type) {
                    case "file":
                        // This uses Bootstrap file-upload, see: http://jasny.github.io/bootstrap/javascript.html#fileupload
                        // Input and buttons
                        $control = $('<div/>').addClass('form-group kb-upload')
                        $control.html('<div class="fileupload fileupload-new" data-provides="fileupload">' +
                            '<div class="input-group">' +
                                '<div class="form-control uneditable-input"><i class="icon-file fileupload-exists"></i> ' +
                                    '<span class="fileupload-preview"></span>' +
                                '</div>'+
                                '<div class="input-group-btn">'+
                                    '<a class="btn btn-default btn-file">'+
                                        '<span class="fileupload-new">Select file</span>'+
                                        '<span class="fileupload-exists">Change</span>'+
                                        '<input type="file" class="file-input"/></a>'+
                                    '<a href="#" class="btn btn-default fileupload-exists" data-dismiss="fileupload">Remove</a>'+
                                '</div> </div> </div>');
                        break;
                    case "text":
                        $control = $('<input>').attr({type:'text', name: value.id,
                            placeholder: value.placeholder}).addClass('form-control');
                        // remember whether this value was modified by the user
                        $control.change(function() {
                            // count as modified if non-empty
                            var modded = self.value === "" ? false : true;
                            fields.dataset.modified = modded;
                        });
                        that.desc_elem = $control;
                        break;
                    case "select":
                        $control = $('<select>').attr('name', value.id).addClass("form-control");
                        var keys = [];
                        $.each(value.options, function(k,v){keys.push(v);})
                        keys.sort();
                        that.file_type = keys[0];
                        $.each(keys, function(index, value) {
                           var $opt = $('<option>').text(value);
                           $control.append($opt);
                        });
                        that.type_elem = $control;
                        break;
                    default:
                        break; // XXX: raise an exception
                }
                $frm_controls.append($control);
                $frm_grp.append($frm_controls);
                // Add the label+controls to the form
                $frm.append($frm_grp);
            });
            // Add actions

            var $up_btn = $('<button>').addClass('btn btn-primary').text('Upload');
            var $cancel_btn = $('<button>').addClass('btn btn-link').text('Cancel');
            var $actions = $('<div>').addClass('form-actions');
            $actions.append($up_btn);
            $actions.append($cancel_btn);
            $frm.append($actions);
            // Populate dialog with form
            self.dlg.append($frm);
            // Put filename in description, unless user entered something
            $frm.on('change.bs.fileinput', function(e) {
                console.debug("changed", e);
                // if the file-input was changed..
                if (e.target.className === "file-input") {
                    self.cur_files = e.target.files;
                    if (self.cur_files.length > 0 && !fields.dataset.modified) {
                        var $txt = $frm.find(':text');
                        $txt.val(self.cur_files[0].name);
                    }
                }
            });
            // Set up response
            $frm.on("submit", function(event) {
                event.preventDefault();
                for (var i=0; i < self.cur_files.length; i++) {
                    var f = self.cur_files[i];
                    $.extend(f, {
                        desc: that.desc_elem[0].value, // description
                        dtype: that.type_elem[0].value // data type name
                    });
                    var reader = new FileReader();
                    reader.onload = (function(file_info) {
                        return function(e) {
                            that.uploadFile(file_info, e.target.result); 
                        }
                    })(f);
                    reader.onerror = (function(file_info) {
                        return function(e) { 
                            throw FileReaderError(file_info); 
                        }
                    })(f);
                    reader.readAsBinaryString(f);
                }
                that.dlg.dialog('close');
            });
            // Cancel
            $cancel_btn.click(function() {
                that.dlg.dialog('close');
            });
            return this;
        },

        /**
         * Render the dialog.
         * @returns {*}
         */
        render: function() {
            this.dlg.find(':text').val('');
            this.dlg.dialog('open');
            return this;
        },

        /**
         * Get file name from input.
         * Has a workaround for chrome
         */
        _getFileName: function(path) {
            return (navigator.userAgent.indexOf('Chrome')) ?
                path.replace(/C:\\fakepath\\/i, '') : path;
        },

        /**
         * Upload the file into the workspace.
         *
         * @param values File path and metadata
         * @returns {*}
         */
        uploadFile: function(file, data) {
            console.debug("upload file '" + file.name + "' desc: " + file.desc);
            /*
            id has a value which is an object_id
            type has a value which is an object_type
            data has a value which is an ObjectData
            workspace has a value which is a workspace_id
            command has a value which is a string
            metadata has a value which is a reference to a hash where the key is a string and the value is a string
            auth has a value which is a string
            json has a value which is a bool
            compressed has a value which is a bool
            retrieveFromURL has a value which is a bool
            asHash has a value which is a bool                

            this.save_object = function (params, _callback, _errorCallback) {
                    return json_call_ajax("workspaceService.save_object",
                        [params], 1, _callback, _errorCallback);
                };

            */
            var meta = {
                'narrative': IPython.notebook.metadata,
                'description': file.desc,
            };
            var _p = this.ws_p; // parent obj
            var objid = this.sanitizeObjectId(file.desc);
            params = {
                id: objid,
                type: file.dtype, 
                workspace: _p.ws_id, // workspace_id
                command: 'upload', // string
                metadata: meta,
                auth: _p.ws_auth,
                json: false,
                compressed: false,
                retrieveFromURL: false,
                asHash: false
            };
            console.debug('upload file params', params)
            // put here, so not in logging
            params.data = {
                'version': 0.1,
                'bytes': data
            };
            _p.ws_client.save_object(params, this.handleUploadSuccess, 
                                     this.handleUploadFailure);
            //this.ws_client.save_object(params, 
            //    function())
            return this;
        },

        /**
         * Takes an arbitrary string and return a version of it that
         * can be used as a workspace object id.
         * Illegal chars are replaced by '_'.
         */
         sanitizeObjectId: function(oid) {
            return oid
                .replace(/[^\w\|.-]/g,"_") // illegal chars -> "_"
                .replace(/_+/g,"_");       // multiple "___" -> one "_"
         },

        /**
         * Called when an upload succeeds.
         */
        handleUploadSuccess: function(result) {
            console.debug("upload success", result);
        },

        /**
         * Called when an upload fails
         */
        handleUploadFailure: function(error) {
            console.debug("upload error", error);
        },

        /**
         * Respond to login.
         *
         * @param token
         * @returns {*}
         */
        loggedIn: function(token) {
            this.isLoggedIn = true;
            //this.wsClient = new workspaceService(this.options.workspaceURL);
            return this;
        },

        loggedOut: function(token) {
            this.isLoggedIn = false;
            return this;
        }
	});
})( jQuery );

/*

Widget to create an accordion control. Easy to use!

    var $accordion = $('#accordion').kbaseAccordion(
        [
            {
                title : 'Accordion element 1',
                body : 'body 1'
            },
            {
                title : 'Accordion element 2',
                body : 'body 2'
            },
            {
                title : 'Accordion element 3',
                body : 'body 3'
            },
            {
                title : 'Accordion element 4',
                body : 'body 4'
            },
        ]
    );

*/

(function( $, undefined ) {


    $.KBWidget({
        name : 'kbaseAccordion',
        version: "1.0.0",
        options: {
            fontSize : '100%',
        },

        init: function(options) {

            this._super(options);

            if (this.options.client) {
                this.client = this.options.client;
            }

            this.appendUI( $( this.$elem ) );

            return this;

        },

        appendUI : function ($elem, elements) {

            if (elements == undefined) {
                elements = this.options.elements;
            }

            var fontSize = this.options.fontSize;

            var $block =
                $('<div></div>')
                    .addClass('accordion')
                    .css('font-size', fontSize)
                    .attr('id', 'accordion')
            ;

            $.each(
                elements,
                $.proxy(
                    function (idx, val) {

                        $block.append(
                            $('<div></div>')
                                .addClass('panel panel-default')
                                .css('margin-bottom', '2px')
                                .append(
                                    $('<div></div>')
                                        .addClass('panel-heading')
                                        .css('padding', '0px')
                                        .append(
                                            $('<i></i>')
                                                .css('margin-right', '5px')
                                                .css('margin-left', '3px')
                                                .addClass('fa fa-chevron-right')
                                                .addClass('pull-left')
                                                .css('height', '22px')
                                                .css('line-height', '22px')
                                                .css('color', 'gray')
                                        )
                                        .append(
                                            $('<a></a>')
                                                .css('padding', '0px')
                                                .attr('href', '#')
                                                .attr('title', val.title)
                                                .css('height', '22px')
                                                .css('line-height', '22px')

                                                .append(val.title)
                                                //.text(val.title)
                                        )
                                        .bind(
                                            'click',
                                                function(e) {
                                                    e.preventDefault();
                                                    var $opened = $(this).closest('.panel').find('.in');
                                                    var $target = $(this).next();

                                                    if ($opened != undefined) {
                                                        $opened.collapse('hide');
                                                        var $i = $opened.parent().first().find('i');
                                                        $i.removeClass('fa fa-chevron-down');
                                                        $i.addClass('fa fa-chevron-right');
                                                    }

                                                    if ($target.get(0) != $opened.get(0)) {
                                                        $target.collapse('show');
                                                        var $i = $(this).parent().find('i');
                                                        $i.removeClass('fa fa-chevron-right');
                                                        $i.addClass('fa fa-chevron-down');
                                                    }

                                                }
                                            )
                                )
                                .append(
                                    $('<div></div>')
                                        .addClass('panel-body collapse')
                                        .css('padding-top', '9px')
                                        .css('padding-bottom', '9px')
                                        .append(val.body)
                                    )
                            )
                        ;
                    },
                    this
                )
            );

            this._rewireIds($block, this);

            $elem.append($block);
//            $block.find('.panel-body').collapse('hide');

        },

    });

}( jQuery ) );

/*

    Simplified prompt for delete confirmations.

    var $deleteModal = $('<div></div>').kbaseDeletePrompt(
        {
            name : tab,
            callback :
                function(e, $prompt) {
                    $prompt.closePrompt();
                    if ($nav.hasClass('active')) {
                        if ($nav.next('li').length) {
                            $nav.next().find('a').trigger('click');
                        }
                        else {
                            $nav.prev('li').find('a').trigger('click');
                        }
                    }
                    $tab.remove();
                    $nav.remove();
                }
            ,
        }
    );

    $deleteModal.openPrompt();

    Sure, you could just set it up through kbasePrompt. But why bother?
*/

(function( $, undefined ) {
    $.KBWidget({

		  name: "kbaseDeletePrompt",
		parent: 'kbasePrompt',

        version: "1.0.0",
        options: {
            controls : ['cancelButton', 'okayButton']
        },

        init: function(options) {

            this._super(options);

            return $('<div></div>').kbasePrompt(
                    {
                        title : 'Confirm deletion',
                        body : 'Really delete <strong>' + this.options.name + '</strong>?',
                        controls : [
                            'cancelButton',
                            {
                                name : 'Delete',
                                type : 'primary',
                                callback : this.options.callback
                            }
                        ],
                    }
                )

        },


    });

}( jQuery ) );

/**
 *
 *
 *  options should be:
 *      ws_url: ...           
 *      nms_url: ...
 *
 */
var NarrativeManager = function(options, auth, auth_cb) {

    // setup URLs and Clients
    if (!options) {
        console.error("NarrativeManager: options must be defined.");
        return;
    }
    this.config = {};
    this.config.ws_url = null;
    this.config.nms_url = null;
    if (options.ws_url) { this.config.ws_url  = options.ws_url; }
    else if (window.kbconfig && window.kbconfig.urls) {
        this.config.ws_url = window.kbconfig.urls.workspace;
    }
    if (options.nms_url) { this.config.nms_url  = options.nms_url; }
    else if (window.kbconfig && window.kbconfig.urls) {
        this.config.nms_url = window.kbconfig.urls.narrative_method_store;
    }
    
    if (typeof(this.config.ws_url) != "string" || this.config.ws_url.trim().length === 0) {
        this.config.ws_url = "https://kbase.us/services/ws";
    }
    if (typeof(this.config.nms_url) != "string" || this.config.nms_url.trim().length === 0) {
        this.config.nms_url = "https://kbase.us/services/narrative_method_store/rpc";
    }
    this.config.auth    = auth ? auth : { 'token' : '', 'user_id' : ''};
    if (!auth.user_id) {
        if (auth.token) {
            this.config.auth.user_id = auth.token.split('|')[0].split('=')[1];
        }
    }
    this.user_id = this.config.auth.user_id;
    this.config.auth_cb = auth_cb;

    this.ws = new Workspace(this.config.ws_url, this.config.auth, this.config.auth_cb);
    this.nms = new NarrativeMethodStore(this.config.nms_url, this.config.auth, this.config.auth_cb);
    
    /**
     *  creates a new Narrative in the single Narrative, single WS approach
     *
     *  // all are optional ...
     *  params =
     *  {
     *      cells : [
     *          { app: app_id },
     *          { method: method_id },
     *          { markdown: markdown },
     *          { code: code }
     *      ],
     *      parameters : [
     *          {
     *              cell: n,           // indicates index in the cell
     *              step_id: id,
     *              parameter_id: id,  
     *              value: value
     *          }
     *      ],
     *      importData : [
     *          {
     *               ref: ws_reference,  
     *               newName : name
     *          },
     *          ...
     *      ]
     *  }
     *
     *  _callback = function(info) {
     *
     *      info.ws_info = [ .. ]
     *      info.nar_info = [ .. ]
     *      info.object_info = [ ws_reference : [ .. ] ]
     *      
     *  }
     */
    this.createTempNarrative = function(params, _callback, _error_callback) {
        var self = this;
        var id = new Date().getTime();
        var ws_name = this.user_id + ":" + id;
        var nar_name = "Narrative."+id;
        
        console.log("creating "+name);
        
        var wsMetaData = {
            'narrative' : nar_name,
            'is_temporary' : 'true'
            //'pending_shared_users': '[]',
            //'rejected_shared_users': '[]'
        };
        
        // 1 - create ws
        self.ws.create_workspace(
            {
                workspace: ws_name,
                description: "",
                meta: wsMetaData
            },
            function(ws_info) {
                console.log("workspace created:");
                console.log(ws_info);
                
                // 2 - create the Narrative object
                var narObjs = self.buildNarrativeObjects(
                    ws_name, params.cells, params.parameters,
                    function(narrativeObject, metadataExternal) {
                        // 3 - save the Narrative object
                        self.ws.save_objects(
                            {
                                workspace: ws_name,
                                objects: [{
                                    type: "KBaseNarrative.Narrative",
                                    data: narrativeObject,
                                    name: nar_name,
                                    meta: metadataExternal,
                                    provenance: [
                                        {
                                            script: "NarrativeManager.js",
                                            description: "Created new Workspace/Narrative bundle."
                                        }
                                    ],
                                    hidden:0
                                }]
                            },
                            function(obj_info_list) {
                                console.log('saved narrative:');
                                console.log(obj_info_list);
                                _callback({ws_info:ws_info, nar_info: obj_info_list[0]});
                                // better to keep the narrative perm id instead of the name
                                self.ws.alter_workspace_metadata(
                                    {wsi:{workspace:ws_name},new:{narrative:obj_info_list[0][0]+''}},
                                    function() {},
                                    function() {});
                            }, function (error) {
                                console.error(error);
                                if(_error_callback) { _error_callback(error); }
                            });
                    },
                    _error_callback
                );
            },
            function(error) {
                console.error(error);
                if(_error_callback) { _error_callback(error); }
            }
        );
    };
    
    this.discardTempNarrative = function(params, _callback, _error_callback) {
    };
    
    
    /**
     * 
     */
    this.cleanTempNarratives = function(params, _callback, _error_callback) {
    };
    
    /*
     *      cells : [
     *          { app: app_id },
     *          { method: method_id },
     *          { markdown: markdown },
     *          { code: code }
     *      ],
     *      parameters : [
     *          {
     *              cell: n,           // indicates index in the cell
     *              step_id: id,
     *              parameter_id: id,  
     *              value: value
     *          }
     *      ],
     */
    
    /* private method to setup the narrative object,
    returns [narrative, metadata]
    */
    this.buildNarrativeObjects = function(ws_name, cells, parameters, _callback, _error_callback) {
        var self = this;
        // first thing first- we need to grap the app/method specs
        self._getSpecs(cells,
            function() {
                // now we can create the metadata and populate the cells
                var metadata = {
                    job_ids: { methods:[], apps:[] },
                    format:'ipynb',
                    creator:self.user_id,
                    ws_name:ws_name,
                    name:"Untitled",
                    type:"KBaseNarrative.Narrative",
                    description:"",
                    data_dependencies:[]
                };
                var cell_data = [];
                if (cells) {
                    if (cells.length>0) {
                        for(var c=0; c<cells.length; c++) {
                            if (cells[c].app) {
                                var appCell = self._buildAppCell(cell_data.length, self._specMapping.apps[cells[c].app]);
                                cell_data.push(appCell);
                            } else if (cells[c].method) {
                                var methodCell = self._buildMethodCell(cell_data.length, self._specMapping.methods[cells[c].method]);
                                cell_data.push(methodCell);
                            } else if (cells[c].markdown) {
                                cell_data.push({
                                    cell_type: 'markdown',
                                    source: cells[c].markdown,
                                    metadata: {}
                                });
                            }
                            //else if (cells[c].code) { }
                            else {
                                console.error('cannot add cell '+c+', unrecognized cell content');
                                console.error(cells[c]);
                                if(_error_callback) { _error_callback('cannot add cell '+c+', unrecognized cell content'); }
                            }
                        }
                    } else {
                        cell_data.push(
                            {
                                cell_type: 'markdown',
                                source: self.introText,
                                metadata: { }
                            });
                    }
                }
                
                var narrativeObject = {
                    nbformat_minor: 0,
                    worksheets: [ {
                        cells: cell_data,
                        metadata: {}
                    }],
                    metadata: metadata,
                    nbformat:3
                };
                
                // setup external string to string metadata for the WS object
                var metadataExternal = {};
                for(var m in metadata) {
                    if (metadata.hasOwnProperty(m)) {
                        if (typeof metadata[m] === 'string') {
                            metadataExternal[m] = metadata[m];
                        } else {
                            metadataExternal[m] = JSON.stringify(metadata[m]);
                        }
                    }
                }
                _callback(narrativeObject, metadataExternal);
        
            },
            _error_callback
            );
    };
    
    this._buildAppCell = function(pos,spec) {
        var cellId = 'kb-cell-'+pos+'-'+this._uuidgen();
        var cell = {
            cell_type: 'markdown',
            source: "<div id='" + cellId + "'></div>" +
                    "\n<script>" +
                    "$('#" + cellId + "').kbaseNarrativeAppCell({'appSpec' : '" + this._safeJSONStringify(spec) + "', 'cellId' : '" + cellId + "'});" +
                    "</script>",
            metadata: { }
        };
        var cellInfo = {};
        cellInfo[this.KB_TYPE] = this.KB_APP_CELL;
        cellInfo['app'] = spec;
        cellInfo[this.KB_STATE] = [];
        cell.metadata[this.KB_CELL] = cellInfo;
        return cell;
    };
    
    this._buildMethodCell = function(pos,spec) {
        var cellId = 'kb-cell-'+pos+'-'+this._uuidgen();
        var cell = {
            cell_type: 'markdown',
            source: "<div id='" + cellId + "'></div>" +
                    "\n<script>" +
                    "$('#" + cellId + "').kbaseNarrativeMethodCell({'method' : '" + this._safeJSONStringify(spec) + "'});" +
                    "</script>",
            metadata: { }
        };
        var cellInfo = {};
        cellInfo[this.KB_TYPE] = this.KB_FUNCTION_CELL;
        cellInfo['method'] = spec;
        cellInfo[this.KB_STATE] = [];
        cellInfo['widget'] = spec.widgets.input;
        cell.metadata[this.KB_CELL] = cellInfo;
        return cell;
    };
    
    // map the app ID to the spec, map method id to spec
    this._specMapping = {
        apps : {},
        methods : {}
    };
    /** populates the app/method specs **/
    this._getSpecs = function(cells, _callback, _error_callback) {
        var self = this;
        if (cells) {
            var appSpecIds = []; var methodSpecIds = [];
            this._specMapping = { apps : {}, methods : {} }
            for(var c=0; c<cells.length; c++) {
                if (cells[c].app) {
                    appSpecIds.push(cells[c].app);
                } else if (cells[c].method) {
                    methodSpecIds.push(cells[c].method);
                }
            }
            var getSpecsJobs = [];
            if (appSpecIds.length>0) {
                getSpecsJobs.push(
                    self.nms.get_app_spec({ids:appSpecIds},
                        function(appSpecs) {
                            for (var a=0; a<appSpecs.length; a++) {
                                self._specMapping.apps[appSpecIds[a]] = appSpecs[a];
                            }
                        },
                        function(error) {
                            console.error("error getting app specs:");
                            console.error(error);
                            if(_error_callback) { _error_callback(); }
                        }));
            }
            if (methodSpecIds.length>0) {
                getSpecsJobs.push(
                    self.nms.get_method_spec({ids:methodSpecIds},
                        function(methodSpecs) {
                            for (var a=0; a<methodSpecs.length; a++) {
                                self._specMapping.methods[methodSpecIds[a]] = methodSpecs[a];
                            }
                        },
                        function(error) {
                            console.error("error getting method specs:");
                            console.error(error);
                            if(_error_callback) { _error_callback(); }
                        }));
            }
            
            if (getSpecsJobs.length>0) {
                $.when.apply($, getSpecsJobs).done(function() {
                    _callback();
                });
            } else {
                _callback();
            }
        } else {
            _callback();
        }
    };
    
    
    
    // !! copied from kbaseNarrativeWorkspace !!
    this._safeJSONStringify = function(string) {
        var esc = function(s) { 
            return s.replace(/'/g, "&apos;")
                    .replace(/"/g, "&quot;");
        };
        return JSON.stringify(string, function(key, value) {
            return (typeof(value) === 'string') ? esc(value) : value;
        });
    };
    // !! copied from kbaseNarrativeWorkspace !!
    this._uuidgen = function() {
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
            var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);
            return v.toString(16);});
    };
    
    // !! copied from kbaseNarrativeWorkspace !!
    this.KB_CELL= 'kb-cell';
    this.KB_TYPE= 'type';
    this.KB_APP_CELL= 'kb_app';
    this.KB_FUNCTION_CELL= 'function_input';
    this.KB_OUTPUT_CELL= 'function_output';
    this.KB_ERROR_CELL= 'kb_error';
    this.KB_CODE_CELL= 'kb_code';
    this.KB_STATE= 'widget_state';
    
    
    
    this.introText =
        "Welcome to KBase!\n============\n\n"+
        "Add Data to this Narrative\n------------\n\n"+
        "Click on '<b>Add Data</b>' and browse for KBase data or upload your own."+
        "Select the data and click 'Add to narrative'.  Perhaps start by "+
        "importing your favorite Genome.  Once your data has been loaded, "+
        "you can inspect it in the data list.\n<br>\n\n"+
        "Perform an Analysis\n------------\n\n"+
        "When you're ready, select an App or Method to run on your data.  "+
        "Simply click on an App or Method on the side bar, and it will appear "+
        "directly in your Narrative.  Fill in the parameters and click run.  "+
        "Output will be generated and new data objects may be created and added "+
        "to your data list.  Add and run as many Apps and Methods as you like!\n\n"+
        "Long running computations can be tracked in your Jobs panel, located on "+
        "the side panel under the 'Manage' tab.\n<br>\n\n"+
        "Save & Share your Results\n------------\n\n"+
        "When you're ready, name this Narrative and save it.  Once it is saved, "+
        "click on the 'share' button above to let others view your analysis.  Or if you're "+
        "brave, make it public for the world to see.\n<br><br>\n\n"+
        "\nThat's it!\n\n"+
        "<b>Questions?</b> Visit https://kbase.us to search for more detailed tutorials and documentation.\n\n"+
        "<b>More Questions?</b> Email: [help@kbase.us](mailto:help@kbase.us)\n\n\n";
};



/*

WORKSPACE INFO
0: ws_id id
1: ws_name workspace
2: username owner
3: timestamp moddate,
4: int object
5: permission user_permission
6: permission globalread,
7: lock_status lockstat
8: usermeta metadata

 
*/
 
 
 



/**
 * @author Bill Riehl <wjriehl@lbl.gov>
 * @public
 */

(function( $, undefined ) {
    $.KBWidget({
        name: "kbaseNarrativeInput",
        parent: "kbaseAuthenticatedWidget",
        version: "1.0.0",
        options: {
            loadingImage: "../images/ajax-loader.gif",
            method: null,
        },
        IGNORE_VERSION: true,

        init: function(options) {
            this._super(options);

            // expects the method as a JSON string
            if (this.options.method)
                this.options.method = JSON.parse(this.options.method);
            
            return this;
        },

        getParameters: function() {
            return [ "returning parameter list" ];
        },
        
        getState: function() {
            return {};
        },

        loadState: function(state) {
            if (!state)
                return;
        },

        refresh: function() {

        },

        /*  NEW METHODS TO HANDLE NEW APP BEHAVIOR AND METHOD/APP SPECS */
        
        
        /*
         * This is called when this method is run to allow you to check if the parameters
         * that the user has entered is correct.  You need to return an object that indicates
         * if the input is valid, or if not, if there are any error messages.  When this is
         * called, you should visually indicate which parameters are invalid by marking them
         * red (see kbaseNarrativeMethodInput for default styles).
         */
        isValid: function() {
           return { isValid: true, errormssgs: [] }; 
        },
        
        /*
         * Necessary for Apps to disable editing parameters that are automatically filled
         * from a previous step.  Returns nothing.
         */
        disableParameterEditing: function(parameterId) {
            
        },
        
        /*
         * Allows those parameters to be renabled, which may be an option for advanced users.
         */
        enableParameterEditing: function(parameterId) {
            
        },
        
        /*
         * An App (or a narrative that needs to auto populate certain fields) needs to set
         * specific parameter values based on the App spec, so we need a way to do this.
         */
        setParameterValue: function(parameterId, value) {
            
        },
        
        /*
         * We need to be able to retrieve any parameter value from this method.  Valid parameter
         * values may be strings, numbers, objects, or lists, but must match what is declared
         * in the method spec.  If the parameter is not valid.
         */
        getParameterValue: function(parameterId) {
            return null;
        },
        
        
        /*
         * When we actually run the method, we need all the parameter inputs.  This should return
         * an array of objects, where each object has 'id' and 'value' defined giving the parameter ID
         * and parameter value.
         */
        getAllParameterValues: function() {
            /*  should be in the form:
             *      [
             *          { id: 'param1', value: 'MyGenome' },
             *          ...
             *      ]
             *  
             */
            return [ ];
        },
        
        
        lockInputs: function() {
            
        },
        unlockInputs: function() {
            
        },
        
        /*
         * This function is invoked every time we run app or method. This is the difference between it
         * and getAllParameterValues/getParameterValue which could be invoked many times before running 
         * (e.g. when widget is rendered). 
         */
        prepareDataBeforeRun: function() {
        	
        }
        
    });

})( jQuery );
/**
 * @author Bill Riehl <wjriehl@lbl.gov>
 * @public
 */

(function( $, undefined ) {
    $.KBWidget({
        name: "kbaseNarrativeMethodInput",
        parent: "kbaseNarrativeInput",
        version: "1.0.0",
        options: {
            loadingImage: "../images/ajax-loader.gif",
            isInSidePanel: false
        },

        init: function(options) {
            this._super(options);

            this.render();
            this.refresh();
            return this;
        },

        // list of objects in the form {id:"param_id", widget: ... } to ensure we preserve
        // parameter ordering
        parameters: null,
        // maps parameter id to widget for fast lookup of widget
        parameterIdLookup : {},
        
        $advancedOptionsDiv : null,
        
        /**
         * Builds the input div for a function cell, based on the given method object.
         * @param {Object} method - the method being constructed around.
         * @returns {String} an HTML string describing the available parameters for the cell.
         * @private
         */
        render: function() {
            // figure out all types from the method
            var self = this;
            var method = this.options.method;
            var params = method.parameters;

            var $inputParameterContainer = $('<div>');
            var $optionsDiv = $('<div>');
            this.$advancedOptionsDiv = $('<div>')
            
            this.parameters = [];
            this.parameterIdLookup = {};
            for (var i=0; i<params.length; i++) {
                var paramSpec = params[i];
                var $stepDiv = $('<div>');
                // check what kind of parameter here.
                if (paramSpec.field_type === "text") {
                    var textInputWidget = $stepDiv["kbaseNarrativeParameterTextInput"]({loadingImage: this.options.loadingImage, parsedParameterSpec: params[i], isInSidePanel: this.options.isInSidePanel});
                    this.parameters.push({id:paramSpec.id, widget:textInputWidget});
                    this.parameterIdLookup[paramSpec.id] = textInputWidget;
                } else if (paramSpec.field_type === "dropdown") {
                    var dropdownInputWidget = $stepDiv["kbaseNarrativeParameterDropdownInput"]({loadingImage: this.options.loadingImage, parsedParameterSpec: params[i], isInSidePanel: this.options.isInSidePanel});
                    this.parameters.push({id:paramSpec.id, widget:dropdownInputWidget});
                    this.parameterIdLookup[paramSpec.id] = dropdownInputWidget;
                } else if (paramSpec.field_type === "checkbox") {
                    var checkboxInputWidget = $stepDiv["kbaseNarrativeParameterCheckboxInput"]({loadingImage: this.options.loadingImage, parsedParameterSpec: params[i], isInSidePanel: this.options.isInSidePanel});
                    this.parameters.push({id:paramSpec.id, widget:checkboxInputWidget});
                    this.parameterIdLookup[paramSpec.id] = checkboxInputWidget;
                }else if (paramSpec.field_type === "textarea") {
                    var textareaInputWidget = $stepDiv["kbaseNarrativeParameterTextareaInput"]({loadingImage: this.options.loadingImage, parsedParameterSpec: params[i], isInSidePanel: this.options.isInSidePanel});
                    this.parameters.push({id:paramSpec.id, widget:textareaInputWidget});
                    this.parameterIdLookup[paramSpec.id] = textareaInputWidget;
                }else if (paramSpec.field_type === "file") {
                    var fileInputWidget = $stepDiv["kbaseNarrativeParameterFileInput"]({loadingImage: this.options.loadingImage, parsedParameterSpec: params[i], isInSidePanel: this.options.isInSidePanel});
                    this.parameters.push({id:paramSpec.id, widget:fileInputWidget});
                    this.parameterIdLookup[paramSpec.id] = fileInputWidget;
                }else if (paramSpec.field_type === "tab") {
                	continue;
                } else {
                    // this is what we should do:  this.getErrorDiv()
                    $stepDiv.append('<span class="label label-danger">Parameter '+paramSpec.id+
                                    ' not displaying properly, invalid parameter type: "'+paramSpec.field_type+'"</span>');
                }
                
                // If it is an advanced option, then we must place it in the correct div
                var isAdvanced = false;
                if (paramSpec.advanced) {
                    if (paramSpec.advanced === true || paramSpec.advanced === 1) {
                        isAdvanced = true;
                    }
                }
                this.addParameterDiv(i, paramSpec, $stepDiv, $optionsDiv, this.$advancedOptionsDiv, isAdvanced);
            }
            $inputParameterContainer.append($optionsDiv);
            var hasAdvancedOption = this.$advancedOptionsDiv.children().length > 0;
            var $advancedOptionsControllerRow = $("<div>").addClass("row").css({"margin":"5px"});
            if (hasAdvancedOption) {
                $advancedOptionsControllerRow.append($("<div>").addClass("col-md-12 kb-method-advanced-options-controller")
                                                     .append("show advanced options"))
                                                     .on('click',function() {
                                                        if (self.$advancedOptionsDiv.is(":visible")) {
                                                            self.$advancedOptionsDiv.hide();
                                                            $(this).find(".kb-method-advanced-options-controller").html("show advanced options");
                                                        } else {
                                                            self.$advancedOptionsDiv.show();
                                                            $(this).find(".kb-method-advanced-options-controller").html("hide advanced options");
                                                        }
                                                     } );
                $inputParameterContainer.append($advancedOptionsControllerRow);
                $inputParameterContainer.append(this.$advancedOptionsDiv.hide());
            } else {
                $advancedOptionsControllerRow.append($("<div>").addClass("col-md-12 kb-method-advanced-options-controller-inactive")
                                                     .append("no advanced options"));
                $inputParameterContainer.append($advancedOptionsControllerRow);
            }
            
            this.$elem.append($inputParameterContainer);
            this.$elem.css({"margin-bottom":"5px"});
            
        },

        addParameterDiv: function(paramPos, paramSpec, $stepDiv, $optionsDiv, $advancedOptionsDiv, isAdvanced) {
            if (isAdvanced) {
                $advancedOptionsDiv.append($stepDiv);
            } else {
                if ($optionsDiv.children().length == 0)
                    $stepDiv.css({"margin-top":"5px"});
                $optionsDiv.append($stepDiv);
            }
        },
        
        /**
         *OLD STYLE: we keep this for compatibility, but you should use new get parameter values!!!
         * Returns a list of parameters in the order in which the given method
         * requires them.
         * @return {Array} an array of strings - one for each parameter
         * @public
         */
        getParameters: function() {
            var paramList = [];
            if (this.parameters) {
                for(var i=0; i<this.parameters.length; i++) {
                    paramList.push(this.parameters[i].widget.getParameterValue());
                }
            }
            return paramList;
        },

        /**
         * Returns an object representing the state of this widget.
         * In this particular case, it is a list of key-value pairs, like this:
         * { 
         *   'param0' : 'parameter value',
         *   'param1' : 'parameter value'
         * }
         * with one key/value for each parameter in the defined method.
         */
        getState: function() {
            var state = {};

            if (this.parameters) {
                for(var i=0; i<this.parameters.length; i++) {
                    var id = this.parameters[i].id;
                    state[id] = this.parameters[i].widget.getState();
                }
            }
            
            return state;
        },

        /**
         * Adjusts the current set of parameters based on the given state.
         * Doesn't really do a whole lot of type checking yet, but it's assumed that
         * a state will be loaded from an object generated by getState.
         */
        loadState: function(state) {
            if (!state)
                return;

            if (this.parameters) {
                for(var i=0; i<this.parameters.length; i++) {
                    var id = this.parameters[i].id;
                    if (state.hasOwnProperty(id)) {
                        this.parameters[i].widget.loadState(state[id]);
                    }
                }
            }
        },

        /**
         * Refreshes the input fields for this widget. I.e. if any of them reference workspace
         * information, those fields get refreshed without altering any other inputs.
         */
        refresh: function() {
            if (this.parameters) {
                for(var i=0; i<this.parameters.length; i++) {
                    this.parameters[i].widget.refresh();
                }
            }
        },
        
        
        /*
         * This is called when this method is run to allow you to check if the parameters
         * that the user has entered is correct.  You need to return an object that indicates
         * if the input is valid, or if not, if there are any error messages.  When this is
         * called, you should visually indicate which parameters are invalid by marking them
         * red (see kbaseNarrativeMethodInput for default styles).
         */
        isValid: function() {
            var isValidRet = { isValid:true, errormssgs: [] };
            if (this.parameters) {
                for(var i=0; i<this.parameters.length; i++) {
                    var parameterStatus = this.parameters[i].widget.isValid();
                    //console.log("Status for parameter " + this.parameters[i].id + ":");
                    //console.log(parameterStatus);
                    if (!parameterStatus.isValid) {
                        isValidRet.isValid = false;
                        for(var e = 0; e<parameterStatus.errormssgs.length; e++) {
                            isValidRet.errormssgs.push(parameterStatus.errormssgs[e]);
                        }
                    }
                }
            }
            return isValidRet; 
        },
        
        /*
         * Necessary for Apps to disable editing parameters that are automatically filled
         * from a previous step.  Returns nothing.
         */
        disableParameterEditing: function(parameterId) {
            if (this.parameterIdLookup) {
                var widget = this.parameterIdLookup[parameterId];
                if (widget) {
                    if (typeof widget.disableParameterEditing === 'function') {
                        widget.disableParameterEditing();
                    }
                }
            }
        },
        
        /*
         * Allows those parameters to be renabled, which may be an option for advanced users.
         */
        enableParameterEditing: function(parameterId) {
            if (this.parameterIdLookup) {
                var widget = this.parameterIdLookup[parameterId];
                if (widget) {
                    if (typeof widget.enableParameterEditing === 'function') {
                        widget.enableParameterEditing();
                    }
                }
            }
        },
        
        /*
         * An App (or a narrative that needs to auto populate certain fields) needs to set
         * specific parameter values based on the App spec, so we need a way to do this.
         */
        setParameterValue: function(parameterId, value) {
            if (this.parameterIdLookup) {
                var widget = this.parameterIdLookup[parameterId];
                if (widget) {
                    if (typeof widget.setParameterValue(value) === 'function') {
                        widget.setParameterValue(value);
                    }
                }
            }
        },
        
        /*
         * We need to be able to retrieve any parameter value from this method.  Valid parameter
         * values may be strings, numbers, objects, or lists, but must match what is declared
         * in the method spec.  If the parameter is not valid.
         */
        getParameterValue: function(parameterId) {
            var value = null;
            if (this.parameterIdLookup) {
                var widget = this.parameterIdLookup[parameterId];
                if (widget) {
                    value = widget.getParameterValue();
                }
            }
            return value;
        },
        
        
        /*
         * When we actually run the method, we need all the parameter inputs.  This should return
         * an array of objects, where each object has 'id' and 'value' defined giving the parameter ID
         * and parameter value.
         */
        getAllParameterValues: function() {
            /*  should be in the form:
             *      [
             *          { id: 'param1', value: 'MyGenome' },
             *          ...
             *      ]
             *  
             */
            var values = [];
            if (this.parameters) {
                for(var i=0; i<this.parameters.length; i++) {
                    var value = this.parameters[i].widget.getParameterValue();
                    values.push( { id:this.parameters[i].id, value:value } );
                }
            }
            return values;
        },
        
        /** lock/unlock inputs allows temporary lock and unlock of the inputs only if they are enabled
        this means that unlocking will not enable the input if it was previously disabled by the disableInputEditing method. **/
        lockInputs: function() {
            if (this.parameters) {
                for(var i=0; i<this.parameters.length; i++) {
                    this.parameters[i].widget.lockInputs();
                }
            }
        },
        unlockInputs: function() {
            if (this.parameters) {
                for(var i=0; i<this.parameters.length; i++) {
                    this.parameters[i].widget.unlockInputs();
                }
            }
        },
        
        
        
        /**
         * allows an app or other higher-level function to attach a listener on a a parameter
         * so that when it changes, something else can be updated.
         */
        addInputListener: function(parameterId, onChangeFunc) {
            if (this.parameterIdLookup) {
                var widget = this.parameterIdLookup[parameterId];
                if (widget) {
                    value = widget.addInputListener(onChangeFunc);
                }
            }
        },
        
        /*
         * This function is invoked every time we run app or method. This is the difference between it
         * and getAllParameterValues/getParameterValue which could be invoked many times before running 
         * (e.g. when widget is rendered). 
         */
        prepareDataBeforeRun: function() {
            if (this.parameters) {
                for (var i = 0; i < this.parameters.length; i++)
                    this.parameters[i].widget.prepareValueBeforeRun(this.options.method);
            }
        },
        
        genUUID: function() {
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
                var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);
                return v.toString(16);
            });
        }
    });

})( jQuery );
/**
 * @author Bill Riehl <wjriehl@lbl.gov>
 * @public
 */

(function( $, undefined ) {
    $.KBWidget({
        name: "kbaseNarrativeParameterInput",
        parent: "kbaseAuthenticatedWidget",
        version: "1.0.0",
        options: {
            loadingImage: "../images/ajax-loader.gif",
            parsedParameterSpec: null,
            isInSidePanel: false
        },
        IGNORE_VERSION: true,

        $mainPanel:null,
        spec:null,
        
        init: function(options) {
            this._super(options);

            this.spec = options.parsedParameterSpec;
            
            this.$mainPanel = $("<div>");
            this.$elem.append(this.$mainPanel);
            this.render();
            
            return this;
        },
        
        render: function() {
            this.$mainPanel.append("A parameter is not being displayed correctly.");
            console.error("Incorrect Parameter Spec:");
            console.error(this.spec);
        },
        
        getState: function() {
            return this.getParameterValue();
        },

        loadState: function(state) {
            if (!state)
                return;
            this.setParameterValue(state);
        },
        
        refresh: function() {
        
        },

        /*
         * This is called when this method is run to allow you to check if the parameters
         * that the user has entered is correct.  You need to return an object that indicates
         * if the input is valid, or if not, if there are any error messages.  When this is
         * called, you should visually indicate which parameters are invalid by marking them
         * red (see kbaseNarrativeMethodInput for default styles).
         */
        isValid: function() {
           return { isValid: false, errormssgs: ["A parameter is not specified properly."] }; 
        },
        
        /*
         * Necessary for Apps to disable editing parameters that are automatically filled
         * from a previous step.  Returns nothing.
         */
        disableParameterEditing: function() {
            
        },
        
        /*
         * Allows those parameters to be renabled, which may be an option for advanced users.
         */
        enableParameterEditing: function() {
            
        },
        
        /*
         * An App (or a narrative that needs to auto populate certain fields) needs to set
         * specific parameter values based on the App spec, so we need a way to do this.
         */
        setParameterValue: function(value) {
            
        },
        
        /*
         * We need to be able to retrieve any parameter value from this method.  Valid parameter
         * values may be strings, numbers, objects, or lists, but must match what is declared
         * in the method spec.  If the parameter is not valid.
         */
        getParameterValue: function() {
            return "";
        },
        
        /*
         * This function is invoked every time we run app or method. This is the difference between it
         * and getParameterValue() which could be invoked many times before running (e.g. when widget 
         * is rendered). 
         */
        prepareValueBeforeRun: function(methodSpec) {
        	
        }
        
    });

})( jQuery );
/**
 * @author Bill Riehl <wjriehl@lbl.gov>
 * @public
 */

(function( $, undefined ) {
    $.KBWidget({
        name: "kbaseNarrativeParameterTextInput",
        parent: "kbaseNarrativeParameterInput",
        version: "1.0.0",
        options: {
            loadingImage: "../images/ajax-loader.gif",
            parsedParameterSpec: null,
            wsObjSelectPageSize : 20,
            isInSidePanel: false
        },
        IGNORE_VERSION: true,

        // properties inherited from kbaseNarrativeParameterInput
        // $mainPanel:null,
        // spec:null,
        
        isUsingSelect2: false,
        enabled: true,
        isOutputName: false,
        required: true,
        validDataObjectList: [],
        allow_multiple:false,
        
        $rowsContainer: null,
        $addRowController: null,
        
        rowInfo: null,
        
        // set the widths of the columns
        nameColClass  : "col-md-2",
        inputColClass : "col-md-5",
        hintColClass  : "col-md-5",
        
        render: function() {
            var self = this;
            if (self.options.isInSidePanel) {
            	self.nameColClass  = "col-md-12";
                self.inputColClass = "col-md-12";
                self.hintColClass  = "col-md-12";
            }

            var spec = self.spec;
            
            // check if we need to allow multiple values
            self.allow_multiple = false;
            if (spec.allow_multiple) {
                if (spec.allow_multiple===true || spec.allow_multiple===1) {
                    self.allow_multiple = true;
                }
            }
            // check if this is a required field
            self.required= true;
            if (spec.optional) {
                self.required=false;
            }
            
            // check if this is an output name
            if (spec.text_options) {
                if (spec.text_options.is_output_name) {
                    self.isOutputName = true;
                }
            }
            
            //self.$mainPanel.addClass("kb-method-parameter-panel")
            //        .hover(function(){$(this).toggleClass('kb-method-parameter-panel-hover');});;
            
            self.rowInfo = [];
            self.$rowsContainer=$("<div>");
            self.$mainPanel.append(self.$rowsContainer);
            self.$addRowController = $('<div>');
            
            var d = spec.default_values;
            
            // based on whether we have one or allow multiple, render the output rows...
            if (!self.allow_multiple) {
                var defaultValue = '';
                if (spec.default_values) { if (spec.default_values.length >= 1) {
                        var d = spec.default_values; defaultValue = (d[0] !== '' && d[0] !== undefined) ? d[0] : '';
                }}
                self.addRow(defaultValue,true,true); 
            } else {
                // for multiple elements, hover on entire panel
                self.$mainPanel
                        .addClass("kb-method-parameter-row")
                        .mouseenter(function(){$(this).addClass('kb-method-parameter-row-hover');})
                        .mouseleave(function(){$(this).removeClass('kb-method-parameter-row-hover');});
                
                var defaultValue = '';
                if (spec.default_values) { if (spec.default_values.length >= 1) {
                        var d = spec.default_values; defaultValue = (d[0] !== '' && d[0] !== undefined) ? d[0] : '';
                }}
                self.addRow(defaultValue,true,false);
                if (spec.default_values) {
                    var d = spec.default_values;
                    for(var i=1; i<d.length; d++) {
                        defaultValue = (d[i] !== '' && d[i] !== undefined) ? d[i] : '';
                        self.addRow(defaultValue,false,false); 
                    }
                }
                self.addTheAddRowController();
            }
            self.refresh();
        },
        
        addTheAddRowController: function () {
            var self = this;
            var $nameCol = $('<div>').addClass(self.nameColClass).addClass("kb-method-parameter-name");
            if (self.options.isInSidePanel)
            	$nameCol.css({'text-align': 'left', 'padding-left': '10px'});
            var $buttonCol = $('<div>').addClass(self.inputColClass).addClass("kb-method-parameter-input").append(
                                $('<button>').addClass("kb-default-btn kb-btn-sm")
                                .append($('<span class="kb-parameter-data-row-add">').addClass("fa fa-plus"))
                                .append(" add another "+self.spec.ui_name)
                                .on("click",function() { self.addRow() }) );
            self.$addRowController = $('<div>').addClass("row kb-method-parameter-row").append($nameCol).append($buttonCol);
            self.$mainPanel.append(self.$addRowController)
        },
        
        
        removeRow : function(uuid) {
            var self = this;
            for(var i=0; i<self.rowInfo.length; i++) {
                if (self.rowInfo[i].uuid === uuid) {
                    self.rowInfo[i].$all.remove();
                    self.rowInfo.splice(i,1);
                    break;
                }
            }
        },
        
        /* row number should only be set when first creating this row */
        addRow : function(defaultValue, showHint, useRowHighlight) {
            var self = this;
            var spec = self.spec;
            
            var placeholder = '';
            if(spec.text_options) {
                if(spec.text_options.placeholder) {
                    placeholder = spec.text_options.placeholder;
                    placeholder = placeholder.replace(/(\r\n|\n|\r)/gm,"");
                }
            }
            if (!defaultValue) { defaultValue = ""; }
            
            var form_id = spec.id;
            var $input= $('<input id="' + form_id + '" placeholder="' + placeholder + '"' +
                            ' value="'+defaultValue+'" type="text" style="width:100%"/>').addClass("form-control")
                            .on("input",function() { self.isValid() });
                            
            if(spec.text_options) {
                if (spec.text_options.valid_ws_types) {
                    if (spec.text_options.valid_ws_types.length>0) {
                        self.isUsingSelect2 = true;
                        $input =$('<input id="' + form_id + '" type="text" style="width:100%" />')
                                    .on("change",function() { self.isValid() });
                        //this.validDataObjectList = []; - why was this here? ...
                    }
                }
            }
                
            var $feedbackTip = $("<span>").removeClass();
            if (self.required && showHint) {  // it must be required, and it must be the first element (showHint is only added on first row)
                $feedbackTip.addClass('kb-method-parameter-required-glyph glyphicon glyphicon-arrow-left').prop("title","required field");
            }
                
            var $row = $('<div>').addClass("row kb-method-parameter-row");
            if (useRowHighlight) {
                $row.mouseenter(function(){$(this).addClass('kb-method-parameter-row-hover');})
                    .mouseleave(function(){$(this).removeClass('kb-method-parameter-row-hover');});
            }
                            
            var $nameCol = $('<div>').addClass(self.nameColClass).addClass("kb-method-parameter-name");
            if (self.options.isInSidePanel)
            	$nameCol.css({'text-align': 'left', 'padding-left': '10px'});
            if (showHint) { $nameCol.append(spec.ui_name); }
            var $inputCol = $('<div>').addClass(self.inputColClass).addClass("kb-method-parameter-input")
                                .append($('<div>').css({"width":"100%","display":"inline-block"}).append($input))
                                .append($('<div>').css({"display":"inline-block"}).append($feedbackTip));
            var $hintCol  = $('<div>').addClass(self.hintColClass).addClass("kb-method-parameter-hint");
            var uuidForRemoval = self.genUUID(); var $removalButton=null;
            if(showHint) {
                $hintCol.append(spec.short_hint);
                if (spec.description && spec.short_hint !== spec.description) {
                    $hintCol.append($('<span>').addClass('fa fa-info kb-method-parameter-info')
                                    .tooltip({title:spec.description, html:true}));
                }
            } else {
                $removalButton = $('<button>').addClass("kb-default-btn kb-btn-sm")
                                .append($('<span class="kb-parameter-data-row-remove">').addClass("fa fa-remove"))
                                .append(" remove "+spec.ui_name)
                                .on("click",function() { self.removeRow(uuidForRemoval); })
                $hintCol.append($removalButton);
            }
            $row.append($nameCol).append($inputCol).append($hintCol);
            var $errorPanel = $('<div>').addClass("kb-method-parameter-error-mssg").hide();
            var $errorRow = $('<div>').addClass('row')
                                .append($('<div>').addClass(self.nameColClass))
                                .append($errorPanel.addClass(self.inputColClass));
            
            var $allRowComponents = $('<div>').append($row).append($errorRow);
            self.$rowsContainer.append($allRowComponents);
            self.rowInfo.push({uuid: uuidForRemoval, $row:$row, $input:$input, $error:$errorPanel, $feedback:$feedbackTip, $all:$allRowComponents, $removalButton:$removalButton});
                
            /* for some reason, we need to actually have the input added to the main panel before this will work */
            if (self.isUsingSelect2) {
                if (placeholder === '') { placeholder = ' '; } // this allows us to cancel selections in select2
                this.setupSelect2($input, placeholder);
            }
            // if a default value is set, validate it.
            if (defaultValue) {
                this.isValid();
            }
        },
        
        refresh: function() {
            var self = this;
            
            var needToMakeCall = false;
            var lookupTypes = [];
            var foundTypes = {};
            
            // could also check if we are using select2... that for now is only used for ws types
            if(self.spec.text_options) {
                if (self.spec.text_options.valid_ws_types) {
                    if(self.spec.text_options.valid_ws_types.length>0) {
                        var types = self.spec.text_options.valid_ws_types;
                        for(var i=0; i<types.length; i++) {
                            if (!foundTypes.hasOwnProperty(types[i])) {
                                lookupTypes.push(types[i]);
                                foundTypes[types[i]] = 1;
                                needToMakeCall = true;
                            }
                        }
                    }
                }
            }
            if (!needToMakeCall) { return; }
            
            // update the validDataObjectList 
            this.trigger('dataLoadedQuery.Narrative', [lookupTypes, this.IGNORE_VERSION, $.proxy(
                function(objects) {
                    // we know from each parameter what each input type is.
                    // we also know how many of each type there is.
                    // so, iterate over all parameters and fulfill cases as below.
                    // extract the object infos
                    var allObjInfo = [];
                    for (var typeName in objects) {
                        if (objects.hasOwnProperty(typeName)) {
                            for(var i=0; i<objects[typeName].length; i++) {
                                allObjInfo.push(objects[typeName][i]);
                            }
                        }
                    }
                    // sort them by date, then by name
                    allObjInfo.sort(function(a, b) {
                            if (a[3] > b[3]) return -1; // sort by date
                            if (a[3] < b[3]) return 1;  // sort by date
                            if (a[1] < b[1]) return -1; // sort by name
                            if (a[1] > b[1]) return 1;  // sort by name
                            return 0;
                        });
                    /* object info
                    0: id
                    1: name
                    2: type
                    3: timestamp
                    4: version
                    5: owner
                    6: ws id
                    7: ws name
                    8: checksum
                    9: size
                    10: metadata*/
                    
                    // populate the valid data object list
                    self.validDataObjectList = [];
                    for(var i=0; i<allObjInfo.length; i++) {
                        self.validDataObjectList.push({name:allObjInfo[i][1], info:allObjInfo[i]});
                    }
                    
                    // refresh the input options
                    if(self.isUsingSelect2) {
                        self.$elem.find("#"+this.spec.id).trigger("change");
                    }
                },
                this
            )]);
        },

        
        /* private method - note: if placeholder is empty, then users cannot cancel a selection*/
        setupSelect2: function ($input, placeholder, defaultValue) {
            var self = this;
            var noMatchesFoundStr = "No matching data found.";
            if (self.isOutputName) {
                noMatchesFoundStr = "Enter a name for the output data object.";
            }
            $input.select2({
                matcher: self.select2Matcher,
                formatNoMatches: noMatchesFoundStr,
                placeholder:placeholder,
                allowClear: true,
                selectOnBlur: true,
                query: function (query) {
                    var data = {results:[]};
                    
                    // if there is a current selection (this is a bit of a hack) we
                    // prefill the input box so we don't have to do additional typing
                    if (query.term.trim()==="" && $input.select2('data') && $input.data('select2').kbaseHackLastSelection) {
                        var searchbox = $input.data('select2').search;
                        if (searchbox) {
                            $(searchbox).val($input.select2('data').text);
                            query.term = $input.select2('data').text;
                            $input.data('select2').kbaseHackLastSelection = null;
                        }
                    }
                    $input.data('select2').kbaseHackLastTerm = query.term;
                    
                    // populate the names from our valid data object list
                    var exactMatch = false;
                    if (self.validDataObjectList) {
                        for(var i=0; i<self.validDataObjectList.length; i++){
                            var d = self.validDataObjectList[i];
                            if (query.term.trim()!=="") {
                                if(self.select2Matcher(query.term,d.name)) {
                                    if (query.term === d.name) { exactMatch = true; }
                                    data.results.push({id:d.name, text:d.name, info:d.info});
                                }
                                // search metadata too
                                else if (d.info[10]) {
                                    for(var key in d.info[10]) {
                                        if (d.info[10].hasOwnProperty(key)) {
                                            if(self.select2Matcher(query.term,d.info[10][key])) {
                                                data.results.push({id:d.name, text:d.name,
                                                                  mm:key+' - '+d.info[10][key],info:d.info});
                                                // allow us to show metadata match!
                                            }
                                        }
                                    }
                                }
                                
                            } else {
                                data.results.push({id:d.name, text:d.name, info:d.info});
                            }
                        }
                    }
                    
                    //always allow the name if it is set as an output name, unshift it to the front...
                    if (query.term.trim()!=="") {
                        if(self.isOutputName && !exactMatch) {
                            data.results.unshift({id:query.term, text:query.term});
                        }
                    }
                    
                    // paginate results
                    var pageSize = self.options.wsObjSelectPageSize;
                    query.callback({results:data.results.slice((query.page-1)*pageSize, query.page*pageSize),
                                more:data.results.length >= query.page*pageSize });
                },
                
                formatSelection: function(object, container) {
                    var display = '<span class="kb-parameter-data-selection">'+object.text+'</span>';
                    return display;
                },
                formatResult: function(object, container, query) {
                    var display = '<span style="word-wrap:break-word;"><b>'+object.text+"</b></span>";
                    if (object.info) {
                        // we can add additional info here in the dropdown ...
                        display = display + " (v" + object.info[4]+")<br>";
                        if (object.mm) {
                            display = display + "&nbsp&nbsp&nbsp<i>"+object.mm+"</i><br>";
                        }
                        display = display + "&nbsp&nbsp&nbsp<i>updated " + self.getTimeStampStr(object.info[3])+"</i>";
                    }
                    return display;
                }
            })
            .on("select2-selecting",
                function(e) {
                    $input.data('select2').kbaseHackLastSelection = e.choice;
                });
            
            if (defaultValue) {
                $input.select2("data",{id:defaultValue, text:defaultValue});
            }
        },
        /* private method */
        select2Matcher: function(term,text) {
            return text.toUpperCase().indexOf(term.toUpperCase())>=0;
        },
        
        /*
         * This is called when this method is run to allow you to check if the parameters
         * that the user has entered is correct.  You need to return an object that indicates
         * if the input is valid, or if not, if there are any error messages.  When this is
         * called, you should visually indicate which parameters are invalid by marking them
         * red (see kbaseNarrativeMethodInput for default styles).
         */
        isValid: function() {
            var self = this;
            if (!self.enabled) {
                return { isValid: true, errormssgs:[]}; // do not validate if disabled
            }
            var p= self.getParameterValue();
            if (p===null) { return { isValid: true, errormssgs:[]}; }
            var errorDetected = false;
            var errorMessages = [];
            if(p instanceof Array) {
            } else { p = [p]; }
            for(var i=0; i<p.length; i++) {
                var errorDetectedHere = false;
                if (p[i]===null) { continue; }
                pVal = p[i].trim();
                // if it is a required field and not empty, keep the required icon around but we have an error (only for the first element)
                if (pVal==='' && self.required && i===0) {
                    self.rowInfo[i].$row.removeClass("kb-method-parameter-row-error");
                    self.rowInfo[i].$feedback.removeClass().addClass('kb-method-parameter-required-glyph glyphicon glyphicon-arrow-left').prop("title","required field");
                    self.rowInfo[i].$feedback.show();
                    self.rowInfo[i].$error.hide();
                    errorDetectedHere = true;
                    errorMessages.push("required field "+self.spec.ui_name+" missing.");
                } else {
                    if(self.spec.text_options) {
                        if (self.spec.text_options.validate_as) {
                            var fieldtype = self.spec.text_options.validate_as;
                            // int | float | nonnumeric | nospaces | none
                            if ("int" === fieldtype.toLowerCase()) {
                                if (pVal!=='') {
                                    var n = ~~Number(pVal);
                                    if(String(n) !== pVal) {
                                        self.rowInfo[i].$row.addClass("kb-method-parameter-row-error");
                                        self.rowInfo[i].$error.html("value must be an integer");
                                        self.rowInfo[i].$error.show();
                                        self.rowInfo[i].$feedback.removeClass();
                                        errorDetectedHere = true;
                                        errorMessages.push("value must be an integer in field "+self.spec.ui_name);
                                    }
                                }
                            } else if ("float" === fieldtype.toLowerCase()) {
                                if(isNaN(pVal)) {
                                    self.rowInfo[i].$row.addClass("kb-method-parameter-row-error");
                                    self.rowInfo[i].$error.html("value must be numeric");
                                    self.rowInfo[i].$error.show();
                                    self.rowInfo[i].$feedback.removeClass();
                                    errorDetectedHere = true;
                                    errorMessages.push("value must be a number in field "+self.spec.ui_name);
                                }
                            }
                        }
                        if (self.spec.text_options.valid_ws_types) {
                            if(self.spec.text_options.valid_ws_types.length>0) {
                                if (/\s/.test(pVal)) {
                                    if (self.rowInfo[i]) {
                                        self.rowInfo[i].$row.addClass("kb-method-parameter-row-error");
                                        self.rowInfo[i].$error.html("spaces are not allowed in data object names");
                                        self.rowInfo[i].$error.show();
                                        self.rowInfo[i].$feedback.removeClass();
                                    }
                                    errorDetectedHere = true;
                                    errorMessages.push("spaces are not allowed in data object names, in field "+self.spec.ui_name);
                                } else if (/^\d+$/.test(pVal)) {
                                    if (self.rowInfo[i]) {
                                        self.rowInfo[i].$row.addClass("kb-method-parameter-row-error");
                                        self.rowInfo[i].$error.html("data object names cannot be a number");
                                        self.rowInfo[i].$error.show();
                                        self.rowInfo[i].$feedback.removeClass();
                                    }
                                    errorDetectedHere = true;
                                    errorMessages.push("data object names cannot be a number, in field "+self.spec.ui_name);
                                } else if (!/^[a-z0-9|\.|\||_\-]*$/i.test(pVal)) {
                                    if (self.rowInfo[i]) {
                                        self.rowInfo[i].$row.addClass("kb-method-parameter-row-error");
                                        self.rowInfo[i].$error.html("object names can only include symbols: _ - . |");
                                        self.rowInfo[i].$error.show();
                                        self.rowInfo[i].$feedback.removeClass();
                                    }
                                    errorDetectedHere = true;
                                    errorMessages.push("object names can only include symbols: '_','-','.','|', in field "+self.spec.ui_name);
                                }
                            }
                        }
                    }
                }
                
                // no error, so we hide the error if any, and show the "accepted" icon if it is not empty
                if (!errorDetectedHere || !self.enabled) {
                    if (self.rowInfo[i]) {
                        self.rowInfo[i].$row.removeClass("kb-method-parameter-row-error");
                        self.rowInfo[i].$error.hide();
                        self.rowInfo[i].$feedback.removeClass();
                        if (pVal!=='') {
                            self.rowInfo[i].$feedback.removeClass().addClass('kb-method-parameter-accepted-glyph glyphicon glyphicon-ok');
                        }
                    }
                } else {
                    if (pVal==='' && self.required && i===0) {
                        //code
                    } else {
                        self.rowInfo[i].$feedback.removeClass().addClass('kb-method-parameter-required-glyph glyphicon glyphicon-arrow-left');
                    }
                }
                if (errorDetectedHere) { errorDetected = true; }
            }
            return { isValid: !errorDetected, errormssgs:errorMessages};
        },
        
        /*
         * Necessary for Apps to disable editing parameters that are automatically filled
         * from a previous step.  Returns nothing.
         */
        disableParameterEditing: function() {
            // disable the input
            this.enabled = false;
            for(var i=0; i<this.rowInfo.length; i++) {
                if(this.isUsingSelect2) {
                    this.rowInfo[i].$input.select2('disable',true);
                } else {
                    this.rowInfo[i].$input.prop('disabled',true);
                }
                // stylize the row div
                this.rowInfo[i].$feedback.removeClass();
                if (this.rowInfo[i].$removalButton) { this.rowInfo[i].$removalButton.hide(); }
            }
            this.$addRowController.hide();
        },
        
        /*
         * Allows those parameters to be renabled, which may be an option for advanced users.
         */
        enableParameterEditing: function() {
            // enable the input
            this.enabled = true;
            for(var i=0; i<this.rowInfo.length; i++) {
                if(this.isUsingSelect2) {
                    this.rowInfo[i].$input.select2('enable',true);
                } else {
                    this.rowInfo[i].$input.prop('disabled', false);
                }
                if (this.rowInfo[i].$removalButton) { this.rowInfo[i].$removalButton.show(); }
            }
            this.$addRowController.show();
            this.isValid();
        },
        
        
        lockInputs: function() {
            if (this.enabled) {
                for(var i=0; i<this.rowInfo.length; i++) {
                    if(this.isUsingSelect2) {
                        this.rowInfo[i].$input.select2('disable',true);
                    } else {
                        this.rowInfo[i].$input.prop('disabled',true);
                    }
                }
            }
            for(var i=0; i<this.rowInfo.length; i++) {
                this.rowInfo[i].$feedback.removeClass();
                if (this.rowInfo[i].$removalButton) { this.rowInfo[i].$removalButton.hide(); }
            }
            this.$addRowController.hide();
        },
        unlockInputs: function() {
            if (this.enabled) {
                for(var i=0; i<this.rowInfo.length; i++) {
                    if(this.isUsingSelect2) {
                       this.rowInfo[i].$input.select2('enable',true);
                    } else {
                        this.rowInfo[i].$input.prop('disabled', false);
                    }
                    if (this.rowInfo[i].$removalButton) { this.rowInfo[i].$removalButton.show(); }
                }
            }
            this.$addRowController.show();
            this.isValid();
        },
        
        
        
        addInputListener: function(onChangeFunc) {
            if(this.isUsingSelect2) {
                this.$elem.find("#"+this.spec.id).on("change",onChangeFunc);
            } else {
                this.$elem.find("#"+this.spec.id).on("input",onChangeFunc);
            }
        },
        
        /*
         * An App (or a narrative that needs to auto populate certain fields) needs to set
         * specific parameter values based on the App spec, so we need a way to do this.
         */
        setParameterValue: function(value) {
            if (value===null) { return; }
            if(value instanceof Array) {
            } else { value = [value]; }
            
            for(var i=0; i<value.length; i++) {
                var v = value[i].trim();
                if (i<this.rowInfo.length) {
                    if(v) { this.setSpecificRowValue(i,v) };
                } else {
                    this.addRow();
                    if(v) { this.setSpecificRowValue(i,value[i]) };
                }
            }
            this.isValid();
        },
        
        setSpecificRowValue: function(i,value) {
            if(this.isUsingSelect2) {
                if (this.enabled) {
                    this.rowInfo[i].$input.select2("data",{id:value, text:value});
                } else {
                    this.rowInfo[i].$input.select2('disable',false);
                    this.rowInfo[i].$input.select2("data",{id:value, text:value});
                    this.rowInfo[i].$input.select2('disable',true);
                }
            } else {
                this.rowInfo[i].$input.val(value);
            }
            
        },
        
        /*
         * We need to be able to retrieve any parameter value from this method.  Valid parameter
         * values may be strings, numbers, objects, or lists, but must match what is declared
         * in the method spec.
         */
        getParameterValue: function() {
            // if this is an output, and there's only one row, and it's optional,
            // but it's not filled out, then we need a random name.
            if (this.spec.text_options && 
                this.spec.text_options.is_output_name === 1 && 
                this.rowInfo.length === 1 &&
                this.rowInfo[0].$input.val().length === 0 &&
                this.spec.optional === 1) {
//                this.setParameterValue(this.generateRandomOutputString());
            }
            
            // if this is optional, and not filled out, then we return null
            if (this.spec.optional === 1) {
                if (this.rowInfo.length===1) {
                    if (this.rowInfo[0].$input.val().trim().length===0) {
                        return null; // return null since this is optional an no values are set
                    }
                    if (this.allow_multiple) {
                        return [this.rowInfo[0].$input.val()];
                    }
                    return this.rowInfo[0].$input.val();
                }
                var value = [];
                for(var i=0; i<this.rowInfo.length; i++) {
                    if (this.rowInfo[0].$input.val().trim().length>0) {
                        value.push(this.rowInfo[i].$input.val()); // only push the value if it is not empty
                    }
                }
                if (value.length===0) { return null; } // return null since this is optional and nothing was set
                return value;
            }

            if (this.rowInfo.length===1) {
                if (this.allow_multiple) {
                    return [this.rowInfo[0].$input.val()];
                }
                return this.rowInfo[0].$input.val();
            }
            var value = [];
            for(var i=0; i<this.rowInfo.length; i++) {
                value.push(this.rowInfo[i].$input.val());
            }
            return value;
        },
        
        // edited from: http://stackoverflow.com/questions/3177836/how-to-format-time-since-xxx-e-g-4-minutes-ago-similar-to-stack-exchange-site
        getTimeStampStr: function (objInfoTimeStamp) {
            var date = new Date(objInfoTimeStamp);
            var seconds = Math.floor((new Date() - date) / 1000);
            
            // f-ing safari, need to add extra ':' delimiter to parse the timestamp
            if (isNaN(seconds)) {
                var tokens = objInfoTimeStamp.split('+');  // this is just the date without the GMT offset
                var newTimestamp = tokens[0] + '+'+tokens[0].substr(0,2) + ":" + tokens[1].substr(2,2);
                date = new Date(newTimestamp);
                seconds = Math.floor((new Date() - date) / 1000);
                if (isNaN(seconds)) {
                    // just in case that didn't work either, then parse without the timezone offset, but
                    // then just show the day and forget the fancy stuff...
                    date = new Date(tokens[0]);
                    return this.monthLookup[date.getMonth()]+" "+date.getDate()+", "+date.getFullYear();
                }
            }
            var interval = Math.floor(seconds / 31536000);
            if (interval > 1) {
                return self.monthLookup[date.getMonth()]+" "+date.getDate()+", "+date.getFullYear();
            }
            interval = Math.floor(seconds / 2592000);
            if (interval > 1) {
                if (interval<4) {
                    return interval + " months";
                } else {
                    return this.monthLookup[date.getMonth()]+" "+date.getDate()+", "+date.getFullYear();
                }
            }
            interval = Math.floor(seconds / 86400);
            if (interval > 1) {
                return interval + " days ago";
            }
            interval = Math.floor(seconds / 3600);
            if (interval > 1) {
                return interval + " hours ago";
            }
            interval = Math.floor(seconds / 60);
            if (interval > 1) {
                return interval + " minutes ago";
            }
            return Math.floor(seconds) + " seconds ago";
        },
        
        monthLookup : ["Jan", "Feb", "Mar","Apr", "May", "Jun", "Jul", "Aug", "Sep","Oct", "Nov", "Dec"],
        
        // make a randomized string, assuming it's for an output.
        generateRandomOutputString: function(generProps) {
            var strArr = [];
            var symbols = 8
            if (generProps['symbols'])
                symbols = generProps['symbols'];
            for (var i=0; i<symbols; i++)
                strArr.push(String.fromCharCode(65 + Math.floor(Math.random() * 26)));
            var ret = strArr.join('');
            if (generProps['prefix'])
                ret = generProps['prefix'] + ret;
            if (generProps['suffix'])
                ret = ret + str(generProps['suffix']);
            return ret;
        },

        prepareValueBeforeRun: function(methodSpec) {
            if (this.spec.text_options && 
                    this.spec.text_options.is_output_name === 1 && 
                    this.rowInfo.length === 1 &&
                    this.rowInfo[0].$input.val().length === 0 &&
                    this.spec.optional === 1) {
            	//var e = new Error('dummy');
            	//var stack = e.stack.replace(/^[^\(]+?[\n$]/gm, '')
            	//	.replace(/^\s+at\s+/gm, '')
            	//	.replace(/^Object.<anonymous>\s*\(/gm, '{anonymous}()@')
            	//	.split('\n');
            	//console.log(stack);
            	var paramId = this.spec.id;
                var inputMapping = null;
                var isScript = false;
                var inputMapping = methodSpec['behavior']['kb_service_input_mapping'];
                if (!inputMapping) {
                    inputMapping = methodSpec['behavior']['script_input_mapping'];
                    isScript = true;
                }
                var generatedValueMapping = null;
                for (var i in inputMapping) {
                	mapping = inputMapping[i];
                    var aParamId = mapping['input_parameter'];
                    if (aParamId && aParamId === paramId && mapping['generated_value']) {
                    	generatedValueMapping = mapping['generated_value'];
                    	break;
                    }
                }
                if (generatedValueMapping) {
                	this.setParameterValue(this.generateRandomOutputString(generatedValueMapping));
                }
            }
        },

        genUUID: function() {
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
                var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);
                return v.toString(16);
            });
        },
    });
    

})( jQuery );
/**
 * @author Bill Riehl <wjriehl@lbl.gov>
 * @public
 */

(function( $, undefined ) {
    $.KBWidget({
        name: "kbaseNarrativeParameterDropdownInput",
        parent: "kbaseNarrativeParameterInput",
        version: "1.0.0",
        options: {
            loadingImage: "../images/ajax-loader.gif",
            parsedParameterSpec: null,
            isInSidePanel: false
        },
        IGNORE_VERSION: true,

        // properties inherited from kbaseNarrativeParameterInput
        // $mainPanel:null,
        // spec:null,
        
        enabled: true,
        required: true,
        rowDivs: null,
        
        render: function() {
            var self = this;
            //console.log(this.spec);
            var spec = self.spec;
            
            // check if we need to allow multiple values
            var allow_multiple = false;
            if (spec.allow_multiple) {
                if (spec.allow_multiple===true || spec.allow_multiple===1) {
                    allow_multiple = true;
                }
            }
            
            self.rowDivs = [];
            if (!allow_multiple) {
                // just one field, phew, this one should be easy    
                var d = spec.default_values;
                self.required= true;
                if (spec.optional===1) {
                    self.required = false;
                }
                
                var defaultValue = (d[0] !== "" && d[0] !== undefined) ? d[0] : "";
                var form_id = spec.id;
                var $dropdown= $('<select id="'+form_id+'">').css({width:"100%"})
                                .on("change",function() { self.isValid() });
                
                if (d && d.length>0 && d[0]==="" && !self.required) {
                    // we assume that if there is a single value set as empty, and this is optional, we allow an
                    // empty selection which ends up getting omitted from the params on the backend
                    // annoying select two removes my option if it is left blank!! must disguise it!
                    $dropdown.append($('<option value="">').append('-'));
                }
                
                
                var foundOptions = false;
                /* HOW IT SHOULD BE!!! */
                  if(spec.dropdown_options) {
                    if (spec.dropdown_options.options) {
                        for (var k=0; k<spec.dropdown_options.options.length; k++) {
                            var opt = spec.dropdown_options.options[k];
                            if (opt.id && opt.ui_name) {
                                $dropdown.append($('<option value="'+opt.id+'">').append(opt.ui_name));
                                foundOptions = true;
                            } else if (opt.value && opt.display) {  // id was misnamed, should have been value
                                $dropdown.append($('<option value="'+opt.value+'">').append(opt.display));
                                foundOptions = true;
                            }
                        }
                    }
                }
                if(spec.dropdown_options) {
                    if (spec.dropdown_options.ids_to_options) {
                        $dropdown.empty();
                        for (var optId in spec.dropdown_options.ids_to_options) {
                            if(spec.dropdown_options.ids_to_options.hasOwnProperty(optId)){
                                var opt = spec.dropdown_options.ids_to_options[optId];
                                $dropdown.append($('<option value="'+optId+'">').append(opt));
                                foundOptions = true;
                            }
                        }
                    }
                }
                
                if (!foundOptions) {
                    $dropdown.append($('<option value="">').append("no options found in method spec"));
                }
                
                var $feedbackTip = $("<span>").removeClass();
                if (self.required) {
                    $feedbackTip.addClass('kb-method-parameter-required-glyph glyphicon glyphicon-arrow-left').prop("title","required field");
                }
                
                // set the widths of the columns
                var nameColClass  = "col-md-2";
                var inputColClass = "col-md-5";
                var hintColClass  = "col-md-5";
                if (self.options.isInSidePanel) {
                	nameColClass  = "col-md-12";
                    inputColClass = "col-md-12";
                    hintColClass  = "col-md-12";
                }
                
                var $row = $('<div>').addClass("row kb-method-parameter-row")
                                .hover(function(){$(this).toggleClass('kb-method-parameter-row-hover');});
                var $nameCol = $('<div>').addClass(nameColClass).addClass("kb-method-parameter-name")
                                    .append(spec.ui_name);
                if (self.options.isInSidePanel)
                	$nameCol.css({'text-align': 'left', 'padding-left': '10px'});
                var $inputCol = $('<div>').addClass(inputColClass).addClass("kb-method-parameter-input")
                                .append($('<div>').css({"width":"100%","display":"inline-block"}).append($dropdown))
                                .append($('<div>').css({"display":"inline-block"}).append($feedbackTip));
                var $hintCol  = $('<div>').addClass(hintColClass).addClass("kb-method-parameter-hint")
                                .append(spec.short_hint);
                if (spec.description && spec.short_hint !== spec.description) {
                    $hintCol.append($('<span>').addClass('fa fa-info kb-method-parameter-info')
                                    .tooltip({title:spec.description, html:true}));
                }
                $row.append($nameCol).append($inputCol).append($hintCol);
                
                var $errorPanel = $('<div>').addClass("kb-method-parameter-error-mssg").hide();
                var $errorRow = $('<div>').addClass('row')
                                    .append($('<div>').addClass(nameColClass))
                                    .append($errorPanel.addClass(inputColClass));
                
                self.$mainPanel.append($row);
                self.$mainPanel.append($errorRow);
                self.rowDivs.push({$row:$row, $error:$errorPanel, $feedback:$feedbackTip});
                
                /* for some reason, we need to actually have the input added to the main panel before this will work */
                this.setupSelect2($dropdown,"",defaultValue);
                
                // for dropdowns, we always validate (because it adds the green check feedback)
                this.isValid();
                
            } else {
                // need to handle multiple fields- do something better!
                self.$mainPanel.append("<div>multiple dropdown fields not yet supported</div>");
            }
        },
        
        
        refresh: function() {
            // we don't allow types to be displayed, so we don't have to refresh
        },

        
        /* private method - note: if placeholder is empty, then users cannot cancel a selection*/
        setupSelect2: function ($input, placeholder, defaultValue) {
            var self = this;
            var noMatchesFoundStr = "No matching data found.";
            if (self.isOutputName) {
                noMatchesFoundStr = "Enter a name for the output data object.";
            }
            $input.select2({
                minimumResultsForSearch: -1,
                selectOnBlur: true,
                //placeholder:placeholder,
                //allowClear: true,
                formatSelection: function(object, container) {
                    var display = '<span class="kb-parameter-data-selection">'+object.text+'</span>';
                    return display;
                },
                //formatResult: function(object, container, query) {
                //    var display = "<b>"+object.text+"</b>";
                //    return display;
                //}
            });
            
            if (defaultValue) {
                $input.select2("val",defaultValue);
            }
        },
        
        /*
         * This is called when this method is run to allow you to check if the parameters
         * that the user has entered is correct.  You need to return an object that indicates
         * if the input is valid, or if not, if there are any error messages.  When this is
         * called, you should visually indicate which parameters are invalid by marking them
         * red (see kbaseNarrativeMethodInput for default styles).
         */
        isValid: function() {
            var self = this;
            if (!self.enabled) {
                return { isValid: true, errormssgs:[]}; // do not validate if disabled
            }
            var p= self.getParameterValue();
            var errorDetected = false;
            var errorMessages = [];
            if(p instanceof Array) {
                // todo: handle this case when there are multiple fields
            } else {
                if (p) {
                    p = p.trim();
                    // if it is a required selection and is empty, keep the required icon around but we have an error
                    if (p==='' && self.required) {
                        self.rowDivs[0].$row.removeClass("kb-method-parameter-row-error");
                        self.rowDivs[0].$feedback.removeClass().addClass('kb-method-parameter-required-glyph glyphicon glyphicon-arrow-left').prop("title","required field");
                        self.rowDivs[0].$feedback.show();
                        self.rowDivs[0].$error.hide();
                        errorDetected = true;
                        errorMessages.push("required field "+self.spec.ui_name+" missing.");
                    }
                    
                    // no error, so we hide the error if any, and show the "accepted" icon if it is not empty
                    if (!errorDetected) {
                        if (self.rowDivs[0]) {
                            self.rowDivs[0].$row.removeClass("kb-method-parameter-row-error");
                            self.rowDivs[0].$error.hide();
                            self.rowDivs[0].$feedback.removeClass();
                            if (p!=='') {
                                self.rowDivs[0].$feedback.removeClass().addClass('kb-method-parameter-accepted-glyph glyphicon glyphicon-ok');
                            }
                        }
                    }
                } else {
                    // something went wrong...  possibly no options set in the spec?
                }
            }
            return { isValid: !errorDetected, errormssgs:errorMessages};
        },
        
        /*
         * Necessary for Apps to disable editing parameters that are automatically filled
         * from a previous step.  Returns nothing.
         */
        disableParameterEditing: function() {
            // disable the input
            this.enabled = false;
            this.$elem.find("#"+this.spec.id).select2('disable',true);
            // stylize the row div
            if (this.rowDivs) {
                this.rowDivs[0].$feedback.removeClass();
            }
        },
        
        /*
         * Allows those parameters to be renabled, which may be an option for advanced users.
         */
        enableParameterEditing: function() {
            // enable the input
            this.enabled = true;
            this.$elem.find("#"+this.spec.id).select2('enable',true);
            this.isValid();
        },
        
        
        lockInputs: function() {
            if (this.enabled) {
                this.$elem.find("#"+this.spec.id).select2('disable',true);
            }
            // stylize the row div
            if (this.rowDivs) {
                this.rowDivs[0].$feedback.removeClass();
            }
        },
        unlockInputs: function() {
            if (this.enabled) {
                this.$elem.find("#"+this.spec.id).select2('enable',true);
            }
            this.isValid();
        },
        
        
        
        addInputListener: function(onChangeFunc) {
            this.$elem.find("#"+this.spec.id).on("change",onChangeFunc);
        },
        
        /*
         * An App (or a narrative that needs to auto populate certain fields) needs to set
         * specific parameter values based on the App spec, so we need a way to do this.
         */
        setParameterValue: function(value) {
            // todo: handle case where this is a multiple, we need to check if value array matches number of elements,
            // and if not we must do something special   ...
            if (this.enabled) {
                this.$elem.find("#"+this.spec.id).select2("val",value);
            } else {
                this.$elem.find("#"+this.spec.id).select2('disable',false);
                this.$elem.find("#"+this.spec.id).select2("val",value);
                this.$elem.find("#"+this.spec.id).select2('disable',true);
            }
            this.isValid();
        },
        
        /*
         * We need to be able to retrieve any parameter value from this method.  Valid parameter
         * values may be strings, numbers, objects, or lists, but must match what is declared
         * in the method spec.
         */
        getParameterValue: function() {
            var value = this.$elem.find("#"+this.spec.id).val();
            if (value==="") {
                return null;
            }
            return value;
        }
        
    });

})( jQuery );
/**
 * @author Bill Riehl <wjriehl@lbl.gov>
 * @public
 */

(function( $, undefined ) {
    $.KBWidget({
        name: "kbaseNarrativeParameterCheckboxInput",
        parent: "kbaseNarrativeParameterInput",
        version: "1.0.0",
        options: {
            loadingImage: "../images/ajax-loader.gif",
            parsedParameterSpec: null,
            isInSidePanel: false
        },
        IGNORE_VERSION: true,

        // properties inherited from kbaseNarrativeParameterInput
        // $mainPanel:null,
        // spec:null,
        
        enabled: true,
        required: true,
        rowDivs: null,
        
        checkedValue: 1,
        uncheckedValue: 0,
        
        render: function() {
            var self = this;
            var spec = self.spec;
            // check if we need to allow multiple values
            var allow_multiple = false;
            if (spec.allow_multiple) {
                if (spec.allow_multiple===true || spec.allow_multiple===1) {
                    allow_multiple = true;
                }
            }
            
            self.rowDivs = [];
            if (!allow_multiple) {
                // just one field, phew, this one should be easy    
                var d = spec.default_values;
                
                // check if this is a required field
                self.required= true;
                if (spec.optional) {
                    self.required=false;
                }
                
                var defaultValue = (d[0] !== "" && d[0] !== undefined) ? d[0] : "";
                var form_id = spec.id;
                var $checkboxContainer = $('<div>').addClass('checkbox').css({width:"100%"});
                var $checkbox= $('<input id="'+form_id+'" type="checkbox">')
                                .on("change",function() { self.isValid() });
                    $checkboxContainer.append($('<label>').addClass('kb-method-parameter-name').append($checkbox).append(spec.ui_name));
                
                if(spec.checkbox_options) {
                    if (spec.checkbox_options.checked_value) {
                        self.checkedValue = spec.checkbox_options.checked_value;
                    }
                    if (spec.checkbox_options.unchecked_value) {
                        self.uncheckedValue = spec.checkbox_options.unchecked_value;
                    }
                }
                
                var $feedbackTip = $("<span>").removeClass();
                if (self.required) {
                    // never add required on startup because checkboxes are always checked or not and are good
                    $feedbackTip.addClass('kb-method-parameter-required-glyph glyphicon glyphicon-arrow-left').prop("title","required field");
                }
                
                // set the widths of the columns
                var nameColClass  = "col-md-2";
                var inputColClass = "col-md-5";
                var hintColClass  = "col-md-5";
                if (self.options.isInSidePanel) {
                	nameColClass  = "col-md-12";
                    inputColClass = "col-md-12";
                    hintColClass  = "col-md-12";
                }
                
                var $row = $('<div>').addClass("row kb-method-parameter-row")
                                .hover(function(){$(this).toggleClass('kb-method-parameter-row-hover');});
                var $nameCol = $('<div>').addClass(nameColClass).addClass("kb-method-parameter-name");
                if (self.options.isInSidePanel)
                	$nameCol.css({'text-align': 'left', 'padding-left': '10px'});
                var $inputCol = $('<div>').addClass(inputColClass).addClass("kb-method-parameter-input")
                                .append($('<div>').css({"width":"100%","display":"inline-block"}).append($checkboxContainer))
                                .append($('<div>').css({"display":"inline-block"}).append($feedbackTip));
                var $hintCol  = $('<div>').addClass(hintColClass).addClass("kb-method-parameter-hint")
                                .append(spec.short_hint);
                if (spec.description && spec.short_hint !== spec.description) {
                    $hintCol.append($('<span>').addClass('fa fa-info kb-method-parameter-info')
                                    .tooltip({title:spec.description, html:true}));
                }
                                
                $row.append($nameCol).append($inputCol).append($hintCol);
                
                var $errorPanel = $('<div>').addClass("kb-method-parameter-error-mssg").hide();
                var $errorRow = $('<div>').addClass('row')
                                    .append($('<div>').addClass(nameColClass))
                                    .append($errorPanel.addClass(inputColClass));
                
                self.$mainPanel.append($row);
                self.$mainPanel.append($errorRow);
                self.rowDivs.push({$row:$row, $error:$errorPanel, $feedback:$feedbackTip});
                if (defaultValue) {
                    self.setParameterValue(defaultValue);
                }
                
            } else {
                // need to handle multiple fields- do something better!
                self.$mainPanel.append("<div>multiple dropdown fields not yet supported</div>");
            }
        },
        
        
        refresh: function() {
            // checkboxes don't need to refresh
        },

        /*
         * This is called when this method is run to allow you to check if the parameters
         * that the user has entered is correct.  You need to return an object that indicates
         * if the input is valid, or if not, if there are any error messages.  When this is
         * called, you should visually indicate which parameters are invalid by marking them
         * red (see kbaseNarrativeMethodInput for default styles).
         */
        isValid: function() {
            var self = this;
            if (!self.enabled) {
                return { isValid: true, errormssgs:[]}; // do not validate if disabled
            }
            var p= self.getParameterValue();
            if(p instanceof Array) {
                // todo: handle this case when there are multiple fields
            } else {
                // but we should still provide the feedback indicate
                if (self.enabled) {
                    if (self.rowDivs[0]) {
                        self.rowDivs[0].$feedback.removeClass();
                        self.rowDivs[0].$feedback.removeClass().addClass('kb-method-parameter-accepted-glyph glyphicon glyphicon-ok');
                    }
                }
            }
            // checkboxes are always valid!
            return { isValid: true, errormssgs:[]};
        },
        
        /*
         * Necessary for Apps to disable editing parameters that are automatically filled
         * from a previous step.  Returns nothing.
         */
        disableParameterEditing: function() {
            // disable the input
            this.enabled = false;
            this.$elem.find("#"+this.spec.id).prop('disabled',true);
            // stylize the row div
            if (this.rowDivs) {
                this.rowDivs[0].$feedback.removeClass();
            }
        },
        
        /*
         * Allows those parameters to be renabled, which may be an option for advanced users.
         */
        enableParameterEditing: function() {
            // enable the input
            this.enabled = true;
            this.$elem.find("#"+this.spec.id).prop('disabled',false);
            this.isValid();
        },
        
        
        lockInputs: function() {
            if (this.enabled) {
                this.$elem.find("#"+this.spec.id).prop('disabled',true);
            }
            // stylize the row div
            if (this.rowDivs) {
                this.rowDivs[0].$feedback.removeClass();
            }
        },
        unlockInputs: function() {
            if (this.enabled) {
            this.$elem.find("#"+this.spec.id).prop('disabled',false);
            }
            this.isValid();
        },
        
        
        
        addInputListener: function(onChangeFunc) {
            this.$elem.find("#"+this.spec.id).on("change",onChangeFunc);
        },
        
        /*
         * An App (or a narrative that needs to auto populate certain fields) needs to set
         * specific parameter values based on the App spec, so we need a way to do this.
         */
        setParameterValue: function(value) {
            // todo: handle case where this is a multiple, we need to check if value array matches number of elements,
            // and if not we must do something special   ...
            if(value == this.checkedValue) {
                this.$elem.find("#"+this.spec.id).prop('checked', true);
            } else if (value == this.uncheckedValue) {
                this.$elem.find("#"+this.spec.id).prop('checked', false);
            } else if(value === true) {
                this.$elem.find("#"+this.spec.id).prop('checked', true);
            } else if(value === false) {
                this.$elem.find("#"+this.spec.id).prop('checked', false);
            } else if(value === "checked") {
                this.$elem.find("#"+this.spec.id).prop('checked', true);
            } else if(value === "unchecked") {
                this.$elem.find("#"+this.spec.id).prop('checked', false);
            }
            
            this.isValid();
        },
        
        /*
         * We need to be able to retrieve any parameter value from this method.  Valid parameter
         * values may be strings, numbers, objects, or lists, but must match what is declared
         * in the method spec.
         */
        getParameterValue: function() {
            // handle case with multiple fields
            if(this.$elem.find("#"+this.spec.id).prop('checked')) {
                return this.checkedValue;
            } else {
                return this.uncheckedValue;
            }
            return "";
        }
        
    });

})( jQuery );
/**
 * @author Bill Riehl <wjriehl@lbl.gov>
 * @public
 */

(function( $, undefined ) {
    $.KBWidget({
        name: "kbaseNarrativeParameterTextareaInput",
        parent: "kbaseNarrativeParameterInput",
        version: "1.0.0",
        options: {
            loadingImage: "../images/ajax-loader.gif",
            parsedParameterSpec: null,
            isInSidePanel: false
        },
        IGNORE_VERSION: true,

        // properties inherited from kbaseNarrativeParameterInput
        // $mainPanel:null,
        // spec:null,
        
        enabled: true,
        required: true,
        rowDivs: null,
        
        render: function() {
            var self = this;
            var spec = self.spec;
            
            // check if we need to allow multiple values
            var allow_multiple = false;
            if (spec.allow_multiple) {
                if (spec.allow_multiple===true || spec.allow_multiple===1) {
                    allow_multiple = true;
                }
            }
            
            self.rowDivs = [];
            if (!allow_multiple) {
                // just one field, phew, this one should be easy    
                var d = spec.default_values;
                
                // check if this is a required field
                self.required= true;
                if (spec.optional) {
                    self.required=false;
                }
                
                var defaultValue = (d[0] !== "" && d[0] !== undefined) ? d[0] : "";
                var form_id = spec.id;
                
                var rows = 3;
                if(spec.textarea_options) {
                    if (spec.textarea_options.n_rows) {
                        rows = spec.textarea_options.n_rows;
                    }
                }
                var $textArea= $('<textarea id="'+form_id+'" rows="'+ rows +'">').addClass("form-control")
                                .css({width:"100%",resize:"vertical"})
                                .append(defaultValue)
                                .on("input",function() { self.isValid() });
                
                var $feedbackTip = $("<span>").removeClass();
                if (self.required) {
                    $feedbackTip.addClass('kb-method-parameter-required-glyph glyphicon glyphicon-arrow-left').prop("title","required field");
                }
                
                // set the widths of the columns
                var nameColClass  = "col-md-2";
                var inputColClass = "col-md-5";
                var hintColClass  = "col-md-5";
                if (self.options.isInSidePanel) {
                    nameColClass  = "col-md-12";
                    inputColClass = "col-md-12";
                    hintColClass  = "col-md-12";
                }
                
                var $row = $('<div>').addClass("row kb-method-parameter-row")
                                .hover(function(){$(this).toggleClass('kb-method-parameter-row-hover');});
                var $nameCol = $('<div>').addClass(nameColClass).addClass("kb-method-parameter-name")
                                    .append(spec.ui_name);
                if (self.options.isInSidePanel)
                	$nameCol.css({'text-align': 'left', 'padding-left': '10px'});
                var $inputCol = $('<div>').addClass(inputColClass).addClass("kb-method-parameter-input")
                                .append($('<div>').css({"width":"100%","display":"inline-block"}).append($textArea))
                                .append($('<div>').css({"display":"inline-block"}).append($feedbackTip));
                var $hintCol  = $('<div>').addClass(hintColClass).addClass("kb-method-parameter-hint")
                                .append(spec.short_hint);
		if (spec.description && spec.short_hint !== spec.description) {
		    $hintCol.append($('<span>').addClass('fa fa-info kb-method-parameter-info')
					.tooltip({title:spec.description, html:true}));
		}
                $row.append($nameCol).append($inputCol).append($hintCol);
                
                var $errorPanel = $('<div>').addClass("kb-method-parameter-error-mssg").hide();
                var $errorRow = $('<div>').addClass('row')
                                    .append($('<div>').addClass(nameColClass))
                                    .append($errorPanel.addClass(inputColClass));
                
                self.$mainPanel.append($row);
                self.$mainPanel.append($errorRow);
                self.rowDivs.push({$row:$row, $error:$errorPanel, $feedback:$feedbackTip});
                
                this.isValid();
                
            } else {
                // need to handle multiple fields- do something better!
                self.$mainPanel.append("<div>multiple dropdown fields not yet supported</div>");
            }
        },
        
        
        refresh: function() {
            // we don't allow types in textareas, so we don't have to refresh
        },

        
        
        
        /*
         * This is called when this method is run to allow you to check if the parameters
         * that the user has entered is correct.  You need to return an object that indicates
         * if the input is valid, or if not, if there are any error messages.  When this is
         * called, you should visually indicate which parameters are invalid by marking them
         * red (see kbaseNarrativeMethodInput for default styles).
         */
        isValid: function() {
            var self = this;
            if (!self.enabled) {
                return { isValid: true, errormssgs:[]}; // do not validate if disabled
            }
            var p= self.getParameterValue();
	    if (p===null) { return { isValid: true, errormssgs:[]}; }
            var errorDetected = false;
            var errorMessages = [];
            if(p instanceof Array) {
                // todo: handle this case when there are multiple fields
            } else {
                p = p.trim();
                // if it is a required selection and is empty, keep the required icon around but we have an error
                if (p==='' && self.required) {
                    self.rowDivs[0].$row.removeClass("kb-method-parameter-row-error");
                    self.rowDivs[0].$feedback.removeClass().addClass('kb-method-parameter-required-glyph glyphicon glyphicon-arrow-left').prop("title","required field");
                    self.rowDivs[0].$feedback.show();
                    self.rowDivs[0].$error.hide();
                    errorDetected = true;
                    errorMessages.push("required field "+self.spec.ui_name+" missing.");
                }
                
                // no error, so we hide the error if any, and show the "accepted" icon if it is not empty
                if (!errorDetected) {
                    if (self.rowDivs[0]) {
                        self.rowDivs[0].$row.removeClass("kb-method-parameter-row-error");
                        self.rowDivs[0].$error.hide();
                        self.rowDivs[0].$feedback.removeClass();
                        if (p!=='') {
                            self.rowDivs[0].$feedback.removeClass().addClass('kb-method-parameter-accepted-glyph glyphicon glyphicon-ok');
                        }
                    }
                }
            }
            return { isValid: !errorDetected, errormssgs:errorMessages};
        },
        
        /*
         * Necessary for Apps to disable editing parameters that are automatically filled
         * from a previous step.  Returns nothing.
         */
        disableParameterEditing: function() {
            // disable the input
            this.enabled = false;
            this.$elem.find("#"+this.spec.id).prop('disabled',true);
            // stylize the row div
            if (this.rowDivs) {
                this.rowDivs[0].$feedback.removeClass();
            }
        },
        
        /*
         * Allows those parameters to be renabled, which may be an option for advanced users.
         */
        enableParameterEditing: function() {
            // enable the input
            this.enabled = true;
            this.$elem.find("#"+this.spec.id).prop('disabled', false);
            this.isValid();
        },
        
        
        lockInputs: function() {
            if (this.enabled) {
                this.$elem.find("#"+this.spec.id).prop('disabled',true);
            }
            // stylize the row div
            if (this.rowDivs) {
                this.rowDivs[0].$feedback.removeClass();
            }
        },

        unlockInputs: function() {
            if (this.enabled) {
                this.$elem.find("#"+this.spec.id).prop('disabled',false);
            }
            this.isValid();
        },
        
        addInputListener: function(onChangeFunc) {
            this.$elem.find("#"+this.spec.id).on("input",onChangeFunc);
        },
        
        /*
         * An App (or a narrative that needs to auto populate certain fields) needs to set
         * specific parameter values based on the App spec, so we need a way to do this.
         */
        setParameterValue: function(value) {
            // todo: handle case where this is a multiple, we need to check if value array matches number of elements,
            // and if not we must do something special   ...
            this.$elem.find("#"+this.spec.id).val(value);
            this.isValid();
        },
        
        /*
         * We need to be able to retrieve any parameter value from this method.  Valid parameter
         * values may be strings, numbers, objects, or lists, but must match what is declared
         * in the method spec.
         */
        getParameterValue: function() {
            var value = this.$elem.find("#"+this.spec.id).val();
	    if (this.spec.optional === 1) {
		if (value.trim().length===0) {
		    return null;
		}
	    }
            return value;
        }
        
    });

})( jQuery );
/**
 * KBase widget to upload file content into shock node.
 */
(function($, undefined) {
    $.KBWidget({
        name: 'kbaseNarrativeParameterFileInput',
        parent: "kbaseNarrativeParameterInput",
        version: '1.0.0',
        options: {
        	isInSidePanel: false,
            shockUrl: window.kbconfig.urls.shock,
            ujsUrl: window.kbconfig.urls.user_and_job_state,
            fullShockSearchToResume: false,
            serviceNameInUJS: "ShockUploader",
            maxFileStatesInUJS: 100,
            maxFileStateTime: 7 * 24 * 3600000	// in milliseconds
        },
        wrongToken: false,
        token: null,
        shockNodeId: null,
        fileName: null,
        percentText: null,
        uploadIsReady: false,
        uploadWasStarted: false,
        enabled: true,
        locked: false,
        required: true,
        rowDivs: null,
        fakeButton: null,
        inSelectFileMode: true,
        cancelUpload: false,

        render: function() {
        	if (!this.token) {
        		this.wrongToken = true;
        		return;
        	}
            var self = this;
            var spec = self.spec;

            self.rowDivs = [];
            self.required = true;
            if (spec.optional) {
                self.required = false;
            }

        	var pref = this.uuid();
            //var div = this.$elem;
        	
            var tbl = $('<table style="border: 0px; margin: 0px; cellpadding: 0px; cellspacing: 0px; width: 100%;"/>');
            //div.append(tbl);
            var tr = $('<tr/>');
            var cellCss = { 'border' : 'none', 'vertical-align' : 'middle' };
            tr.css(cellCss);
            tbl.append(tr);
            			
            this.fileName = $('<input readonly>')
            	.addClass('form-control')
            	.css({'width' : '100%'})
            	.attr('type', 'text');
            var percentTextWidth = '50px';
            if (self.options.isInSidePanel)
                percentTextWidth = '100px';
            this.percentText = $('<input readonly>')
            	.addClass('form-control')
            	.css({'width' : percentTextWidth, 'padding': '0px', 'text-align': 'center'})
            	.attr('type', 'text');

            // create a file upload button and hide it and store it
            var realButton = document.createElement('input');
            realButton.setAttribute('type', 'file');
            realButton.setAttribute('style', 'display: none;');
            realButton.addEventListener('change', function() { 
            	var fileName = $(realButton).val();
            	if (fileName && fileName.length > 0)
            		self.fileSelected(self.fileName, self.percentText, realButton);
            });
            realButton.uploader = this;
            //this.fileBrowse = realButton;
            this.$elem.append(realButton);
            
            
            
            // create the visible upload button
            this.fakeButton = document.createElement('button');
            this.fakeButton.setAttribute('class', 'kb-primary-btn');
            this.selectFileMode(true);
            this.fakeButton.fb = realButton;
            this.fakeButton.addEventListener('click', function() {
            	if (self.locked || !self.enabled)
            		return;
            	if (self.inSelectFileMode) {
            		$(this.fb).val("");
            		this.fb.click();
            	} else {
            		self.cancelUpload = true;
                    self.selectFileMode(true);
                    self.uploadWasStarted = false;
            	}
            });
            $(this.fakeButton);
            var td2 = $('<td/>');
            td2.css(cellCss);
            tr.append(td2);
            td2.append(this.fakeButton);
	    
	    var td = $('<td/>');
            td.css(cellCss);
            td.css({'width' : '70%', 'padding' : '0px', 'margin':'2px'});
            tr.append(td);
            td.append(this.fileName);

            var td3 = $('<td/>');
            td3.css(cellCss);
            td3.css({'width' : percentTextWidth, 'padding' : '0px'});
            tr.append(td3);
            td3.append(this.percentText);
            
            var $feedbackTip = $("<span>").css({"vertical-align":"middle"}).removeClass();
            if (self.required) {
                $feedbackTip.addClass('kb-method-parameter-required-glyph glyphicon glyphicon-arrow-left').prop("title","required field");
            }

            var nameColClass  = "col-md-2";
            var inputColClass = "col-md-5";
            var hintColClass  = "col-md-5";
            if (self.options.isInSidePanel) {
            	nameColClass = "col-md-12";
                inputColClass = "col-md-12";
                hintColClass  = "col-md-12";
            }

            var $row = $('<div>').addClass("row kb-method-parameter-row")
            	.hover(function(){$(this).toggleClass('kb-method-parameter-row-hover');});
            var $nameCol = $('<div>').addClass(nameColClass).addClass("kb-method-parameter-name")
            	.append(spec.ui_name);
            if (self.options.isInSidePanel)
            	$nameCol.css({'text-align': 'left', 'padding-left': '10px'});
            var $inputCol = $('<div>').addClass(inputColClass).addClass("kb-method-parameter-input")
            	.append($('<div>').css({"width":"100%","display":"inline-block"}).append(tbl))
            	.append($('<div>').css({"display":"inline-block", "height": "34px", "vertical-align":"top"}).append($feedbackTip));
            var $hintCol = $('<div>').addClass(hintColClass).addClass("kb-method-parameter-hint")
            	.append(spec.short_hint);
	    if (spec.description && spec.short_hint !== spec.description) {
                $hintCol.append($('<span>').addClass('fa fa-info kb-method-parameter-info')
                                    .tooltip({title:spec.description, html:true}));
            }
            $row.append($nameCol).append($inputCol).append($hintCol);

            var $errorPanel = $('<div>').addClass("kb-method-parameter-error-mssg").hide();
            var $errorRow = $('<div>').addClass('row')
            	.append($('<div>').addClass(nameColClass))
            	.append($errorPanel.addClass(inputColClass));

            self.$mainPanel.append($row);
            self.$mainPanel.append($errorRow);
            self.rowDivs.push({$row:$row, $error:$errorPanel, $feedback:$feedbackTip});
            return this;
        },
        
        selectFileMode: function(inSelectFileMode) {
            this.inSelectFileMode = inSelectFileMode;
            this.fakeButton.innerHTML = inSelectFileMode ? "Select File" : "Cancel";
        },
        
        fileSelected: function (nameText, prcText, realButton) {
        	if (realButton.files.length != 1)
        		return;
            var self = this;
            var prevShockNodeId = self.shockNodeId;
            self.shockNodeId = null;
            self.uploadIsReady = false;
            self.uploadWasStarted = true;
    		self.isValid();
        	// get the selected file
        	var file = realButton.files[0];
        	self.fileName.val(file.name);
    		prcText.val("?..%");
            var curTime = new Date().getTime();
    		var ujsKey = "File:"+file.size+":"+file.lastModifiedDate.getTime()+":"+file.name+":"+self.getUser();
            var ujsClient = new UserAndJobState(self.options.ujsUrl, {'token': self.token});
        	var shockClient = new ShockClient({url: self.options.shockUrl, token: self.token});
            ujsClient.list_state(self.options.serviceNameInUJS, 0, function(data) {
            	if (data.length >= self.options.maxFileStatesInUJS) {
            		for (var keyPos in data) {
            			removeFileState(data[keyPos]);
            		}
            	}
    		}, function(error) {
    			console.log(error);
    		});
            ujsClient.get_has_state(self.options.serviceNameInUJS, ujsKey, 0, function(data) {
    			var value = data[1];
    			if (value != null)
    				value = value.split(" ")[0];
    			processAfterNodeCheck(value != null ? value : prevShockNodeId);
    		}, function(error) {
    			processAfterNodeCheck(prevShockNodeId);
    		});
    		
            function removeFileState(key) {
                ujsClient.get_state(self.options.serviceNameInUJS, key, 0, function(value) {
        			var parts = value.split(" ");
        			var nodeId = parts[0];
        			var nodeTime = parts.length < 2 ? 0 : parseInt(parts[1]);
        			var timeDif = curTime - nodeTime;
        			if (timeDif > self.options.maxFileStateTime) {
                    	shockClient.delete_node(nodeId, function(info) {
                			console.log("Shock node for file [" + key + "] was deleted: " + nodeId);                            		
                    	}, function(error) {
                    		console.log(error);
                    	});
                        ujsClient.remove_state(self.options.serviceNameInUJS, key, function(data) {
                			console.log("UJS file [" + key + "] state was removed");
                        }, function(error) {
                			console.log(error);
                		});
        			}
        		}, function(error) {
        			console.log(error);
        		});
            }
            
            function processAfterNodeCheck(storedShockNodeId) {
            	self.selectFileMode(false);
            	self.cancelUpload = false;
            	shockClient.upload_node(file, storedShockNodeId, self.options.fullShockSearchToResume, function(info) {
            		if (info.uploaded_size) {
            			var shockNodeWasntDefined = self.shockNodeId == null || self.shockNodeId !== info['node_id'];
            			if (shockNodeWasntDefined) {
            				self.shockNodeId = info['node_id'];
            				var fileState = self.shockNodeId + " " + curTime;
            				ujsClient.set_state(self.options.serviceNameInUJS, ujsKey, fileState, function(data) {
            					console.log("UJS file state saved: " + fileState);
            	    		}, function(error) {
            	            	console.log("Error saving shock node " + self.shockNodeId + " into UJS:");
            	    			console.log(error);
            	    		});
            			}
            			if (info.uploaded_size >= info.file_size) {
            				self.uploadIsReady = true;
            				self.isValid();
            				self.selectFileMode(true);
                            self.uploadWasStarted = false;
            				shockClient.change_node_file_name(self.shockNodeId, file.name, function(info) {
            					//showShockInfo(self.shockNodeId);
            				}, function(error) {
            	            	console.log("Error changing file name for shock node " + self.shockNodeId);
            	    			console.log(error);
            	    		});
            			}
            			var percent = "" + (Math.floor(info.uploaded_size * 1000 / info.file_size) / 10);
            			if (percent.indexOf('.') < 0)
            				percent += ".0";
            			prcText.val(percent + "%");
            			self.isValid();
            		}
            	}, function(error) {
            		self.selectFileMode(true);
                    self.uploadWasStarted = false;
            		alert("Error: " + error);
            	}, function() {
            		return self.cancelUpload;
            	});
            }
            
            function showShockInfo(shockNode) {
            	shockClient.get_node(shockNode, function(data) {
            		console.log("Info about node [" + shockNode + "]:");
            		console.log(data);
        		}, function(error) {
        			console.log(error);
        		});
            }
        },
        
        getShockNodeId: function() {
        	return this.shockNodeId;
        },
        
        isUploadReady: function() {
        	return this.uploadIsReady;
        },
        
        isValid: function() {
            var self = this;
            var errorDetected = false;
            var errorMessages = [];
            var pVal = self.getParameterValue();
            if (self.enabled && (self.required || self.uploadWasStarted) && !pVal) {
            	self.rowDivs[0].$row.removeClass("kb-method-parameter-row-error");
            	self.rowDivs[0].$feedback.removeClass().addClass('kb-method-parameter-required-glyph glyphicon glyphicon-arrow-left').prop("title","required field");
            	self.rowDivs[0].$feedback.show();
            	self.rowDivs[0].$error.hide();
            	errorDetectedHere = true;
            	if (self.uploadWasStarted) {
            		errorMessages.push("required field "+self.spec.ui_name+" is not 100% ready.");
            	} else {
            		errorMessages.push("required field "+self.spec.ui_name+" missing.");
            	}
            	errorDetected = true;
            } else {
            	self.rowDivs[0].$row.removeClass("kb-method-parameter-row-error");
            	self.rowDivs[0].$error.hide();
            	self.rowDivs[0].$feedback.removeClass();
            	if (pVal)
            		self.rowDivs[0].$feedback.removeClass().addClass('kb-method-parameter-accepted-glyph glyphicon glyphicon-ok');
            }
            return {isValid: !errorDetected, errormssgs:errorMessages};
        },
        
        getParameterValue: function() {
            var ret = this.uploadIsReady ? this.shockNodeId : null;
            return ret ? ret : "";
        },

        getState: function() {
            return [[this.shockNodeId ? this.shockNodeId : "", this.fileName.val(), this.uploadIsReady, this.percentText.val()]];
        },

        loadState: function(state) {
            if (!state)
                return;
            if (!$.isArray(state))
            	return;
            var self = this;
            this.shockNodeId = state[0][0];
            if (this.shockNodeId === "")
            	this.shockNodeId = null;
            this.fileName.val(state[0][1]);
            this.uploadIsReady = state[0][2];
            this.percentText.val(state[0][3]);
            if (this.shockNodeId) {
            	var shockClient = new ShockClient({url: self.options.shockUrl, token: self.token});
            	shockClient.get_node(self.shockNodeId, function(info) {
            		if (!info)
                		self.shockNodeId = null;
                	self.isValid();                		
            	}, function(error) {
            		self.shockNodeId = null;
                	self.isValid();
            	});
            } else {
            	this.isValid();
            }
        },

        loggedInCallback: function(event, auth) {
            this.token = auth.token;
            if (this.wrongToken)
            	this.render();
            return this;
        },

        loggedOutCallback: function(event, auth) {
            this.token = null;
            //this.render();
            return this;
        },
        
        disableParameterEditing: function() {
            this.enabled = false;
            if (this.rowDivs) {
                this.rowDivs[0].$feedback.removeClass();
            }
        },
        
        enableParameterEditing: function() {
            // enable the input
            this.enabled = true;
            this.isValid();
        },
        
        lockInputs: function() {
            if (this.enabled) {
            	this.locked = true;
            }
            if (this.rowDivs) {
                this.rowDivs[0].$feedback.removeClass();
            }
        },
        
        unlockInputs: function() {
            if (this.enabled) {
            	this.locked = false;
            }
            this.isValid();
        },

        uuid: function() {
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, 
                function(c) {
                    var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);
                    return v.toString(16);
                });
        },
        
        getUser: function() {
            var ret = null;
            if (!this.token)
            	return ret;
            var tokenParts = this.token.split("|");
            for (var i in tokenParts) {
            	var keyValue = tokenParts[i].split("=");
            	if (keyValue.length == 2 && keyValue[0] === "un")
            		ret = keyValue[1];
            }
            return ret;
        }
    });
})(jQuery);
(function($, undefined) {
    $.KBWidget({
        name: 'kbaseNarrativeSidePanel',
        parent: 'kbaseWidget',
        options: {
            loadingImage: "static/kbase/images/ajax-loader.gif",
            autorender: true,
            workspaceURL: "https://kbase.us/services/ws", //used for data importer
            landingPageURL: "/functional-site/#/", // used for data importer
        },
        $dataWidget: null,
        $methodsWidget: null,
        $narrativesWidget: null,
        $jobsWidget: null,
        $overlay: null,

        /**
         * Does the initial panel layout - tabs and spots for each widget
         * It then instantiates them, but not until told to render (unless autorender = true)
         */
        init: function(options) {
            this._super(options);

            // make sure we pick up the proper config urls
            if (window.kbconfig && window.kbconfig.urls) {
                this.options.workspaceURL = window.kbconfig.urls.workspace;
            }

            var analysisWidgets = this.buildPanelSet([
                {
                    name : 'kbaseNarrativeDataPanel',
                    params : {}
                },
                {
                    name : 'kbaseNarrativeMethodPanel',
                    params : { autopopulate: false }
                }
            ]);
            this.$dataWidget = analysisWidgets['kbaseNarrativeDataPanel'];
            this.$methodsWidget = analysisWidgets['kbaseNarrativeMethodPanel'];
            var $analysisPanel = analysisWidgets['panelSet'];

            var manageWidgets = this.buildPanelSet([
                {
                    name : 'kbaseNarrativeManagePanel',
                    params : { autopopulate: true }
                },
            ]);

            this.$narrativesWidget = manageWidgets['kbaseNarrativeAppsPanel'];
            var $managePanel = manageWidgets['panelSet'];

            var jobsWidget = this.buildPanelSet([
                {
                    name : 'kbaseNarrativeJobsPanel',
                    params : { autopopulate: false }
                }
            ]);
            this.$jobsWidget = jobsWidget['kbaseNarrativeJobsPanel'];
            var $jobsPanel = jobsWidget['panelSet'];

            var $tabs = this.buildTabs([
                {
                    tabName : 'Analyze',
                    content : $analysisPanel
                },
                {
                    tabName : 'Narratives',
                    content: $managePanel
                },
                {
                    tabName : this.$jobsWidget.title,
                    content: $jobsPanel
                }
            ], true);

            this.$elem.addClass('kb-side-panel');
            this.$elem.append($tabs.header).append($tabs.body);

            $(document).on('showSidePanelOverlay.Narrative', $.proxy(function(event, panel) {
                this.showOverlay(panel);
            }, this));

            $(document).on('hideSidePanelOverlay.Narrative', $.proxy(function(event, panel) {
                this.hideOverlay(panel);
            }, this));

            $(document).on('toggleSidePanelOverlay.Narrative', $.proxy(function(event, panel) {
                this.toggleOverlay(panel);
            }, this));

            if (this.autorender) {
                this.render();
            }
            else {

            }

            return this;
        },

        /**
         * @method
         * @private
         * Builds a very simple set of tabs.
         * @param {Array} tabs - a list of objects where each has a 'tabName' and 'content' property.
         * As you might expect, 'tabName' is the name of the tab that goes into the styled header,
         * and 'content' is the tab content, expected to be something that can be attached via .append()
         * @param isOuter - if true, treat these tabs as though they belong to the outer side panel,
         * not to an inner set of tabs. That is, when any new tab is selected, it hides the overlay,
         * if it's open.
         */
        buildTabs: function(tabs, isOuter) {
            var $header = $('<div>');
            var $body = $('<div>');

            for (var i=0; i<tabs.length; i++) {
                var tab = tabs[i];
                $header.append($('<div>')
                               .addClass('kb-side-header')
                               .css('width', (100/tabs.length)+'%')
                               .append(tab.tabName));
                $body.append($('<div>')
                             .addClass('kb-side-tab')
                             .append(tab.content));
            }

            $header.find('div').click($.proxy(function(event) {
                event.preventDefault();
                event.stopPropagation();
                var $headerDiv = $(event.currentTarget);

                if (!$headerDiv.hasClass('active')) {
                    var idx = $headerDiv.index();
                    $header.find('div').removeClass('active');
                    $headerDiv.addClass('active');
                    $body.find('div.kb-side-tab').removeClass('active');
                    $body.find('div:nth-child(' + (idx+1) + ').kb-side-tab').addClass('active');
                    if (isOuter)
                        this.hideOverlay();
                }
            }, this));

            $header.find('div:first-child').addClass('active');
            $body.find('div:first-child.kb-side-tab').addClass('active');

            return {
                header: $header,
                body: $body
            };
        },

        initOverlay: function() {
            var self = this;

            this.$overlayBody = $('<div class="kb-overlay-body">');
            this.$overlayFooter  = $('<div class="kb-overlay-footer">');
            this.$overlay = $('<div>')
                            .addClass('kb-side-overlay-container')
                            //.append(this.$overlayBody)
                            //.append(this.$overlayFooter);

            $('body').append(this.$overlay);
            this.$overlay.hide();

            this.$narrativeDimmer = $('<div>')
                                    .addClass('kb-overlay-dimmer');

            $('body').append(this.$narrativeDimmer);
            this.$narrativeDimmer.hide();
            this.updateOverlayPosition();

            // hide panel when clicking outside
            this.$narrativeDimmer.unbind('click');
            this.$narrativeDimmer.click(function() {
                self.hideOverlay();
            });
        },

        updateOverlayPosition: function() {
            this.$overlay.position({my: 'left top', at: 'right top', of: this.$elem});
            this.$narrativeDimmer.position({my: 'left top', at: 'right top', of: this.$elem});
        },

        /**
         * @method
         * @public
         * Also available through a trigger - 'toggleSidePanelOverlay.Narrative'
         * The behavior here is done in three cases.
         * 1. If the overlay is currently visible, it gets hidden.
         * 1a. If there is a panel given, and it is different from the currently attached panel, then
         *     the new panel is attached and the overlay is redisplayed.
         * 2. If the overlay is currently hidden, it is shown with the given panel.
         */
        toggleOverlay: function(panel) {
            if (this.$overlay.is(':visible')) {
                this.hideOverlay();
                if (panel && panel !== this.currentPanel) {
                    this.showOverlay(panel);
                }
            }
            else
                this.showOverlay(panel);
        },

        showOverlay: function(panel) {
            if (this.$overlay) {
                if (panel) {
                    if (this.currentPanel)
                        $(this.currentPanel).detach();
                    this.$overlay.append(panel);
                    this.currentPanel = panel;
                }
                this.$narrativeDimmer.show();
                this.$elem.find('.kb-side-header').addClass('overlay-active');
                this.$overlay.show('slide', 'fast', $.proxy(function() {
                }, this));
            }
        },

        hideOverlay: function() {
            if (this.$overlay) {
                this.$narrativeDimmer.hide();
                this.$elem.find('.kb-side-header').removeClass('overlay-active');
                this.$overlay.hide('slide', 'fast', $.proxy(function() {
                }, this));
            }
        },

        /**
         * Builds the general structure for a panel set.
         * These are intended to start with 2 panels, but we can move from there if needed.
         *
         * (I'll jsdoc this up in a bit)
         * widgets = [
         *     {
         *         name: kbaseNarrativeDataPanel (for instance)
         *         params: {}
         *     }
         * ]
         * @param {object} widgets
         *
         */
        buildPanelSet: function(widgets) {
            var $panelSet = $('<div>')
                            .addClass('kb-narr-side-panel-set');
            if (!widgets || Object.prototype.toString.call(widgets) !== '[object Array]' || widgets.length === 0)
                return $panelSet;

            var height = 100 / widgets.length;
            var minHeight = 200;

            var retObj = {};
            for (var i=0; i<widgets.length; i++) {
                var widgetInfo = widgets[i];
                var $widgetDiv = $('<div>')
                                 .addClass('kb-side-separator')
                                 .css({'height' : height + '%'});

                retObj[widgetInfo.name] = $widgetDiv[widgetInfo.name](widgetInfo.params);
                $panelSet.append($widgetDiv);
            }
            retObj['panelSet'] = $panelSet;
            return retObj;
        },

        render: function() {
            this.initOverlay();

            this.$methodsWidget.refreshFromService();
        }

    })
})( jQuery );

/**
 * "Import" tab on data side panel.
 * @author Roman Sutormin <rsutormin@lbl.gov>
 * @public
 */
(function( $, undefined ) {
    $.KBWidget({
        name: "kbaseNarrativeSideImportTab",
        parent: "kbaseAuthenticatedWidget",
        version: "1.0.0",
        options: {
        },
        token: null,
        wsName: null,
        loadingImage: "static/kbase/images/ajax-loader.gif",
        wsUrl: window.kbconfig.urls.workspace,
        methodStoreURL: window.kbconfig.urls.narrative_method_store,
        methClient: null,
        uploaderURL: window.kbconfig.urls.transform,
        ujsURL: window.kbconfig.urls.user_and_job_state,
        shockURL: window.kbconfig.urls.shock,
        methods: null,			// {method_id -> method_spec}
        types: null,			// {type_name -> type_spec}
        selectedType: null,		// selected type name
        widgetPanel: null,		// div for selected type
        widgetPanelCard1: null, // first page with importer type combobox (this page will be put on widgetPanel) 
        widgetPanelCard2: null, // second page with import widget (this page will be put on widgetPanel) 
        infoPanel: null,
        inputWidget: null,		// {methodId -> widget for selected type}
        tabs: null,				// mapping {methodId -> div}
        
        init: function(options) {
            this._super(options);
            var self = this;
            $(document).on(
            		'setWorkspaceName.Narrative', $.proxy(function(e, info) {
                        //console.log('side panel import tab -- setting ws to ' + info.wsId);
                        self.wsName = info.wsId;
            		}, this)
            );
            return this;
        },
        
        render: function() {
        	var self = this;
        	this.inputWidget = {};
        	this.tabs = {};
            var errorModalId = "app-error-modal-"+ self.uuid();
            var modalLabel = "app-error-modal-lablel-"+ self.uuid();
            self.$errorModalContent = $('<div>');
            self.$errorModal =  $('<div id="'+errorModalId+'" tabindex="-1" role="dialog" aria-labelledby="'+modalLabel+'" aria-hidden="true" style="position:auto">').addClass("modal fade");
            self.$errorModal.append(
                $('<div>').addClass('modal-dialog').append(
                    $('<div>').addClass('modal-content').append(
                        $('<div>').addClass('modal-header kb-app-step-error-main-heading').append('<h4 class="modal-title" id="'+modalLabel+'">Problems exist in your parameter settings.</h4>')
                    ).append(
                       $('<div>').addClass('modal-body').append(self.$errorModalContent)
                    ).append(
                        $('<div>').addClass('modal-footer').append(
                            $('<button type="button" data-dismiss="modal">').addClass("kb-default-btn").append("Dismiss"))
                    )
                ));
            $('body').append(self.$errorModal);
            self.$warningModalContent = $('<div>');
            self.$warningModal =  $('<div tabindex="-1" role="dialog" aria-labelledby="'+modalLabel+'" aria-hidden="true" style="position:auto">').addClass("modal fade");
            var confirmButton = $('<button type="button" data-dismiss="modal">').addClass("btn").append("Confirm");
            confirmButton.click($.proxy(function(event) {
            	self.stopTimer();
            	self.back();
            }, this));
            self.$warningModal.append(
                $('<div>').addClass('modal-dialog').append(
                    $('<div>').addClass('modal-content').append(
                        $('<div>').addClass('modal-header kb-app-step-error-main-heading').append('<h4 class="modal-title" id="'+modalLabel+'">User confirmation required.</h4>')
                    ).append(
                       $('<div>').addClass('modal-body').append(self.$warningModalContent)
                    ).append(
                        $('<div>').addClass('modal-footer').append(confirmButton).append(
                            $('<button type="button" data-dismiss="modal">').addClass("kb-default-btn").append("Cancel"))
                    )
                ));
            $('body').append(self.$warningModal);


            if (window.kbconfig && window.kbconfig.urls) {
                this.methodStoreURL = window.kbconfig.urls.narrative_method_store;
            }
            var upperPanel = $('<div>');
            this.widgetPanel = $('<div>');
            this.widgetPanelCard1 = $('<div style="margin: 30px 30px 0px 30px;">');
            this.widgetPanel.append(this.widgetPanelCard1);
            this.widgetPanelCard1.append("<div class='kb-cell-run'><h2 class='collapse in'>Use your own data or data from another data source in your narrative. First, select the type of data you wish to import.</h2></div><hr>");
            
            var $nameDiv = $('<div>').addClass("kb-method-parameter-name").css("text-align", "left")
            	.append("DATA TYPE");

            var $dropdown= $('<select>').css({width:"400px"});
            var $nextButton = $('<button>')
                              .attr('id', this.cellId + '-next')
                              .attr('type', 'button')
                              .attr('value', 'Next')
                              .addClass('kb-primary-btn')
                              .css({'border' : '4px'})
                              .append('Next');
            var $hintDiv  = $('<div>').addClass("kb-method-parameter-hint")
            	.append("Select the type of data you wish to import.");

            $nextButton.click(
            		$.proxy(function(event) {
            			event.preventDefault();
            			var selectedType = $dropdown.val();
                    	self.showWidget(selectedType);
            		}, this)
            );
            this.widgetPanelCard1
            	.append('<div style="height: 30px">')
            	.append($nameDiv)
            	.append($('<div>').append($dropdown))
            	.append($hintDiv)
            	.append('<div style="height: 30px">')
            	.append($('<div>').append($nextButton));
            
            this.widgetPanelCard2 = $('<div style="display: none; margin: 0px;">');
            this.widgetPanel.append(this.widgetPanelCard2);

            this.infoPanel = $('<div style="margin: 20px 30px 0px 30px;">');

            this.$elem.append(upperPanel);
            this.$elem.append(this.widgetPanel);
            this.$elem.append(this.infoPanel);
            this.methClient = new NarrativeMethodStore(this.methodStoreURL);
            this.methClient.list_categories({'load_methods': 0, 'load_apps' : 0, 'load_types' : 1}, 
                    $.proxy(function(data) {
                    	var aTypes = data[3];
                    	var methodIds = [];
                    	self.types = {};
                    	for (var key in aTypes) {
                    		if (aTypes[key]["loading_error"]) {
                            	console.log("Error loading type [" + key + "]: " + aTypes[key]["loading_error"]);
                    			continue;
                    		}
                    		if (aTypes[key]["import_method_ids"].length > 0) {
                    			self.types[key] = aTypes[key];
                    			for (var methodPos in aTypes[key]["import_method_ids"]) {
                    				var methodId = aTypes[key]["import_method_ids"][methodPos];
                    				methodIds.push(methodId);
                    			}
                    		}
                    	}
                        self.methClient.get_method_spec({ 'ids' : methodIds },
                                $.proxy(function(specs) {
                                	self.methods = {};
                                	for (var i in specs) {
                                		self.methods[specs[i].info.id] = specs[i];
                                	}
                                	var keys = [];
                                	for (var key in self.types) {
                                		keys.push(key);
                                	}
                                	keys.sort(function(a,b) {return self.types[a]["name"].localeCompare(self.types[b]["name"])});
                                	for (var keyPos in keys) {
                                		addItem(keys[keyPos]);                                		
                                	}
                                    $dropdown.select2({
                                        minimumResultsForSearch: -1,
                                        formatSelection: function(object, container) {
                                            var display = '<span class="kb-parameter-data-selection">'+object.text+'</span>';
                                            return display;
                                        }
                                    });

                                	function addItem(key) {
                                		var name = self.types[key]["name"];
                                        $dropdown.append($('<option value="'+key+'">').append(name));
                                	}
                                }, this),
                                $.proxy(function(error) {
                                    self.showError(error);
                                }, this)
                            );
                    }, this),
                    $.proxy(function(error) {
                        self.showError(error);
                    }, this)
                );
            return this;
        },

        showWidget: function(type) {
            var self = this;
            this.selectedType = type;
            this.widgetPanelCard1.css('display', 'none');
            this.widgetPanelCard2.css('display', '');
            this.widgetPanelCard2.empty();
            var $header = null;
            var $body = null;
            var numberOfTabs = this.types[type]["import_method_ids"].length;
            if (numberOfTabs > 1) {
            	var $header = $('<div>');
            	var $body = $('<div>');
            	this.widgetPanelCard2.append($header).append($body);
            }
            for (var methodPos in this.types[type]["import_method_ids"]) {
            	self.showTab(type, methodPos, $header, $body, numberOfTabs);
            }
            var $importButton = $('<button>')
                             .attr('id', this.cellId + '-run')
                             .attr('type', 'button')
                             .attr('value', 'Import')
                             .addClass('kb-primary-btn')
                             .append('Import');

            var $cancelButton = $('<button>')
                             .attr('id', this.cellId + '-run')
                             .attr('type', 'button')
                             .attr('value', 'Cancel')
                             .addClass('kb-primary-btn')
                             .append('Cancel');

            var btnImport = function(show) {
            	if (show) {
            		$importButton.show();
            		$cancelButton.hide();
            	} else {
            		$importButton.hide();
            		$cancelButton.show();
            	}
            };
            
            $importButton.click(
                $.proxy(function(event) {
                    event.preventDefault();
                    var v = self.getInputWidget().isValid();
                    if (v.isValid) {
                    	btnImport(false);
                    	self.runImport(function() {
                        	btnImport(true);
                    	});
                    } else {
                    	var errorCount = 1;
                    	self.$errorModalContent.empty();
                    	var $errorStep = $('<div>');
                    	for (var e=0; e<v.errormssgs.length; e++) {
                    		$errorStep.append($('<div>')
                    				.addClass("kb-app-step-error-mssg")
                    				.append('['+errorCount+']: ' + v.errormssgs[e]));
                    		errorCount = errorCount+1;
                    	}
                    	self.$errorModalContent.append($errorStep);
                    	self.$errorModal.modal('show');
                    	}
                }, this)
            );
            
            $cancelButton.click(function() {
            	self.stopTimer();
            	btnImport(true);
				self.showInfo("Import job was cancelled");
            });
            
            var $backButton = $('<button>')
                             .attr('id', this.cellId + '-back')
                             .attr('type', 'button')
                             .attr('value', 'Back')
                             .addClass('kb-primary-btn')
                             .append('Back');
            $backButton.click(
                $.proxy(function(event) {
                	event.preventDefault();
                	self.back();
                }, this)
            );

            var $buttons = $('<div style="margin: 0px 30px 0px 33px;">')
                           .addClass('buttons')
                           .append($importButton)
                           .append('&nbsp;')
                           .append($cancelButton)
                           .append('&nbsp;')
                           .append($backButton);

        	$cancelButton.hide();
        	self.widgetPanelCard2.append($buttons);
        },
        
        showTab: function(type, methodPos, $header, $body, numberOfTabs) {
            var self = this;
        	var methodId = this.types[type]["import_method_ids"][methodPos];
        	var methodSpec = this.methods[methodId];
            var inputWidgetName = methodSpec.widgets.input;
            if (!inputWidgetName || inputWidgetName === 'null')
                inputWidgetName = "kbaseNarrativeMethodInput";
            var methodJson = JSON.stringify(methodSpec);
            
            var $inputDiv = $('<div>');

            // These are the 'delete' and 'run' buttons for the cell

            var methodUuid = 'import-method-details-'+this.uuid();
            var buttonLabel = 'details';
            var methodDesc = methodSpec.info.tooltip;
            var $methodInfo = $('<div>')
                    .addClass('kb-func-desc')
                    .css({'margin' : '25px 0px 0px 15px'})
            		.append($('<h2>')
                    .attr('id', methodUuid)
                    .addClass('collapse in')
                    .append(methodDesc));
            
            var tab = $('<div style="margin: 0px 30px 0px 15px;">')
                    .append($('<div>')
                    .addClass('kb-func-panel kb-cell-run')
                    .append($methodInfo))
                    .append($('<div>').css({'margin' : '25px 0px 0px 15px'}).append("<hr>"))
                    .append($('<div>')
                    .append($inputDiv))
                    .append($('<div>')
                    .css({'overflow' : 'hidden', 'margin' : '0px 0px 0px 18px'}));
                        
        	var isShown = methodPos == 0;
        	var tabName = methodSpec.info.name;
        	var params = {tab: tabName, content: tab, canDelete : false, show: isShown};
    		if (numberOfTabs == 1) {
    			this.widgetPanelCard2.append(tab);
    		} else {
    			var tabHeader = $('<div>')
    				.addClass('kb-side-header');
    			tabHeader.css('width', (100/numberOfTabs)+'%');
    			tabHeader.append($('<small>').append(params.tab));
    			$header.append(tabHeader);
    			var tabContent = $('<div>')
    				.addClass('kb-side-tab3')
    				.css("display", "none")
    				.append(params.content);
    			$body.append(tabContent);
    			if (params.show) {
    				tabHeader.addClass('active');
    				tabContent.css('display', '');
    			}
    			tabHeader.click($.proxy(function(event) {
    				event.preventDefault();
    				event.stopPropagation();
    				var $headerDiv = $(event.currentTarget);
    				if (!$headerDiv.hasClass('active')) {
    					var idx = $headerDiv.index();
    					$header.find('div').removeClass('active');
    					$headerDiv.addClass('active');
    					$body.find('div.kb-side-tab3').css('display', 'none');
    					$body.find('div:nth-child(' + (idx+1) + ').kb-side-tab3').css('display', '');
    				}
    			}, this));
    		}
            this.inputWidget[methodId] = $inputDiv[inputWidgetName]({ method: methodJson, isInSidePanel: true });

        	this.tabs[methodId] = tab;
        },
        
        getSelectedTabId: function() {
            var ret = null;
            for (var tabId in this.tabs) {
            	var tab = this.tabs[tabId];
            	if (tab.is(':visible'))
            		ret = tabId;
            }
            return ret;
        },

        getInputWidget: function() {
        	return this.inputWidget[this.getSelectedTabId()];
        },
        
        back: function() {
        	var self = this;
        	if (self.timer != null) {
                self.$warningModalContent.empty();
                self.$warningModalContent.append(
                		$('<div>').addClass("kb-app-step-error-mssg")
                			.append('Import process is not finished yet. Are you sure you want to stop watching it?'));
                self.$warningModal.modal('show');
        		return;
        	}
        	this.infoPanel.empty();
        	this.widgetPanelCard2.css('display', 'none');
            this.widgetPanelCard1.css('display', '');
        },
        
        runImport: function(callback) {
        	var self = this;
        	var paramValueArray = this.getInputWidget().getParameters();
        	var params = {};
        	var methodId = self.getSelectedTabId();
        	var methodSpec = self.methods[methodId];
        	for (var i in methodSpec.parameters) {
            	var paramId = methodSpec.parameters[i].id;
            	var paramValue = paramValueArray[i];
            	params[paramId] = paramValue;
        	}
            var uploaderClient = new Transform(this.uploaderURL, {'token': self.token});
            var args = null;
            if (self.selectedType === 'KBaseGenomes.Genome') {
            	var url = null;
            	if (methodId === 'import_genome_gbk_file') {
            		url = self.shockURL + '/node/' + params['gbkFile'];
            	} else if (methodId === 'import_genome_gbk_ftp') {
            		url = params['ftpFolder'];
            	}
            	if (url) {
            		var options = {};
            		if (params['contigObject'] && params['contigObject'].length > 0) {
            			options['contigset_object_name'] = params['contigObject'];
            		} else {
            			options['contigset_object_name'] = params['outputObject'] + '.contigset';
            		}
            		args = {'external_type': 'Genbank.Genome', 
            				'kbase_type': 'KBaseGenomes.Genome', 
            				'workspace_name': self.wsName, 
            				'object_name': params['outputObject'],
            				'optional_arguments': {'validate':{},'transform':options},
            				'url_mapping': {'Genbank.Genome': url}};
            	} else {
            		self.showError(methodId + " import mode for Genome type is not supported yet");
            	}
            } else if (self.selectedType === 'Transcript') {
            	if (methodId === 'import_transcript_file') {
            		var options = {'dna':self.asInt(params['dna']),
            				"output_file_name": "transcripts.json"};
            		var genomeId = params['genomeId'];
            		if (genomeId)
            			options['genome_id'] = genomeId;
            		args = {'external_type': 'FASTA.Transcripts', 
            				'kbase_type': 'KBaseGenomes.Genome', 
            				'workspace_name': self.wsName, 
            				'object_name': params['outputObject'],
            				'optional_arguments': {'validate':{},'transform':options},
            				'url_mapping': {'FASTA.Transcripts': self.shockURL + '/node/' + params['fastaFile']}};
            	} else {
            		self.showError(methodId + " import mode for Genome type is not supported yet");
            	}
            } else if (self.selectedType === 'KBaseGenomes.ContigSet') {
            	var url = null;
            	if (methodId === 'import_contigset_fasta_file') {
            		url = self.shockURL + '/node/' + params['fastaFile'];
            	} else if (methodId === 'import_contigset_fasta_ftp') {
            		url = params['ftpFolder'];
            	}
            	if (url) {
            		args = {'external_type': 'FASTA.DNA.Assembly', 
            				'kbase_type': 'KBaseGenomes.ContigSet', 
            				'workspace_name': self.wsName, 
            				'object_name': params['outputObject'],
            				'optional_arguments': {'validate':{},'transform':
            						{"fasta_reference_only":self.asBool(params['fastaReferenceOnly'])}},
            				'url_mapping': {'FASTA.DNA.Assembly': url}};
            	} else {
            		self.showError(methodId + " import mode for ContigSet type is not supported yet");
            	}
            } else if (self.selectedType === 'ShortReads') {
            	if (methodId === 'import_reads_fasta_file') {
            		var options = {'output_file_name': 'reflib.fasta.json'};
            		var refName = params['refname'];
            		if (refName)
            			options['refname'] = refName;
            		args = {'external_type': 'FASTA.DNA.Assembly', 
            				'kbase_type': 'KBaseAssembly.ReferenceAssembly', 
            				'workspace_name': self.wsName, 
            				'object_name': params['outputObject'],
            				'optional_arguments': {'validate':{},'transform':options},
            				'url_mapping': {'FASTA.DNA.Assembly': self.shockURL + '/node/' + params['fastaFile']}};
            	} else if (methodId === 'import_reads_pe_fastq_file') {
            		var urlMapping = {'SequenceReads.1': self.shockURL + '/node/' + params['fastqFile1']};
            		if (params['fastqFile2'] && params['fastqFile2'].length > 0)
            			urlMapping['SequenceReads.2'] = self.shockURL + '/node/' + params['fastqFile2'];
            		var options = {'outward':self.asInt(params['readOrientationOutward']),
            				'output_file_name': 'pelib.fastq.json'};
            		var optInsert = params['insertSizeMean'];
            		if (optInsert)
            			options['insert'] = optInsert;
            		var optStdev = params['insertSizeStDev'];
            		if (optStdev)
            			options['stdev'] = optStdev;
            		args = {'external_type': 'SequenceReads', 
            				'kbase_type': 'KBaseAssembly.PairedEndLibrary', 
            				'workspace_name': self.wsName, 
            				'object_name': params['outputObject'],
            				'optional_arguments': {'validate':{},'transform':options},
            				'url_mapping': urlMapping};
            	} else if (methodId === 'import_reads_se_fastq_file') {
            		args = {'external_type': 'SequenceReads', 
            				'kbase_type': 'KBaseAssembly.SingleEndLibrary', 
            				'workspace_name': self.wsName, 
            				'object_name': params['outputObject'],
            				'optional_arguments': {'validate':{},'transform':{'output_file_name': 'selib.fastq.json'}},
            				'url_mapping': {'SequenceReads': self.shockURL + '/node/' + params['fastqFile']}};
            	} else {
            		self.showError(methodId + " import mode for ShortReads type is not supported yet");
            	}
            } else if (self.selectedType === 'KBaseFBA.FBAModel') {
            	if (methodId === 'import_fbamodel_csv_file') {
            		var options = {};
            		var genome = params['genomeObject'];
            		if (genome)
            			options['genome'] = genome;
            		var biomass = params['biomass'];
            		if (biomass)
            			options['biomass'] = biomass;
            		args = {'external_type': 'CSV.FBAModel', 
            				'kbase_type': 'KBaseFBA.FBAModel', 
            				'workspace_name': self.wsName, 
            				'object_name': params['outputObject'],
            				'optional_arguments': {'validate':{},'transform':options},
            				'url_mapping': {
            					'CSV.FBAModel': self.shockURL + '/node/' + params['reactionFile'],
            					'CSV.Compounds': self.shockURL + '/node/' + params['compoundFile']
            				}
            		};
            	} else if (methodId === 'import_fbamodel_sbml_file') {
            		var urlMapping = {'SBML.FBAModel': self.shockURL + '/node/' + params['reactionFile']};
            		var compoundFile = params['compoundFile'];
            		if (compoundFile)
            			urlMapping['CSV.Compounds'] = self.shockURL + '/node/' + compoundFile;
            		var options = {};
            		var genome = params['genomeObject'];
            		if (genome)
            			options['genome'] = genome;
            		var biomass = params['biomass'];
            		if (biomass)
            			options['biomass'] = biomass;
            		args = {'external_type': 'SBML.FBAModel', 
            				'kbase_type': 'KBaseFBA.FBAModel', 
            				'workspace_name': self.wsName, 
            				'object_name': params['outputObject'],
            				'optional_arguments': {'validate':{},'transform':options},
            				'url_mapping': urlMapping};
            	} else {
            		self.showError(methodId + " import mode for FBAModel type is not supported yet");
            	}
            } else if (self.selectedType === 'KBaseBiochem.Media') {
            	if (methodId === 'import_media_csv_file') {
            		args = {'external_type': 'CSV.Media', 
            				'kbase_type': 'KBaseBiochem.Media', 
            				'workspace_name': self.wsName, 
            				'object_name': params['outputObject'],
            				'optional_arguments': {'validate':{},'transform':{}},
            				'url_mapping': {'CSV.Media': self.shockURL + '/node/' + params['csvFile']}};
            	} else {
            		self.showError(methodId + " import mode for Media type is not supported yet");
            	}
            } else if (self.selectedType === 'KBasePhenotypes.PhenotypeSet') {
            	if (methodId === 'import_phenotypeset_csv_file') {
            		var options = {};
            		var genome = params['genomeObject'];
            		if (genome)
            			options['genome'] = genome;
            		args = {'external_type': 'CSV.PhenotypeSet', 
            				'kbase_type': 'KBasePhenotypes.PhenotypeSet', 
            				'workspace_name': self.wsName, 
            				'object_name': params['outputObject'],
            				'optional_arguments': {'validate':{},'transform':options},
            				'url_mapping': {'CSV.PhenotypeSet': self.shockURL + '/node/' + params['csvFile']}};
            	} else {
            		self.showError(methodId + " import mode for PhenotypeSet type is not supported yet");
            	}
            } else {
            	self.showError("Import for [" + self.selectedType + "] type is not supported yet.");
            }
            if (args) {
        		console.log("Data to be sent to transform service:");
        		console.log(JSON.stringify(args));
				self.showInfo("Sending data...", true);
        		uploaderClient.upload(args,
        				$.proxy(function(data) {
        					console.log(data);
        					self.waitForJob(data[1], callback);
                        }, this),
                        $.proxy(function(error) {
                            self.showError(error);
                        	callback(false);
                        }, this)
                    );
            } else {
            	callback(false);
            }
        },
        
        asBool: function(val) {
        	if (!val)
        		return false;
        	return (val == 1 || val === "1");
        },

        asInt: function(val) {
        	if (!val)
        		return 0;
        	if (val == 1 || val === "1")
        		return 1;
        	return 0;
        },

        waitForJob: function(jobId, callback) {
        	var self = this;
        	/*var aweClient = new AweClient({url: self.aweURL, token: self.token});
        	var timeLst = function(event) {
        		aweClient.get_job(jobId, function(data) {
        			console.log("Job status:");
        			console.log(data);
        			var state = data['state'];
        			if (state === 'completed') {  // Done
        				self.stopTimer();
        				self.showInfo("Import job is done");
        			} else if (state === 'suspended') {  // Error
        				self.stopTimer();
        				self.showError("Unexpected error");
        			} else {
        				self.showInfo("Import job has status: " + state, true);
        			}
        		}, function(error) {
    				self.stopTimer();
    				console.log(error);
        		});
        	};*/
            var jobSrv = new UserAndJobState(self.ujsURL, {'token': self.token});
        	var timeLst = function(event) {
        		jobSrv.get_job_status(jobId, function(data) {
        			console.log(data);
        			var status = data[2];
        			var complete = data[5];
        			var wasError = data[6];
        			if (complete === 1) {
        				self.stopTimer();
        				callback(wasError === 0);
        				if (wasError === 0) {
                            self.trigger('updateDataList.Narrative');
            				self.showInfo("Import job is done");
        				} else {
    						self.showError('loading detailed error...');
        					jobSrv.get_detailed_error(jobId, function(data) {
        						self.showError(data);
        					}, function(data) {
        						self.showError(data.error.message);
        	        		});
        				}
        			} else {
        				self.showInfo("Import job has status: " + status, true);
        			}
        		}, function(data) {
        			self.stopTimer();
        			self.showError(data.error.message);
    				callback(false);
        		});
        	};
        	self.timer = setInterval(timeLst, 5000);
        	timeLst();
        },
        
        stopTimer: function() {
        	var self = this;
			if (self.timer != null) {
				clearInterval(self.timer);
				self.timer = null;
			}
		},
        
        showError: function(error) {
        	console.log(error);
        	var errorMsg = error;
        	if (error.error && error.error.message)
        		errorMsg = error.error.message;
        	this.infoPanel.empty();
        	this.infoPanel.append('<pre style="text-align: left; background-color: #ffe0e0;">Error:\n'+errorMsg+'</pre>');
        },

        showInfo: function(message, spinner) {
        	if (spinner)
        		message = '<img src="'+this.loadingImage+'"/> ' + message;
        	this.infoPanel.empty();
        	this.infoPanel.append(message);
        },

        loggedInCallback: function(event, auth) {
            this.token = auth.token;
            this.render();
            return this;
        },

        loggedOutCallback: function(event, auth) {
            this.token = null;
            this.render();
            return this;
        },
        
        uuid: function() {
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, 
                function(c) {
                    var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);
                    return v.toString(16);
                });
        }
    });
})( jQuery );

/**
 * "Import" tab on data side panel.
 * @author Roman Sutormin <rsutormin@lbl.gov>
 * @public
 */
(function( $, undefined ) {
    $.KBWidget({
        name: "kbaseNarrativeSidePublicTab",
        parent: "kbaseAuthenticatedWidget",
        version: "1.0.0",
        options: {
		$importStatus:$('<div>'),
        	addToNarrativeButton: null,
        	selectedItems: null,
        	landing_page_url: "/functional-site/#/", // !! always include trailing slash
            default_landing_page_url: "/functional-site/#/json/" // ws_name/obj_name,
        },
        token: null,
        wsName: null,
        searchUrlPrefix: 'https://kbase.us/services/search/getResults',
        loadingImage: "static/kbase/images/ajax-loader.gif",
        wsUrl: "https://kbase.us/services/ws/",
        wsClient: null,
        categories: ['genomes', 'metagenomes', 'media', 'plant_gnms'
                     /*'gwas_populations', 'gwas_population_kinships', 'gwas_population_variations',
                     'gwas_top_variations', 'gwas_population_traits', 'gwas_gene_lists'*/ ],
        categoryDescr: {  // search API category -> {}
        	'genomes': {name:'Genomes',type:'KBaseGenomes.Genome',ws:'KBasePublicGenomesV4',search:true},
        	'metagenomes': {name: 'Metagenomes',type:'KBaseCommunities.Metagenome',ws:'KBasePublicMetagenomes',search:true},
        	'media': {name:'Media',type:'KBaseBiochem.Media',ws:'KBaseMedia',search:false},
        	'plant_gnms': {name:'Plant Genomes',type:'KBaseGenomes.Genome',ws:'PlantCSGenomes',search:false}
        	/*'gwas_populations': {name:'GWAS Populations',type:'KBaseGwasData.GwasPopulation',ws:'KBasePublicGwasDataV2',search:true},
        	'gwas_population_kinships': {name:'GWAS Population Kinships',type:'KBaseGwasData.GwasPopulationKinship',ws:'KBasePublicGwasDataV2',search:true},
        	'gwas_population_variations': {name:'GWAS Population Variations',type:'KBaseGwasData.GwasPopulationVariation',ws:'KBasePublicGwasDataV2',search:true},
        	'gwas_top_variations': {name:'GWAS Top Variations',type:'KBaseGwasData.GwasTopVariations',ws:'KBasePublicGwasDataV2',search:true},
        	'gwas_population_traits': {name:'GWAS Population Traits',type:'KBaseGwasData.GwasPopulationTrait',ws:'KBasePublicGwasDataV2',search:true},
        	'gwas_gene_lists': {name:'GWAS Gene Lists',type:'KBaseGwasData.GwasGeneList',ws:'KBasePublicGwasDataV2',search:true}*/
        },
        mainListPanelHeight: '535px',
        maxNameLength: 60,
        totalPanel: null,
        resultPanel: null,
        objectList: null,
        currentCategory: null,
        currentQuery: null,
        currentPage: null,
        totalResults: null,
        itemsPerPage: 20,

        init: function(options) {
            this._super(options);
            var self = this;
            $(document).on(
            		'setWorkspaceName.Narrative', $.proxy(function(e, info) {
                        //console.log('side panel import tab -- setting ws to ' + info.wsId);
                        self.wsName = info.wsId;
                        self.data_icons = window.kbconfig.icons.data;
                        this.icon_colors = window.kbconfig.icons.colors;
                        self.render();
            		}, this)
            );
            return this;
        },

        render: function() {
        	var self = this;
        	if (!self.data_icons)
        		return;

            this.wsClient = new Workspace(this.wsUrl, {'token': this.token});
            var mrg = {'margin': '10px 0px 10px 0px'};
            var typeInput = $('<select class="form-control kb-import-filter">').css(mrg);
            for (var catPos in self.categories) {
            	var cat = self.categories[catPos];
            	var catName = self.categoryDescr[cat].name;
                typeInput.append('<option value="'+cat+'">'+catName+'</option>');
            }
            var typeFilter = $('<div class="col-sm-3">').append(typeInput);
            var filterInput = $('<input type="text" class="form-control kb-import-search" placeholder="Search data...">').css(mrg);
            typeInput.change(function() {
            	self.searchAndRender(typeInput.val(), filterInput.val());
            });
            filterInput.keyup(function(e) {
            	self.searchAndRender(typeInput.val(), filterInput.val());
            });

            var searchFilter = $('<div class="col-sm-9">').append(filterInput);

            var header = $('<div class="row">').css({'margin': '0px 10px 0px 10px'}).append(typeFilter).append(searchFilter);
            self.$elem.append(header);
            self.totalPanel = $('<div>').css({'margin': '0px 0px 0px 10px'});
            self.$elem.append(self.totalPanel);
            self.resultPanel = $('<div>')
            	.css({'overflow-x' : 'hidden', 'overflow-y':'auto', 'height':this.mainListPanelHeight })
            	.on('scroll', function() {
            		if($(this).scrollTop() + $(this).innerHeight() >= this.scrollHeight) {
            			self.renderMore();
            		}
            	});
            self.$elem.append(self.resultPanel);
			self.searchAndRender(typeInput.val(), filterInput.val());
            return this;
        },

        searchAndRender: function(category, query) {
        	var self = this;
        	if (query) {
        		query = query.trim();
        		if (query.length == 0) {
        			query = '*';
        		} else if (query.indexOf('"') < 0) {
        			var parts = query.split(/\s+/);
        			for (var i in parts)
        				if (parts[i].indexOf('*', parts[i].length - 1) < 0)
        					parts[i] = parts[i] + '*';
        			query = parts.join(' ');
        		}
        	} else {
        		query = '*';
        	}
        	if (self.currentQuery && self.currentQuery === query && category === self.currentCategory)
        		return;
        	//console.log("Sending query: " + query);
        	self.totalPanel.empty();
        	self.resultPanel.empty();
        	self.totalPanel.append($('<span>').addClass("kb-data-list-type").append('<img src="'+this.loadingImage+'"/> searching...'));
            self.objectList = [];
        	self.currentCategory = category;
        	self.currentQuery = query;
        	self.currentPage = 0;
        	self.totalResults = null;
        	self.renderMore();
        },

        renderMore: function() {
        	var self = this;
        	var cat = self.categoryDescr[self.currentCategory];
        	if (!cat.search) {
        		if (self.currentPage > 0)
        			return;
            	self.currentPage++;
            	var type = cat.type;
            	var ws = cat.ws;
            	self.wsClient.list_objects({workspaces: [ws], type: type, includeMetadata: 1}, function(data) {
            		//console.log(data);
            		var query = self.currentQuery.replace(/[\*]/g,' ').trim().toLowerCase();
            		for (var i in data) {
            			var info = data[i];
                        // object_info:
                        // [0] : obj_id objid // [1] : obj_name name // [2] : type_string type
                        // [3] : timestamp save_date // [4] : int version // [5] : username saved_by
                        // [6] : ws_id wsid // [7] : ws_name workspace // [8] : string chsum
                        // [9] : int size // [10] : usermeta meta
            			var name = info[1];
            			var id = info[1];
            			var metadata = {};
            			if (self.currentCategory === 'media') {
            				metadata['Size'] = info[9];
            			} else if (self.currentCategory === 'plant_gnms') {
            				if (info[10].Name) {
            					metadata['ID'] = id;
            					name = info[10].Name;
            				}
            				metadata['Source'] = info[10].Source;
            				metadata['Genes'] = info[10]['Number features'];
            			}
            			if (name.toLowerCase().indexOf(query) == -1)
            				continue;
            			self.objectList.push({
    						$div: null,
    						info: info,
    						id: id,
    						name: name,
    						metadata: metadata,
    						ws: cat.ws,
    						type: cat.type,
    						attached: false
    					});
    					self.attachRow(self.objectList.length - 1);
            		}
            		data.totalResults = self.objectList.length;
        			self.totalPanel.empty();
        			self.totalPanel.append($('<span>').addClass("kb-data-list-type")
        					.append("Total results: " + data.totalResults));
            	}, function(error) {
        			//console.log(error);
    				self.totalPanel.empty();
    				self.totalPanel.append($('<span>').addClass("kb-data-list-type").append("Total results: 0"));
                });
        	} else {
            	self.currentPage++;
        		self.search(self.currentCategory, self.currentQuery, self.itemsPerPage, self.currentPage, function(query, data) {
        			if (query !== self.currentQuery) {
        				//console.log("Skip results for: " + query);
        				return;
        			}
        			self.totalPanel.empty();
        			if (!self.totalResults) {
        				self.totalResults = data.totalResults;
        			}
        			if (self.currentCategory === 'genomes') {
        				for (var i in data.items) {
        					var id = data.items[i].genome_id;
        					var name = data.items[i].scientific_name;
        					var domain = data.items[i].domain;
        					var contigs = data.items[i].num_contigs
        					var genes = data.items[i].num_cds
        					self.objectList.push({
        						$div: null,
        						info: null,
        						id: id,
        						name: name,
        						metadata: {'Domain': domain, 'Contigs': contigs, 'Genes': genes},
        						ws: cat.ws,
        						type: cat.type,
        						attached: false
        					});
        					self.attachRow(self.objectList.length - 1);
        				}
        			} else if (self.currentCategory === 'metagenomes') {
        				for (var i in data.items) {
        					var id = data.items[i].object_name;
        					var name = data.items[i].metagenome_name;
        					var project = data.items[i].project_name;
        					var sample = data.items[i].sample_name;
        					self.objectList.push({
        						$div: null,
        						info: null,
        						id: id,
        						name: name,
        						metadata: {'Project': project, 'Sample': sample},
        						ws: cat.ws,
        						type: cat.type,
        						attached: false
        					});
        					self.attachRow(self.objectList.length - 1);
        				}
        			} /*else {
        				for (var i in data.items) {
        					var id = data.items[i].object_name;
        					var name = data.items[i].object_name;
        					var metadata = {};
        					if (self.currentCategory === 'gwas_populations') {
        						metadata['Genome'] = data.items[i].kbase_genome_name;
        						metadata['Source'] = data.items[i].source_genome_name;
        					} else if (self.currentCategory === 'gwas_population_kinships') {
        						metadata['Genome'] = data.items[i].kbase_genome_name;
        						metadata['Source'] = data.items[i].source_genome_name;
        					} else if (self.currentCategory === 'gwas_population_variations') {
        						metadata['Originator'] = data.items[i].originator;
        						metadata['Assay'] = data.items[i].assay;
        					} else if (self.currentCategory === 'gwas_top_variations') {
        						metadata['Trait'] = data.items[i].trait_name;
        						metadata['Ontology'] = data.items[i].trait_ontology_id;
        						metadata['Genome'] = data.items[i].kbase_genome_name;
        					} else if (self.currentCategory === 'gwas_population_traits') {
        						metadata['Trait'] = data.items[i].trait_name;
        						metadata['Ontology'] = data.items[i].trait_ontology_id;
        						metadata['Genome'] = data.items[i].kbase_genome_name;
        					} else if (self.currentCategory === 'gwas_gene_lists') {
        						metadata['Genes'] = data.items[i].gene_count;
        						metadata['SNPs'] = data.items[i].gene_snp_count;
        					}
        					self.objectList.push({
        						$div: null,
        						info: null,
        						id: id,
        						name: name,
        						metadata: metadata,
        						ws: cat.ws,
        						type: cat.type,
        						attached: false
        					});
        					self.attachRow(self.objectList.length - 1);
        				}
        			}*/
        			self.totalPanel.append($('<span>').addClass("kb-data-list-type")
        					.append("Total results: " + data.totalResults + " (" + self.objectList.length + " shown)"));
        		}, function(error) {
        			//console.log(error);
        			if (self.objectList.length == 0) {
        				self.totalPanel.empty();
        				self.totalPanel.append($('<span>').addClass("kb-data-list-type").append("Total results: 0"));
        			}
        		});
        	}
        },

        attachRow: function(index) {
            var obj = this.objectList[index];
            if (obj.attached) { return; }
            if (obj.$div) {
                this.resultPanel.append(obj.$div);
            } else {
                obj.$div = this.renderObjectRowDiv(obj);
                this.resultPanel.append(obj.$div);
            }
            obj.attached = true;
            this.n_objs_rendered++;
        },

        escapeSearchQuery: function(str) {
        	return str.replace(/[\%]/g, "").replace(/[\:\"\\]/g, "\\$&");
        },

        search: function (category, query, itemsPerPage, pageNum, ret, errorCallback) {
        	var escapedQ = this.escapeSearchQuery(query);
        	var url = this.searchUrlPrefix + '?itemsPerPage=' + itemsPerPage + '&' +
        		'page=' + pageNum + '&q=' + encodeURIComponent(escapedQ) + '&category=' + category;
        	var promise = jQuery.Deferred();
        	jQuery.ajax(url, {
        		success: function (data) {
        			ret(query, data);
        			promise.resolve();
        		},
        		error: function(jqXHR, error){
        			if (errorCallback)
    					errorCallback(error);
        			promise.resolve();
        		},
        		headers: {},
        		type: "GET"
        	});

        	return promise;
        },

        renderObjectRowDiv: function(object) {
            var self = this;
            var type_tokens = object.type.split('.')
            var type_module = type_tokens[0];
            var type = type_tokens[1].split('-')[0];

            var $addDiv =
                $('<div>').append(
                    $('<button>').addClass('kb-primary-btn').css({'white-space':'nowrap', padding:'10px 15px'})
                        .append($('<span>').addClass('fa fa-chevron-circle-left').append(' Add'))
                        .on('click',function() { // probably should move action outside of render func, but oh well
                            $(this).attr("disabled","disabled");
                            $(this).html('<img src="'+self.loadingImage+'">');

                            var thisBtn = this;
                            var targetName = object.name;
                            if (!isNaN(targetName))
                            	targetName = self.categoryDescr[self.currentCategory].type.split('.')[1] + ' ' + targetName;
                            targetName = targetName.replace(/[^a-zA-Z0-9|\.\-_]/g,'_');
                            console.log("Copying " + object.ws + "/" + object.id + " -> " + self.wsName + "/" + targetName);
                            self.wsClient.copy_object({
                                to:   {ref: self.wsName + "/" + targetName},
                                from: {ref: object.ws +   "/" + object.id} },
                                function (info) {
                                    $(thisBtn).html('Added');
                                    self.trigger('updateDataList.Narrative');
                                },
                                function(error) {
                                    $(thisBtn).html('Error');
                                    if (error.error && error.error.message) {
                                        if (error.error.message.indexOf('may not write to workspace')>=0) {
                                            self.options.$importStatus.html($('<div>').css({'color':'#F44336','width':'500px'}).append('Error: you do not have permission to add data to this Narrative.'));
                                        } else {
                                            self.options.$importStatus.html($('<div>').css({'color':'#F44336','width':'500px'}).append('Error: '+error.error.message));
                                        }
                                    } else {
                                        self.options.$importStatus.html($('<div>').css({'color':'#F44336','width':'500px'}).append('Unknown error!'));
                                    }
                                    console.error(error);
                                });

                        }));

            var shortName = object.name;
            var isShortened=false;
            if (shortName.length>this.maxNameLength) {
                shortName = shortName.substring(0,this.maxNameLength-3)+'...';
                isShortened=true;
            }
            var landingPageLink = this.options.default_landing_page_url + object.ws + '/' + object.id;
            var ws_landing_page_map = window.kbconfig.landing_page_map;
            if (ws_landing_page_map && ws_landing_page_map[type_module] && ws_landing_page_map[type_module][type]) {
            	landingPageLink = this.options.landing_page_url +
            			ws_landing_page_map[type_module][type] + "/" + object.ws + '/' + object.id;
            }
            var $name = $('<span>').addClass("kb-data-list-name").append('<a href="'+landingPageLink+'" target="_blank">' + shortName + '</a>');
            if (isShortened) { $name.tooltip({title:object.name, placement:'bottom'}); }

            var $btnToolbar = $('<span>').addClass('btn-toolbar pull-right').attr('role', 'toolbar').hide();
            var btnClasses = "btn btn-xs btn-default";
            var css = {'color':'#888'};
            var $openLandingPage = $('<span>')
                                        // tooltips showing behind pullout, need to fix!
                                        //.tooltip({title:'Explore data', 'container':'#'+this.mainListId})
                                        .addClass(btnClasses)
                                        .append($('<span>').addClass('fa fa-binoculars').css(css))
                                        .click(function(e) {
                                            e.stopPropagation();
                                            window.open(landingPageLink);
                                        });

            var $openProvenance = $('<span>')
                                        .addClass(btnClasses).css(css)
                                        //.tooltip({title:'View data provenance and relationships', 'container':'body'})
                                        .append($('<span>').addClass('fa fa-sitemap fa-rotate-90').css(css))
                                        .click(function(e) {
                                            e.stopPropagation();
                                            window.open(self.options.landing_page_url+'objgraphview/'+object.ws+'/'+object.id);
                                        });
            $btnToolbar.append($openLandingPage).append($openProvenance);

            var titleElement = $('<span>').css({'margin':'10px'}).append($btnToolbar.hide()).append($name);
            for (var key in object.metadata) {
            	var value = $('<span>').addClass("kb-data-list-type").append('&nbsp;&nbsp;' + key + ':&nbsp;' + object.metadata[key]);
            	titleElement.append('<br>').append(value);
            }

      var icons = this.data_icons;
      var icon = null;
      if (icons) {
    	  icon = _.has(icons, type) ? icons[type] : icons['DEFAULT'];
      } else {
    	  ison = [];
      }
      var $logo = $('<span>')
      // background circle
      .addClass("fa-stack fa-2x").css({'cursor':'pointer'})
      .append($('<i>')
      .addClass("fa fa-circle fa-stack-2x")
      .css({'color': this.logoColorLookup(type)}));
      // add stack of font-awesome icons
      _.each(icon, function(cls) {
        $logo.append($('<i>')
        .addClass("fa fa-inverse fa-stack-1x " + cls));
      });

	    var $topTable = $('<table>')
                                 .css({'width':'100%','background':'#fff'})  // set background to white looks better on DnD
                                 .append($('<tr>')
                                         .append($('<td>')
                                                 .css({'width':'90px'})
                                                .append($addDiv.hide()))
                                         .append($('<td>')
                                                 .css({'width':'50px'})
                                                 .append($logo))/*$('<span>')
                                            		 	.addClass("kb-data-list-logo")
                                            		 	.css({'background-color':this.logoColorLookup(type)})
                                            		 	.append(type.substring(0,1))))*/
                                         .append($('<td>')
                                                 .append(titleElement)));

	    var $row = $('<div>')
                                .css({margin:'2px',padding:'4px','margin-bottom': '5px'})
                                //.addClass('kb-data-list-obj-row')
                                .append($('<div>').addClass('kb-data-list-obj-row-main')
                                            .append($topTable))
                                // show/hide ellipses on hover, show extra info on click
                                .mouseenter(function(){
                                    //if (!$moreRow.is(':visible')) { $toggleAdvancedViewBtn.show(); }
                                    $addDiv.show();
                                    $btnToolbar.show();
                                })
                                .mouseleave(function(){
                                    //$toggleAdvancedViewBtn.hide();
                                    $addDiv.hide();
                                    $btnToolbar.hide();
                                });

            var $rowWithHr = $('<div>')
                                    .append($('<hr>')
                                                .addClass('kb-data-list-row-hr')
                                                .css({'margin-left':'155px'}))
                                    .append($row);
            return $rowWithHr;
        },

        showError: function(error) {
        	console.log(error);
        	var errorMsg = error;
        	if (error.error && error.error.message)
        		errorMsg = error.error.message;
        	this.infoPanel.empty();
        	this.infoPanel.append('<span class="label label-danger">Error: '+errorMsg+'"</span>');
        },

        logoColorLookup:function(type) {
          var code = 0;
          for (var i=0; i < type.length; code += type.charCodeAt(i++));
          return this.icon_colors[ code % this.icon_colors.length ];
        },

        showInfo: function(message, spinner) {
        	if (spinner)
        		message = '<img src="'+this.loadingImage+'"/> ' + message;
        	this.infoPanel.empty();
        	this.infoPanel.append(message);
        },

        loggedInCallback: function(event, auth) {
            this.token = auth.token;
            this.render();
            return this;
        },

        loggedOutCallback: function(event, auth) {
            this.token = null;
            this.render();
            return this;
        },

        uuid: function() {
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g,
                function(c) {
                    var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);
                    return v.toString(16);
                });
        }
    });
})( jQuery );

/**
 * @author Michael Sneddon <mwsneddon@lbl.gov>
 * @public
 */
(function( $, undefined ) {
    $.KBWidget({
        name: 'kbaseNarrativeExampleDataTab',
        parent: 'kbaseAuthenticatedWidget',
        version: '1.0.0',
        options: {
            ws_name: null, // must be the WS name, not the WS Numeric ID
            ws_url:"https://kbase.us/services/ws",
            landing_page_url: "/functional-site/#/", // !! always include trailing slash
            default_landing_page_url: "/functional-site/#/json/", // ws_name/obj_name,
            loadingImage: 'static/kbase/images/ajax-loader.gif',
            exampleWsId: 2901, // designed to be a workspace with just a handful of objects
	    $importStatus:$('<div>'),
            exampleTypeOrder: [
                {name:['AssemblyInput','SingleEndLibrary','PairedEndLibrary','ReferenceAssembly'], displayName: "Example Sequence Assembly Inputs", header:'Various types of read data configured for sequence assembly.'},
                {name:['ContigSet'], displayName: "Example Contig Sets", header:'A set of DNA sequences'},
                {name:['Genome'], displayName: "Example Genomes", header:'Genomic sequence generally with attached functional annotations'},
                {name:['FBAModel'], displayName: "Example FBAModels", header:'A metabolic model of an organism'},
                {name:['Media'], displayName: "Example Media", header:'Specification of an environmental condition'},
                {name:['Collection', 'Metagenome'], displayName: "Example Metagenomic Data Sets", header:'Sets of WGS and amplicon metagenomes'},
                {name:['TranscriptomeHack'], displayName: "Example Sorghum Transcriptomes", header:'Sorghum bicolor transcriptome data in response to ABA and osmotic stress'}
                ]

        },

        ws: null,
        narWs:null,
        ws_landing_page_map: {},

        $mainPanel:null,
        $loadingDiv:null,


        /**
         * @method init
         * Builds the DOM structure for the widget.
         * Includes the tables and panel.
         * If any data was passed in (options.data), that gets shoved into the datatable.
         * @param {Object} - the options set.
         * @returns {Object} this shiny new widget.
         * @private
         */
        init: function(options) {
            this._super(options);
            var self = this;
            this.getLandingPageMap();  //start off this request so that we hopefully get something back right away

            this.$loadingDiv = $('<div>').addClass('kb-data-loading')
                                 .append('<img src="' + this.options.loadingImage + '">');
            this.$elem.append(this.$loadingDiv);
            this.$mainPanel = $('<div>')
                .css({'overflow-y':'auto','height':'604px'});
            this.$elem.append(this.$mainPanel);

            if (window.kbconfig && window.kbconfig.urls) {
                this.options.ws_url = window.kbconfig.urls.workspace;
                this.data_icons = window.kbconfig.icons.data;
                this.icon_colors = window.kbconfig.icons.colors;
            }
            this.showLoading();

            var self = this;
            $(document).on('setWorkspaceName.Narrative', function(e, info){
                self.narWs = info.wsId;
                self.getExampleDataAndRender();
            })
            return this;
        },

        refresh: function() { },

        objectList:null,

        getExampleDataAndRender: function() {
            var self = this;
            if (self.narWs && self.ws) {
                self.ws.list_objects({
                        ids : [self.options.exampleWsId],
                        includeMetadata: 1
                    },
                    function(infoList) {
                        self.objectList = [];
                        // object_info:
                        // [0] : obj_id objid // [1] : obj_name name // [2] : type_string type
                        // [3] : timestamp save_date // [4] : int version // [5] : username saved_by
                        // [6] : ws_id wsid // [7] : ws_name workspace // [8] : string chsum
                        // [9] : int size // [10] : usermeta meta
                        for (var i=0; i<infoList.length; i++) {
                            // skip narrative objects
                            if (infoList[i][2].indexOf('KBaseNarrative') == 0) { continue; }
                            if (infoList[i][1].indexOf('Transcriptome') == 0) {
                                infoList[i][2] = 'TranscriptomeHack';
                            }
                            self.objectList.push({
                                    $div:self.renderObjectRowDiv(infoList[i]), // we defer rendering the div until it is shown
                                    info:infoList[i]
                                }
                            );
                        }
                        self.renderData();
                    },
                    function(error) {
                        self.$mainPanel.show();
                        self.$mainPanel.append("error: ");
                        self.$mainPanel.append(error.error.message);
                        console.error(error);
                        self.hideLoading();
                    });
            }

        },


        renderData: function() {
            var self = this;
            if (!self.objectList) { return; }

            var typeDivs = {};
            for(var t=0; t<self.options.exampleTypeOrder.length; t++) {
                var typeInfo = self.options.exampleTypeOrder[t];
                var $tc = $('<div>')
                            .append($('<div>').css({'margin':'15px'})
                                .append($('<div>').css({'margin':'4px','margin-top':'15px','color':'#555','font-size':'large','font-weight':'bold'})
                                        .append(typeInfo.displayName))
                                .append($('<div>').css({'margin':'4px','color':'#555'})
                                        .append(typeInfo.header)));
                for(var k=0; k<typeInfo.name.length; k++) {
                    typeDivs[typeInfo.name[k]] = $tc;
                }
            }
            var $tc = $('<div>')
                            .append($('<div>').css({'margin':'15px'})
                                .append($('<div>').css({'margin':'4px','margin-top':'15px','color':'#555','font-size':'large','font-weight':'bold'})
                                        .append('Other Examples'))
                                .append($('<div>').css({'margin':'4px','color':'#555'})
                                        .append('Assorted data types used in more advanced analyses')));
            typeDivs['other.types'] = $tc;

            var hasOthers = false;
            self.objectList.sort(function(a,b) {
                                        if (a.info[2].toUpperCase() > b.info[2].toUpperCase()) return -1; // sort by type
                                        if (a.info[2].toUpperCase() < b.info[2].toUpperCase()) return 1;
                                        if (a.info[1].toUpperCase() > b.info[1].toUpperCase()) return -1; // then by name
                                        if (a.info[1].toUpperCase() < b.info[1].toUpperCase()) return 1;
                                        return 0;
                                    });
            for (var k=0; k<self.objectList.length; k++) {
                var obj = self.objectList[k];
                var typeName='';
                if (obj.info[2]==='TranscriptomeHack') {
                    typeName=obj.info[2];
                } else {
                    typeName = obj.info[2].split('-')[0].split('.')[1];
                }

                if (typeDivs.hasOwnProperty(typeName)) {
                    typeDivs[typeName].append(obj.$div);
                } else {
                    typeDivs['other.types'].append(obj.$div);
                    hasOthers = true;
                }
            }

            for(var t=0; t<self.options.exampleTypeOrder.length; t++) {
                self.$mainPanel.append(typeDivs[self.options.exampleTypeOrder[t].name[0]]);
            }
            if (hasOthers) {
                self.$mainPanel.append(typeDivs['other.types']);
            }

            self.hideLoading();
        },

        getObjData: function(type, ignoreVersion) {
            if (type) {
                var dataSet = {};
                if (typeof type === 'string') {
                    type = [type];
                }
                for (var i=0; i<type.length; i++) {
                    if (this.obj_data[type[i]]) {
                        dataSet[type[i]]=this.obj_data[type[i]];
                    }
                }
                return dataSet;
            }
            return this.obj_data;
        },

        renderObjectRowDiv: function(object_info) {
            var self = this;
            // object_info:
            // [0] : obj_id objid // [1] : obj_name name // [2] : type_string type
            // [3] : timestamp save_date // [4] : int version // [5] : username saved_by
            // [6] : ws_id wsid // [7] : ws_name workspace // [8] : string chsum
            // [9] : int size // [10] : usermeta meta
            var type = '';
            if (object_info[2]==='TranscriptomeHack') {
                type='Genome';
            } else {
                var type_tokens = object_info[2].split('.')
                var type_module = type_tokens[0];
                type = type_tokens[1].split('-')[0];
            }

            var $addDiv =
                $('<div>').append(
                    $('<button>').addClass('kb-primary-btn').css({'white-space':'nowrap', padding:'10px 15px'})
                        .append($('<span>').addClass('fa fa-chevron-circle-left').append(' Add'))
                        .on('click',function() { // probably should move action outside of render func, but oh well
                            $(this).attr("disabled","disabled");
                            $(this).html('<img src="'+self.options.loadingImage+'">');

                            var thisBtn = this;
                            self.ws.copy_object({
                                to:   {ref: self.narWs     + "/" + object_info[1]},
                                from: {ref: object_info[6] + "/" + object_info[0]} },
                                function (info) {
                                    $(thisBtn).html('Added');
                                    self.trigger('updateDataList.Narrative');
                                },
                                function(error) {
                                    $(thisBtn).html('Error');
                                    if (error.error && error.error.message) {
                                        if (error.error.message.indexOf('may not write to workspace')>=0) {
                                            self.options.$importStatus.html($('<div>').css({'color':'#F44336','width':'500px'}).append('Error: you do not have permission to add data to this Narrative.'));
                                        } else {
                                            self.options.$importStatus.html($('<div>').css({'color':'#F44336','width':'500px'}).append('Error: '+error.error.message));
                                        }
                                    } else {
                                        self.options.$importStatus.html($('<div>').css({'color':'#F44336','width':'500px'}).append('Unknown error!'));
                                    }
                                    console.error(error);
                                });

                        }));

            var shortName = object_info[1]; var isShortened=false;
            /*if (shortName.length>this.options.max_name_length) {
                shortName = shortName.substring(0,this.options.max_name_length-3)+'...';
                isShortened=true;
            }*/
            var $name = $('<span>').addClass("kb-data-list-name").append(shortName);
            if (isShortened) { $name.tooltip({title:object_info[1], placement:'bottom'}); }
            var $type = $('<span>').addClass("kb-data-list-type").append(type);

            var metadata = object_info[10];
            var metadataText = '';
            for(var key in metadata) {
                if (metadata.hasOwnProperty(key)) {
                    metadataText += '<tr><th>'+ key +'</th><td>'+ metadata[key] + '</td></tr>';
                }
            }
            if (type==='Genome') {
                if (metadata.hasOwnProperty('Name')) {
                    $type.html('Genome: '+metadata['Name']);
                }
            }
            /*
            var landingPageLink = this.options.default_landing_page_url +object_info[7]+ '/' + object_info[1];
            if (this.ws_landing_page_map) {
                if (this.ws_landing_page_map[type_module]) {
                    if (this.ws_landing_page_map[type_module][type]) {
                        landingPageLink = this.options.landing_page_url +
                            this.ws_landing_page_map[type_module][type] + "/" +
                            object_info[7]+ '/' + object_info[1];
                    }
                }
            }

            var $moreRow  = $('<div>').addClass("kb-data-list-more-div").hide()
                                .append($('<div>').css({'text-align':'center','margin':'5pt'})
                                            .append('<a href="'+landingPageLink+'" target="_blank">'+
                                                        'explore data</a>&nbsp&nbsp|&nbsp&nbsp')
                                            .append('<a href="'+this.options.landing_page_url+'objgraphview/'+object_info[7] +'/'+object_info[1] +'" target="_blank">'+
                                                        'view provenance</a><br>'))
                                .append(
                                    $('<table style="width=100%">')
                                        .append("<tr><th>Permament Id</th><td>" +object_info[6]+ "/" +object_info[0]+ "/" +object_info[4] + '</td></tr>')
                                        .append(metadataText));

            var $toggleAdvancedViewBtn = $('<span>').addClass('btn btn-default btn-xs kb-data-list-more-btn')
                .html('<span class="fa fa-plus" style="color:#999" aria-hidden="true"/>')
                .on('click',function() {
                        var $more = $(this).closest(".kb-data-list-obj-row").find(".kb-data-list-more-div");
                        if ($more.is(':visible')) {
                            $more.slideToggle('fast');
                            $(this).html('<span class="fa fa-plus" style="color:#999" aria-hidden="true" />');
                        } else {
                            $more.slideToggle('fast');
                            $(this).html('<span class="fa fa-minus" style="color:#999" aria-hidden="true" />');
                        }
                    });*/
            var icons = this.data_icons;
            var icon = _.has(icons, type) ? icons[type] : icons['DEFAULT'];
            var $logo = $('<span>')
            // background circle
            .addClass("fa-stack fa-2x").css({'cursor':'pointer'})
            .append($('<i>')
            .addClass("fa fa-circle fa-stack-2x")
            .css({'color': this.logoColorLookup(type)}));
            // add stack of font-awesome icons
            _.each(icon, function(cls) {
              $logo.append($('<i>')
              .addClass("fa fa-inverse fa-stack-1x " + cls));
            });

            var $topTable = $('<table>')
                                 .css({'width':'100%','background':'#fff'})  // set background to white looks better on DnD
                                 .append($('<tr>')
                                         .append($('<td>')
                                                 .css({'width':'90px'})
                                                .append($addDiv.hide()))
                                         .append($('<td>')
                                                 .css({'width':'50px'})
                                                 .append($logo))/*$('<span>')
                                            		 	.addClass("kb-data-list-logo")
                                            		 	.css({'background-color':this.logoColorLookup(type)})
                                            		 	.append(type.substring(0,1))))*/
                                         .append($('<td>')
                                                 .append($name).append('<br>').append($type)));

	    var $row = $('<div>')
                                .css({margin:'2px',padding:'4px','margin-bottom': '5px'})
                                //.addClass('kb-data-list-obj-row')
                                .append($('<div>').addClass('kb-data-list-obj-row-main')
                                            .append($topTable))
                                .mouseenter(function(){
                                    $addDiv.show();
                                })
                                .mouseleave(function(){
                                    $addDiv.hide();
                                });

            return $row;
        },



        renderMore: function() {
            var self=this;
            if (self.objectList) {

                if (!self.searchFilterOn) { // if search filter is off, then we just are showing everything
                    var start = self.n_objs_rendered;
                    for(var i=start; i<self.objectList.length; i++) {
                        // only show them as we scroll to them
                        if (self.n_objs_rendered >= start+self.options.objs_to_render_on_scroll) {
                            break;
                        }
                        self.attachRow(i);
                    }
                    //console.log('showing '+ self.n_objs_rendered + ' of ' + self.objectList.length);
                } else {
                    // search filter is on, so we have to base this on what is currently filtered
                    var start = self.n_filteredObjsRendered;
                    for(var i=start; i<self.currentMatch.length; i++) {
                        // only show them as we scroll to them
                        if (self.n_filteredObjsRendered >= start+self.options.objs_to_render_on_scroll) {
                            break;
                        }
                        self.attachRowElement(self.currentMatch[i]);
                        self.n_filteredObjsRendered++;
                    }
                    //console.log('showing '+ self.n_filteredObjsRendered + ' of ' + self.currentMatch.length + ' objs matching search filter');
                }
            }
        },

        attachRow: function(index) {
            if (this.objectList[index].attached) { return; }
            if (this.objectList[index].$div) {
                this.$mainListDiv.append(this.objectList[index].$div);
            } else {
                this.objectList[index].$div = this.renderObjectRowDiv(this.objectList[index].info);
                this.$mainListDiv.append(this.objectList[index].$div);
            }
            this.objectList[index].attached = true;
            this.n_objs_rendered++;
        },
        attachRowElement: function(row) {
            if (row.attached) { return; } // return if we are already attached
            if (row.$div) {
                this.$mainListDiv.append(row.$div);
            } else {
                row.$div = this.renderObjectRowDiv(row.info);
                this.$mainListDiv.append(row.$div);
            }
            row.attached = true;
            this.n_objs_rendered++;
        },

        detachAllRows: function() {
            for (var i=0; i<this.objectList.length; i++) {
                this.detachRow(i);
            }
            this.$mainListDiv.children().detach();
            this.n_objs_rendered=0;
            this.renderedAll = false;
        },
        detachRow: function(index) {
            if (this.objectList[index].attached) {
                if (this.objectList[index].$div) {
                    this.objectList[index].$div.detach();
                }
                this.objectList[index].attached = false;
                this.n_objs_rendered--;
            }
        },


        renderList: function() {
            var self = this;
            self.showLoading();

            self.detachAllRows();

            if (self.objectList.length>0) {
                for(var i=0; i<self.objectList.length; i++) {
                    // only show up to the given number
                    if (i>=self.options.objs_to_render_to_start) {
                        self.n_objs_rendered = i;
                        break;
                    }
                    self.attachRow(i);
                }
            } else {
                // todo: show an upload button or some other message if there are no elements
                self.$mainListDiv.append($('<div>').css({'text-align':'center','margin':'20pt'}).append("No data added yet."));
            }

            self.hideLoading();
        },

        renderController: function() {
            var self = this;

            var $byDate = $('<label id="nar-data-list-default-sort-label" class="btn btn-default">').addClass('btn btn-default')
                                .append($('<input type="radio" name="options" id="nar-data-list-default-sort-option" autocomplete="off">'))
                                .append("date")
                                .on('click',function() {
                                    self.sortData(function(a,b) {
                                        if (a.info[3] > b.info[3]) return -1; // sort by date
                                        if (a.info[3] < b.info[3]) return 1;  // sort by date
                                        return 0;
                                    });
                                });

            var $byName = $('<label class="btn btn-default">')
                                .append($('<input type="radio" name="options" id="option2" autocomplete="off">'))
                                .append("name")
                                .on('click',function() {
                                    self.sortData(function(a,b) {
                                        if (a.info[1].toUpperCase() < b.info[1].toUpperCase()) return -1; // sort by name
                                        if (a.info[1].toUpperCase() > b.info[1].toUpperCase()) return 1;
                                        return 0;
                                    });
                                });

            var $byType = $('<label class="btn btn-default">')
                                .append($('<input type="radio" name="options" id="option3" autocomplete="off">'))
                                .append("type")
                                .on('click',function() {
                                    self.sortData(function(a,b) {
                                        if (a.info[2].toUpperCase() > b.info[2].toUpperCase()) return -1; // sort by type
                                        if (a.info[2].toUpperCase() < b.info[2].toUpperCase()) return 1;
                                        return 0;
                                    });
                                });
            var $upOrDown = $('<button class="btn btn-default btn-sm" type="button">').css({'margin-left':'5px'})
                                .append('<span class="glyphicon glyphicon-sort" style="color:#777" aria-hidden="true" />')
                                .on('click',function() {
                                    self.reverseData();
                                });

            var $sortByGroup = $('<div data-toggle="buttons">')
                                    .addClass("btn-group btn-group-sm")
                                    .css({"margin":"2px"})
                                    .append($byDate)
                                    .append($byName)
                                    .append($byType);

            var $addDataBtn = $('<button>')
                                .addClass("btn btn-warning kb-data-list-get-data-button")
                                .append('<span class="fa fa-plus" style="color:#fff" aria-hidden="true" /> Get Data')
                                .on('click',function() {
                                    self.trigger('toggleSidePanelOverlay.Narrative');

                                      // Lovely hack to make the 'Get Data' button behave like a method/app panel button.
                                    /*  self.methClient.get_method_spec({ 'ids' : ['import_genome_data_generic'] },
                                          function(spec) {
                                              self.trigger('methodClicked.Narrative', spec[0]);
                                          },
                                          function(error) {
                                              self.showError(error);
                                          }
                                      );*/
                                });


            var $openSearch = $('<span>').addClass('btn btn-default kb-data-list-nav-buttons')
                .html('<span class="fa fa-search" style="color:#666" aria-hidden="true"/>')
                .on('click',function() {
                    if(!self.$searchDiv.is(':visible')) {
                        self.$searchDiv.show();
                        self.$sortByDiv.hide();
                        self.$filterTypeDiv.hide();
                    } else {
                        self.$searchDiv.hide();
                    }
                });
            var $openSort = $('<span>').addClass('btn btn-default kb-data-list-nav-buttons')
                .html('<span class="fa fa-sort-amount-asc" style="color:#666" aria-hidden="true"/>')
                .on('click',function() {
                    if(!self.$sortByDiv.is(':visible')) {
                        self.$sortByDiv.show();
                        self.$searchDiv.hide();
                        self.$filterTypeDiv.hide();
                    } else {
                        self.$sortByDiv.hide();
                    }
                });
            var $openFilter = $('<span>').addClass('btn btn-default kb-data-list-nav-buttons')
                .html('<span class="fa fa-filter" style="color:#666" aria-hidden="true"/>')
                .on('click',function() {
                    if(!self.$filterTypeDiv.is(':visible')) {
                        self.$filterTypeDiv.show();
                        self.$sortByDiv.hide();
                        self.$searchDiv.hide();
                    } else {
                        self.$filterTypeDiv.hide();
                    }
                });

            self.$searchInput = $('<input type="text">').addClass('form-control');
            self.$searchDiv = $('<div>').addClass("input-group").css({'margin-bottom':'10px'})
                                .append(self.$searchInput)
                                .append($("<span>").addClass("input-group-addon")
                                            .append($("<span>")
                                                .addClass("glyphicon glyphicon-search")
                                                .css({'cursor':'pointer'})
                                                .on('click',function() {
                                                        self.search();
                                                    })  ));

            self.$sortByDiv = $('<div>').css({'margin':'3px','margin-left':'5px','margin-bottom':'10px'})
                                .append("<small>sort by: </small>")
                                .append($sortByGroup)
                                .append($upOrDown);

            self.$filterTypeSelect = $('<select>').addClass("form-control")
                                        .append($('<option value="">'))
                                        .change(function() {
                                            var optionSelected = $(this).find("option:selected");
                                            var typeSelected  = optionSelected.val();
                                            //var textSelected   = optionSelected.text();
                                            self.filterByType(typeSelected);
                                        });

            self.$filterTypeDiv = $('<div>').css({'margin':'3px','margin-left':'5px','margin-bottom':'10px'})
                                .append(self.$filterTypeSelect);



            var $header = $('<div>').addClass('row').css({'margin':'5px'})
                    .append($('<div>').addClass('col-xs-7').css({'margin':'0px','padding':'0px'})
                        .append($openSearch)
                        .append($openSort)
                        .append($openFilter))
                    .append($('<div>').addClass('col-xs-5').css({'margin':'0px','padding':'0px','text-align':'right'})
                        .append($addDataBtn));


            self.$sortByDiv.hide();
            self.$searchDiv.hide();
            self.$filterTypeDiv.hide();

            var $filterDiv = $('<div>')
                                .append(self.$sortByDiv)
                                .append(self.$searchDiv)
                                .append(self.$filterTypeDiv);

            self.$controllerDiv.append($header).append($filterDiv);
        },

        populateAvailableTypes: function() {
            var self = this;
            if (self.availableTypes && self.$filterTypeSelect) {

                var types = [];
                for(var type in self.availableTypes) {
                    if(self.availableTypes.hasOwnProperty(type)) {
                        types.push(type);
                    }
                }
                types.sort();

                self.$filterTypeSelect.empty();
                self.$filterTypeSelect.append($('<option value="">'));
                for(var i=0; i<types.length; i++) {
                    var countStr = " (".concat(self.availableTypes[types[i]].count).concat(" objects)");
                    self.$filterTypeSelect.append(
                        $('<option value="'+self.availableTypes[types[i]].type+'">')
                            .append(self.availableTypes[types[i]].type + countStr));
                }
            }
        },


        reverseData: function() {
            var self = this;
            if (!self.objectList) { return; }

            self.objectList.reverse();
            self.renderList();
            self.search();

            self.hideLoading();
        },

        sortData: function(sortfunction) {
            var self = this;
            if (!self.objectList) { return; }
            //should add spinning wait bar ....
            self.showLoading();

            self.objectList.sort(sortfunction);
            self.renderList();
            self.search();  // always refilter on the search term search if there is something there

            self.hideLoading();

            // go back to the top on sort
            self.$mainListDiv.animate({
                scrollTop:0
            }, 300); // fast = 200, slow = 600
        },


        currentMatch: [],
        currentTerm: '',
        searchFilterOn: false,
        n_filteredObjsRendered: null,

        search: function(term, type) {
            var self = this;
            if (!self.objectList) { return; }

            if (!term && self.$searchInput) {
                term = self.$searchInput.val();
            }

            // if type wasn't selected, then we try to get something that was set
            if (!type) {
                if (self.$filterTypeSelect) {
                    type = self.$filterTypeSelect.find("option:selected").val();
                }
            }

            term = term.trim();
            if (term.length>0 || type) {
                self.searchFilterOn = true;
                // todo: should show searching indicator (could take several seconds if there is a lot of data)
                // optimization => we filter existing matches instead of researching everything if the new
                // term starts with the last term searched for
                var newMatch = [];
                if (!self.currentTerm) {
                    // reset if currentTerm is null or empty
                    self.currentMatch = self.objectList;
                } else {
                    if (term.indexOf(self.currentTerm)!==0) {
                        self.currentMatch = self.objectList;
                    }
                }
                // clean the term for regex use
                term = term.replace(/\|/g,'\\|').replace(/\\\\\|/g,'|'); // bars are common in kb ids, so escape them unless we have \\|
                term = term.replace(/\./g,'\\.').replace(/\\\\\./g,'.'); // dots are common in names, so we escape them, but
                                                                         // if a user writes '\\.' we assume they want the regex '.'

                var regex = new RegExp(term, 'i');

                var n_matches = 0; self.n_filteredObjsRendered = 0;
                for(var k=0; k<self.currentMatch.length; k++) {
                    // [0] : obj_id objid // [1] : obj_name name // [2] : type_string type
                    // [3] : timestamp save_date // [4] : int version // [5] : username saved_by
                    // [6] : ws_id wsid // [7] : ws_name workspace // [8] : string chsum
                    // [9] : int size // [10] : usermeta meta
                    var match = false;
                    var info = self.currentMatch[k].info;
                    if (regex.test(info[1])) { match = true; } // match on name
                    else if (regex.test(info[2].split('.')[1].split('-'))) { match = true; } // match on type name
                    else if (regex.test(info[5])) { match = true; } // match on saved_by user

                    if (!match && info[10]) { // match on metadata values
                        for(var metaKey in info[10]) {
                            if (info[10].hasOwnProperty(metaKey)) {
                                if (regex.test(info[10][metaKey])) { match = true; break; }
                                else if (regex.test(metaKey+"::"+info[10][metaKey])) {
                                    match = true; break;
                                }
                            }
                        }
                    }


                    if (type) { // if type is defined, then our sort must also filter by the type
                        if (type !== info[2].split('-')[0].split('.')[1]) {
                            match = false; // no match if we are not the selected type!
                        }
                    }

                    if (match) {
                        // matches must always switch to show if they are rendered
                        if (self.currentMatch[k].$div) {
                            self.currentMatch[k].$div.show();
                        }

                        // todo: add check so we only show up to the number we render... switching to this will require that
                        // we revise the renderMore logic...
                        if (n_matches < self.options.objs_to_render_to_start) {
                            self.attachRowElement(self.currentMatch[k]);
                            self.n_filteredObjsRendered++;
                        }

                        newMatch.push(self.currentMatch[k]);
                        n_matches++;
                    }
                    else {
                        if (self.currentMatch[k].$div) {
                            self.currentMatch[k].$div.hide();
                        }
                    }
                }
                self.currentMatch = newMatch; // update the current match
            } else {
                self.searchFilterOn = false;
                // no new search, so show all and render the list
                for(var k=0; k<self.objectList.length; k++) {
                    if (self.objectList[k].$div) {
                        self.objectList[k].$div.show();
                    }
                }
                self.renderList();
            }
            self.currentTerm = term;
        },


        filterByType: function(type) {
            var self = this;
            self.search(null,type);
        },

        getRichData: function(object_info,$moreRow) {
            var self = this;
            var $usernameTd = $moreRow.find(".kb-data-list-username-td");
            self.displayRealName(object_info[5],$usernameTd);
        },

        showLoading : function() {
            this.$loadingDiv.show();
            this.$mainPanel.hide();
        },
        hideLoading : function() {
            this.$loadingDiv.hide();
            this.$mainPanel.show();
        },

        displayRealName: function(username,$targetSpan) {
	    var self = this;
	    // todo : use globus to populate user names, but we use a hack because of globus CORS headers
	    if (self.ws) { // make sure we are logged in and have some things

                if (self.real_name_lookup[username]) {
                    $targetSpan.html(self.real_name_lookup[username]+" ("+username+")");
                } else {
                    self.real_name_lookup[username] = "..."; // set a temporary value so we don't search again
                    $targetSpan.html(username);
                    $.ajax({
                            type: "GET",
                            url: self.options.user_name_fetch_url + username + "&token="+self._attributes.auth.token,
                            dataType:"json",
                            crossDomain : true,
                            success: function(data,res,jqXHR) {
                                if (username in data['data'] && data['data'][username]['fullName']) {
                                    self.real_name_lookup[username] = data['data'][username]['fullName'];
                                    $targetSpan.html(self.real_name_lookup[username]+" ("+username+")");
                                }
                            },
                            error: function(jqXHR, textStatus, errorThrown) {
                                //do nothing
                            }
                        });
                }
	    }
        },

        getLandingPageMap: function() {
            this.ws_landing_page_map = window.kbconfig.landing_page_map;
        },

        loggedInCallback: function(event, auth) {
            this.ws = new Workspace(this.options.ws_url, auth);
            this.getExampleDataAndRender();
            return this;
        },

        loggedOutCallback: function(event, auth) {
            this.ws = null;
            this.isLoggedIn = false;
            return this;
        },

        logoColorLookup:function(type) {
          var code = 0;
          for (var i=0; i < type.length; code += type.charCodeAt(i++));
          return this.icon_colors[ code % this.icon_colors.length ];
        }

    })

})(jQuery);

(function($, undefined) {
    $.KBWidget({
        name: 'kbaseNarrativeCellMenu',
        parent: 'kbaseWidget',
        options: {},

        init: function(options) {
            this._super(options);

            var $deleteBtn = $('<button type="button" class="btn btn-default btn-xs" data-toggle="tooltip" data-placement="left" Title="Delete Cell">')
                              .css({"background-color": "transparent"})
                             .append($('<span class="fa fa-trash-o" style="font-size:14pt; padding-left: 5px;">'))
                             .click($.proxy(function() {
                    this.trigger('deleteCell.Narrative', IPython.notebook.get_selected_index());
                }, this));

            var $btn = $('<button type="button" data-toggle="dropdown" aria-haspopup="true" class="btn btn-default btn-xs">')
                      .css({"background-color": "transparent"})
                       .append($('<span class="fa fa-cog" style="font-size:14pt">'));

            this.$menu = $('<ul>')
                         .addClass('dropdown-menu')
                         .css({
                                'right' : '0',
                                'left' : 'auto',
                                'margin' : '0'
                         });

            if (window.kbconfig && window.kbconfig.mode === "debug") {
                this.addMenuItem({
                    icon: 'fa fa-code',
                    text: 'View Job Submission',
                    action: function() {
                        var metadata = IPython.notebook.get_selected_cell().metadata;
                        var stackTrace = [];
                        if (metadata['kb-cell'] && metadata['kb-cell']['stackTrace'])
                            stackTrace = metadata['kb-cell']['stackTrace'];
                        console.log(stackTrace);
                        var cell = IPython.notebook.insert_cell_below('code');
                        if (stackTrace instanceof Array) {
                            cell.set_text('job_info=' + stackTrace[stackTrace.length - 1] + '\njob_info');
                            IPython.notebook.get_selected_cell().execute();
                        }
                        else {
                            cell.set_text('job_info=' + stackTrace);
                        }
                    }
                });
            }

            this.addMenuItem({
                icon: 'fa fa-arrow-up',
                text: 'Move Cell Up',
                action: function() {
                    IPython.notebook.move_cell_up();
                }
            });

            this.addMenuItem({
                icon: 'fa fa-arrow-down',
                text: 'Move Cell Down',
                action: function() {
                    IPython.notebook.move_cell_down();
                }
            });

            this.addMenuItem({
                icon: 'fa fa-caret-square-o-up',
                text: 'Insert Cell Above',
                action: function() {
                    var cell = IPython.notebook.insert_cell_above('markdown');
                }
            });

            this.addMenuItem({
                icon: 'fa fa-caret-square-o-down',
                text: 'Insert Cell Below',
                action: function() {
                    var cell = IPython.notebook.insert_cell_below('markdown');
                }
            });

            this.addMenuItem({
                icon: 'fa fa-terminal',
                text: 'Convert to code cell',
                action: function() {
                    //IPython.notebook.to_code();
                },
                disable: true
            });

            this.addMenuItem({
                icon: 'fa fa-trash-o',
                text: 'Delete Cell',
                action: $.proxy(function() {
                                    this.trigger('deleteCell.Narrative', IPython.notebook.get_selected_index());
                                }, this)
            });

            // this shows whether the app is running
            this.$runningIcon = $("<span>").addClass("fa fa-circle-o-notch fa-spin")
                                .css({"color": "rgb(42,121,191)"})
                                .hide();
            // this shows on error
            this.$errorIcon =  $("<span>").addClass("fa fa-exclamation-triangle")
                              .css({"color": "red"})
                              .hide();

            this.$elem.append(
                $('<span>')
                    .append(this.$runningIcon)
                    .append(this.$errorIcon)
                    .append($deleteBtn)
                    .append($('<span class="dropdown">')
                              .append($btn)
                              .append(this.$menu)));
            $deleteBtn.tooltip();

            return this;
        },

        addMenuItem: function(item) {
            var label = '';
            if (item.icon)
                label += '<span class="' + item.icon +'"></span> ';
            if (item.text)
                label += ' ' + item.text;
            var $item = $('<a>')
                        .append(label)
                        .click($.proxy(function(event) {
                            event.preventDefault();
                            event.stopPropagation();
                            if (!item.disable) {
                                if (item.action)
                                    item.action();
                                this.$menu.dropdown('toggle');
                            }
                        }, this));
            var $itemElem = $('<li>').append($item);
            if (item.disable)
                $itemElem.addClass('disabled');
            this.$menu.append($itemElem);
        },
    });
})( jQuery );

/**
 * @author Bill Riehl <wjriehl@lbl.gov>
 * @public
 * This is a generalized class for an input cell that sits in an IPython markdown cell.
 * It handles all of its rendering here (no longer in HTML in markdown), and invokes
 * an input widget passed to it.
 *
 * This expects a method object passed to it, and expects that object to have the new
 * format from the narrative_method_store service.
 */

(function( $, undefined ) {
    $.KBWidget({
        name: "kbaseNarrativeMethodCell",
        parent: "kbaseWidget",
        version: "1.0.0",
        options: {
            method: null,
            cellId: null,
            methodHelpLink: '/functional-site/#/narrativestore/method/',
        },
        IGNORE_VERSION: true,
        defaultInputWidget: 'kbaseNarrativeMethodInput',
        allowOutput: true,
        runState: 'input',

        /**
         * @private
         * @method
         * Initialization is done by the KBase widget architecture itself.
         * This requires and assumes that a method and cellId are both present
         * as options
         * TODO: add checks and failures for this.
         */
        init: function(options) {
            this._super(options);

            this.options.method = this.options.method.replace(/\n/g, '');
            this.method = JSON.parse(this.options.method);
            this.cellId = this.options.cellId;
            this.initErrorModal();
            this.render();
            return this;
        },

        /**
         * Renders this cell and its contained input widget.
         */
        render: function() {
            this.$inputDiv = $('<div>');
            this.$submitted = $('<span>').addClass("kb-func-timestamp").hide();

            // These are the 'delete' and 'run' buttons for the cell
            this.$runButton = $('<button>')
                             .attr('id', this.cellId + '-run')
                             .attr('type', 'button')
                             .attr('value', 'Run')
                             .addClass('kb-method-run')
                             .append('Run');
            this.$runButton.click(
                $.proxy(function(event) {
                    event.preventDefault();

                    if (!this.checkMethodRun())
                        return;

                    this.submittedText = 'submitted on ' + this.readableTimestamp();
                    this.trigger('runCell.Narrative', {
                        cell: IPython.notebook.get_selected_cell(),
                        method: this.method,
                        parameters: this.getParameters()
                    });
                    this.changeState('submitted');
                }, this)
            );

            this.$stopButton = $('<button>')
                              .attr('type', 'button')
                              .attr('value', 'Cancel')
                              .addClass('kb-app-run kb-app-cancel')
                              .append('Cancel')
                              .css({'margin-right':'5px'})
                              .click(
                                  $.proxy(function(event) {
                                      this.stopRunning();
                                  }, this)
                              )
                              .hide();

            var $buttons = $('<div>')
                           .addClass('buttons pull-left')
                           .append(this.$runButton)
                           .append(this.$stopButton)
                           .append(this.$submitted);

            var $progressBar = $('<div>')
                               .attr('id', 'kb-func-progress')
                               .addClass('pull-left')
                               .css({'display' : 'none'})
                               .append($('<div>')
                                       .addClass('progress progress-striped active kb-cell-progressbar')
                                       .append($('<div>')
                                               .addClass('progress-bar progress-bar-success')
                                               .attr('role', 'progressbar')
                                               .attr('aria-valuenow', '0')
                                               .attr('aria-valuemin', '0')
                                               .attr('aria-valuemax', '100')
                                               .css({'width' : '0%'})))
                               .append($('<p>')
                                       .addClass('text-success'));

            var methodId = this.options.cellId + '-method-details-'+this.genUUID();
            var buttonLabel = 'details';
            var methodDesc = this.method.info.tooltip;
            var $menuSpan = $('<div class="pull-right">');
            var $methodInfo = $('<div>')
                              .addClass('kb-func-desc')
                              .append('<h1><b>' + this.method.info.name + '</b></h1>')
                              .append($menuSpan)
                              .append($('<span>')
                                      .addClass('pull-right kb-func-timestamp')
                                      .attr('id', 'last-run'))
                              /*.append($('<button>')
                                      .addClass('btn btn-default btn-xs')
                                      .attr('type', 'button')
                                      .attr('data-toggle', 'collapse')
                                      .attr('data-target', '#' + methodId)
                                      .append(buttonLabel))*/
                              .append($('<h2>')
                                      .attr('id', methodId)
                                      //.addClass('collapse')
                                      .append(methodDesc +
                                            ' &nbsp&nbsp<a href="'+ this.options.methodHelpLink + this.method.info.id +
                                                '" target="_blank">more...</a>'

                                      ));

            // Controls (minimize)
            var $controlsSpan = $('<div>').addClass("pull-left");
            var $minimizeControl = $("<span class='glyphicon glyphicon-chevron-down'>")
                                    .css({color: "#888", fontSize: "14pt",
                                          paddingTop: "7px"});
            $controlsSpan.append($minimizeControl);

            this.$cellPanel = $('<div>')
                              .addClass('panel kb-func-panel kb-cell-run')
                              .append($controlsSpan)
                              .append($('<div>')
                                      .addClass('panel-heading')
                                      .append($methodInfo))
                              .append($('<div>')
                                      .addClass('panel-body')
                                      .append(this.$inputDiv))
                              .append($('<div>')
                                      .addClass('panel-footer')
                                      .css({'overflow' : 'hidden'})
                                      .append($buttons));

            this.cellMenu = $menuSpan.kbaseNarrativeCellMenu();
            this.$elem.append(this.$cellPanel);

            // Add minimize/restore actions.
            // These mess with the CSS on the cells!
            var $mintarget = this.$cellPanel;
            this.panel_minimized = false;
            var self = this;
            $controlsSpan.click(function() {
              if (self.panel_minimized) {
                console.debug("restore full panel");
                $mintarget.find(".panel-body").slideDown();
                $mintarget.find(".panel-footer").show();
                $minimizeControl.removeClass("glyphicon-chevron-right")
                                .addClass("glyphicon-chevron-down")
                                .css({paddingTop: "7px"});
                self.panel_minimized = false;
              }
              else {
                console.debug("minimize panel");
                $mintarget.find(".panel-footer").hide();
                $mintarget.find(".panel-body").slideUp();
                $minimizeControl.removeClass("glyphicon-chevron-down")
                                 .addClass("glyphicon-chevron-right")
                                 .css({paddingTop: "7px"});
               self.panel_minimized = true;
              }
            });

            var inputWidgetName = this.method.widgets.input;
            if (!inputWidgetName || inputWidgetName === 'null')
                inputWidgetName = this.defaultInputWidget;

            this.$inputWidget = this.$inputDiv[inputWidgetName]({ method: this.options.method });
        },

        /**
         * @method
         * Returns parameters from the contained input widget
         * @public
         */
        getParameters: function() {
            if (this.$inputWidget)
                return this.$inputWidget.getParameters();
            return null;
        },

        /**
         * @method
         * Returns the state as reported by the contained input widget.
         * @public
         */
        getState: function() {
            return {
                'runningState' : {
                    'runState' : this.runState,
                    'submittedText' : this.submittedText,
                    'outputState' : this.allowOutput
                },
                'params' : this.$inputWidget.getState()
            };
        },

        /**
         * @method
         * Passes along the state to its contained input widget.
         * @public
         */
        loadState: function(state) {
            // cases (for older ones)
            // 1. state looks like:
            // { params: {},
            //   runningState: {runState,
            //                  submittedText,
            //                  outputState}
            // }
            // That's new!
            // old one just has the state that should be passed to the input widget.
            // that'll be deprecated soonish.
            if (state.hasOwnProperty('params') && state.hasOwnProperty('runningState')) {
                this.allowOutput = state.runningState.outputState;
                this.$inputWidget.loadState(state.params);
                this.submittedText = state.runningState.submittedText;
                this.changeState(state.runningState);
            }
            else
                this.$inputWidget.loadState(state);
        },

        /* Show/hide running icon */
        displayRunning: function(is_running, had_error) {
          if (is_running) {
            this.cellMenu.$runningIcon.show();
            // never show error icon while running
            this.cellMenu.$errorIcon.hide();
          }
          else {
            this.cellMenu.$runningIcon.hide();
            // only display error when not running
            if (had_error) { this.cellMenu.$errorIcon.show(); }
            else { this.cellMenu.$errorIcon.hide(); }
            }
          },

        /**
         * @method
         * This sends a trigger to the jobs panel to stop any running jobs. If the callback is
         * truthy, this resets the cell to an input state.
         */
        stopRunning: function() {
            this.trigger('cancelJobCell.Narrative', [this.cellId, true, $.proxy(function(isCanceled) {
                if (isCanceled) {
                    this.changeState('input');
                }
            }, this)]);
        },
        /**
         * @method
         * Shows an associated error with a cell (if available)
         */
        showError: function() {
            this.trigger('showJobError.Narrative', [this.cellId, true, $.proxy(function(isCanceled) {
                if (isCanceled) {
                    this.changeState('input');
                }
            }, this)]);
        },



        /**
         * @method
         * Updates the method cell's state.
         * Currently supports "input", "submitted", "running", or "complete".
         */
        changeState: function(runState) {
            if (!this.$cellPanel)
                return;
            if (this.runState !== runState) {
                this.runState = runState.toLowerCase();
                switch(this.runState) {
                    case 'submitted':
                        this.$cellPanel.removeClass('kb-app-step-running');
                        this.$elem.find('.kb-app-panel').removeClass('kb-app-error');
                        this.$submitted.html(this.submittedText).show();
                        this.$runButton.hide();
                        this.$stopButton.hide();
                        this.$inputWidget.lockInputs();
                        this.displayRunning(true);
                        break;
                    case 'complete':
                        console.debug("Method is complete");
                        this.$cellPanel.removeClass('kb-app-step-running');
                        this.$elem.find('.kb-app-panel').removeClass('kb-app-error');
                        this.$submitted.html(this.submittedText).show();
                        this.$runButton.hide();
                        this.$stopButton.hide();
                        this.$inputWidget.lockInputs();
                        this.displayRunning(false);
                        // maybe unlock? show a 'last run' box?
                        break;
                    case 'running':
                        this.$submitted.html(this.submittedText).show();
                        this.$elem.find('.kb-app-panel').removeClass('kb-app-error');
                        this.$cellPanel.addClass('kb-app-step-running');
                        this.$runButton.hide();
                        this.$stopButton.show();
                        this.$inputWidget.lockInputs();
                        this.displayRunning(true);
                        break;
                    case 'error':
                        this.$submitted.html(this.submittedText).show();
                        this.$cellPanel.addClass('kb-app-step-error');
                        this.$runButton.hide();
                        this.$stopButton.show();
                        this.$inputWidget.lockInputs();
                        this.$elem.find('.kb-app-panel').addClass('kb-app-error');
                        this.displayRunning(true, false);
                        break;
                    default:
                        this.$cellPanel.removeClass('kb-app-step-running');
                        this.$elem.find('.kb-app-panel').removeClass('kb-app-error');
                        this.$submitted.hide();
                        this.$runButton.show();
                        this.$stopButton.hide();
                        this.$inputWidget.unlockInputs();
                        this.displayRunning(false);
                        break;
                }
            }
        },

        getRunningState: function() {
            return this.runState;
        },

        /*
         * This function is invoked every time we run app. This is the difference between it
         * and getAllParameterValues/getParameterValue which could be invoked many times before running
         * (e.g. when widget is rendered).
         */
        prepareDataBeforeRun: function() {
            if (this.inputSteps) {
                for(var i=0; i<this.inputSteps.length; i++)
                    var v = this.inputSteps[i].widget.prepareDataBeforeRun();
            }
        },

        /* locks inputs and updates display properties to reflect the running state
            returns true if everything is valid and we can start, false if there were errors
        */
        checkMethodRun: function() {
            var v = this.$inputWidget.isValid();
            if (!v.isValid) {
                this.$errorModalContent.empty();
                for (var i=0; i<v.errormssgs.length; i++) {
                    this.$errorModalContent.append($('<div>')
                                                   .addClass("kb-app-step-error-mssg")
                                                   .append('['+(i+1)+']: ' + v.errormssgs[i]));
                }
                this.$errorModal.modal('show');
                return false;
            }

            return true;
        },

        initErrorModal: function() {
            // var errorModalId = "app-error-modal-"+ this.genUUID();
            // var modalLabel = "app-error-modal-lablel-"+ this.genUUID();
            this.$errorModalContent = $('<div>');
            this.$errorModal =  $('<div tabindex="-1" role="dialog" aria-hidden="true">').addClass("modal fade");
            this.$errorModal.append(
                $('<div>').addClass('modal-dialog').append(
                    $('<div>').addClass('modal-content').append(
                        $('<div>').addClass('modal-header kb-app-step-error-main-heading').append('<h4 class="modal-title" >Problems exist in your parameter settings.</h4>')
                    ).append(
                       $('<div>').addClass('modal-body').append(this.$errorModalContent)
                    ).append(
                        $('<div>').addClass('modal-footer').append(
                            $('<button type="button" data-dismiss="modal">').addClass("btn btn-default").append("Dismiss"))
                    )
                ));
            this.$elem.append(this.$errorModal);
        },

        /**
         * Refreshes the input widget according to its own method.
         */
        refresh: function() {
            if (this.$inputWidget)
                this.$inputWidget.refresh();
        },

        genUUID: function() {
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
                var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);
                return v.toString(16);
            });
        },

        /* temp hack to deal with current state of NJS */
        getSpecAndParameterInfo: function() {
            return {
                methodSpec : this.method,
                parameterValues: this.getParameters()
            };
        },

        setOutput: function(data) {
            if (data.cellId && this.allowOutput) {
                this.allowOutput = false;
                console.debug("Creating output cell...");
                data.next_steps = this.getNextSteps();
                this.trigger('createOutputCell.Narrative', data);
                this.changeState('complete');
            }
        },

        /**
         * Return list of specs which are the 'next steps'
         * from the current method.
         */
        getNextSteps: function() {
          //console.debug("Find next steps for method",this.method);
          var method_ids = [ ], app_ids = [ ];
          // add one or more next steps
          // XXX: replace this with something much smarter
          switch (this.method.info.id) {
            case "assemble_contigset_from_reads":
              method_ids.push("annotate_contigset"); // genome_assembly
              break;
            case "build_a_metabolic_model":
              method_ids.push("gapfill_a_metabolic_model"); // build_fba_model
              break;
            case  "retrieve_functional_abundance_profile":
              method_ids.push("normalize_abundance_profile"); //communities_build_functional_profile
              break;
            case "merge_to_community_model":
              method_ids.push("gapfill_a_metabolic_model"); //community_fba_modeling
              break;
            case "compare_two_proteomes_generic":
              method_ids.push("translate_model_to_new_genome"); //fba_model_translation
              break;
            case "translate_model_to_new_genome":
              method_ids.push("gapfill_a_metabolic_model"); //fba_model_translation
              break;
            case "gapfill_a_metabolic_model":
              method_ids.push("compare_two_metabolic_models_generic"); //fba_model_translation
              break;
            case "compute_pangenome":
              method_ids.push("genome_comparison_from_pangenome"); // genome_comparison
              break;
          }
          // Fetch function specs now because we need the real, human-readable
          // name of the spec and all we have is the id.
          var result = {};
          var params = {apps: app_ids, methods: method_ids};
          this.trigger('getFunctionSpecs.Narrative', [params, function(specs) {
              result.specs = specs;
          }]);
          return result.specs;
        },

        /**
         * Converts a timestamp to a simple string.
         * Do this American style - HH:MM:SS MM/DD/YYYY
         *
         * @param {string} timestamp - a timestamp in number of milliseconds since the epoch.
         * @return {string} a human readable timestamp
         */
        readableTimestamp: function(timestamp) {
            var format = function(x) {
                if (x < 10)
                    x = '0' + x;
                return x;
            };

            var d = null;
            if (timestamp)
                d = new Date(timestamp);
            else
                d = new Date();
            var hours = format(d.getHours());
            var minutes = format(d.getMinutes());
            var seconds = format(d.getSeconds());
            var month = d.getMonth()+1;
            var day = format(d.getDate());
            var year = d.getFullYear();

            return hours + ":" + minutes + ":" + seconds + ", " + month + "/" + day + "/" + year;
        }
    });
})( jQuery );

/**
 * @author Bill Riehl <wjriehl@lbl.gov>
 * @author Michael Sneddon <mwsneddon@lbl.gov>
 * @author Dan Gunter <dkgunter@lbl.gov>
 * @public
 * This is a generalized class for an input cell that sits in an IPython markdown cell.
 * It handles all of its rendering here (no longer in HTML in markdown), and invokes
 * an input widget passed to it.
 *
 * This expects a method object passed to it, and expects that object to have the new
 * format from the narrative_method_store service.
 */

(function( $, undefined ) {
    $.KBWidget({
        name: "kbaseNarrativeAppCell",
        parent: "kbaseWidget",
        version: "1.0.0",
        options: {
            app: null,
            cellId: null,
            loadingImage: 'static/kbase/images/ajax-loader.gif',
            methodStoreURL: 'https://kbase.us/services/narrative_method_store',

            appHelpLink: '/functional-site/#/narrativestore/app/',
            methodHelpLink: '/functional-site/#/narrativestore/method/',
        },
        IGNORE_VERSION: true,
        defaultInputWidget: 'kbaseNarrativeMethodInput',
        defaultOutputWidget: 'kbaseDefaultNarrativeOutput',

        appSpec: null,
        methodSpecs: null,
        inputSteps: null,
        inputStepLookup: null,

        $runButton: null,
        $stopButton: null,

        $errorModal: null,
        $errorModalContent:null,

        OUTPUT_ERROR_WIDGET: 'kbaseNarrativeError',

        state: null,

        /**
         * @private
         * @method
         * Initialization is done by the KBase widget architecture itself.
         * This requires and assumes that an app spec and cellId are both present.
         * TODO: add checks and failures for this.
         *
         * This renders by calling fetchMethodInfo, which grabs all the specs
         * for the intermediate steps, then renders the whole mess and
         * refreshes to update with jobs and results and such.
         *
         */
        init: function(options) {
            this._super(options);

            if (window.kbconfig && window.kbconfig.urls) {
                this.options.methodStoreURL = window.kbconfig.urls.narrative_method_store;
            }
            this.methClient = new NarrativeMethodStore(this.options.methodStoreURL);

            this.options.appSpec = this.options.appSpec.replace(/\n/g, '');
            this.appSpec = JSON.parse(this.options.appSpec);
            this.cellId = this.options.cellId;

            this.$elem.append($('<img src="' + this.options.loadingImage + '">'))
                      .append($('<div>Loading App...</div>'));

            // initialize the state
            this.state = {
                    runningState: {
                        appRunState: "input", // could be 'input' || 'running' || 'error' || 'done', something else?
                        runningStep: null
                    },
                    step: { }
                };
            this.initErrorModal();

            this.fetchMethodInfo();

            return this;
        },

        fetchMethodInfo: function() {
            if (!this.appSpec.steps || this.appSpec.steps.length === 0) {
                KBError("App::" + this.appSpec.info.name, "has no steps");
                this.showAppLoadingError('App "' + this.appSpec.info.name + '" has no steps!');
            }
            // get the list of method ids
            var methodIds = [];
            for (var i=0; i<this.appSpec.steps.length; i++) {
                methodIds.push(this.appSpec.steps[i].method_id);
            }
            this.methClient.get_method_spec({'ids' : methodIds},
                $.proxy(function(specs) {
                    this.methodSpecs = specs;
                    this.render(specs);
                }, this),
                $.proxy(function(error) {
                    KBError('get_method_spec', error);
                    this.showAppLoadingError(error);
                }, this)
            );
        },

        /**
         * Shows an error that occurred while loading app information. This essentially breaks the cell.
         * @method
         * @private
         */
        showAppLoadingError: function(error) {
            console.error(error);
            var $errorHeader = $('<div>')
                               .addClass('alert alert-danger')
                               .append('<b>Sorry, an error occurred while loading your KBase App.</b><br>Please contact the KBase team at <a href="mailto:help@kbase.us?subject=Narrative%App%20loading%20error">help@kbase.us</a> with the information below.');
            var $errorPanel = $('<div>')
                                .addClass('panel kb-app-panel');
            $errorPanel.append($errorHeader);

            // If it's a string, just dump the string.
            if (typeof error === 'string') {
                $errorPanel.append($('<div>').append(error));
            }

            // If it's an object, expect an error object as returned by the execute_reply callback from the IPython kernel.
            else if (typeof error === 'object') {
                var $details = $('<div>');
                $details.append($('<div>')
                                .append('<b>Error:</b> ' + error.error.message+ '<br><br>'));

                var $tracebackDiv = $('<div>')
                                    .addClass('kb-function-error-traceback');
                if (error.error) {
                    error.error.error.replace(/\n/g, "<br>");
                    $tracebackDiv.append(error.error.error + "<br>");
                }

                var $tracebackPanel = $('<div>');
                var tracebackAccordion = [{'title' : 'Detailed Error Trace', 'body' : $tracebackDiv}];

                $errorPanel.append($details)
                           .append($tracebackPanel);
                $tracebackPanel.kbaseAccordion({ elements : tracebackAccordion });
            }
            this.$elem.empty().append($errorPanel);
        },

        /** 
         * Fetches the app spec, method specs, and parameter values
         * These are used elsewhere to set up the NJS job and to send 
         * returned output values to the right place.
         */
        getSpecAndParameterInfo: function() {
            return {
                appSpec : this.appSpec,
                methodSpecs : this.methodSpecs,
                parameterValues: this.getAllParameterValues()
            };
        },

        /**
         * Renders this cell and its contained input widget.
         */
        render: function(stepSpecs) {
            this.methodSpecs = {};

            var self = this;
            this.$runButton = $('<button>')
                              .attr('type', 'button')
                              .attr('value', 'Run')
                              .addClass('kb-app-run')
                              .append('Run')
                              .click(
                                  $.proxy(function(event) {
                                      self.$submitted.html("submitted on "+this.readableTimestamp(new Date().getTime()));

                                      var isGood = self.startAppRun();
                                      if (!isGood) { return; }

                                      event.preventDefault();
                                      this.trigger('runApp.Narrative', {
                                          cell: IPython.notebook.get_selected_cell(),
                                          appSpec: this.appSpec,
                                          methodSpecs: this.methodSpecs,
                                          parameters: this.getParameters()
                                      });
                                  }, this)
                              );


            /* A little debug button for fetching the app's state. */
            this.$stateDebugBtn = $('<button>')
                                  .attr('type', 'button')
                                  .attr('value', 'Get State')
                                  .addClass('btn btn-danger btn-sm')
                                  .append('Get State')
                                  .click(
                                      function(event) {
                                          console.log(self.getState());
                                      }
                                  );


            //We cannot stop a method from running, so this button for now is gone.
            this.$stopButton = $('<button>')
                              .attr('type', 'button')
                              .attr('value', 'Cancel')
                              .addClass('kb-app-run kb-app-cancel')
                              .append('Cancel')
                              .css({'margin-right':'5px'})
                              .click(
                                  $.proxy(function(event) {
                                      self.stopAppRun();
                                  }, this)
                              )
                              .hide();
            // Reset the inputs and prepare for another "run"
            this.$resetButton = $('<button>')
                .attr('type', 'button')
                .attr('value', 'Reset')
                .addClass('kb-app-run kb-app-reset')
                .append('Reset')
                .css({'margin-right':'5px'})
                .click(
                    $.proxy(function(event) {
                    self.resetAppRun(true);
                }, this)
            )
            .hide();

            this.$submitted = $('<span>').addClass("kb-func-timestamp").hide();

            var appInfo = this.appSpec.info.name;
            this.$methodPanel = $('<div>')
                                .addClass('kb-app-steps');
            var stepHeaderText = "Step ";
            this.inputSteps = [];
            this.inputStepLookup = {};
            var inputStep = {};
            for (var i=0; i<stepSpecs.length; i++) {
                var $stepPanel = this.renderStepDiv(this.appSpec.steps[i].step_id, stepSpecs[i], stepHeaderText + (i+1));
                this.$methodPanel.append($stepPanel);
                this.methodSpecs[stepSpecs[i].info.id] = stepSpecs[i];
            }

            var $buttons = $('<div>')
                           .addClass('buttons pull-left')
                           .append(this.$runButton)
                           .append(this.$stopButton)
                           .append(this.$resetButton)
                           //.append(this.$stateDebugBtn)
                           .append(this.$submitted);

            var $appSubtitleDiv = $("<div>")
                                        .addClass('kb-app-panel-description')
                                        .append(this.appSpec.info.subtitle)
                                        .append('&nbsp;&nbsp;<a href="'+this.options.appHelpLink+this.appSpec.info.id+'" target="_blank">more...</a>');

            var headerCleaned = this.appSpec.info.header.replace(/&quot;/g, '"')
            var $appHeaderDiv = $("<div>")
                                        .addClass('kb-app-panel-header')
                                        .html(headerCleaned);

            var $menuSpan = $('<div class="pull-right">');

            // Controls (minimize)
            var $controlsSpan = $('<div>').addClass("pull-left");
            var $minimizeControl = $("<span class='glyphicon glyphicon-chevron-down'>")
                        .css({color: "#888", fontSize: "14pt"});
            $controlsSpan.append($minimizeControl);

            var $cellPanel = $('<div>')
                             .addClass('panel kb-app-panel kb-cell-run')
                             .append($menuSpan)
                             .append($controlsSpan)
                             .append($('<div>')
                                     .addClass('panel-heading app-panel-heading')
                                     .append($('<div>')
                                             .append($('<h1><b>' + appInfo + '</b></h1>'))
                                             )
                                     .append($appSubtitleDiv))
                             .append($('<div>')
                                     .addClass('panel-body')
                                     .append($appHeaderDiv))
                             .append($('<div>')
                                     .addClass('panel-body')
                                     .append(this.$methodPanel))
                             .append($('<div>')
                                     .addClass('panel-footer')
                                     .css({'overflow' : 'hidden'})
                                     .append($buttons));

            this.cellMenu = $menuSpan.kbaseNarrativeCellMenu();


            //now we link the step parameters together that are linked
            this.linkStepsTogether();

            // then we show the result
            this.$elem.empty().append($cellPanel);

            // Add minimize/restore actions.
            // These mess with the CSS on the cells!
            var $mintarget = $cellPanel;
            this.panel_minimized = false;
            var self = this;
            $controlsSpan.click(function() {
                if (self.panel_minimized) {
                    console.debug("restore full panel");
                    $mintarget.find(".panel-body").slideDown();
                    $mintarget.find(".panel-footer").show();
                    $minimizeControl.removeClass("glyphicon-chevron-right")
                                    .addClass("glyphicon-chevron-down");
                    // restore original padding (20px)
                    $mintarget.find(".app-panel-heading").css({padding: "20px"});
                    self.panel_minimized = false;
                }
                else {
                    console.debug("minimize panel");
                    $mintarget.find(".panel-footer").hide();
                    $mintarget.find(".panel-body").slideUp();
                    $minimizeControl.removeClass("glyphicon-chevron-down")
                                    .addClass("glyphicon-chevron-right");
                    // reduce padding so it lines up
                    $mintarget.find(".app-panel-heading").css({padding: "5px"});
                    self.panel_minimized = true;
                }
            });

            // finally, we refresh so that our drop down or other boxes can be populated
            this.refresh();
        },

        minimizePanel: function() {
            // console.debug("minimize panel");
        },

        showFullPanel: function() {
            // console.debug("restore panel to full size");
        },

        // given a method spec, returns a jquery div that is rendered but not added yet to the dom
        // stepSpec - the spec from the narrative method store
        // stepHeading - something to show in front of the method title, e.g. Step 1, Step 2 ...
        renderStepDiv: function (stepId, stepSpec, stepHeading) {
            var $stepPanel = $("<div>").addClass('kb-app-step-container');

            var $statusPanel = $('<div>');
            var $outputPanel = $('<div>');


            var $inputWidgetDiv = $("<div>");
            var methodId = stepSpec.info.id + '-step-details-' + this.genUUID();
            var buttonLabel = 'details';
            var methodDesc = stepSpec.info.subtitle;
            var $methodInfo = $('<div>')
                              .addClass('kb-func-desc')
                              .append('<h1><b>' + stepHeading +'&nbsp&nbsp-&nbsp '+ stepSpec.info.name + '</b></h1>')
                              .append($('<div>')
                                      .attr('id', methodId)
                                      //.addClass('collapse')
                                      .append($('<h2>')
                                         .append(methodDesc +
                                                 ' &nbsp&nbsp<a href="'+ this.options.methodHelpLink + stepSpec.info.id +
                                                        '" target="_blank">more...</a>')));

            var $cellPanel = $('<div>')
                             .addClass('panel kb-func-panel kb-app-func-panel kb-cell-run')
                             //.attr('id', this.options.cellId)
                             .append($('<div>')
                                     .addClass('panel-heading')
                                     .append($methodInfo))
                             .append($('<div>')
                                     .addClass('panel-body')
                                     .append($inputWidgetDiv))

            $stepPanel.append($cellPanel);
            $stepPanel.append($statusPanel);
            $stepPanel.append($outputPanel);

            var inputWidgetName = stepSpec.widgets.input;
            if (!inputWidgetName || inputWidgetName === 'null') {
                inputWidgetName = this.defaultInputWidget;
            }
            var outputWidgetName = stepSpec.widgets.output;
            if (!outputWidgetName || outputWidgetName === 'null') {
                outputWidgetName = this.defaultOutputWidget;
            }

            // todo, update input widget so that we don't have to stringify
            var inputWidget = $inputWidgetDiv[inputWidgetName]({ method: JSON.stringify(stepSpec) });
            var inputStepData = {id:stepId ,methodId: stepSpec.info.id, widget:inputWidget, $stepContainer:$stepPanel, $statusPanel:$statusPanel, $outputPanel:$outputPanel, outputWidgetName:outputWidgetName }
            this.inputSteps.push(inputStepData);
            this.inputStepLookup[stepId] = inputStepData;

            this.state.step[stepId] = { };

            return $stepPanel;
        },

        linkStepsTogether: function() {
            var self = this;
            if(this.appSpec && this.inputSteps) {
                var steps = this.appSpec.steps;
                for(var s=0; s<steps.length; s++) {
                    var input_mapping = steps[s].input_mapping;
                    for(var m=0; m<input_mapping.length; m++) {
                        if (input_mapping[m].is_from_input) { // should be 1 for true, 0 for false
                            // first disable the input box
                            this.inputStepLookup[steps[s].step_id].widget.disableParameterEditing(input_mapping[m].to);
                            // connect the values
                            if(this.inputStepLookup[input_mapping[m].step_source]) {
                                (function(localS, localM) {
                                    var step_target = self.inputStepLookup[steps[localS].step_id].widget;
                                    var step_source = self.inputStepLookup[input_mapping[localM].step_source].widget;
                                    var from = input_mapping[localM].from;
                                    var to = input_mapping[localM].to;
                                    // set the value to the original value
                                    step_target.setParameterValue(to, step_source.getParameterValue(from));
                                    // make sure the value changes every time the source input changes
                                    step_source.addInputListener(
                                        from,
                                        function() {
                                            step_target.setParameterValue(to, step_source.getParameterValue(from));
                                        }
                                    );
                                })(s,m);
                            } else {
                                console.error("invalid input mapping in spec for "+steps[s].step_id+", from step does not exist.");
                                console.error(this.appSpec);
                            }
                        }
                    }
                }
            }
            return;
        },

        /**
         * Checks all parameters across all steps for validity. If any are invalid,
         * this returns them in {stepErrors: []} and the valid state in {isValid:boolean}
         * @method
         * @private
         */
        validateParameters : function() {
            var isValidRet = {isValid:true, stepErrors:[]}
            if (this.inputSteps) {
                for(var i=0; i<this.inputSteps.length; i++) {
                    var v = this.inputSteps[i].widget.isValid();
                    if (!v.isValid) {
                        isValidRet.isValid = false;
                        isValidRet.stepErrors.push({
                            stepId:this.inputSteps[i].step_id,
                            stepNum:(i+1),
                            errormssgs:v.errormssgs});
                    }
                }
            }
            return isValidRet;
        },

        /*
         * This function is invoked every time we run app. This is the difference between it
         * and getAllParameterValues/getParameterValue which could be invoked many times before running
         * (e.g. when widget is rendered).
         */
        prepareDataBeforeRun: function() {
            if (this.inputSteps) {
                for(var i=0; i<this.inputSteps.length; i++)
                    var v = this.inputSteps[i].widget.prepareDataBeforeRun();
            }
        },

        /**
         * locks inputs and updates display properties to reflect the running state
         * returns true if everything is valid and we can start, false if there were errors
         */
        startAppRun: function(ignoreValidCheck) {
            var self = this;
            if (ignoreValidCheck) {
                //code
            } else {
                var v = self.validateParameters();
                // Take these action if the app input is not valid?
                if (!v.isValid) {
                    var errorCount = 1;
                    self.$errorModalContent.empty();
                    for(var k=0; k<v.stepErrors.length; k++) {
                        var $errorStep = $('<div>');
                        $errorStep.append($('<div>').addClass("kb-app-step-error-heading").append('Errors in Step '+v.stepErrors[k].stepNum+':'));
                        for (var e=0; e<v.stepErrors[k].errormssgs.length; e++) {
                            $errorStep.append($('<div>').addClass("kb-app-step-error-mssg").append('['+errorCount+']: ' + v.stepErrors[k].errormssgs[e]));
                            errorCount = errorCount+1;
                        }
                        self.$errorModalContent.append($errorStep);
                        KBError("App::" + this.appSpec.info.name, "errors=" + errorCount);
                    }
                    self.$errorModal.modal('show');
                    return false;
                }
            }
            self.prepareDataBeforeRun();
            self.$submitted.show();
            self.$runButton.hide();
            self.$stopButton.show();
            if (this.inputSteps) {
                for(var i=0; i<this.inputSteps.length; i++) {
                    this.inputSteps[i].widget.lockInputs();
                }
            }
            this.state.runningState.appRunState = "running";
            this.displayRunning(true);
            return true;
        },

        /* Show/hide running icon */
        displayRunning: function(is_running, had_error) {
            if (is_running) {
                this.cellMenu.$runningIcon.show();
                // never show error icon while running
                this.cellMenu.$errorIcon.hide();
            }
            else {
                this.cellMenu.$runningIcon.hide();
                // only display error when not running
                if (had_error) { this.cellMenu.$errorIcon.show(); }
                else { this.cellMenu.$errorIcon.hide(); }
            }
        },

        /*
         * Reset parameters and allow to re-run
         */
        resetAppRun: function(clear_inputs) {
            this.displayRunning(false);
            // buttons
            this.$stopButton.hide();
            this.$resetButton.hide();
            this.$submitted.hide();
            // clear inputs
            if (this.inputSteps) {
                for(var i=0; i<this.inputSteps.length; i++) {
                    this.inputSteps[i].widget.unlockInputs();
                    this.inputSteps[i].$stepContainer.removeClass('kb-app-step-running');
                    // If invoked from "Reset" button, then clear_inputs will be
                    // true and we need to get back to the original state.
                    // If invoked from "Cancel" button we skip this step and
                    // allow the user to Reset later.
                    if (clear_inputs) {
                        var c = this.inputSteps[i].$stepContainer;
                        // clear text fields
                        c.find("span.kb-parameter-data-selection").text("");
                        // remove old output
                        c.find(".kb-cell-output").remove();
                    }
                }
            }
            if (clear_inputs) {
                this.setErrorState(false);
                this.state.runningState.appRunState = "input";
                this.$runButton.show();
            }
            else {
                this.state.runningState.appRunState = "canceled"; // XXX?
                this.$runButton.hide();
                this.$resetButton.show();
            }
        },

        /* unlocks inputs and updates display properties to reflect the not running state */
        stopAppRun: function() {
            // trigger a cancel job action
            // if that returns something truthy (i.e. auto canceled, or user chose to cancel),
            // then continue and reset the state to input.
            // Otherwise, bail.
            var self = this;
            this.trigger('cancelJobCell.Narrative', [this.cellId, true, $.proxy(function(isCanceled) {
                if (isCanceled) {
                  self.resetAppRun(false);

                }
            }, this)]);
        },

        /**
         * DO NOT USE!!  use getAllParameterValues instead from now on...
         */
        getParameters: function() {
            return this.getAllParameterValues();
        },


        /**
         * returns structure that preserves method/parameter ordering in original spec
         * [
         *   { stepId: id, values = [
         *          {id: paramid, value: v},
         *          ...
         *      ]
         *   },
         *   ...
         * ]
         */
        getAllParameterValues: function() {
            var allValues = [];
            if (this.inputSteps) {
                for(var i=0; i<this.inputSteps.length; i++) {
                    var stepId = this.inputSteps[i].id;
                    var methodId = this.inputSteps[i].methodId;
                    var values = this.inputSteps[i].widget.getAllParameterValues();
                    allValues.push({stepId:stepId, methodId:methodId, values:values});
                }
            }
            return allValues;
        },

        /**
         * @method
         * Returns the state as reported by the contained input widget.
         * @public
         */
        getState: function() {
            // get the state of each step and return (all other properties of this.state should be set elsewhere)
            if (this.inputSteps) {
                for(var i=0; i<this.inputSteps.length; i++) {
                    var id = this.inputSteps[i].id;
                    this.state.step[id].inputState = this.inputSteps[i].widget.getState();
                    // if there is an output widget, then we need to set its state too
                    if(this.inputSteps[i].outputWidget && this.inputSteps[i].outputWidget.getState) {
                        this.state.step[id].outputState.widgetState = this.inputSteps[i].outputWidget.getState();
                    }
                }
            }
            this.state.runningState.submittedText = this.$submitted.html();
            return this.state;
        },

        getRunningState: function() {
            return this.state.runningState.appRunState;
        },

        /**
         * @method
         * Passes along the state to its contained input widget.
         * @public
         */
        loadState: function(state) {
            if (!state) {
                return;
            }
            //console.log("setting app state:");
            //console.log(state);
            // set the step states
            if (this.inputSteps && state.step) {
                for(var i=0; i<this.inputSteps.length; i++) {
                    var id = this.inputSteps[i].id;
                    if (state.step.hasOwnProperty(id)) {
                        // set the input states
                        if (state.step[id].inputState) {
                            this.inputSteps[i].widget.loadState(state.step[id].inputState);
                        }
                    }
                }
            }

            // if we were in the running state before, set the values
            if (state.runningState) {
                if (state.runningState.runningStep) {
                    this.setRunningStep(state.runningState.runningStep);
                }
                if (state.runningState.appRunState) {
                    if (state.runningState.submittedText) {
                        this.$submitted.html(state.runningState.submittedText);
                    }
                    if (state.runningState.appRunState === "running") {
                        this.startAppRun();
                    }
                    else if (state.runningState.appRunState === "done") {
                        this.$submitted.show();
                        this.$runButton.hide();
                    }
                }
            }

            // set the output state (we do this last so that in case we run into an error, we still show that we are running)
            if (this.inputSteps && state.step) {
                for(var i=0; i<this.inputSteps.length; i++) {
                    var id = this.inputSteps[i].id;
                    if (state.step.hasOwnProperty(id)) {
                        // set the output states
                        if (state.step[id].outputState) {
                            if (state.step[id].outputState.output) {
                                this.setStepOutput(id,state.step[id].outputState.output, state.step[id].outputState.widgetState);
                            }
                        }
                    }
                }
            }
            return;
        },

        /** methods for setting the app state based on the job status **/
        setRunningStep: function(stepId) {
            if (this.inputSteps) {
                for(var i=0; i<this.inputSteps.length; i++) {
                    this.inputSteps[i].$stepContainer.removeClass("kb-app-step-running");
                    if (this.inputSteps[i].id === stepId) {
                        this.inputSteps[i].$stepContainer.addClass("kb-app-step-running");
                        this.state.runningState.runningStep = stepId;
                    }
                }
            }
        },

        updateStepStatus: function(stepId, status) {
            if (this.inputStepLookup) {
                if(this.inputStepLookup[stepId]) {
                    this.inputStepLookup[stepId].$statusPanel.empty();
                    var $statusCell = $("<div>").addClass("kb-cell-output").css({"padding-top":"5px"}).append(
                                            $('<div>').addClass("panel panel-default")
                                                .append($('<div>').addClass("panel-body").html(status))
                                            );
                    this.inputStepLookup[stepId].$statusPanel.append($statusCell);
                }
            }
        },

        setRunningState: function(state) {
            state = state.toLowerCase();
            if (state === 'error') {
                this.setErrorState(true);
                for (var i=0; i<this.inputSteps.length; i++) {
                    if (this.inputSteps[i].$stepContainer.hasClass('kb-app-step-running')) {
                        this.inputSteps[i].$stepContainer.removeClass('kb-app-step-running');
                        this.inputSteps[i].$stepContainer.addClass('kb-app-step-error');
                    }
                }
            }
            else if (state === 'complete') {
                for (var i=0; i<this.inputSteps.length; i++) {
                    this.inputSteps[i].$stepContainer.removeClass('kb-app-step-running');
                }
                this.state.runningState.runningStep = null;
                this.state.runningState.appRunState = state;
                this.$stopButton.hide();
                // Show the 'next-steps' to take, if there are any
                var next_steps = this.getNextSteps();
                if (next_steps.apps || next_steps.methods) {
                    this.trigger("showNextSteps.Narrative",
                      {elt: this.$elem, "next_steps": next_steps});
                }
            }
        },

        /**
         * From a single string - maybe an object - set the state of a running app
         * possible states:
         * input - unlock all input areas, remove footer, show Run button
         * submitted - in-between state after user clicks Run, while we wait on the job info,
         *             lock inputs, no control buttons, etc, show spinny icon
         * queued - lock inputs, show Cancel button, but no highlighted steps, show spinny icon
         * running - should highlight which step is running, use Cancel button
         * error - should color whole app with error styling, still lock things, show cancel button,
         *       - show error icon, no spinny icon
         * completed - no more icons, show reset button which can unlock inputs
         *
         */
        setAppState: function(state) {
            // this.state = {
            //         runningState: {
            //             appRunState: "input", // could be 'input' || 'running' || 'error' || 'done', something else?
            //             runningStep: null
            //         },
            //         step: { }
            //     };

        },

        getNextSteps: function() {
            console.debug("Find next steps for app",this.appSpec);
            var method_ids = [ ], app_ids = [ ];
            // add one or more next steps
            // XXX: replace this with something much smarter
            switch (this.appSpec.info.id) {
                case "genome_assembly":
                    app_ids.push("genome_comparison");
                    app_ids.push("build_fba_model");
                    method_ids.push("insert_genome_into_species_tree_generic");
                    method_ids.push("compare_two_metabolic_models_generic");
                    break;
                case "build_fba_model":
                    app_ids.push("community_fba_modeling");
                    // ?? Translate Model to New Genome
                    break;
                case "build_species_tree":
                    method_ids.push("compute_pangenome");
                    break;
            }
            // Fetch function specs now because we need the real, human-readable
            // name of the spec and all we have is the id.
            var result = {};
            var params = {apps: app_ids, methods: method_ids};
            this.trigger('getFunctionSpecs.Narrative', [params, function(specs) {
                result.specs = specs;
            }]);
            return result.specs;
        },

        /*
         * Handle error in app.
         */
        setErrorState: function(isError) {
            if (isError) {
                this.state.runningState.appRunState = "error";
                this.displayRunning(false, true);
                this.$elem.find('.kb-app-panel').addClass('kb-app-error');
                this.$runButton.hide();
                this.$stopButton.hide();
                this.$resetButton.show();
                this.$submitted.show();
            }
            else {
                this.$elem.find('.kb-app-panel').removeClass('kb-app-error');
            }
        },

        /* optional state parameter, if null then no state is set on the widget */
        setStepOutput: function(stepId, output, state) {
            if (this.inputStepLookup) {
                if(this.inputStepLookup[stepId]) {
                    if (this.inputStepLookup[stepId].outputWidget) {
                        //output is already set and cannot change, so we do not rerender
                        return;
                    }
                    // clear the output panel, and assume we are no longer running this step
                    this.inputStepLookup[stepId].$outputPanel.empty();
                    this.inputStepLookup[stepId].$stepContainer.removeClass("kb-app-step-running");

                    var widgetName = this.inputStepLookup[stepId].outputWidgetName;
                    var $outputWidget = $('<div>').css({'padding':'5px 0'});
                    $outputWidget.kbaseNarrativeOutputCell({
                        widget: widgetName,
                        data: output,
                        type: 'app',
                        title: this.methodSpecs[this.inputStepLookup[stepId].methodId].info.name,
                        showMenu: false,
                        time: new Date().getTime()
                    });
                    if (state) {
                        $outputWidget.loadState(state);
                    }
                    this.inputStepLookup[stepId].$outputPanel.append($outputWidget);
                    this.inputStepLookup[stepId].outputWidget = $outputWidget;
                    var objCopy = $.extend(true, {}, output);
                    this.state.step[stepId].outputState = {
                        output: objCopy
                    };
                }
            }
        },

        setStepError: function(stepId, error) {
            if (this.inputStepLookup) {
                if(this.inputStepLookup[stepId]) {
                    this.inputStepLookup[stepId].kbaseNarrativeOutputCell({
                        widget: this.OUTPUT_ERROR_WIDGET,
                        data: error,
                        type: 'error',
                        showMenu: false,
                        time: new Date().getTime()
                    });
                }
            }
        },

        /** end methods for setting the app state based on the job status **/

        initErrorModal: function() {
            var self=this;
            var errorModalId = "app-error-modal-"+ self.genUUID();
            var modalLabel = "app-error-modal-lablel-"+ self.genUUID();
            self.$errorModalContent = $('<div>');
            self.$errorModal =  $('<div id="'+errorModalId+'" tabindex="-1" role="dialog" aria-labelledby="'+modalLabel+'" aria-hidden="true">').addClass("modal fade");
            self.$errorModal.append(
                $('<div>').addClass('modal-dialog').append(
                    $('<div>').addClass('modal-content').append(
                        $('<div>').addClass('modal-header kb-app-step-error-main-heading').append('<h4 class="modal-title" id="'+modalLabel+'">Problems exist in your parameter settings.</h4>')
                    ).append(
                       $('<div>').addClass('modal-body').append(self.$errorModalContent)
                    ).append(
                        $('<div>').addClass('modal-footer').append(
                            $('<button type="button" data-dismiss="modal">').addClass("btn btn-default").append("Dismiss"))
                    )
                ));
            self.$elem.append(self.$errorModal);
        },

        /**
         * Refreshes the input widget according to its own method.
         */
        refresh: function() {
            if (this.inputSteps) {
                for(var i=0; i<this.inputSteps.length; i++) {
                    this.inputSteps[i].widget.refresh();
                }
            }
        },

        genUUID: function() {
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
                var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);
                return v.toString(16);
            });
        },

         /**
         * Converts a timestamp to a simple string.
         * Do this American style - HH:MM:SS MM/DD/YYYY
         *
         * @param {string} timestamp - a timestamp in number of milliseconds since the epoch.
         * @return {string} a human readable timestamp
         */
        readableTimestamp: function(timestamp) {
            var format = function(x) {
                if (x < 10)
                    x = '0' + x;
                return x;
            };

            var d = new Date(timestamp);
            var hours = format(d.getHours());
            var minutes = format(d.getMinutes());
            var seconds = format(d.getSeconds());
            var month = d.getMonth()+1;
            var day = format(d.getDate());
            var year = d.getFullYear();

            return hours + ":" + minutes + ":" + seconds + ", " + month + "/" + day + "/" + year;
        }
    });

})( jQuery );

(function($, undefined) {
    $.KBWidget({
        name: 'kbaseNarrativeOutputCell',
        parent: 'kbaseWidget',
        version: '1.0.0',
        options: {
            widget: 'kbaseDefaultNarrativeOutput',
            data: '{}',
            cellId: null,
            type: 'error',
            title: 'Output',
            time: '',
            showMenu: true
        },
        OUTPUT_ERROR_WIDGET: 'kbaseNarrativeError',

        init: function(options) {
            this._super(options);

            this.data = this.options.data;
            this.options.type = this.options.type.toLowerCase();
            if (this.options.widget.toLowerCase() === "null")
                this.options.widget = 'kbaseDefaultNarrativeOutput';

            this.render();

            return this;
        },

        render: function() {
            switch(this.options.type) {
                case 'method':
                    this.renderMethodOutputCell();
                    break;
                case 'app':
                    this.renderAppOutputCell();
                    break;
                case 'error':
                    this.renderErrorOutputCell();
                    break;
                case 'viewer':
                    this.renderViewerCell();
                    break;
                default:
                    this.renderErrorOutputCell();
                    break;
            }
        },

        renderViewerCell: function() {
            var $label = $('<span>').addClass('label label-info').append('Viewer');
            this.renderCell('kb-cell-output', 'panel-default', 'kb-out-desc', $label);            
        },

        renderMethodOutputCell: function() {
            var $label = $('<span>').addClass('label label-info').append('Output');
            this.renderCell('kb-cell-output', 'panel-default', 'kb-out-desc', $label);
        },

        // same as method for now
        renderAppOutputCell: function() {
            this.renderMethodOutputCell();
        },

        renderErrorOutputCell: function() {
            if (!this.options.title)
                this.options.title = 'Narrative Error';
            var $label = $('<span>').addClass('label label-danger').append('Error');
            this.renderCell('kb-cell-error', 'panel-danger', 'kb-err-desc', $label);
        },

        renderCell: function(baseClass, panelClass, headerClass, $label) {
            // set up the widget line
            var widget = this.options.widget;
            var methodName = this.options.title ? this.options.title : 'Unknown method';

            var widgetData = this.options.data;
            if (widget === 'kbaseDefaultNarrativeOutput')
                widgetData = { data : this.options.data };

            this.$timestamp = $('<span>')
                              .addClass('pull-right kb-func-timestamp');

            if (this.options.time) {
                this.$timestamp.append($('<span>')
                                       .append(this.readableTimestamp(this.options.time)));
            }
            if (this.options.showMenu) {
                var $menuSpan = $('<span style="margin-left:5px">');
                this.$timestamp.append($menuSpan);
                $menuSpan.kbaseNarrativeCellMenu();
            }

            var $headerLabel = $('<span>')
                               .addClass('label label-info')
                               .append('Output');

            var $headerInfo = $('<span>')
                              .addClass(headerClass)
                              .append($('<b>').append(methodName))
                              .append(this.$timestamp);

            var $body = $('<div>')
                        .addClass(baseClass)
                        .append($('<div>')
                                .addClass('panel ' + panelClass)
                                .append($('<div>')
                                        .addClass('panel-heading')
                                        .append($label)
                                        .append($headerInfo))
                                .append($('<div>')
                                        .addClass('panel-body')
                                        .append($('<div>'))));
            try {
                this.$outWidget = $body.find('.panel-body > div')[widget](widgetData);
                this.$elem.append($body);
            }
            catch (err) {
                KBError("Output::" + this.options.title, "failed to render output widget: '" + widget);
                this.options.title = 'App Error';
                this.options.data = {'error': {
                    'msg': 'An error occurred while showing your output:',
                    'method_name': 'kbaseNarrativeOutputCell.renderCell',
                    'type': 'Output',
                    'severity': '',
                    'traceback': 'Failed while trying to show a "' + widget + '"\n' +
                                 'With inputs ' + JSON.stringify(widgetData) + '\n\n' + 
                                 err.message                    
                }};
                this.options.widget = this.OUTPUT_ERROR_WIDGET;
                this.renderErrorOutputCell();

                // this.$outWidget = $body.find('.panel-body > div')[this.OUTPUT_ERROR_WIDGET]({'error': {
                //     'msg': 'An error occurred while showing your output:',
                //     'method_name': 'kbaseNarrativeOutputCell.renderCell',
                //     'type': 'Output',
                //     'severity': '',
                //     'traceback': 'Failed while trying to show a "' + widget + '"\n' +
                //                  'With inputs ' + JSON.stringify(widgetData) + '\n\n' + 
                //                  err.message
                // }});
            }

        },

        getState: function() {
            var state = null;
            if (this.$outWidget && this.$outWidget.getState) {
                state = this.$outWidget.getState();
            }
            return state;
        },

        loadState: function(state) {
            if (state) {
                if (state.time) {
                    this.$timestamp.html(readableTimestamp(state.time));
                }
                if (this.$outWidget && this.$outWidget.loadState) {
                    this.$outWidget.loadState(state);
                }
            }
        },

        /**
         * Returns a timestamp in milliseconds since the epoch.
         * (This is a one-liner, but kept as a separate function in case our needs change. 
         * Maybe we'll want to use UTC or whatever...)
         * @public
         */
        getTimestamp: function() {
            return new Date().getTime();
        },

        /**
         * Converts a timestamp to a simple string.
         * Do this American style - HH:MM:SS MM/DD/YYYY
         *
         * @param {string} timestamp - a timestamp in number of milliseconds since the epoch.
         * @return {string} a human readable timestamp
         */
        readableTimestamp: function(timestamp) {
            var format = function(x) {
                if (x < 10)
                    x = '0' + x;
                return x;
            };

            var d = new Date(timestamp);
            var hours = format(d.getHours());
            var minutes = format(d.getMinutes());
            var seconds = format(d.getSeconds());
            var month = d.getMonth()+1;
            var day = format(d.getDate());
            var year = d.getFullYear();

            return hours + ":" + minutes + ":" + seconds + ", " + month + "/" + day + "/" + year;
        }

    });
})( jQuery );
/**
 * This widget is an outer DOM container for a KBase Narrative control element.
 * It instantiates a panel that the widget lives in, with some flexibility for
 * the title of the panel, adds a list of buttons on the panel, and gives the
 * option to minimize or restore the panel.
 *
 * This is a base class widget for any sidebar widgets that want its behavior.
 * Those sidebars should just include a title option. 
 * Usage: 
 * $('#my-element').kbaseNarrativeControlPanel({ 
 *     title : 'My Controls', 
 *     collapsible : true,
 *     buttons: [],
 * });
 *
 * @author Bill Riehl <wjriehl@lbl.gov>
 * @public
 */
 (function($, undefined){
    $.KBWidget({
        name: 'kbaseNarrativeControlPanel', 
        parent: 'kbaseAuthenticatedWidget',
        version: '0.0.1',
        options: {
            title: 'Control',
            collapsible: true,
            maxHeight: '400px'
        },

        /**
         * @method
         * Initializes the widget. This sets up internal variables, renders
         * the DOM structure, and creates an internal spot for the widget it
         * should hold.
         * Runs automatically on instantiation.
         * @param {object} options - set of inserted options from the instantiation
         * statement.
         * @returns {object} the initialized widget
         * @private
         */
        init: function(options) {
            this._super(options);

            this.render();
            /** commenting out the overlay panel for now **/
            return this;
        },

        /**
         * @method
         * Renders the new containing panel widget
         * @private
         */
        render: function() {
            // DOM structure setup here.
            // After this, just need to update the function list

            /* There's a few bits here.
             * 1. It's all in a Bootstrap Panel scaffold.
             * 2. The panel-body section contains the core of the widget:
             *    a. loading panel (just a blank thing with a spinning gif)
             *    b. error panel
             *    c. actual function widget setup.
             *
             * So, initialize the scaffold, bind the three core pieces in the
             * panel-body, make sure the right one is being shown at the start,
             * and off we go.
             */
            // Make a main body panel for everything to sit inside.
            this.$bodyDiv = $('<div>');

            this.$headerDiv = $('<div>');

            this.$buttonPanel = $('<span>')
                                .addClass('btn-toolbar pull-right')
                                .attr('role', 'toolbar')
                                .css({'margin-top' : '-2px'});

            this.$elem.append($('<div>')
                              .addClass('kb-narr-side-panel')
                                      .append($('<div>')
                                              .addClass('kb-title')
                                              .append($('<span>')
                                                      .css({'cursor' : 'pointer'})
                                                      .click(
                                                          $.proxy(function(event) {
                                                              event.preventDefault();
                                                              if ($(event.currentTarget.firstChild).hasClass('glyphicon-chevron-down')) {
                                                                  $(event.currentTarget.firstChild).removeClass('glyphicon-chevron-down')
                                                                                                   .addClass('glyphicon-chevron-right');
                                                                  this.$bodyDiv.parent().slideUp(400);
                                                              }
                                                              else {
                                                                  $(event.currentTarget.firstChild).removeClass('glyphicon-chevron-right')
                                                                                                   .addClass('glyphicon-chevron-down');
                                                                  this.$bodyDiv.parent().slideDown(400);
                                                              }
                                                          }, this)
                                                      )
                                                      .append($('<span>')
                                                              .addClass('glyphicon glyphicon-chevron-down kb-narr-panel-toggle'))
                                                      .append(this.options.title))
                                                      .append(this.$buttonPanel))
                              .append($('<div>')
                                      .addClass('kb-narr-panel-body')
                                      .css({ 
//                                          'max-height' : this.options.maxHeight,
                                          'overflow-y' : 'auto'
                                      })
                                      .append(this.$bodyDiv)));
        },

        /**
         * Adds a button to the button panel that sits on the right side of the header.
         * @param {object} btn - the button element to add. Expected to be a jquery node.
         * @public
         */
        addButton: function(btn) {
            this.$buttonPanel.append(btn);
        },

        /**
         * Sets the button panel to have the given list of buttons. This replaces any
         * existing buttons that might be there.
         * @param {Array} btnList - the list of button elements. Each one is expected to
         * be a jquery node representing a button
         * @public
         */
        addButtonList: function(btnList) {
            this.$buttonPanel.empty();
            for (var i=0; i<btnList.length; i++) {
                this.addButton(btnList[i]);
            }
        },

        /**
         * Returns the main body element of the widget as a jquery node. This is effective
         * for binding a functional widget into it.
         * @returns {object} a jquery node for the main widget panel
         * @public
         */
        body: function() {
            return this.$bodyDiv;
        },
    });
})(jQuery);
/**
 * A widget that contains functions and function information for the Narrative.
 * When initialized, it uses a loading gif while waiting for functions to load
 * (unless functions were passed in on construction).
 *
 * Each function is presented in a list (for now - accordion may be coming soon)
 * and when clicked will fire a "methodClicked.narrative" event.
 *
 * @author Bill Riehl <wjriehl@lbl.gov>
 * @public
 */
kb_require(['kbaseMethodGallery'], 
(function( $, undefined ) {
    $.KBWidget({
        name: 'kbaseNarrativeMethodPanel',
        parent: 'kbaseNarrativeControlPanel',
        version: '0.0.1',
        options: {
            loadingImage: 'static/kbase/images/ajax-loader.gif',
            autopopulate: true,
            title: 'Apps & Methods',
            methodStoreURL: 'http://dev19.berkeley.kbase.us/narrative_method_store',
            methodHelpLink: '/functional-site/#/narrativestore/method/',
        },
        ignoreCategories: { 'inactive' : 1, 'importers' : 1 },
        id2Elem: {},
        methodSpecs: {},  // id -> spec
        appSpecs: {},     // id -> spec
        categories: {},   // id -> category info

        /**
         * This private method is automatically called when the widget is initialized.
         *
         * Initialization steps:
         * 1. Put a loading spinner in its attached div
         * 2. Assume that the kernel is loaded before this is inited. //Check if the kernel is loaded - wait until it is.
         * 3. Make a kernel call to get the set of available services and functions.
         * 4. Shuffle the available functions into the right format.
         * 5. Display them on the screen, bind events.
         * @param {object} options
         * @private
         */
        init: function(options) {
            this._super(options);

            // DOM structure setup here.
            // After this, just need to update the function list

            if (window.kbconfig && window.kbconfig.urls) {
                this.options.methodStoreURL = window.kbconfig.urls.narrative_method_store;
                this.meth_icons = window.kbconfig.icons.methods;
                this.icon_colors = window.kbconfig.icons.colors;
            }

            this.$searchDiv = $('<div>')
                             .addClass('input-group')
                             .css({'margin-bottom' : '3px'})
                             .hide();

            this.$searchInput = $('<input type="text">')
                                .addClass('form-control')
                                .attr('Placeholder', 'Search methods')
                                .on('input',
                                    $.proxy(function(e) {
                                        var txt = this.$searchInput.val().trim().toLowerCase();
                                        if (txt.indexOf("type:") === 0) {
                                            this.visualFilter(this.inputTypeFilter, txt.substring(5));
                                        }
                                        else
                                            this.visualFilter(this.textFilter, txt);
                                    }, this)
                                );
            this.$numHiddenSpan = $('<span>0</span>');
            this.$showHideSpan = $('<span>show</span>');
            this.$toggleHiddenDiv = $('<div>')
                                    .append(this.$showHideSpan)
                                    .append(' ')
                                    .append(this.$numHiddenSpan)
                                    .append(' filtered')
                                    .addClass('kb-function-toggle')
                                    .hide()
                                    .click($.proxy(function(e) {
                                        var curText = this.$showHideSpan.text();
                                        this.toggleHiddenMethods(curText === 'show');
                                        this.$showHideSpan.text(curText === 'show' ? 'hide' : 'show');
                                    }, this));

            var $clearSearchBtn = $('<span>')
                                  .addClass('input-group-btn')
                                  .append($('<button>')
                                          .addClass('btn btn-default')
                                          .css({'border-left' : 'none'})
                                          .attr('type', 'button')
                                          .append($('<span>')
                                                  .append('X'))
                                          .click(
                                            $.proxy(function(event) {
                                                this.$searchInput.val('');
                                                this.$searchInput.trigger('input');
                                            }, this)
                                          ));

            this.$searchDiv.append(this.$searchInput)
                           .append($clearSearchBtn);

            // placeholder for apps and methods once they're loaded.
            this.$methodList = $('<div>')
                               .css({'height' : '300px', 'overflow-y': 'auto', 'overflow-x' : 'hidden'});
            // Make a function panel for everything to sit inside.
            this.$functionPanel = $('<div>')
                                  .addClass('kb-function-body')
                                  .append($('<div>')
                                          .append(this.$searchDiv)
                                          .append(this.$toggleHiddenDiv))
                                  .append(this.$methodList);

            // The 'loading' panel should just have a spinning gif in it.
            this.$loadingPanel = $('<div>')
                                 .addClass('kb-data-loading')
                                 .append('<img src="' + this.options.loadingImage + '">')
                                 .append($('<div>')
                                         .attr('id', 'message'))
                                 .hide();

            // The error panel should be empty for now.
            this.$errorPanel = $('<div>')
                               .addClass('kb-error')
                               .hide();

            // The help element should be outside of the panel itself, so it can be manipulated separately.
            // It should hide itself when clicked.
            this.initMethodTooltip();
            this.$bodyDiv.append($('<div>')
                                 .addClass('kb-narr-panel-body')
                                 .append(this.$functionPanel)
                                 .append(this.$loadingPanel)
                                 .append(this.$errorPanel));

            // $(document).on('hasFunction.Narrative',
            //     $.proxy(function(e, service, method, callback) {
            //         if (callback) {
            //             callback(this.hasFunction(service, method));
            //         }
            //     }, this)
            // );

            $(document).on('filterMethods.Narrative',
                $.proxy(function(e, filterString) {
                    if (filterString) {
                        this.$searchDiv.show();
                        this.$searchInput.val(filterString);
                        this.$searchInput.trigger('input');
                    }
                }, this)
            );

            $(document).on('removeFilterMethods.Narrative',
                $.proxy(function(e) {
                    this.$searchDiv.hide();
                    this.$searchInput.val('');
                    this.$searchInput.trigger('input');
                }, this)
            );

            /* 'request' should be expected to be an object like this:
             * {
             *      apps: [list, of, app, ids],
             *      methods: [list, of, method, ids]
             * }
             *
             * Either the apps or methods key can exist, or not and will be searched
             * appropriately.
             *
             * This will pass to the callback a similar structure:
             * {
             *      apps: {
             *         id: { spec },
             *         id: { spec }
             *      },
             *      methods: {
             *         id: { spec },
             *         id: { spec }
             *      }
             * }
             *
             * If a spec isn't found, then it won't appear in the return values.
             */
            $(document).on('getFunctionSpecs.Narrative',
                $.proxy(function(e, specSet, callback) {
                  console.debug("Trigger proxy: specSet=", specSet, "callback=", callback);
                    if (callback) {
                      console.debug("Trigger: specSet=",specSet);
                        callback(this.getFunctionSpecs(specSet));
                    }
                }, this)
            );

            this.$methodGalleryBody = $('<div>');
            this.$methodGalleryBody.kbaseMethodGallery({sidePanel : this});
            this.$methodGallery = $('<div>')
                                  .append($('<div>')
                                          .addClass('kb-side-header active')
                                          .css({'width':'100%'})
                                          .append('Methods'))
                                  .append(this.$methodGalleryBody);

            this.addButton($('<button>')
                           .addClass('btn btn-xs btn-default')
                           .append('<span class="fa fa-search"></span>')
                           .click($.proxy(function(event) {
                               this.$searchDiv.slideToggle(400);
                           }, this)));
            this.addButton($('<button>')
                           .addClass('btn btn-xs btn-default')
                           .append('<span class="fa fa-arrow-right"></span>')
                           .click($.proxy(function(event) {
                               this.trigger('toggleSidePanelOverlay.Narrative', this.$methodGallery);
                           }, this)));

            if (!NarrativeMethodStore) {
                this.showError('Unable to connect to KBase Method Store!');
                return this;
            }

            this.methClient = new NarrativeMethodStore(this.options.methodStoreURL);

            if (this.options.autopopulate === true) {
                this.refresh();
            }

            return this;
        },

        initMethodTooltip: function() {
            this.help = {};

            this.help.$helpPanel = $('<div>')
                                   .addClass('kb-function-help-popup alert alert-info')
                                   .hide()
                                   .click($.proxy(function(event) { this.help.$helpPanel.hide(); }, this));
            this.help.$helpTitle = $('<span>');
            this.help.$helpVersion = $('<span>')
                                   .addClass('version');

            var $helpHeader = $('<div>')
                              //.addClass('header')
                              .append(
                                    $('<h1>')
                                      .css("display","inline")
                                      .css("padding-right","8px")
                                        .append(this.help.$helpTitle))
                              .append(this.help.$helpVersion);

            this.help.$helpBody = $('<div>')
                                  .addClass('body');
            this.help.$helpLinkout = $('<a>')
                                     .attr('href', this.options.methodHelpLink)
                                     .attr('target', '_blank')
                                     .append('More...');

            this.help.$helpPanel.append($helpHeader)
                                .append(this.help.$helpBody)
                                .append($('<div>').append(this.help.$helpLinkout))
                                .append($('<h2>').append('Click to hide'));
            $('body').append(this.help.$helpPanel);
        },

        /**
         * Shows a popup panel with a description of the clicked method.
         * @param {object} method - the method containing a title and
         * description for populating the popup.
         * @private
         */
        showTooltip: function(method, event) {
            this.help.$helpTitle.text(method.name);
            this.help.$helpVersion.text('v' + method.ver);
            this.help.$helpBody.html(method.tooltip);
            this.help.$helpLinkout.attr('href', this.options.methodHelpLink + method.id);
            this.help.$helpPanel.css({
                                       'left':event.pageX,
                                       'top':event.pageY
                                     })
                                .show();
        },

        showErrorTooltip: function(method, event) {
            this.showTooltip({
                'name' : method.name,
                'ver' : method.ver,
                'id' : method.id,
                'tooltip' : "This method has an internal error and cannot currently be used.<br><br>The detailed error message is:<br>"+method.loading_error
            }, event);
        },

        refreshFromService: function() {
            this.showLoadingMessage("Loading KBase Methods from service...");

            var methodProm = this.methClient.list_methods_spec({},
                $.proxy(function(methods) {
                    this.methodSpecs = {};
                    for (var i=0; i<methods.length; i++) {
                        this.methodSpecs[methods[i].info.id] = methods[i];
                    }
                }, this)
            );
            var appProm = this.methClient.list_apps_spec({},
                $.proxy(function(apps) {
                    this.appSpecs = {};
                    for (var i=0; i<apps.length; i++) {
                        this.appSpecs[apps[i].info.id] = apps[i];
                    }
                }, this)
            );
            var catProm = this.methClient.list_categories({},
                $.proxy(function(categories) {
                    this.categories = categories[0];
                }, this)
            );

            $.when(methodProm, appProm, catProm).done($.proxy(function(a, b, c) {
                // console.log([this.appSpecs, this.methodSpecs, this.categories]);
                this.parseMethodsAndApps(this.categories, this.methodSpecs, this.appSpecs);
                this.showFunctionPanel();
            }, this));

            $.when(methodProm, appProm).fail($.proxy(function(error) {
                console.log("error'd!")
                console.log(error);
                this.showError(error);
            }, this));
        },

        parseMethodsAndApps: function(catSet, methSet, appSet) {
            var self = this;
            var triggerMethod = function(method) {
                self.trigger('methodClicked.Narrative', method);
            };

            var triggerApp = function(app) {
                self.trigger('appClicked.Narrative', app);
            };

            var generatePanel = function(catSet, fnSet, icon, callback) {
                var $fnPanel = $('<div>');
                var fnList = [];
                var id2Elem = {};
                for (var fn in fnSet) {
                    var ignoreFlag = false;
                    for (var i=0; i<fnSet[fn].info.categories.length; i++) {
                        if (self.ignoreCategories[fnSet[fn].info.categories[i]]) {
                            ignoreFlag = true;
                        }
                    }
                    if (ignoreFlag)
                        delete fnSet[fn];
                    else
                        fnList.push(fnSet[fn]);
                }
                fnList.sort(function(a, b) {
                    return a.info.name.localeCompare(b.info.name);
                });
                for (var i=0; i<fnList.length; i++) {
                    var $fnElem = self.buildMethod(icon, fnList[i], callback);
                    $fnPanel.append($fnElem);
                    id2Elem[fnList[i].info.id] = $fnElem;
                }
                return [$fnPanel, id2Elem];
            };

            this.methodSet = {};

            var methodRender = generatePanel(catSet, methSet, 'M', triggerMethod);
            var $methodPanel = methodRender[0];
            this.id2Elem['method'] = methodRender[1];

            var appRender = generatePanel(catSet, appSet, 'A', triggerApp);
            var $appPanel = appRender[0];
            this.id2Elem['app'] = appRender[1];

            this.$methodList.empty().append($appPanel).append($methodPanel);
            //console.log([Object.keys(this.appSpecs).length, Object.keys(this.methodSpecs).length]);
        },

        /**
         * Creates and returns a list item containing info about the given narrative function.
         * Clicking the function anywhere outside the help (?) button will trigger a
         * methodClicked.Narrative event. Clicking the help (?) button will trigger a
         * function_help.Narrative event.
         *
         * Both events have the relevant data passed along with them for use by the responding
         * element.
         * @param {object} method - the method object returned from the kernel.
         * @private
         */
        buildMethod: function(icon, method, triggerFn) {
            /* Logos */
            var icon_name = (icon == "A") ? "app" : "method";
            var icon_color = (icon == "A") ? this.icon_colors[9] : this.icon_colors[5];
            //var icon_url = "static/kbase/images/" + icon_name + "-icon.png";
            var icons = this.meth_icons;
            var icon = icons[icon_name];
            var $logo = $('<div>')
              // background
              .addClass("fa-stack fa-2x").css({'cursor':'pointer'})
              .append($('<i>')
                .addClass("fa fa-square fa-stack-2x")
                .css({'color': icon_color}));
            // add stack of font-awesome icons
            _.each(icon, function(cls) {
              $logo.append($('<i>')
              .addClass("fa fa-inverse fa-stack-1x " + cls));
            });
            // add behavior
            $logo.click($.proxy(function(e) {
              e.stopPropagation();
              triggerFn(method);
            }, this));

            var $name = $('<div>')
                        .addClass('kb-data-list-name')
                        .css({'white-space':'normal', 'cursor':'pointer'})
                        .append(method.info.name)
                        .click($.proxy(function(e) {
                            e.stopPropagation();
                            triggerFn(method);
                        }, this));
            var $version = $('<span>').addClass("kb-data-list-type").append('v'+method.info.ver); // use type because it is a new line

            var $more = $('<div>')
                        .addClass('kb-method-list-more-div')
                        .append($('<div>')
                                .append(method.info.subtitle))
                        .append($('<div>')
                                .append($('<a>')
                                        .append('more...')
                                        .attr('target', '_blank')
                                        .attr('href', this.options.methodHelpLink + method.info.id)));

            var $moreBtn = $('<span>')
                           .addClass('kb-data-list-more fa fa-ellipsis-h')
                           .attr('aria-hidden', 'true')
                           .css({'color' : '#999'});

            var $mainDiv = $('<div>')
                           .addClass('kb-data-list-info')
                           .css({ padding:'0', margin:'0'})
                           .append($name)
                           .append($('<div>')
                                   .append($version)
                                   .append($moreBtn.hide()));

            var $newMethod = $('<table>')
                             .css({'width':'100%'})
                             .append($('<tr>')
                                     .append($('<td>')
                                             .css({'width':'15%'})
                                             .append($logo))
                                     .append($('<td>')
                                             // .css({'width':'80%'})
                                             .append($mainDiv)));

            return $('<div>')
                   .append($('<hr>').addClass('kb-data-list-row-hr').css({'margin-left':'65px'}))
                   .append($('<div>')
                           .addClass('kb-data-list-obj-row')
                           .append($newMethod)
                           .append($more.hide())
                           .mouseenter(function() {
                                if (!$more.is(':visible')) { $moreBtn.show(); }
                           })
                           .mouseleave(function() { $moreBtn.hide(); })
                           .click(function() {
                                $more.slideToggle('fast', $.proxy(function() {
                                    if (!$more.is(':visible')) { $moreBtn.show(); }
                                    else { $moreBtn.hide(); }
                                }, this));
                           } ));

        },

        /* 'request' should be expected to be an object like this:
         * {
         *      apps: [list, of, app, ids],
         *      methods: [list, of, method, ids]
         * }
         *
         * Either the apps or methods key can exist, or not and will be searched
         * appropriately.
         *
         * This will pass to the callback a similar structure:
         * {
         *      apps: {
         *         id: { spec },
         *         id: { spec }
         *      },
         *      methods: {
         *         id: { spec },
         *         id: { spec }
         *      }
         * }
         *
         * If a spec isn't found, then it won't appear in the return values.
         */
        getFunctionSpecs: function(specSet) {
            console.debug("getFunctionSpecs(specSet=",specSet,")");
            var results = {};
            if (specSet.apps && specSet.apps instanceof Array) {
                results.apps = {};
                for (var i=0; i<specSet.apps.length; i++) {
                    if (this.appSpecs[specSet.apps[i]])
                        results.apps[specSet.apps[i]] = this.appSpecs[specSet.apps[i]];
                }
            }
            if (specSet.methods && specSet.methods instanceof Array) {
              results.methods = _.pick(this.methodSpecs, specSet.methods);
              /*
                results.methods = {};
                for (var i=0; i < specSet.methods.length; i++) {
                    if (this.methodSpecs[specSet.methods[i]])
                        results.methods[specSet.methods[i]] = this.methodSpecs[specSet.methods[i]];
                }
              */
            }
            console.debug("getFunctionSpecs returning:",results);
            return results;
        },

        logoColorLookup:function(type) {
            var colors = [
                            '#F44336', //red
                            '#E91E63', //pink
                            '#9C27B0', //purple
                            '#673AB7', //deep purple
                            '#3F51B5', //indigo
                            '#2196F3', //blue
                            '#03A9F4', //light blue
                            '#00BCD4', //cyan
                            '#009688', //teal
                            '#4CAF50', //green
                            '#8BC34A', //lime green
                            '#CDDC39', //lime
                            '#FFEB3B', //yellow
                            '#FFC107', //amber
                            '#FF9800', //orange
                            '#FF5722', //deep orange
                            '#795548', //brown
                            '#9E9E9E', //grey
                            '#607D8B'  //blue grey
                         ];

            // first, if there are some colors we want to catch...
            switch (type) {
                case "M":
                    return "#FF9800";
                    break;
                case "A":
                    return "#03A9F4";
                    break;
            }

            // pick one based on the characters
            var code = 0;
            for(var i=0; i<type.length; i++) {
                code += type.charCodeAt(i);
            }
            return colors[ code % colors.length ];
        },

        /**
         * @method
         * A simple tester to see if a service.method call exists in the currently loaded set
         * @param {string} service - the name of the service to test
         * @param {string} method - the name of the method to test
         * @return {boolean} true if the call exists, false otherwise
         */
        // hasFunction: function(service, method) {
        //     if (!this.services)
        //         return true;

        //     console.debug("looking up '" + service + "'.'" + method + "'");
        //     if (this.services.hasOwnProperty(service))
        //         return this.services[service].hasOwnProperty(method);
        //     return false;
        // },


        /**
         * Creates a new function field in the functions list.
         * This 'function' is represented as a DOM element. It has a name (styled as
         * a button, or something buttonish) and a help button.
         *
         * Clicking the function button triggers a function_clicked.Narrative event,
         * and clicking the help button triggers a function_help.Narrative event.
         *
         * Both of these events have the relevant data passed along with them for
         * population by the responding element.
         *
         * @param {object} method - the method object returned from the kernel.
         * @private
         */
        // addFunction: function(method) {
        //     var self = this;
        //     var $funcButton = $('<button>')
        //                       .attr('type', 'button')
        //                       .addClass('btn btn-default')
        //                       .append(method.title)
        //                       .click(function(event) { self.trigger('function_clicked.Narrative', method); });

        //     var $helpButton = $('<span>')
        //                       .addClass('glyphicon glyphicon-question-sign')
        //                       .css({'float': 'right',
        //                             'cursor': 'pointer',
        //                             'font-size': '14pt',
        //                             'color': '#0064b6'})
        //                       .click(function(event) { self.showHelpPopup(method); });

        //     this.$functionList.append($('<li>')
        //                                 .append($funcButton)
        //                                 .append($helpButton)
        //                              );
        // },

        /**
         * Shows a loading spinner or message on top of the panel.
         * @private
         */
        showLoadingMessage: function(message) {
            this.$loadingPanel.find('#message').empty();
            if (message)
                this.$loadingPanel.find('#message').html(message);
            this.$functionPanel.hide();
            this.$errorPanel.hide();
            this.$loadingPanel.show();
        },

        /**
         * Shows the main function panel, hiding all others.
         * @private
         */
        showFunctionPanel: function() {
            this.$errorPanel.hide();
            this.$loadingPanel.hide();
            this.$functionPanel.show();
        },

        /**
         * Shows an error text message on top of the panel. All other pieces are hidden.
         * @param {string} error - the text of the error message
         * @private
         */
        showError: function(error) {
            var $errorHeader = $('<div>')
                               .addClass('alert alert-danger')
                               .append('<b>Sorry, an error occurred while loading KBase functions.</b><br>Please contact the KBase team at <a href="mailto:help@kbase.us?subject=Narrative%20function%20loading%20error">help@kbase.us</a> with the information below.');

            this.$errorPanel.empty();
            this.$errorPanel.append($errorHeader);

            // If it's a string, just dump the string.
            if (typeof error === 'string') {
                this.$errorPanel.append($('<div>').append(error));
            }

            // If it's an object, expect an error object as returned by the execute_reply callback from the IPython kernel.
            else if (typeof error === 'object') {
                var $details = $('<div>');
                $details.append($('<div>').append('<b>Type:</b> ' + error.ename))
                        .append($('<div>').append('<b>Value:</b> ' + error.evalue));

                var $tracebackDiv = $('<div>')
                                 .addClass('kb-function-error-traceback');
                for (var i=0; i<error.traceback.length; i++) {
                    $tracebackDiv.append(error.traceback[i] + "<br>");
                }

                var $tracebackPanel = $('<div>');
                var tracebackAccordion = [{'title' : 'Traceback', 'body' : $tracebackDiv}];

                this.$errorPanel.append($details)
                                .append($tracebackPanel);
                $tracebackPanel.kbaseAccordion({ elements : tracebackAccordion });
            }

            this.$functionPanel.hide();
            this.$loadingPanel.hide();
            this.$errorPanel.show();
        },

        /**
         * @method
         * Temp function borrowed from kbaseAccordion.js, so we can have access to the internal
         * accordion bits that get generated. Maybe it'll change more!
         */
        buildAccordion : function (elements) {
            var fontSize = '100%';

            var $block = $('<div></div>')
                         .addClass('accordion')
                         .css('font-size', fontSize)
                         .attr('id', 'accordion');

            var topElements = [];

            $.each(elements,
                $.proxy(
                    function (idx, val) {
                        var $topElem =
                            $('<div></div>')
                            .addClass('panel panel-default')
                            .css('margin-bottom', '2px')
                            .append($('<div></div>')
                                    .addClass('panel-heading')
                                    .css('padding', '0px')
                                    .append($('<i></i>')
                                            .css('margin-right', '5px')
                                            .css('margin-left', '3px')
                                            .addClass('fa fa-chevron-right')
                                            .addClass('pull-left')
                                            .css('height', '22px')
                                            .css('line-height', '22px')
                                            .css('color', 'gray'))
                                    .append($('<a></a>')
                                            .css('padding', '0px')
                                            .attr('href', '#')
                                            .attr('title', val.title)
                                            .css('height', '22px')
                                            .css('line-height', '22px')
                                            .append(val.title))
                                    .bind('click',
                                        function(e) {
                                            e.preventDefault();
                                            var $opened = $(this).closest('.panel').find('.in');
                                            var $target = $(this).next();

                                            if ($opened != undefined) {
                                                $opened.collapse('hide');
                                                var $i = $opened.parent().first().find('i');
                                                $i.removeClass('fa fa-chevron-down');
                                                $i.addClass('fa fa-chevron-right');
                                            }

                                            if ($target.get(0) != $opened.get(0)) {
                                                $target.collapse('show');
                                                var $i = $(this).parent().find('i');
                                                $i.removeClass('fa fa-chevron-right');
                                                $i.addClass('fa fa-chevron-down');
                                            }
                                        }
                                    )
                            )
                            .append($('<div></div>')
                                    .addClass('panel-body collapse')
                                    .css('padding-top', '9px')
                                    .css('padding-bottom', '9px')
                                    .append(val.body));
                        topElements[val.title] = $topElem;
                        $block.append($topElem);
                    },
                    this
                )
            );
            this._rewireIds($block, this);

            return [$block, topElements];
        },

        /**
         * A *REALLY* simple filter based on whether the given pattern string is present in the
         * method's name.
         * Returns true if so, false if not.
         * Doesn't care if its a method or an app, since they both have name fields at their root.
         */
        textFilter: function(pattern, method) {
            var lcName = method.info.name.toLowerCase();
            return lcName.indexOf(pattern.toLowerCase()) > -1;
        },

        /**
         * Returns true if the type is available as in input to the method, false otherwise
         */
        inputTypeFilter: function(type, spec) {
            var methodFilter = function(type, spec) {
                for (var i=0; i<spec.parameters.length; i++) {
                    var p = spec.parameters[i];
                    if (p.text_options && p.text_options.valid_ws_types && p.text_options.valid_ws_types.length > 0) {
                        var validTypes = p.text_options.valid_ws_types;
                        for (var j=0; j<validTypes.length; j++) {
                            if (validTypes[j].toLowerCase().indexOf(type) !== -1)
                                return true;
                        }
                    }
                }
                return false;
            };
            if (spec.steps) {
                // ignoring apps right now
                for (var i=0; i<spec.steps.length; i++) {
                    var methodSpec = this.methodSpecs[spec.steps[i].method_id];
                    if (!methodSpec || methodSpec === undefined || methodSpec === null) {
//                        console.error('missing spec for ' + spec.steps[i].method_id);
                    }
                    else if (methodFilter(type, methodSpec))
                        return true;
                }
                return false;
            } else {
                return methodFilter(type, spec);
            }
        },

        /**
         * @method
         * @public
         * Expects this.methodSet to be an associative array, like this:
         * {
         *     <methodId> : {
         *         $elem : rendered element as jQuery node,
         *         rest of method spec
         *     }
         * }
         */
        visualFilter: function(filterFn, fnInput) {
            var numHidden = 0;
            var self = this;
            filterFn = $.proxy(filterFn, this);
            var filterSet = function(set, type) {
                var numHidden = 0;
                for (var id in set) {
                    if (!filterFn(fnInput, set[id])) {
                        self.id2Elem[type][id].hide();
                        self.id2Elem[type][id].addClass('kb-function-dim');
                        // self.methodSet[methId].$elem.hide();
                        // self.methodSet[methId].$elem.addClass('kb-function-dim');
                        numHidden++;
                    }
                    else {
                        self.id2Elem[type][id].removeClass('kb-function-dim');
                        self.id2Elem[type][id].show();
                    }
                }
                return numHidden;
            };

            numHidden += filterSet(this.appSpecs, 'app');
            numHidden += filterSet(this.methodSpecs, 'method');

            if (numHidden > 0) {
                this.$numHiddenSpan.text(numHidden);
                this.$toggleHiddenDiv.show();
                this.toggleHiddenMethods(this.$showHideSpan.text() !== 'show');
            }
            else {
                this.$toggleHiddenDiv.hide();
                this.toggleHiddenMethods(true);
            }
        },

        toggleHiddenMethods: function(show) {
            /* 2 cases
             * show is truthy -> show()
             * show is falsy -> hide()
             */

            if (show) {
                this.$functionPanel.find('.kb-function-dim').show();
            }
            else {
                this.$functionPanel.find('.kb-function-dim').hide();

            }
        },

        // Temporary pass-through for Jim's gallery widget
        toggleOverlay: function() {
            this.trigger('toggleSidePanelOverlay.Narrative');
        },
    });
})( jQuery )
);

/**
 * Widget to display a table of data objects from a kbase workspace.
 *
 * TODO: Re-enable "readonly" mode by following instructions in isReadonlyWorkspace()
 *       (dan g. 10/30/2014)
 *
 * Options:
 *    wsId - the name of the workspace to show in this widget
 *    loadingImage - an image to show in the middle of the widget while loading data
 *    notLoggedInMsg - a string to put in the middle of the widget when not logged in.
 *
 * Triggers events:
 * dataUpdated.Narrative - when the loaded data table gets updated.
 * workspaceUpdated.Narrative - when the current workspace ID gets updated
 * @author Bill Riehl <wjriehl@lbl.gov>
 * @author Dan Gunter <dkgunter@lbl.gov>
 * @public
 */
(function( $, undefined ) {

    $.KBWidget({
        name: "kbaseNarrativeDataPanel",
        parent: "kbaseNarrativeControlPanel",
        version: "1.0.0",
        wsClient: null,
        table: null,
        tableData: [],
        $loginMessage: null,
        $errorMessage: null,
        $loading: null,
        isLoggedIn: false,
        narrWs: null, /* see setNarrWS */
        // The set of all data currently loaded into the widget
        loadedData: {},
        options: {
            title: 'Data',
            loadingImage: "static/kbase/images/ajax-loader.gif",
            notLoggedInMsg: "Please log in to view a workspace.",
            workspaceURL: "https://kbase.us/services/ws",
            wsBrowserURL: "/functional-site/#/ws/",
            landing_page_url: "/functional-site/#/", // !! always include trailing slash
            default_landing_page_url: "/functional-site/#/json/", // ws_name/obj_name,
            container: null,
            ws_name: null,
        },
        ws_name: null,
        // Constants
        WS_NAME_KEY: 'ws_name', // workspace name, in notebook metadata
        WS_META_KEY: 'ws_meta', // workspace meta (dict), in notebook metadata


        dataListWidget: null,

        init: function(options) {
            this._super(options);

            if (this.options.wsId) {
                this.ws_name = options.wsId;
                this.options.ws_name = options.wsId;
            }
            if (this.options.ws_name) {
                this.ws_name = options.ws_name;
            }

            if (window.kbconfig && window.kbconfig.urls) {
                this.options.workspaceURL = window.kbconfig.urls.workspace;
                this.options.wsBrowserURL = window.kbconfig.urls.ws_browser;
                this.options.landingPageURL = window.kbconfig.urls.landing_pages;
            }
            this.data_icons = window.kbconfig.icons.data;
            this.icon_colors = window.kbconfig.icons.colors;

            var $dataList = $('<div>');
            this.body().append($dataList);
            this.dataListWidget = $dataList["kbaseNarrativeDataList"](
                                    {
                                        ws_name: this.ws_name,
                                        ws_url: this.options.workspaceURL,
                                        loadingImage: this.options.loadingImage,
                                        parentControlPanel: this
                                    });

            $(document).on(
                'setWorkspaceName.Narrative', $.proxy(function(e, info) {
                    this.ws_name = info.wsId;
                    this.narrWs = info.narrController;
                    this.dataListWidget.setWorkspace(this.ws_name);
                }, this)
            );

            /**
             * This should be triggered if something wants to know what data is loaded from the current workspace
             */
            $(document).on(
                'dataLoadedQuery.Narrative', $.proxy(function(e, params, ignoreVersion, callback) {
                    var obj_data = this.dataListWidget.getObjData(params,ignoreVersion);
                    if (callback) {
                        callback(obj_data);
                    }
                },
                this)
            );


            /**
             * This should be triggered when something updates the available data in either the narrative or
             * in the workspace.
             */
            $(document).on(
                'updateData.Narrative', $.proxy(function(e) {
                    //this.refresh();
                    this.dataListWidget.refresh();
                },
                this )
            );

            /**
             * This should be triggered when something wants to know what workspace this widget is currently linked to.
             */
            $(document).on(
                'workspaceQuery.Narrative', $.proxy(function(e, callback) {
                    if (callback) {
                        callback(this.ws_name);
                    }
                },
                this)
            );

            this.landingPageMap = window.kbconfig.landing_page_map;

            // initialize the importer
            this.dataImporter();

            if (this.ws_name)
                this.trigger('workspaceUpdated.Narrative', this.ws_name);

            this.dataImporter();

            this.addButton($('<button>')
                           .addClass('btn btn-xs btn-default')
                           .tooltip({title:'Hide / Show data browser', 'container':'body', delay: { "show": 400, "hide": 50 }})
                           .append('<span class="fa fa-arrow-right"></span>')
                           .click($.proxy(function(event) {
                               this.trigger('hideGalleryPanelOverlay.Narrative');
                               this.trigger('toggleSidePanelOverlay.Narrative', this.$overlayPanel);
                           }, this)));

            return this;
        },

        addButtonToControlPanel: function($btn) {
            this.addButton($btn);
        },

        /**
         * @method loggedInCallback
         * This is associated with the login widget (through the kbaseAuthenticatedWidget parent) and
         * is triggered when a login event occurs.
         * It associates the new auth token with this widget and refreshes the data panel.
         * @private
         */
        loggedInCallback: function(event, auth) {
            this.wsClient = new Workspace(this.options.workspaceURL, auth);
            this.isLoggedIn = true;
            this.refresh();
            return this;
        },

        /**
         * @method loggedOutCallback
         * Like the loggedInCallback, this is triggered during a logout event (through the login widget).
         * It throws away the auth token and workspace client, and refreshes the widget
         * @private
         */
        loggedOutCallback: function(event, auth) {
            this.wsClient = null;
            this.isLoggedIn = false;
            this.refresh();
            return this;
        },

        setWorkspace: function(ws_name) {
            this.ws_name = ws_name;
            this.refresh();
        },

        /**
         * Set the narrative workspace (parent) into the data widget
         * so it can call back to it about information discovered
         * from the workspace, e.g. permissions to objects in the
         * narrative for read-only mode.
         *
         * @param obj kbaseNarrativeWorkspace instance
         */
        setNarrWs: function(obj) {
            this.narrWs = obj;
        },

        /**
         * @method refresh
         * This reloads any data that this panel should display.
         * It uses the existing workspace client to fetch data from workspaces and populates the
         * panel. It then fetches anything that's a part of the narrative (using the Narrative's metadata)
         * and displays that.
         *
         * @public
         */
        refresh: function() {
            this.dataListWidget.refresh();
            return;
        },

        /**
         * Returns the set of currently loaded data objects from the workspace.
         * These are returned as described below.
         *
         * If 'type' is a string, then it returns only objects matching that
         * object type (this is case-sensitive!).
         *
         * If 'type' is an array, then it returns only objects matching all of
         * those types.
         *
         * Returns data like this:
         * {
         *   type1 : [ [metadata1], [metadata2], ... ],
         *   type2 : [ [metadata3], [metadata4], ... ]
         * }
         * @returns a list of data objects
         */
        getLoadedData: function(type, ignoreVersion) {
            if (this.dataListWidget) {
                return this.dataListWidget.getObjData(params,ignoreVersion);
            } else {
                return {};
            }

        },

        /**
         * Shows the loading panel and hides all others
         * @private
         */
        showLoadingMessage: function(message) {
            this.$loadingPanel.find('#message').empty();
            if (message)
                this.$loadingPanel.find('#message').html(message);
            this.$dataPanel.hide();
            this.$errorPanel.hide();
            this.$loadingPanel.show();
        },




        buildTabs: function(tabs, isOuter) {
            var $header = $('<div>');
            var $body = $('<div>');

            for (var i=0; i<tabs.length; i++) {
                var tab = tabs[i];
                $header.append($('<div>')
                               .addClass('kb-side-header')
                               .css('width', (100/tabs.length)+'%')
                               .append(tab.tabName));
                $body.append($('<div>')
                             .addClass('kb-side-tab')
                             .append(tab.content));
            }

            $header.find('div').click($.proxy(function(event) {
                event.preventDefault();
                event.stopPropagation();
                var $headerDiv = $(event.currentTarget);

                if (!$headerDiv.hasClass('active')) {
                    var idx = $headerDiv.index();
                    $header.find('div').removeClass('active');
                    $headerDiv.addClass('active');
                    $body.find('div.kb-side-tab').removeClass('active');
                    $body.find('div:nth-child(' + (idx+1) + ').kb-side-tab').addClass('active');
                    if (isOuter)
                        this.hideOverlay();
                }
            }, this));

            $header.find('div:first-child').addClass('active');
            $body.find('div:first-child.kb-side-tab').addClass('active');

            return {
                header: $header,
                body: $body
            };
        },

        /**
         * Renders the data importer panel
         * I'm throwing this here because I have no idea how to
         * bind a sidepanel to a specific widget, since all the other panels "inherit" these widgets.
         */
        dataImporter: function() {
            var self = this;
            var maxObjFetch = 300000;

            var narWSName;
            $(document).on('setWorkspaceName.Narrative', function(e, info){
                narWSName = info.wsId;
            })

            var self = this;
            var user = $("#signin-button").kbaseLogin('session', 'user_id');  // TODO: use

            // models
            var myData = [], sharedData = [];

            var myWorkspaces = [], sharedWorkspaces = [];

            // model for selected objects to import
            var mineSelected = [], sharedSelected = [];

            var types = ["KBaseGenomes.Genome",
                         "KBaseSearch.GenomeSet",
                         "KBaseGenomes.Pangenome",
                         "KBaseGenomes.GenomeComparison",
                         "KBaseGenomes.GenomeDomainData",
                         "GenomeComparison.ProteomeComparison",
                         "KBaseGenomes.ContigSet",
                         "KBaseAssembly.AssemblyInput",
                         "KBaseRegulation.Regulome",
                         "KBaseTrees.MSA",
                         "KBaseTrees.Tree",
                         "KBaseFBA.FBAModel",
                         "KBaseFBA.ModelTemplate",
                         "KBaseFBA.PromConstraint",
                         "KBaseBiochem.Media",
                         "KBaseFBA.FBA",
                         "KBasePhenotypes.PhenotypeSet",
                         "KBasePhenotypes.PhenotypeSimulationSet",
                         "KBaseFBA.ReactionSensitivityAnalysis",
                         "KBaseGenomes.MetagenomeAnnotation",
                         "Communities.SequenceFile",
                         "KBaseExpression.ExpressionSeries",
                         "KBaseExpression.ExpressionSample"
                         ];

            // tab panels
            var minePanel = $('<div class="kb-import-content kb-import-mine">'),
                sharedPanel = $('<div class="kb-import-content kb-import-shared">'),
                publicPanel = $('<div class="kb-import-content kb-import-public">'),
                importPanel = $('<div class="kb-import-content kb-import-import">'),
                examplePanel = $('<div class="kb-import-content">');



            // add tabs
            var $tabs = this.buildTabs([
                    {tabName: '<small>My Data</small>', content: minePanel},
                    {tabName: '<small>Shared With Me</small>', content: sharedPanel},
                    {tabName: '<small>Public</small>', content: publicPanel},
                    {tabName: '<small>Example</small>', content: examplePanel},
                    {tabName: '<small>Import</small>', content: importPanel},
                ]);


            // hack to keep search on top

            var $mineFilterRow = $('<div class="row">');
            minePanel.append($mineFilterRow);
            var $mineScrollPanel = $('<div>').css({'overflow-x':'hidden','overflow-y':'auto','height':'550px'});
            setLoading($mineScrollPanel);
            minePanel.append($mineScrollPanel);

            var $sharedFilterRow = $('<div class="row">');
            sharedPanel.append($sharedFilterRow);
            var $sharedScrollPanel = $('<div>').css({'overflow-x':'hidden','overflow-y':'auto','height':'550px'});
            setLoading($sharedScrollPanel);
            sharedPanel.append($sharedScrollPanel);

            var body = $('<div>');
            var footer = $('<div>');
            body.addClass('kb-side-panel');
            body.append($tabs.header, $tabs.body);

            // add footer status container and buttons
            var importStatus = $('<div class="pull-left kb-import-status">');
            footer.append(importStatus)
            var btn = $('<button class="btn btn-primary pull-right" disabled>Add to Narrative</button>').css({'margin':'10px'});
            var closeBtn = $('<button class="kb-default-btn pull-right">Close</button>').css({'margin':'10px'});

            // Setup the panels that are defined by widgets
            publicPanel.kbaseNarrativeSidePublicTab({$importStatus:importStatus});
            importPanel.kbaseNarrativeSideImportTab({});
            examplePanel.kbaseNarrativeExampleDataTab({$importStatus:importStatus});

            // It is silly to invoke a new object for each widget
            var auth = {token: $("#signin-button").kbaseLogin('session', 'token')}
            var ws = new Workspace(this.options.workspaceURL, auth);


            closeBtn.click(function() {
                self.trigger('hideSidePanelOverlay.Narrative');
            })
            footer.append(closeBtn);

            // start with my data, then fetch other data
            // this is because data sets can be large and
            // makes things more fluid
            updateView('mine').done(function() {
                updateView('shared')
            });

            var narrativeNameLookup={};
            this.$overlayPanel = body.append(footer);

            function updateView(view) {
                var p;
                if (view == 'mine') {
                    p = getMyWS();
                } else if (view == 'shared') {
                    p = getSharedWS();
                }

                return $.when(p).done(function(workspaces) {
                    if (view == 'mine') {
                        prom = getMyData(workspaces);
                    } else if (view == 'shared') {
                        prom = getSharedData(workspaces);
                    }
                    $.when(prom).done(function() {
                        if (view == 'mine') {
                           // minePanel.detach();  // arg!! why isn't the filter bar it's own div?
                           // minePanel.append($mineScrollPanel);
                            addMyFilters();
                        } else if(view == 'shared') {
                          //  minePanel.detach();  // arg!! why isn't the filter bar it's own div?
                          //  minePanel.append($mineScrollPanel);
                            addSharedFilters();
                        }
                    });
                });
            }

            // function used to update my data list
            function getMyData(workspaces, type, ws_name) {
                if (workspaces.length==0) {
                    render([], $mineScrollPanel, {});
                    return [];
                }
                var params = {includeMetadata:1};
                if (!ws_name) {
                    var ws_ids = [], obj_count = 0;
                    for (var i in workspaces) {
                        ws_ids.push(workspaces[i].id);
                        obj_count = workspaces[i].count + obj_count;
                    }

                    params.ids = ws_ids;
                } else
                    params.workspaces = [ws_name];

                if (type) params.type = type;

                if (obj_count > maxObjFetch)
                    console.error("user's object count for owned workspaces was", obj_count);

                //console.log('total owned data is', obj_count)

                var req_count = Math.ceil(obj_count/10000);

                var proms = [];
                proms.push( ws.list_objects(params) );
                for (var i=1; i < req_count; i++) {
                    params.skip = 10000 * i;
                    proms.push( ws.list_objects(params) );
                }

                var p = ws.list_objects(params);
                return $.when(p).then(function(d) {
                    // update model
                    myData = [].concat.apply([], arguments);
                    myData.sort(function(a,b) {
                            if (a[3] > b[3]) return -1; // sort by name
                            if (a[3] < b[3]) return 1;
                            return 0;
                        });
                    render(myData, $mineScrollPanel, mineSelected);
                });
            }


            // function used to update shared with me data list
            function getSharedData(workspaces, type, ws_name) {
                if (workspaces.length==0) {
                    render([], $sharedScrollPanel, {});
                    return null;
                }
                var params = {includeMetadata:1};
                if (!ws_name) {
                    var ws_ids = [], obj_count = 0;
                    for (var i in workspaces) {
                        ws_ids.push(workspaces[i].id);
                        obj_count = workspaces[i].count + obj_count;
                    }

                    params.ids = ws_ids;
                } else
                    params.workspaces = [ws_name];

                if (type) params.type = type;

                if (obj_count > maxObjFetch)
                    console.error("user's object count for shared workspaces was", obj_count);

                //console.log('total shared data', obj_count);

                var req_count = Math.ceil(obj_count/10000);

                var proms = [];
                proms.push( ws.list_objects(params) );
                for (var i=1; i < req_count; i++) {
                    params.skip = 10000 * i;
                    proms.push( ws.list_objects(params) );
                }

                return $.when.apply($, proms).then(function() {
                    // update model
                    sharedData = [].concat.apply([], arguments);

                    sharedData.sort(function(a,b) {
                            if (a[3] > b[3]) return -1; // sort by name
                            if (a[3] < b[3]) return 1;
                            return 0;
                        });

                    render(sharedData, $sharedScrollPanel, sharedSelected);
                })
            }

            // This function takes data to render and
            // a container to put data in.
            // It produces a scrollable dataset
            function render(data, container, selected, template) {
                var start = 0, end = 30;

                // remove items from only current container being rendered
                container.empty();

                if (data.length == 0){
                    container.append($('<div>').addClass("kb-data-list-type").css({margin:'15px', 'margin-left':'35px'}).append('No data found'));
                    return;
                } else if (data.length-1 < end)
                    end = data.length;

                var rows = buildMyRows(data, start, end, template);
                container.append(rows);
                events(container, selected);

                if (rows.children().length==0) {
                    container.append($('<div>').addClass("kb-data-list-type").css({margin:'15px', 'margin-left':'35px'}).append('No data found'));
                    return;
                }

                // infinite scroll
                var currentPos = end;
                container.unbind('scroll');
                container.on('scroll', function() {
                    if($(this).scrollTop() + $(this).innerHeight() >= this.scrollHeight) {
                        currentPos = currentPos+end;
                        var rows = buildMyRows(data, currentPos, end, template);
                        container.append(rows);
                    }
                    events(container, selected);
                });
            }

            function getMyWS() {
                return ws.list_workspace_info({owners: [user]})
                        .then(function(d) {
                            var workspaces = [];
                            for (var i in d) {
                                if (d[i][8].is_temporary) {
                                    if (d[i][8].is_temporary === 'true') { continue; }
                                }
                                var displayName = d[i][1];
                                if (d[i][8].narrative) {
                                    if (d[i][8].narrative_nice_name) {
                                        displayName = d[i][8].narrative_nice_name;
                                        // todo: should skip temporary narratives
                                        workspaces.push({id: d[i][0],
                                                         name: d[i][1],
                                                         displayName: displayName,
                                                         count: d[i][4]});
                                        narrativeNameLookup[d[i][1]] = displayName;
                                        continue;
                                    }
                                }

                                if (d[i][8].show_in_narrative_data_panel) {
                                    if(d[i][8].show_in_narrative_data_panel==='1') {
                                        displayName = "(data only) "+d[i][1];
                                        workspaces.push({id: d[i][0],
                                                     name: d[i][1],
                                                     displayName:displayName,
                                                     count: d[i][4]});
                                        narrativeNameLookup[d[i][1]] = displayName;
                                    }
                                }
                            }

                            // add to model for filter
                            myWorkspaces = workspaces;

                            // sort by name
                            myWorkspaces.sort(function(a,b) {
                                    if (a.displayName.toUpperCase() < b.displayName.toUpperCase()) return -1; // sort by name
                                    if (a.displayName.toUpperCase() > b.displayName.toUpperCase()) return 1;
                                    return 0;
                                });
                            return workspaces;
                        })
            }

            function getSharedWS() {
                return ws.list_workspace_info({excludeGlobal: 1})
                        .then(function(d) {
                            var workspaces = [];
                            for (var i in d) {
                                // skip owned workspaced
                                if (d[i][2] == user) {
                                    continue;
                                }

                                if (d[i][8].is_temporary) {
                                    if (d[i][8].is_temporary === 'true') { continue; }
                                }
                                var displayName = d[i][1];
                                if (d[i][8].narrative) {
                                    if (d[i][8].narrative_nice_name) {
                                        displayName = d[i][8].narrative_nice_name;
                                        // todo: should skip temporary narratives
                                        workspaces.push({id: d[i][0],
                                                         name: d[i][1],
                                                         displayName: displayName,
                                                         count: d[i][4]});
                                        narrativeNameLookup[d[i][1]] = displayName;
                                        continue;
                                    }
                                }

                                if (d[i][8].show_in_narrative_data_panel) {
                                    if(d[i][8].show_in_narrative_data_panel==='1') {
                                        displayName = "(data only) "+d[i][1];
                                        workspaces.push({id: d[i][0],
                                                     name: d[i][1],
                                                     displayName:displayName,
                                                     count: d[i][4]});
                                        narrativeNameLookup[d[i][1]] = displayName;
                                    }
                                }
                            }

                            // add to model for filter
                            sharedWorkspaces = workspaces;
                            sharedWorkspaces.sort(function(a,b) {
                                    if (a.displayName.toUpperCase() < b.displayName.toUpperCase()) return -1; // sort by name
                                    if (a.displayName.toUpperCase() > b.displayName.toUpperCase()) return 1;
                                    return 0;
                                });
                            return workspaces;
                        })
            }

            function typeList(data) {
                var types = [];

                for (var i in data) {
                    var mod_type = data[i][2].split('-')[0];
                    // update model for types dropdown
                    if (types.indexOf(mod_type) == -1) types.push(mod_type);
                }
                return types;
            }

            function copyObjects(objs, nar_ws_name) {
                importStatus.html('Adding <i>'+objs.length+'</i> objects to narrative...');

                var proms = [];
                for (var i in objs) {
                    var ref = objs[i].ref;
                    var name = objs[i].name;
                    console.log('copying ', ref, 'to', nar_ws_name);
                    proms.push( ws.copy_object({to: {workspace: nar_ws_name, name: name},
                                                from: {ref: ref} }) );
                }
                return proms;
            }


            function events(panel, selected) {
                panel.find('.kb-import-item').unbind('click');
                panel.find('.kb-import-item').click(function(){
                    var item = $(this);
                    var ref = item.data('ref').replace(/\./g, '/');
                    var name = item.data('obj-name');

                    var checkbox = $(this).find('.kb-import-checkbox');
                    checkbox.toggleClass('fa-check-square-o')
                            .toggleClass('fa-square-o');

                    // update model for selected items
                    if (checkbox.hasClass('fa-check-square-o') ) {
                        selected.push({ref: ref, name: name});
                    }
                    else {
                        for (var i=0; i<selected.length; i++) {
                            if (selected[i].ref == ref)
                                selected.splice(i, 1);
                        }
                    }

                    // disable/enable button
                    if (selected.length > 0) btn.prop('disabled', false);
                    else btn.prop('disabled', true);

                    // import items on button click
                    btn.unbind('click');
                    btn.click(function() {
                        if (selected.length == 0) return;

                        //uncheck all checkboxes, disable add button
                        $('.kb-import-checkbox').removeClass('fa-check-square-o', false);
                        $('.kb-import-checkbox').addClass('fa-square-o', false);
                        $(this).prop('disabled', true);

                        var proms = copyObjects(selected, narWSName);
                        $.when.apply($, proms).done(function(data) {
                            importStatus.html('');
                            var status = $('<span class="text-success">done.</span>');
                            importStatus.append(status);
                            status.delay(1000).fadeOut();

                            // update sidebar data list
                            self.trigger('updateDataList.Narrative');
                        });

                        selected = [];

                        // um... reset events until my rendering issues are solved
                        events(panel, selected)
                    });
                });

                panel.find('.kb-import-item').unbind('hover');
                panel.find('.kb-import-item').hover(function() {
                    $(this).find('hr').css('visibility', 'hidden');
                    $(this).prev('.kb-import-item').find('hr').css('visibility', 'hidden');
                    $(this).find('.kb-import-checkbox').css('opacity', '.8');
                }, function() {
                    $(this).find('hr').css('visibility', 'visible');
                    $(this).prev('.kb-import-item').find('hr').css('visibility', 'visible');
                    $(this).find('.kb-import-checkbox').css('opacity', '.4');
                })

                // prevent checking when clicking link
                panel.find('.kb-import-item a').unbind('click');
                panel.find('.kb-import-item a').click(function(e) {
                    e.stopPropagation();
                })

            }

            function filterData(data, f) {
                if (data.length == 0) return [];

                var filteredData = [];
                // add each item to view
                for (var i=0; i<data.length; i< i++) {
                    var obj = data[i];

                    var mod_type = obj[2].split('-')[0],
                        ws = obj[7],
                        name = obj[1];
                    var kind = mod_type.split('.')[1];

                    // filter conditions
                    if (f.query) {
                        //query filter
                        var query = f.query.toLowerCase();
                        if (name.toLowerCase().indexOf(query) >= 0) {
                            filteredData.push(obj);
                        } else if (kind.toLowerCase().indexOf(query)>=0) {
                            filteredData.push(obj);
                        } else if (obj[5].toLowerCase().indexOf(query)>=0) {
                            filteredData.push(obj);
                        }
                    } else if (f.type) {
                        //type filter
                        if (f.type.split('.')[1] === kind) {
                            filteredData.push(obj);
                        }
                    } else if (f.ws) {
                        // workspace filter
                        if (f.ws === ws) {
                            filteredData.push(obj);
                        }
                    } else {
                        // no filter is on, so add it
                        filteredData.push(obj);
                    }

                }
                return filteredData;
            }


            function buildMyRows(data, start, end, template) {

                // add each set of items to container to be added to DOM
                var rows = $('<div class="kb-import-items">');

                for (var i=start; i< (start+end); i++) {
                    var obj = data[i];
                    // some logic is not right
                    if (!obj) {
                        continue;
                    }
                    var mod_type = obj[2].split('-')[0];
                    var item = {id: obj[0],
                                name: obj[1],
                                mod_type: mod_type,
                                version: obj[4],
                                kind: mod_type.split('.')[1],
                                module: mod_type.split('.')[0],
                                wsID: obj[6],
                                ws: obj[7],
                                info: obj, // we need to have this all on hand!
                                relativeTime: getTimeStampStr(obj[3])} //use the same one as in data list for consistencey  kb.ui.relativeTime( Date.parse(obj[3]) ) }

                    if (item.module=='KBaseNarrative') {
                        continue;
                    }
                    if (template)
                        var item = template(item);
                    else
                        var item = rowTemplate(item);

                    rows.append(item);
                }

                return rows;
            }


            function addMyFilters() {
                //var types = typeList(myData);
                var wsList = myWorkspaces;

                // possible filters via input
                var type, ws, query;

                // create filter (search)
                var filterInput = $('<input type="text" class="form-control kb-import-search" placeholder="Search data...">');
                var searchFilter = $('<div class="col-sm-4">').append(filterInput);

                // create workspace filter
                var wsInput = $('<select class="form-control kb-import-filter">');
                wsInput.append('<option>All narratives...</option>');
                for (var i=0; i < wsList.length; i++) {
                    wsInput.append('<option data-id="'+[i].id+'" data-name="'+wsList[i].name+'">'+
                                          wsList[i].displayName+
                                   '</option>');
                }
                var wsFilter = $('<div class="col-sm-4">').append(wsInput);

                // event for type dropdown
                wsInput.change(function() {
                    ws = $(this).children('option:selected').data('name');
                    filterInput.val('');
                    // request again with filted type
                    setLoading($mineScrollPanel);
                    getMyData(myWorkspaces, type, ws);
                })

                // create type filter
                var typeInput = $('<select class="form-control kb-import-filter">');
                typeInput.append('<option>All types...</option>');
                for (var i=0; i < types.length; i++) {
                    typeInput.append('<option data-type="'+types[i]+'">'+
                                          types[i].split('.')[1]+
                                     '</option>');
                }
                var typeFilter = $('<div class="col-sm-3">').append(typeInput);

                // event for type dropdown
                typeInput.change(function() {
                    type = $(this).children('option:selected').data('type');
                    filterInput.val('');
                    // request again with filted type
                    //minePanel.loading(); // loading puts the loading image in the wrong place..
                    setLoading($mineScrollPanel);
                    getMyData(myWorkspaces, type, ws);
                })


                // event for filter (search)
                filterInput.keyup(function(e){
                    query = $(this).val();
                    setLoading($mineScrollPanel);
                    var filtered = filterData(myData, {type: type, ws:ws, query:query})
                    render(filtered, $mineScrollPanel, mineSelected);
                });


                var $refreshBtnDiv = $('<div>').addClass('col-sm-1').css({'text-align':'center'}).append(
                                        $('<button>')
                                            .css({'margin-top':'12px'})
                                            .addClass('btn btn-xs btn-default')
                                            .click(function(event) {
                                                $mineScrollPanel.empty();
                                                setLoading($mineScrollPanel);
                                                updateView('mine').done(function() {
                                                    updateView('shared'); });
                                                })
                                            .append($('<span>')
                                                .addClass('glyphicon glyphicon-refresh')));


                // add search, type, ws filter to dom
                $mineFilterRow.empty();
                $mineFilterRow.append(searchFilter, typeFilter, wsFilter, $refreshBtnDiv);
                //minePanel.prepend(row);
            }

            function addSharedFilters() {
                //var types = typeList(sharedData);
                var wsList = sharedWorkspaces

                // possible filters via input
                var type, ws, query;

                // create filter (search)
                var filterInput = $('<input type="text" class="form-control kb-import-search" placeholder="Search data...">');
                var searchFilter = $('<div class="col-sm-4">').append(filterInput);

                // create workspace filter
                var wsInput = $('<select class="form-control kb-import-filter">');
                wsInput.append('<option>All narratives...</option>');
                for (var i=0; i < wsList.length; i++) {
                    wsInput.append('<option data-id="'+wsList[i].id+'" data-name="'+wsList[i].name+'">'+
                                          wsList[i].displayName+
                                    '</option>');
                }
                var wsFilter = $('<div class="col-sm-4">').append(wsInput);

                // event for type dropdown
                wsInput.change(function() {
                    filterInput.val('');
                    ws = $(this).children('option:selected').data('name');
                    // request again with filted type
                    setLoading($sharedScrollPanel);
                    getSharedData(sharedWorkspaces, type, ws);
                })


                // create type filter
                var typeInput = $('<select class="form-control kb-import-filter">');
                typeInput.append('<option>All types...</option>');
                for (var i=0; i < types.length; i++) {
                    typeInput.append('<option data-type="'+types[i]+'">'+
                                          types[i].split('.')[1]+
                                     '</option>');
                }
                var typeFilter = $('<div class="col-sm-3">').append(typeInput);

                // event for type dropdown
                typeInput.change(function() {
                    type = $(this).children('option:selected').data('type');
                    filterInput.val('');

                    // request again with filted type
                    setLoading($sharedScrollPanel);
                    getSharedData(sharedWorkspaces, type, ws);
                })



                // event for filter (search)
                filterInput.keyup(function(e){
                    query = $(this).val();
                    var filtered = filterData(sharedData, {type: type, ws:ws, query:query})
                    render(filtered, $sharedScrollPanel, sharedSelected);
                });


                var $refreshBtnDiv = $('<div>').addClass('col-sm-1').append(
                                        $('<button>')
                                            .css({'margin-top':'12px'})
                                            .addClass('btn btn-xs btn-default')
                                            .click(function(event) {
                                                $sharedScrollPanel.empty();
                                                setLoading($sharedScrollPanel);
                                                updateView('shared').done(function() {
                                                    updateView('mine'); });
                                                })
                                            .append($('<span>')
                                                .addClass('glyphicon glyphicon-refresh')));

                // add search, type, ws filter to dom
                $sharedFilterRow.empty();
                $sharedFilterRow.append(searchFilter, typeFilter, wsFilter, $refreshBtnDiv);
                //sharedPanel.prepend(row);
            }

            function rowTemplate(obj) {
                var object_info = obj.info;
                // object_info:
                // [0] : obj_id objid // [1] : obj_name name // [2] : type_string type
                // [3] : timestamp save_date // [4] : int version // [5] : username saved_by
                // [6] : ws_id wsid // [7] : ws_name workspace // [8] : string chsum
                // [9] : int size // [10] : usermeta meta
                var type_tokens = object_info[2].split('.')
                var type_module = type_tokens[0];
                var type = type_tokens[1].split('-')[0];
                var unversioned_full_type = type_module + '.' + type;
                var logo_name = "";
                var landingPageLink = self.options.default_landing_page_url + object_info[7] + '/' + object_info[1];
                                            var ws_landing_page_map = window.kbconfig.landing_page_map;
                                            if (ws_landing_page_map && ws_landing_page_map[type_module] && ws_landing_page_map[type_module][type]) {
                                                landingPageLink = self.options.landing_page_url +
                                                                ws_landing_page_map[type_module][type] + "/" + object_info[7] + '/' + object_info[1];
                                            }
                var icons = self.data_icons;
                var icon = _.has(icons, type) ? icons[type] : icons['DEFAULT'];
                var $logo = $('<span>')
                  // background circle
                  .addClass("fa-stack fa-2x").css({'cursor':'pointer'})
                  .append($('<i>')
                    .addClass("fa fa-circle fa-stack-2x")
                    .css({'color': self.logoColorLookup(type)}));
                  // add stack of font-awesome icons
                  _.each(icon, function(cls) {
                    $logo.append($('<i>')
                    .addClass("fa fa-inverse fa-stack-1x " + cls));
                  });

                var shortName = object_info[1]; var isShortened=false;
                if (shortName.length>50) {
                    shortName = shortName.substring(0,50)+'...';
                    isShortened=true;
                }
                var $name = $('<span>').addClass("kb-data-list-name").append('<a href="'+landingPageLink+'" target="_blank">'+shortName+'</a>'); // TODO: make link!!
                if (isShortened) { $name.tooltip({title:object_info[1], placement:'bottom', delay: { show: 750, hide: 0 } }); }

                var $version = $('<span>').addClass("kb-data-list-version").append('v'+object_info[4]);
                var $type = $('<span>').addClass("kb-data-list-type").append(type);

                var $date = $('<span>').addClass("kb-data-list-date").append(getTimeStampStr(object_info[3]));
                var $byUser = $('<span>').addClass("kb-data-list-edit-by");
                if (object_info[5] !== self.my_user_id) {
                    $byUser.append(' by '+object_info[5])
                        .click(function(e) {
                            e.stopPropagation();
                            window.open(self.options.landing_page_url+'people/'+object_info[5]);
                        });
                }

                var metadata = object_info[10];
                var metadataText = '';
                for(var key in metadata) {
                    if (metadata.hasOwnProperty(key)) {
                        metadataText += '<tr><th>'+ key +'</th><td>'+ metadata[key] + '</td></tr>';
                    }
                }
                if (type==='Genome') {
                    if (metadata.hasOwnProperty('Name')) {
                        $type.text(type+': '+metadata['Name']);
                    }
                }

                var narName = obj.ws;
                if (narrativeNameLookup[obj.ws]) {
                    narName = narrativeNameLookup[obj.ws];
                }
                var $narName = $('<span>').addClass("kb-data-list-narrative").append(narName);
                //var $savedByUserSpan = $('<td>').addClass('kb-data-list-username-td').append(object_info[5]);
                //this.displayRealName(object_info[5],$savedByUserSpan);

                //var typeLink = '<a href="'+this.options.landing_page_url+'spec/module/'+type_module+'" target="_blank">' +type_module+"</a>.<wbr>" +
                //                '<a href="'+this.options.landing_page_url+'spec/type/'+object_info[2]+'" target="_blank">' +(type_tokens[1].replace('-','&#8209;')) + '.' + type_tokens[2] + '</a>';
                //var $moreRow  = $('<div>').addClass("kb-data-list-more-div").hide()
                //                .append(
                //                    $('<table style="width:100%;">')
                //                        .append("<tr><th>Permament Id</th><td>" +object_info[6]+ "/" +object_info[0]+ "/" +object_info[4] + '</td></tr>')
                //                        .append("<tr><th>Full Type</th><td>"+typeLink+'</td></tr>')
                //                        .append($('<tr>').append('<th>Saved by</th>').append($savedByUserSpan))
                //                        .append(metadataText));

                //var $toggleAdvancedViewBtn = $('<span>').addClass("kb-data-list-more")//.addClass('btn btn-default btn-xs kb-data-list-more-btn')
                //    .hide()
                //    .html('<span class="fa fa-ellipsis-h" style="color:#999" aria-hidden="true"/>');
                //var toggleAdvanced = function() {
                //        if ($moreRow.is(':visible')) {
                //            $moreRow.slideUp('fast');
                //            $toggleAdvancedViewBtn.show();
                //        } else {
                //            $moreRow.slideDown('fast');
                //            $toggleAdvancedViewBtn.hide();
                //        }
                //    };

                var $btnToolbar = $('<span>').addClass('btn-toolbar pull-right').attr('role', 'toolbar').hide();
                var btnClasses = "btn btn-xs btn-default";
                var css = {'color':'#888'};
                var $openLandingPage = $('<span>')
                                        // tooltips showing behind pullout, need to fix!
                                        //.tooltip({title:'Explore data', 'container':'#'+this.mainListId})
                                        .addClass(btnClasses)
                                        .append($('<span>').addClass('fa fa-binoculars').css(css))
                                        .click(function(e) {
                                            e.stopPropagation();
                                            window.open(landingPageLink);
                                        });

                var $openProvenance = $('<span>')
                                        .addClass(btnClasses).css(css)
                                        //.tooltip({title:'View data provenance and relationships', 'container':'body'})
                                        .append($('<span>').addClass('fa fa-sitemap fa-rotate-90').css(css))
                                        .click(function(e) {
                                            e.stopPropagation();
                                            window.open(self.options.landing_page_url+'objgraphview/'+object_info[7]+'/'+object_info[1]);
                                        });
                $btnToolbar.append($openLandingPage).append($openProvenance);



                var $mainDiv  = $('<div>').addClass('kb-data-list-info').css({padding:'0px',margin:'0px'})
                                    .append($btnToolbar)
                                    .append($name).append($version).append('<br>')
                                    .append($type).append('<br>').append($narName).append('<br>').append($date).append($byUser);
                                    //.append($toggleAdvancedViewBtn)
                                    //.click(
                                    //    function() {
                                    //        toggleAdvanced();
                                    //    });


                var $addDiv =
                    $('<div>').append(
                        $('<button>').addClass('kb-primary-btn').css({'white-space':'nowrap', padding:'10px 15px'})
                            .append($('<span>').addClass('fa fa-chevron-circle-left').append(' Add'))
                            .on('click',function() { // probably should move action outside of render func, but oh well
                                $(this).attr("disabled","disabled");
                                $(this).html('<img src="'+self.options.loadingImage+'">');

                                var thisBtn = this;
                                var targetName = object_info[1];
                                //console.log(object.name + " -> " + targetName);
                                ws.copy_object({
                                    to:   {ref: self.ws_name + "/" + targetName},
                                    from: {ref: object_info[6] +   "/" + object_info[0]} },
                                    function (info) {
                                        $(thisBtn).html('Added');
                                        self.trigger('updateDataList.Narrative');
                                    },
                                    function(error) {
                                        $(thisBtn).html('Error');
                                        if (error.error && error.error.message) {
                                            if (error.error.message.indexOf('may not write to workspace')>=0) {
                                                importStatus.html($('<div>').css({'color':'#F44336','width':'500px'}).append('Error: you do not have permission to add data to this Narrative.'));
                                            } else {
                                                importStatus.html($('<div>').css({'color':'#F44336','width':'500px'}).append('Error: '+error.error.message));
                                            }
                                        } else {
                                            importStatus.html($('<div>').css({'color':'#F44336','width':'500px'}).append('Unknown error!'));
                                        }
                                        console.error(error);
                                    });

                            }));


                var $topTable = $('<table>')
                                 .css({'width':'100%','background':'#fff'})  // set background to white looks better on DnD
                                 .append($('<tr>')
                                         .append($('<td>')
                                                 .css({'width':'90px'})
                                                .append($addDiv.hide()))
                                         .append($('<td>')
                                                 .css({'width':'50px'})
                                                 .append($logo))
                                         .append($('<td>')
                                                 .append($mainDiv)));

                var $row = $('<div>')
                                .css({margin:'2px',padding:'4px','margin-bottom': '5px'})
                                //.addClass('kb-data-list-obj-row')
                                .append($('<div>').addClass('kb-data-list-obj-row-main')
                                            .append($topTable))
                                //.append($moreRow)
                                // show/hide ellipses on hover, show extra info on click
                                .mouseenter(function(){
                                    //if (!$moreRow.is(':visible')) { $toggleAdvancedViewBtn.show(); }
                                    $addDiv.show();
                                    $btnToolbar.show();
                                })
                                .mouseleave(function(){
                                    //$toggleAdvancedViewBtn.hide();
                                    $addDiv.hide();
                                    $btnToolbar.hide();
                                });

                var $rowWithHr = $('<div>').data('ref', obj.wsID+'.'+obj.id)
                                .data('obj-name', obj.name)
                                    .append($('<hr>')
                                                .addClass('kb-data-list-row-hr')
                                                .css({'margin-left':'150px'}))
                                    .append($row);

                return $rowWithHr;
            }

            // the existing .loading() .rmLoading() puts the loading icon in the wrong place
            function setLoading($container) {
                $container.empty();
                $container.append($('<div>').addClass("kb-data-list-type").css({margin:'15px', 'margin-left':'35px'})
                                  .append('<img src="' + self.options.loadingImage + '">'));
            }

            function objURL(module, type, ws, name) {
                var mapping = window.kbconfig.landing_page_map;
                if (mapping[module] && mapping[module][type]) {
                    return self.options.landingPageURL+mapping[module][type]+'/'+ws+'/'+name;
                }
                return self.options.landingPageURL+'json/'+ws+'/'+name;
            }

            function wsURL(ws) {
                return self.options.landingPageURL+'ws/'+ws;
            }

            var monthLookup = ["Jan", "Feb", "Mar","Apr", "May", "Jun", "Jul", "Aug", "Sep","Oct", "Nov", "Dec"];
            // edited from: http://stackoverflow.com/questions/3177836/how-to-format-time-since-xxx-e-g-4-minutes-ago-similar-to-stack-exchange-site
            function getTimeStampStr(objInfoTimeStamp) {
                var date = new Date(objInfoTimeStamp);
                var seconds = Math.floor((new Date() - date) / 1000);

                // f-ing safari, need to add extra ':' delimiter to parse the timestamp
                if (isNaN(seconds)) {
                    var tokens = objInfoTimeStamp.split('+');  // this is just the date without the GMT offset
                    var newTimestamp = tokens[0] + '+'+tokens[0].substr(0,2) + ":" + tokens[1].substr(2,2);
                    date = new Date(newTimestamp);
                    seconds = Math.floor((new Date() - date) / 1000);
                    if (isNaN(seconds)) {
                        // just in case that didn't work either, then parse without the timezone offset, but
                        // then just show the day and forget the fancy stuff...
                        date = new Date(tokens[0]);
                        return monthLookup[date.getMonth()]+" "+date.getDate()+", "+date.getFullYear();
                    }
                }

                var interval = Math.floor(seconds / 31536000);
                if (interval > 1) {
                    return monthLookup[date.getMonth()]+" "+date.getDate()+", "+date.getFullYear();
                }
                interval = Math.floor(seconds / 2592000);
                if (interval > 1) {
                    if (interval<4) {
                        return interval + " months ago";
                    } else {
                        return monthLookup[date.getMonth()]+" "+date.getDate()+", "+date.getFullYear();
                    }
                }
                interval = Math.floor(seconds / 86400);
                if (interval > 1) {
                    return interval + " days ago";
                }
                interval = Math.floor(seconds / 3600);
                if (interval > 1) {
                    return interval + " hours ago";
                }
                interval = Math.floor(seconds / 60);
                if (interval > 1) {
                    return interval + " minutes ago";
                }
                return Math.floor(seconds) + " seconds ago";
            };
        },

        logoColorLookup:function(type) {
            var code = 0;
            for (var i=0; i < type.length; code += type.charCodeAt(i++));
            return this.icon_colors[ code % this.icon_colors.length ];
        }

    });

})( jQuery );

/**
 * Widget for displaying a list of Narratives and basic narrative management (copy, delete, share)
 * @author Michael Sneddon <mwsneddon@lbl.gov>
 * @public
 */
(function( $, undefined ) {

    $.KBWidget({
        name: "kbaseNarrativeManagePanel", 
        parent: "kbaseNarrativeControlPanel",
        version: "1.0.0",
        wsClient: null,
        table: null,
        tableData: [],
        $loginMessage: null,
        $errorMessage: null,
        $loading: null,
        isLoggedIn: false,
        narrWs: null, /* see setNarrWS */
        // The set of all data currently loaded into the widget
        loadedData: {},
        options: {
            title: 'Narratives',
            loadingImage: "static/kbase/images/ajax-loader.gif",
            ws_url: "https://kbase.us/services/ws",
            nms_url: "https://kbase.us/services/narrative_method_store/rpc",
            user_name_fetch_url:"https://kbase.us/services/genome_comparison/users?usernames=",
            landing_page_url: "/functional-site/#/", // !! always include trailing slash
            ws_name: null,
            nar_name: null,
            new_narrative_link:"/functional-site/#/narrativemanager/new"
        },
        
        ws:null,
        manager:null,
        
        ws_name: null,
        nar_name: null,
        
        $mainPanel: null,
        $newNarrativeLink: null, // when a new narrative is created, gives a place to link to it
        
        init: function(options) {
            this._super(options);

            if (this.options.ws_name)  { this.ws_name = options.ws_name; }
            if (this.options.nar_name) { this.nar_name = options.nar_name; }

            if (window.kbconfig && window.kbconfig.urls) {
                this.options.ws_url = window.kbconfig.urls.workspace;
                this.options.nms_url = window.kbconfig.urls.narrative_method_store;
            }
            
            this.$mainPanel = $('<div>')//.css({'height':'600px'});
            this.body().append(this.$mainPanel);
            
            $(document).on(
                'setWorkspaceName.Narrative', $.proxy(function(e, info) {
                    this.ws_name = info.wsId;
                    this.nar_name = info.narrController;
                    this.refresh();
                }, this)
            );

            $([IPython.events]).on(
                'notebook_saved.Notebook', $.proxy(function(e) {
                    this.refresh();
                }, this)
            );
            
            this.landingPageMap = window.kbconfig.landing_page_map;
            
            if (this.ws_name && this.nar_name && this.ws) {
                this.refresh();
            }
            return this;
        },

        
        my_user_id: null,
        
        loggedInCallback: function(event, auth) {
            this.ws = new Workspace(this.options.ws_url, auth);
            this.manager = new NarrativeManager({ws_url:this.options.ws_url, nms_url:this.options.nms_url},auth);
            this.my_user_id = auth.user_id;
            this.refresh();
            return this;
        },
        loggedOutCallback: function(event, auth) {
            this.ws = null;
            this.manager=null;
            this.my_user_id = null;
            this.refresh();
            return this;
        },
        
        refresh: function() {
            if (!self.$narPanel) {
                this.renderHeader();
            }
            this.loadDataAndRenderPanel();
        },
        
        
        narData: null,
        allNarInfo:null,
        tempNars:null,
        oldStyleWs:null,
        
        loadDataAndRenderPanel: function() {
            var self = this;
            if (self.ws) {
                self.narData=null;
                self.showLoading();
                self.ws.list_workspace_info(
                    {excludeGlobal:1},
                    function(wsList) {
                        self.narData={
                            mine:[],
                            shared:[],
                            pub:[],
                            temp:[],
                            allWs:[]
                        };
                        self.allNarData=[];
                        /*WORKSPACE INFO
                            0: ws_id id
                            1: ws_name workspace
                            2: username owner
                            3: timestamp moddate,
                            4: int object
                            5: permission user_permission
                            6: permission globalread,
                            7: lock_status lockstat
                            8: usermeta metadata*/
                        var narRefsToLookup = []; var allNarInfo = [];
                        for (var i=0; i<wsList.length; i++) {
                            if (wsList[i][8]) { // must have metadata or else we skip
                                
                                // if it is temporary, we skip
                                if (wsList[i][8].is_temporary) {
                                    if (wsList[i][8].is_temporary === 'true') {
                                        self.narData.temp.push({ws_info:wsList[i]});
                                        continue;
                                    }
                                }
                                //must have the new narrative tag, or else we skip
                                if (wsList[i][8].narrative) {  
                                    var info={
                                            ws_info: wsList[i],
                                            nar_info: null,
                                            $div:null
                                    };
                                    if (wsList[i][2]===self._attributes.auth.user_id) {
                                        self.allNarData.push(info);
                                        self.narData.mine.push(info);
                                        narRefsToLookup.push({ref:info.ws_info[0]+"/"+wsList[i][8].narrative});
                                    } else if (wsList[i][5]==='a' || wsList[i][5]==='w' || wsList[i][5]==='r') {
                                        self.allNarData.push(info);
                                        self.narData.shared.push(info);
                                        narRefsToLookup.push({ref:info.ws_info[0]+"/"+wsList[i][8].narrative});
                                    }
                                }
                                if (wsList[i][5]==='a' || wsList[i][5]==='w') {
                                    // allWs is used for advanced management options, which we only
                                    // have if we have admin or write access
                                    self.narData.allWs.push({ws_info:wsList[i]});
                                }
                            }
                        }
                        self.ws.get_object_info_new({objects:narRefsToLookup,includeMetadata:1,ignoreErrors:1},
                                function(objList) {
                                    for(var i=0; i<objList.length; i++) {
                                        if (objList[i]!==null && objList[i][2].indexOf('KBaseNarrative.Narrative')===0) {
                                            self.allNarData[i].nar_info = objList[i];
                                        } else {
                                            console.error('Corrupted Workspace: ');
                                            console.error('Searching for narrative: ', narRefsToLookup[i], ' but got: ', objList[i]);
                                            self.allNarData[i].error = true;
                                            (function(errorIndex) {
                                                self.ws.get_object_info_new({objects:[narRefsToLookup[errorIndex]],includeMetadata:1,ignoreErrors:0},
                                                    function(error_obj_info) {
                                                        // this should not work!! but if it does, fine, remove the error and save the info
                                                        self.allNarData[errorIndex].error = false;
                                                        self.allNarData[errorIndex].nar_info = error_obj_info[0];
                                                    },
                                                    function(error) {
                                                        // this shouldn't happen often, so if it does, just take the time to refresh
                                                        self.allNarData[errorIndex].error_msg = error.error.message;
                                                        self.allNarData[errorIndex].$div = null;
                                                        self.renderPanel();
                                                    });
                                            })(i);
                                        }
                                    }
                                    self.renderPanel();
                                },
                                function(error) {
                                    console.error(error);
                                });
                    },
                    function (error) {
                        console.error(error);
                    }
                )
            }
        },
        
        showLoading: function() {
            this.$narPanel.html('<br><center><img src="'+this.options.loadingImage+'"/></center><br>');
        },
        
        renderHeader: function() {
            var self = this;
            if (self.$mainPanel) {
                self.$mainPanel.empty();
                
                var $msgPanel = $("<div>").css({'margin':'10px','text-align':'center'});
                self.$mainPanel.append(
                    $('<div>').css({'margin':'15px','text-align':'center'})
                        .append(self.makeNewNarrativeBtn())
                        .append(self.makeCopyThisNarrativeBtn($msgPanel))
                        .append($msgPanel));
                
                self.$narPanel = $('<div>');
                self.$mainPanel.append(self.$narPanel);
            }
        },
        
        advancedSetNarLookup: {},
        
        sortNarrativesFunc : function(a,b) {
            if (a.error && b.error) { return 0; }
            if (a.error) { return 1; }
            if (b.error) { return -1; }
            if (a.nar_info[3] > b.nar_info[3]) return -1; // sort by date
            if (a.nar_info[3] < b.nar_info[3]) return 1;  // sort by date
            return 0;
        },
        
        
        renderPanel: function() {
            var self = this;
            
            if (self.$narPanel && self.narData) {
                self.$narPanel.children().detach(); // this will also hide any loading messages if they exist
                
                if (self.narData.mine.length>0) {
                    self.$narPanel.append($('<div>').append($('<div>').addClass('kb-nar-manager-titles').append("My Narratives")));
                    self.narData.mine.sort(self.sortNarrativesFunc);
                    for(var k=0; k<self.narData.mine.length; k++) {
                        if (!self.narData.mine[k].$div) {
                            self.narData.mine[k].$div = self.renderNarrativeDiv(self.narData.mine[k]);
                        }
                        self.$narPanel.append(self.narData.mine[k].$div);
                    }
                }
                
                if (self.narData.shared.length>0) {
                    self.narData.shared.sort(self.sortNarrativesFunc);
                    self.$narPanel.append($('<div>').append($('<div>').addClass('kb-nar-manager-titles').append("Shared With Me")));
                    for(var k=0; k<self.narData.shared.length; k++) {
                        if (!self.narData.shared[k].$div) {
                            self.narData.shared[k].$div = self.renderNarrativeDiv(self.narData.shared[k]);
                        }
                        self.$narPanel.append(self.narData.shared[k].$div);
                    }
                }
                
                
                // ADVANCED TAB: allows users to set the default narrative for any workspace
                var $advancedDiv = $('<div>').hide();
                var $advLink = $('<h4>').append("Show Advanced Controls");
                self.$narPanel.append($('<div>').append($('<span>').append($("<a>").append($advLink)))
                                        .css({'text-align':'center','cursor':'pointer'})
                                        .on('click', function() {
                                            if ($advancedDiv.is(":visible") ) {
                                                $advancedDiv.hide();
                                                $advLink.html("Show Advanced Controls");
                                            } else {
                                                $advancedDiv.show();
                                                $advLink.html("Hide Advanced Controls");
                                            }
                                        }));
                self.$narPanel.append($advancedDiv);
                
                
                var $selectWsContainer = $('<select id="setPrimaryNarSelectWs">').addClass('form-control');
                var $selectNarContainer = $('<select id="setPrimaryNarSelectNar">').addClass('form-control').hide();
                var $setBtn = $('<button>').addClass('btn btn-default').append('Set this Narrative').hide();
                var $setPrimary = $('<div>').append(
                    $('<div>').addClass('form-group').css({'text-align':'center'})
                        .append($('<label for="setPrimaryNarSelectWs">').append("Set Active Narrative for Workspace"))
                        .append($selectWsContainer)
                        .append($selectNarContainer)
                        .append($setBtn));
                
                self.narData.allWs.sort(function(a,b) {
                    if (a.ws_info[1].toLowerCase() > b.ws_info[1].toLowerCase()) return 1; // sort by name
                    if (a.ws_info[1].toLowerCase() < b.ws_info[1].toLowerCase()) return -1;  // sort by name
                    return 0;
                });
                
                for(var k=0; k<self.narData.allWs.length; k++) {
                    var info = self.narData.allWs[k].ws_info;
                    $selectWsContainer.append($('<option value="'+info[1]+'">').append(info[1] + ' (id='+info[0]+')'));
                }
                $selectWsContainer.on('change',
                    function() {
                        $selectNarContainer.empty();
                        self.ws.list_objects({
                                workspaces: [$selectWsContainer.val()],
                                type:"KBaseNarrative.Narrative",
                                includeMetadata:1
                            },
                            function(objList) {
                                if (objList.length==0) {
                                    $selectNarContainer.append($('<option value="none">').append('No Narratives'));
                                    $setBtn.prop('disabled', true);
                                    $selectNarContainer.prop('disabled', true);
                                    return;
                                }
                                $setBtn.prop('disabled', false);
                                $selectNarContainer.prop('disabled', false);
                                
                                // sort by date
                                objList.sort(function(a,b) {
                                    if (a[3] > b[3]) return -1; // sort by date
                                    if (a[3] < b[3]) return 1;  // sort by date
                                    return 0;
                                });
                                self.advancedSetNarLookup = {};
                                // add the list to the select
                                for(var i=0; i<objList.length; i++) {
                                    var narDispName = objList[i][1];
                                    if (objList[i][10].name) {
                                        narDispName = objList[i][10].name;
                                    }
                                    self.advancedSetNarLookup[objList[i][0]] = narDispName;
                                    $selectNarContainer.append($('<option value="'+objList[i][0]+'">')
                                                                .append(narDispName + ' (id='+objList[i][0]+')'));
                                }
                            },
                            function(error) {
                                console.error(error);
                            });
                        
                        $selectNarContainer.show();
                        $setBtn.show();
                    });
                $selectWsContainer.change();
                $setBtn.on('click',
                    function() {
                        // should only get here if it was a valid WS/Nar combo
                        var ws = $selectWsContainer.val();
                        var nar = $selectNarContainer.val();
                        $(this).prop('disabled', true).empty().append("please wait...");
                        // should probably be moved to NarrativeManager
                        self.ws.alter_workspace_metadata({
                                wsi:{workspace:ws},
                                new: {
                                    'narrative' : nar,
                                    'is_temporary' : 'false',
                                    'narrative_nice_name': self.advancedSetNarLookup[nar]
                                }
                            },
                            function (args) {
                                self.loadDataAndRenderPanel();  
                            },
                            function name(error) {
                                $setBtn.html("error...");
                                console.error(error);
                            }
                        );
                    });
                $advancedDiv.append($setPrimary);
            }
        },
        
        addDataControls: function(object_info, $alertContainer, ws_info, isError) {
            var self = this;
            var $btnToolbar = $('<span>')
                                        .addClass('btn-toolbar')
                                        .attr('role', 'toolbar');
            
            var btnClasses = "btn btn-xs btn-default";
            var css = {'color':'#888', 'margin':'0px'};
                                        
            var $openHistory = $('<span>');
            if (!isError) {
                $openHistory
                                        .addClass(btnClasses).css(css)
                                        .tooltip({title:'View narrative history to revert changes', 'container':'body'})
                                        .append($('<span>').addClass('fa fa-history').css(css))
                                        .click(function(e) {
                                            e.stopPropagation(); $alertContainer.empty(); $alertContainer.show();
                                            
                                            if (self.ws_name && self.ws) {
                                                self.ws.get_object_history({ref:object_info[6]+"/"+object_info[0]},
                                                    function(history) {
                                                        history.reverse();
                                                        $alertContainer.append($('<div>')
                                                            .append($('<button>').addClass('kb-data-list-cancel-btn')
                                                                        .append('Hide History')
                                                                        .click(function() {$alertContainer.empty();} )));
                                                        var isCurrent = false;
                                                        if(self.ws_name === ws_info[1]) {
                                                            isCurrent = true;
                                                        }
                                                        var $tbl = $('<table>').css({'width':'100%'});
                                                        for(var k=0; k<history.length;k++) {
                                                            var $revertBtn = $('<button>').append('v'+history[k][4]).addClass('kb-data-list-btn');
                                                            if (k==0) {
                                                                $revertBtn.tooltip({title:'Current Version', 'container':'body',placement:'bottom'});
                                                            } else if(history[k][4]==1) {
                                                                $revertBtn.tooltip({title:'Cannot revert to first unsaved version', 'container':'body',placement:'bottom'});
                                                            } else {
                                                                var revertRef = {wsid:history[k][6], objid:history[k][0], ver:history[k][4]};
                                                                (function(revertRefLocal) {
                                                                    $revertBtn.tooltip({title:'Revert to this version?',placement:'bottom'})
                                                                        .click(function() {
                                                                            self.ws.revert_object(revertRefLocal,
                                                                                function(reverted_obj_info) {
                                                                                    // update the workspace info with the specified name
                                                                                    self.ws.alter_workspace_metadata({
                                                                                        wsi:{id:ws_info[0]},
                                                                                        new:{'narrative_nice_name':reverted_obj_info[10].name}},
                                                                                        function() {
                                                                                            if (isCurrent) {
                                                                                                window.location.reload();
                                                                                            } else {
                                                                                                self.refresh();
                                                                                            }
                                                                                        },
                                                                                        function(error) {
                                                                                            console.error(error);
                                                                                            $alertContainer.empty();
                                                                                            $alertContainer.append($('<span>').css({'color':'#F44336'}).append("Narrative reverted, but a minor data update error occured."+error.error.message));
                                                                                        });
                                                                                }, function(error) {
                                                                                    console.error(error);
                                                                                    $alertContainer.empty();
                                                                                    $alertContainer.append($('<span>').css({'color':'#F44336'}).append("Error! "+error.error.message));
                                                                                });
                                                                        }); })(revertRef);
                                                            }
                                                            var summary = self.getNarSummary(history[k]);
                                                            if (summary) { summary = '<br>'+summary; }
                                                            $tbl.append($('<tr>')
                                                                        .append($('<td>').append($revertBtn))
                                                                        .append($('<td>').append(self.getTimeStampStr(history[k][3]) + ' by ' + history[k][5] + summary))
                                                                        .append($('<td>').append($('<span>').css({margin:'4px'}).addClass('fa fa-info pull-right'))
                                                                                 .tooltip({title:history[k][2]+'<br>'+history[k][10].name+'<br>'+history[k][8]+'<br>'+history[k][9]+' bytes', container:'body',html:true,placement:'bottom'}))
                                                                                );
                                                        }
                                                        $alertContainer.append($tbl);
                                                    },
                                                    function(error) {
                                                        console.error(error);
                                                        $alertContainer.empty();
                                                        $alertContainer.append($('<span>').css({'color':'#F44336'}).append("Error! "+error.error.message));
                                                    });
                                            }
                                        });
            }
                                        
            /*var $openProvenance = $('<span>')
                                        .addClass(btnClasses).css(css)
                                        .tooltip({title:'View data provenance and relationships', 'container':'body'})
                                        .append($('<span>').addClass('fa fa-sitemap fa-rotate-90').css(css))
                                        .click(function(e) {
                                            e.stopPropagation(); $alertContainer.empty();
                                            window.open(self.options.landing_page_url+'objgraphview/'+object_info[7]+'/'+object_info[1]);
                                        });*/
            /*var $download = $('<span>')
                                        .addClass(btnClasses).css(css)
                                        .tooltip({title:'Export / Download data', 'container':'body'})
                                        .append($('<span>').addClass('fa fa-download').css(css))
                                        .click(function(e) {
                                            e.stopPropagation(); $alertContainer.empty();
                                            $alertContainer.append('Coming soon');
                                        });*/
            
            var $copy = $('<span>');
            if (!isError) {
                $copy
                    .addClass(btnClasses).css(css)
                    .tooltip({title:'Copy Narrative and Data', 'container':'body'})
                    .append($('<span>').addClass('fa fa-copy').css(css))
                    .click(function(e) {
                        e.stopPropagation(); $alertContainer.empty(); $alertContainer.show();
                        var $newNameInput = $('<input type="text">').addClass('form-control').val(ws_info[8].narrative_nice_name+ ' - Copy');
                        $alertContainer.append(
                            $('<div>').append(
                                $('<div>').append("Enter a name for the new Narrative"))
                                    .append($('<div>').append($newNameInput))
                                    .append($('<button>').addClass('kb-data-list-btn')
                                        .append('Copy')
                                        .click(function() {
                                            $(this).prop("disabled",true);
                                            var newMeta = ws_info[8];
                                            newMeta['narrative_nice_name'] = $newNameInput.val();
                                            
                                            var id = new Date().getTime();
                                            var ws_name = self.my_user_id + ":" + id;
                                            
                                            self.ws.clone_workspace({
                                                        wsi: {id:ws_info[0]},
                                                        workspace: ws_name,
                                                        meta: newMeta
                                                    },
                                                    function(new_ws_info) {
                                                        // we have to match based on names because when cloning, the object id is not preserved!!! arg!
                                                        var new_narrative_ref = new_ws_info[0]+"/"+ object_info[1]; //new_ws_info[8].narrative;
                                                        // ok, a lot of work just to update the narrative name in the metadata
                                                        self.ws.get_objects([{ref:new_narrative_ref}],
                                                            function(data) {
                                                                data = data[0]; // only one thing should be returned
                                                                var new_nar_metadata = data.info[10];
                                                                new_nar_metadata.name = newMeta['narrative_nice_name'];
                                                                data.data.metadata.name = newMeta['narrative_nice_name'];
                                                                
                                                                // set workspace metadata to point to the correct object id since they can change on clone!!
                                                                self.ws.alter_workspace_metadata({
                                                                        wsi:{id:new_ws_info[0]},
                                                                        new: {'narrative' : String(data.info[0]) }
                                                                    },
                                                                    function () {
                                                                        // so much work just to update this name!
                                                                        self.ws.save_objects({id:new_ws_info[0],objects:[
                                                                            {
                                                                                type:data.info[2],
                                                                                data:data.data,
                                                                                provenance:data.provenance,
                                                                                name:data.info[1],
                                                                                meta:new_nar_metadata
                                                                            }
                                                                            ]},
                                                                            function(info) {
                                                                                console.log('copying complete',info);
                                                                                self.refresh();
                                                                            },
                                                                            function(error) {
                                                                                console.error(error);
                                                                                $alertContainer.empty();
                                                                                $alertContainer.append($('<span>').css({'color':'#F44336'}).append("Error! Copied successfully, but error on rename."+error.error.message));
                                                                            });
                                                                    
                                                                    },
                                                                    function name(error) {
                                                                        
                                                                    });
                                                                
                                                                
                                                            },
                                                            function(error) {
                                                                console.error(error);
                                                                $alertContainer.empty();
                                                                $alertContainer.append($('<span>').css({'color':'#F44336'}).append("Error! Copied successfully, but error on rename."+error.error.message));
                                                            })
                                                    },
                                                    function(error) {
                                                        console.error(error);
                                                        $alertContainer.empty();
                                                        $alertContainer.append($('<span>').css({'color':'#F44336'}).append("Error! "+error.error.message));
                                                    });
                                            }))
                                    .append($('<button>').addClass('kb-data-list-cancel-btn')
                                        .append('Cancel')
                                        .click(function() {$alertContainer.empty();} )));
                });
            }
            
            var $delete = $('<span>') 
                                        .addClass(btnClasses).css(css)
                                        .tooltip({title:'Delete Narrative', 'container':'body'})
                                        .append($('<span>').addClass('fa fa-trash-o').css(css))
                                        .click(function(e) {
                                            e.stopPropagation();
                                            $alertContainer.empty(); $alertContainer.show();
                                            
                                            var warningMsg = 'Are you sure?'; var isCurrent = false;
                                            if(self.ws_name === ws_info[1]) {
                                                isCurrent = true;
                                                warningMsg = 'Warning - you are currently viewing this Narrative!<br>You will be redirected to another Narrative if deleted.  Are you sure?';
                                            }
                                            
                                            $alertContainer.append($('<div>')
                                                .append($('<div>').append(warningMsg))
                                                .append($('<button>').addClass('kb-data-list-btn')
                                                            .append('Delete')
                                                            .click(function() {
                                                                if (self.ws_name && self.ws) {
                                                                    self.ws.delete_workspace({ id: ws_info[0] },
                                                                        function() {
                                                                            if (isCurrent) {
                                                                                window.location.replace(self.options.landing_page_url+'narrativemanager/start');
                                                                            } else {
                                                                                self.refresh();
                                                                            }
                                                                        },
                                                                        function(error) {
                                                                            console.error(error);
                                                                            $alertContainer.empty();
                                                                            $alertContainer.append($('<span>').css({'color':'#F44336'}).append("Error! "+error.error.message));
                                                                        });
                                                                }
                                                            }))
                                                .append($('<button>').addClass('kb-data-list-cancel-btn')
                                                            .append('Cancel')
                                                            .click(function() {$alertContainer.empty();} )));
                                        });
            
            $btnToolbar
                .append($openHistory)
                //.append($openProvenance)
                //.append($download)
                .append($copy)
                .append($delete);
            
            return $btnToolbar;
        },
        
        
        renderNarrativeDiv: function(data) {
            var self = this;
            
            var isCurrent = false;
            if(this.ws_name === data.ws_info[1]) {
                isCurrent = true;
            }
            
            var $narDiv = $('<div>').addClass('kb-data-list-obj-row');
            
            var $tbl = $('<table>').css({'width':'100%'});
            var $dataCol = $('<td>').css({'text-align':'left','vertical-align':'top'});
            var $ctrCol = $('<td>').css({'text-align':'right','vertical-align':'top', 'width':'80px'});
            var $ctrContent = $('<div>').css({'min-height':'60px'});
            $ctrCol.append($ctrContent);
            
            var $alertContainer=$('<div>').addClass('kb-data-list-more-div').css({'text-align':'center','margin':'5px'}).hide();
            
            var narRef = "ws."+data.ws_info[0]+".obj."+data.ws_info[8].narrative;
            var nameText = narRef; var version='';
            if (data.nar_info && data.nar_info[10].name) {
                nameText = data.nar_info[10].name;
                version = 'v'+data.nar_info[4];
            } else if (data.error && data.ws_info[8].narrative_nice_name) {
                nameText = data.ws_info[8].narrative_nice_name + ' ('+nameText+')';
            }
            var $version = $('<span>').addClass("kb-data-list-version").append(version);
            var $priv = $('<span>').css({'color':'#999','margin-left':'8px'}).prop('data-toggle','tooltip').prop('data-placement','right');
             if (data.ws_info[5]==='r') {
                $priv.addClass('fa fa-lock').prop('title','read-only');
            } else if (data.ws_info[5]==='w' || data.ws_info[5]==='a') {
                $priv.addClass('fa fa-pencil').prop('title','you can edit');
            }
            
            var $nameLink =  $('<a href="'+narRef+'" target="_blank">');
            if (isCurrent) {
                 $nameLink.append($('<span>').addClass('fa fa-circle').css({'margin-right':'3px','color':'#4BB856'})
                                    .tooltip({title:'You are viewing this Narrative now'}));
            } else if (data.error) {
                 $nameLink.append($('<span>').addClass('fa fa-circle').css({'margin-right':'3px','color':'#F44336'})
                                    .tooltip({title:'This narrative has been corrupted.'}));
            }
            $nameLink.append(nameText).append($version).append($priv);
            $dataCol.append($('<div>').addClass('kb-data-list-name').css({'white-space':'normal', 'cursor':'pointer'}).append($nameLink));
            
            // only disply the rest if there was no error
            if (!data.error) {
                var $usrNameSpan = $('<span>').addClass('kb-data-list-type').append(data.ws_info[2]);
                if(data.ws_info[2]===this._attributes.auth.user_id) {
                } else {
                    $dataCol.append($usrNameSpan).append('<br>');
                    this.displayRealName(data.ws_info[2], $usrNameSpan);
                }
                var summary = this.getNarSummary(data.nar_info);
                if (summary) {
                    $dataCol.append($('<span>').addClass('kb-data-list-narinfo').append(summary)
                                    .click(
                                        function() {
                                            $alertContainer.empty(); $alertContainer.show();
                                            $alertContainer.append($('<div>')
                                                                .append($('<button>').addClass('kb-data-list-cancel-btn')
                                                                            .append('Hide Narrative Info')
                                                                            .click(function() {$alertContainer.empty();} )));
                                            $alertContainer.append(self.getNarContent(data.nar_info));
                                        })
                                    .append('<br>'));
                }
                $dataCol.append($('<span>').addClass('kb-data-list-type').append(this.getTimeStampStr(data.nar_info[3])));
                
                var $shareContainer = $('<div>').hide();
                var $shareToolbar = $('<span>').addClass('btn-toolbar').attr('role', 'toolbar');
                $ctrContent.append($shareToolbar);
                this.ws.get_permissions({id:data.ws_info[0]},
                    function(perm) {
                        var shareCount = 0;
                        for(var usr in perm) {
                            if (perm.hasOwnProperty(usr)) {
                                if (usr === '*') { continue; }
                                shareCount++;
                            }
                        }
                        // should really put this in the addDatacontrols; so refactor at some point!
                        $shareToolbar.append(
                                $('<span>')   
                                    .addClass('btn btn-xs btn-default').css({'color':'#888', 'margin':'0px'})
                                    .tooltip({title:'View share settings', 'container':'body'})
                                                .append($('<span>').addClass('fa fa-share-alt').css({'color':'#888','margin':'0px','font-size':'10pt'})
                                                    .append(' '+shareCount)
                                                    .on('click',function() {
                                                        $alertContainer.hide();
                                                        $shareContainer.slideToggle('fast');
                                                        if($shareContainer.is(':empty')) {
                                                            var $share = $('<div>');
                                                            // just use the share panel, max height is practically unlimited because we are already
                                                            // in a scrollable pane
                                                            $share.kbaseNarrativeSharePanel({ws_name_or_id:data.ws_info[0],max_list_height:'none', add_user_input_width:'280px'});
                                                            $shareContainer.append($share);
                                                        }
                                                    })));
                    },
                    function(error) {
                        console.error('error getting permissions for manage panel');
                        console.error(error);
                    });
            
                var $btnToolbar = self.addDataControls(data.nar_info,$alertContainer, data.ws_info);
                $ctrContent.append($btnToolbar.hide());
                $narDiv
                    .mouseenter(function(){ $btnToolbar.show(); })
                    .mouseleave(function(){ $btnToolbar.hide(); });
            } else if (data.error_msg) {
                 $dataCol.append($('<span>').addClass('kb-data-list-narrative-error').append(
                                 'This Narrative has been corrupted: '+data.error_msg));
                var $btnToolbar = self.addDataControls(data.nar_info,$alertContainer, data.ws_info, true);
                $ctrContent.append($btnToolbar);
            }
            $narDiv.append($('<table>').css({'width':'100%'})
                           .append($('<tr>').append($dataCol).append($ctrCol)));
            $narDiv.append($alertContainer);
            $narDiv.append($shareContainer);
            
            var $narDivContainer = $('<div>').append($('<hr>').addClass('kb-data-list-row-hr').css({'margin-left':'15px'}))
                                        .append($narDiv);
            
            return $narDivContainer;
        },
        
        
        makeCopyThisNarrativeBtn: function($alertContainer) {
            var self = this;
            var active = '<span class="fa fa-copy"></span> Copy Narrative';
//            var $active = $('<span>').addClass('fa fa-copy').append(" Copy Narrative");
            var $working = $('<span>').append("Copying Narrative...");
            
            var $btn = $('<button>').addClass('kb-primary-btn')
                    .append(active)
                    .on('click', function(e) {
                        e.stopPropagation();
                        var $cpyBtn = $(this);
                        $cpyBtn.prop('disabled', true).empty().append($working);
                        
                        self.ws.get_workspace_info({workspace: self.ws_name},
                            function(ws_info) {
                                self.ws.get_object_info_new({objects:[{ref: ws_info[0] + '/' + ws_info[8]['narrative']}], includeMetadata:1},
                                    function(object_info_list) {
                                        var object_info = object_info_list[0];
                                        var $newNameInput = $('<input type="text">').addClass('form-control').val(ws_info[8]['narrative_nice_name']+' - Copy');
                                        $alertContainer.append(
                                            $('<div>').append(
                                                $('<div>').append("Enter a name for the new Narrative"))
                                                    .append($('<div>').append($newNameInput))
                                                    .append($('<button>').addClass('kb-data-list-btn')
                                                        .append('Copy')
                                                        .click(function() {
                                                            var $thisBtn = $(this);
                                                            $thisBtn.prop("disabled",true);
                                                            var newMeta = ws_info[8];
                                                            newMeta['narrative_nice_name'] = $newNameInput.val();
                                                            
                                                            var id = new Date().getTime();
                                                            var ws_name = self.my_user_id + ":" + id;
                                                            
                                                            self.ws.clone_workspace({
                                                                        wsi: {id:ws_info[0]},
                                                                        workspace: ws_name,
                                                                        meta: newMeta
                                                                    },
                                                                    function(new_ws_info) {
                                                                        // we have to match based on names because when cloning, the object id is not preserved!!! arg!
                                                                        var new_narrative_ref = new_ws_info[0]+"/"+ object_info[1]; //new_ws_info[8].narrative;
                                                                        // ok, a lot of work just to update the narrative name in the metadata
                                                                        self.ws.get_objects([{ref:new_narrative_ref}],
                                                                            function(data) {
                                                                                data = data[0]; // only one thing should be returned
                                                                                var new_nar_metadata = data.info[10];
                                                                                new_nar_metadata.name = newMeta['narrative_nice_name'];
                                                                                data.data.metadata.name = newMeta['narrative_nice_name'];
                                                                                
                                                                                // set workspace metadata to point to the correct object id since they can change on clone!!
                                                                                self.ws.alter_workspace_metadata({
                                                                                        wsi:{id:new_ws_info[0]},
                                                                                        new: {'narrative' : String(data.info[0]) }
                                                                                    },
                                                                                    function () {
                                                                                        // so much work just to update this name!
                                                                                        self.ws.save_objects({id:new_ws_info[0],objects:[
                                                                                            {
                                                                                                type:data.info[2],
                                                                                                data:data.data,
                                                                                                provenance:data.provenance,
                                                                                                name:data.info[1],
                                                                                                meta:new_nar_metadata
                                                                                            }
                                                                                            ]},
                                                                                            function(info) {
                                                                                                console.log('copying complete',info);
                                                                                                $thisBtn.prop('disabled', false).empty().append($active);
                                                                                                $alertContainer.empty();
                                                                                                self.refresh();
                                                                                            },
                                                                                            function(error) {
                                                                                                console.error(error);
                                                                                                $alertContainer.empty();
                                                                                                $alertContainer.append($('<span>').css({'color':'#F44336'}).append("Error! Copied successfully, but error on data update. "+error.error.message));
                                                                                            });
                                                                                    
                                                                                    },
                                                                                    function (error) {
                                                                                        console.error(error);
                                                                                        $alertContainer.empty();
                                                                                        $alertContainer.append($('<span>').css({'color':'#F44336'}).append("Error! Copied successfully, but error on data update. "+error.error.message));
                                                                                    });
                                                                                
                                                                                
                                                                            },
                                                                            function(error) {
                                                                                console.error(error);
                                                                                $alertContainer.empty();
                                                                                $alertContainer.append($('<span>').css({'color':'#F44336'}).append("Error! Copied successfully, but error on rename. "+error.error.message));
                                                                            })
                                                                    },
                                                                    function(error) {
                                                                        console.error(error);
                                                                        $alertContainer.empty();
                                                                        $alertContainer.append($('<span>').css({'color':'#F44336'}).append("Error! "+error.error.message));
                                                                    });
                                                            }))
                                                    .append($('<button>').addClass('kb-data-list-cancel-btn')
                                                        .append('Cancel')
                                                        .click(function() {
                                                            $cpyBtn.prop('disabled', false).empty().append($active);
                                                            $alertContainer.empty();
                                                        } )));
                                    },
                                    function(error) {
                                        console.error(error);
                                        $alertContainer.empty();
                                        $alertContainer.append($('<span>').css({'color':'#F44336'}).append("Error! "+error.error.message));
                                    });
                            },
                            function(error) {
                                console.error(error);
                                $alertContainer.empty();
                                $alertContainer.append($('<span>').css({'color':'#F44336'}).append("Error! "+error.error.message));
                            });
                });
            return $btn;
        },
        
        makeNewNarrativeBtn: function() {
            var self = this;
            var active = '<span class="fa fa-plus"></span> New Narrative';
            // !!! Putting text inside the span with font awesome classes will 
            // cause the browser to use its default font.
//            var $active = $('<span>').addClass('fa fa-plus').append(" New Narrative");
            var $working = $('<span>').append("Building Narrative...");
            var $btn =
                $('<button>').addClass('kb-primary-btn').append(active)
                    .on('click', function() {
                        // just open the link, don't do the work here...
                        window.open(self.options.new_narrative_link);
                    });
            
            return $btn;
        },
        
        getNarSummary : function(nar_info) {
            var summary = '';
            if (nar_info[10].methods) {
                var content = JSON.parse(nar_info[10].methods);
                var summaryCounts = [];
                var appCount=0; var methodCount=0;
                for(var a in content.app) {
                    if (content.app.hasOwnProperty(a)) {
                        appCount+= content.app[a];
                    }
                }
                if (appCount===1) { summaryCounts.push('1 App'); }
                else if (appCount>1) { summaryCounts.push(appCount+' Apps');}
                                                            
                for(var m in content.method) {
                    if (content.method.hasOwnProperty(m)) {
                        methodCount+= content.method[m];
                    }
                }
                if (methodCount===1) { summaryCounts.push('1 Method'); }
                else if (methodCount>1) { summaryCounts.push(methodCount+' Methods');}
                                                            
                if (content.output ===1) { summaryCounts.push('1 Result'); }
                else if (content.output >1) { summaryCounts.push(content.output + ' Results'); }
                
                if (content.ipython.code ===1) { summaryCounts.push('1 Code Cell'); }
                else if (content.ipython.code >1) { summaryCounts.push(content.ipython.code + ' Code Cells'); }
                                                            
                if (content.ipython.markdown ===1) { summaryCounts.push('1 Md Cell'); }
                else if (content.ipython.markdown >1) { summaryCounts.push(content.ipython.markdown + ' Md Cells'); }
                                                            
                                                            
                if (summaryCounts.length>0) {
                    summary = summaryCounts.join(', ');
                } else {
                    summary = 'Empty Narrative';
                }
            }
            return summary;
        },
        
        getNarContent: function(nar_info) {
            var self = this;
            console.log(nar_info);
            
            var specsToLookup = {apps:[],methods:[]};
            if (nar_info[10].methods) {
                var content = JSON.parse(nar_info[10].methods);
                var apps = []; var methods = [];
                var appCount=0; var methodCount=0;
                for(var a in content.app) {
                    if (content.app.hasOwnProperty(a)) {
                        apps.push({name:a,count:content.app[a]});
                        specsToLookup.apps.push(a);
                    }
                }
                for(var m in content.method) {
                    if (content.method.hasOwnProperty(m)) {
                        methods.push({name:m,count:content.method[m]});
                        specsToLookup.methods.push(m);
                    }
                }
            }
            
            if ((apps.length + methods.length) ===0) {
                if (nar_info[10].description) {
                    $container.append('<br><b>Description</b><br><div style="text-align:left;">'+nar_info[10].description+'</div>');
                }
                return "<br>No Apps or Methods in this Narrative.<br>";
            }
            
            var $container = $('<div>').css({'width':'100%'});
            if (!self.appMethodSpecRef) {
                self.trigger('getFunctionSpecs.Narrative', [specsToLookup,
                        function(specLookup) {
                            //todo: sort here based on counts or name?
                            //console.log(specLookup);
                            if (nar_info[10].description) {
                                $container.append('<br><b>Description</b><br><div style="text-align:left;">'+nar_info[10].description+'</div>');
                            }
                            
                            if (apps.length>0) {
                                $container.append('<br><b>Apps</b><br>');
                                var $apptbl = $('<table>').css({'width':'100%'});
                                for(var k=0; k<apps.length; k++) {
                                    var link = '<a href="'+self.options.landing_page_url+'narrativestore/app/'+apps[k].name+'" target="_blank">'+apps[k].name+'</a>';
                                    if (specLookup.apps[apps[k].name]) {
                                        link = '<a href="'+self.options.landing_page_url+'narrativestore/app/'+apps[k].name+'" target="_blank">'+specLookup.apps[apps[k].name].info.name+'</a>';
                                    }
                                    $apptbl.append($('<tr>')
                                            .append($('<td>').append(link))
                                            .append($('<td>').append(apps[k].count)));
                                }
                                $container.append($apptbl);
                            }
                            
                            if (methods.length>0) {
                                $container.append('<br><b>Methods</b><br>');
                                var $methodtbl = $('<table>').css({'width':'100%'});
                                for(var k=0; k<methods.length; k++) {
                                    var link = '<a href="'+self.options.landing_page_url+'narrativestore/method/'+methods[k].name+'" target="_blank">'+methods[k].name+'</a>';
                                    if (specLookup.methods[methods[k].name]) {
                                        link = '<a href="'+self.options.landing_page_url+'narrativestore/method/'+methods[k].name+'" target="_blank">'+specLookup.methods[methods[k].name].info.name+'</a>';
                                    }
                                    $methodtbl.append($('<tr>')
                                            .append($('<td>').append(link))
                                            .append($('<td>').append(methods[k].count)));
                                }
                                $container.append($methodtbl);
                            }
                            $container.append('<br>');
                        }]);
            }
            return $container;
        },
        
        // edited from: http://stackoverflow.com/questions/3177836/how-to-format-time-since-xxx-e-g-4-minutes-ago-similar-to-stack-exchange-site
        getTimeStampStr: function (objInfoTimeStamp) {
            var date = new Date(objInfoTimeStamp);
            var seconds = Math.floor((new Date() - date) / 1000);
            
            // f-ing safari, need to add extra ':' delimiter to parse the timestamp
            if (isNaN(seconds)) {
                var tokens = objInfoTimeStamp.split('+');  // this is just the date without the GMT offset
                var newTimestamp = tokens[0] + '+'+tokens[0].substr(0,2) + ":" + tokens[1].substr(2,2);
                date = new Date(newTimestamp);
                seconds = Math.floor((new Date() - date) / 1000);
                if (isNaN(seconds)) {
                    // just in case that didn't work either, then parse without the timezone offset, but
                    // then just show the day and forget the fancy stuff...
                    date = new Date(tokens[0]);
                    return this.monthLookup[date.getMonth()]+" "+date.getDate()+", "+date.getFullYear();
                }
            }
            
            // keep it simple, just give a date
            return this.monthLookup[date.getMonth()]+" "+date.getDate()+", "+date.getFullYear();
        },
        
        monthLookup : ["Jan", "Feb", "Mar","Apr", "May", "Jun", "Jul", "Aug", "Sep","Oct", "Nov", "Dec"],
        
        /* we really need to stop all this copy pasting */
        real_name_lookup: {},
        displayRealName: function(username,$targetSpan) {
	    var self = this;
	    if (self.ws) { // make sure we are logged in and have some things
		
                if (self.real_name_lookup[username] && self.real_name_lookup[username] !=="...") {
                    $targetSpan.html(self.real_name_lookup[username]+" ("+username+")");
                } else {
                    self.real_name_lookup[username] = "..."; // set a temporary value so we don't search again
                    $targetSpan.html(username);
                    $.ajax({
                            type: "GET",
                            url: self.options.user_name_fetch_url + username + "&token="+self._attributes.auth.token,
                            dataType:"json",
                            crossDomain : true,
                            success: function(data,res,jqXHR) {
                                if (username in data['data'] && data['data'][username]['fullName']) {
                                    self.real_name_lookup[username] = data['data'][username]['fullName'];
                                    $targetSpan.html(self.real_name_lookup[username]+" ("+username+")");
                                }
                            },
                            error: function(jqXHR, textStatus, errorThrown) {
                                //do nothing
                            }
                        });
                }
	    }
        }
        
    });

})( jQuery );

/**
 * "Download" panel for each element in data list panel.
 * @author Roman Sutormin <rsutormin@lbl.gov>
 * @public
 */
(function( $, undefined ) {
    $.KBWidget({
        name: "kbaseNarrativeDownloadPanel",
        parent: "kbaseWidget",
        version: "1.0.0",
        options: {
        	token: null,
        	type: null,
        	wsId: null,
        	objId: null
        },
        token: null,
        type: null,
        wsId: null,
        objId: null,
        loadingImage: "static/kbase/images/ajax-loader.gif",
        wsUrl: window.kbconfig.urls.workspace,
        transformURL: window.kbconfig.urls.transform,
        ujsURL: window.kbconfig.urls.user_and_job_state,
        shockURL: window.kbconfig.urls.shock,
        exportURL: window.kbconfig.urls.data_import_export,
        timer: null,
        
        downloaders: {  // type -> {name: ..., external_type: ...[, transform_options: ...[, unzip: <file_ext>]}
        	'KBaseGenomes.ContigSet': [{name: 'FASTA', external_type: 'FASTA.DNA.Assembly', transform_options: {"output_file_name": "?.fasta"}}],
        	'KBaseGenomes.Genome': [{name: "GENBANK", external_type: 'Genbank.Genome', transform_options: {}}],
        	
		'KBaseAssembly.SingleEndLibrary': [{name: "FASTA/FASTQ", external_type: 'SequenceReads', transform_options: {}}],
		'KBaseAssembly.PairedEndLibrary': [{name: "FASTA/FASTQ", external_type: 'SequenceReads', transform_options: {}}],
		'KBaseFile.SingleEndLibrary': [{name: "FASTA/FASTQ", external_type: 'SequenceReads', transform_options: {}}],
		'KBaseFile.PairedEndLibrary': [{name: "FASTA/FASTQ", external_type: 'SequenceReads', transform_options: {}}],
		
		'KBaseFBA.FBAModel':[{name: "SBML", external_type: 'SBML.FBAModel', transform_options: {}},
				     {name: "CSV", external_type: 'CSV.FBAModel', transform_options: {}}],
		
		'KBaseFBA.FBA':[{name: "CSV", external_type: 'CSV.FBA', transform_options: {}}],
		
		'KBaseBiochem.Media':[{name: "CSV", external_type: 'CSV.Media', transform_options: {}}],
		
		'KBasePhenotypes.PhenotypeSet':[{name: "CSV", external_type: 'CSV.PhenotypeSet', transform_options: {}}],
		'KBasePhenotypes.PhenotypeSimulationSet':[{name: "CSV", external_type: 'CSV.PhenotypeSimulationSet', transform_options: {}}]
	},

        init: function(options) {
            this._super(options);
            this.token = this.options.token;
            this.type = this.options.type;
            this.wsId = this.options.wsId;
            this.objId = this.options.objId;
            this.render();
            return this;
        },
        
        render: function() {
            var self = this;
    		var downloadPanel = this.$elem;
		
		var $labeltd = $('<td>').css({'white-space':'nowrap','padding':'1px'}).append('Export as:');
		var $btnTd = $('<td>').css({'padding':'1px'});
		downloadPanel.append($('<table>').css({width:'100%'})
					.append('<tr>')
					   .append($labeltd)
					   .append($btnTd));
		
		
    		var addDownloader = function(descr) {
		    $btnTd.append($('<button>').addClass('kb-data-list-btn')
    					.append(descr.name)
    					.click(function() {
						$btnTd.find('.kb-data-list-btn').prop('disabled', true);
    						self.runDownloader(self.type, self.wsId, self.objId, descr);
    					}));
    		};
    		var downloaders = self.prepareDownloaders(self.type, self.wsId, self.objId);
    		for (var downloadPos in downloaders)
    			addDownloader(downloaders[downloadPos]);
		
    		$btnTd.append($('<button>').addClass('kb-data-list-btn')
                    .append('JSON')
                    .click(function() {
                    	var url = self.exportURL + '/download?ws='+self.wsId+'&id='+self.objId+'&token='+self.token+
                    		'&url='+encodeURIComponent(self.wsUrl) + "&wszip=1";
                    	self.downloadFile(url);
                    }));
    		$btnTd.append($('<button>').addClass('kb-data-list-cancel-btn')
                    .append('Cancel')
                    .click(function() {
			self.stopTimer();
			downloadPanel.empty();
		    } ));
		
	    self.$statusDiv = $('<div>').css({'margin':'15px'});
	    self.$statusDivContent = $('<div>');
	    self.$statusDiv.append(self.$statusDivContent);
	    downloadPanel.append(self.$statusDiv.hide());
        },
        
        prepareDownloaders: function(type, wsId, objId) {
        	var descrList = this.downloaders[type];
        	var ret = [];
        	for (var descrPos in descrList) {
        		var descr = descrList[descrPos];
        		var retDescr = {name: descr.name, external_type: descr.external_type, unzip: descr.unzip};
        		ret.push(retDescr);
        		if (descr.transform_options) {
        			retDescr.transform_options = {};
        			for (var key in descr.transform_options) {
        				if (!descr.transform_options.hasOwnProperty(key))
        					continue;
        				var value = descr.transform_options[key];
        				if (value.indexOf('?') == 0)
        					value = objId + value.substring(1);
        				retDescr.transform_options[key] = value;
        			}
        		}
        	}
        	return ret;
        },
        
        runDownloader: function(type, wsId, objId, descr) { // descr is {name: ..., external_type: ...[, transform_options: ...[, unzip: ...]]}
            var self = this;
            self.showMessage('<img src="'+self.loadingImage+'" /> Export status: Preparing data');
            self.$statusDiv.show();
        	var transform_options = descr.transform_options;
        	if (!transform_options)
        		transform_options = {};
        	var args = {external_type: descr.external_type, kbase_type: type, workspace_name: wsId, object_name: objId, optional_arguments: {transform: transform_options}};
    		console.log("Downloader data to be sent to transform service:");
    		console.log(JSON.stringify(args));
            var transformSrv = new Transform(this.transformURL, {token: this.token});
            transformSrv.download(args,
            		$.proxy(function(data) {
            			console.log(data);
            			var jobId = data[1];
            			self.waitForJob(jobId, objId, descr.unzip);
            		}, this),
            		$.proxy(function(data) {
            			console.log(data.error.error);
            			self.showError(data.error.error);
            		}, this)
            );
        },

        waitForJob: function(jobId, wsObjectName, unzip) {
            var self = this;
            var jobSrv = new UserAndJobState(this.ujsURL, {token: this.token});
			var timeLst = function(event) {
				jobSrv.get_job_status(jobId, function(data) {
					//console.log(data);
					var status = data[2];
					var complete = data[5];
					var wasError = data[6];
					if (complete === 1) {
						self.stopTimer();
						if (wasError === 0) {
							console.log("Export is complete");
							// Starting download from Shock
							jobSrv.get_results(jobId, function(data) {
								self.$statusDiv.hide();
								self.$elem.find('.kb-data-list-btn').prop('disabled', false);
								console.log(data);
								self.downloadUJSResults(data, wsObjectName, unzip);
							}, function(data) {
            					console.log(data.error.message);
                    			self.showError(data.error.message);
							});
						} else {
							console.log(status);
	            			self.showError(status);
						}
					} else {
						console.log("Export status: " + status, true);
			            self.showMessage('<img src="'+self.loadingImage+'" /> Export status: ' + status);
					}
				}, function(data) {
					self.stopTimer();
					console.log(data.error.message);
        			self.showError(data.error.message);
				});
			};
			self.timer = setInterval(timeLst, 5000);
			timeLst();
        },
        
        downloadUJSResults: function(ujsResults, wsObjectName, unzip) {
        	var self = this;
			var shockNode = ujsResults.shocknodes[0];
			var elems = shockNode.split('/');
			if (elems.length > 1)
				shockNode = elems[elems.length - 1];
			elems = shockNode.split('?');
			if (elems.length > 0)
				shockNode = elems[0];
			console.log("Shock node ID: " + shockNode);
        	var shockClient = new ShockClient({url: self.shockURL, token: self.token});
        	var downloadShockNodeWithName = function(name) {
    			var url = self.exportURL + '/download?id='+shockNode+'&token='+
    				encodeURIComponent(self.token)+'&del=1';
    			if (unzip) {
    				url += '&unzip='+encodeURIComponent(unzip);
    			} else {
    				url += '&name='+encodeURIComponent(name);
    			}
    			var remoteShockUrl = ujsResults.shockurl;
    			if (remoteShockUrl)
    				url += '&url='+encodeURIComponent(remoteShockUrl);
    			self.downloadFile(url);
        	};
        	/*shockClient.get_node(shockNode, function(data) {
        		console.log(data);
        		downloadShockNodeWithName(data.file.name);
        	}, function(error) {
        		console.log(error);
        	});*/
        	downloadShockNodeWithName(wsObjectName + ".zip");
        },
        
        downloadFile: function(url) {
        	console.log("Downloading url=" + url);
        	var hiddenIFrameID = 'hiddenDownloader';
            var iframe = document.getElementById(hiddenIFrameID);
        	if (iframe === null) {
        		iframe = document.createElement('iframe');
        		iframe.id = hiddenIFrameID;
        		iframe.style.display = 'none';
        		document.body.appendChild(iframe);
        	}
        	iframe.src = url;
        },
        
        showMessage: function(msg) {
        	var self = this;
            self.$statusDivContent.empty();
            self.$statusDivContent.append(msg);
        },
        
        showError: function(msg) {
        	var self = this;
		self.$statusDivContent.empty();
		self.$elem.find('.kb-data-list-btn').prop('disabled', false); // error is final state, so reactivate!
		self.$statusDivContent.append($('<span>').css({color:'#F44336'}).append('Error: '+msg));
        },
        
        stopTimer: function() {
			if (this.timer != null) {
				clearInterval(this.timer);
				this.timer = null;
				console.log("Timer was stopped");
			}
		}
    });
})( jQuery );

/**
 * @author Michael Sneddon <mwsneddon@lbl.gov>
 * @public
 */
(function( $, undefined ) {
    $.KBWidget({
        name: 'kbaseNarrativeDataList',
        parent: 'kbaseAuthenticatedWidget',
        version: '1.0.0',
        options: {
            ws_name: null, // must be the WS name, not the WS Numeric ID

            ws_url:"https://kbase.us/services/ws",
            landing_page_url: "/functional-site/#/", // !! always include trailing slash
            default_landing_page_url: "/functional-site/#/json/", // ws_name/obj_name,

            user_name_fetch_url:"https://kbase.us/services/genome_comparison/users?usernames=",

            loadingImage: 'static/kbase/images/ajax-loader.gif',
            methodStoreURL: 'http://dev19.berkeley.kbase.us/narrative_method_store',

            ws_chunk_size:10000,  // this is the limit of the number of objects to retrieve from the ws on each pass
            ws_max_objs_to_fetch: 75000, // this is the total limit of the number of objects before we stop trying to get more
                                         // note that if there are more objects than this, then sorts/search filters may
                                         // not show accurate results

            objs_to_render_to_start:40, // initial number of rows to display
            objs_to_render_on_scroll:5, // number of rows to add when the user scrolls to the bottom, should be <=5, much more and
                                        // the addition of new rows becomes jerky

            max_objs_to_prevent_filter_as_you_type_in_search:50000, //if there are more than this # of objs, user must click search
                                                                    //instead of updating as you type

            max_objs_to_prevent_initial_sort:10000, // initial sort makes loading slower, so we can turn it off if
                                                    // there are more than this number of objects

            max_name_length:33,
            refresh_interval:30000,

            parentControlPanel: null
        },

        // private variables
        mainListPanelHeight : '340px',

        ws_name: null,
        ws: null,
        ws_last_update_timestamp: null,
        ws_obj_count: null,

        n_objs_rendered:0,

        ws_landing_page_map: {},
        real_name_lookup: {},

        $searchInput: null,
        $filterTypeSelect: null,
        availableTypes:{},

        $searchDiv: null,
        $sortByDiv: null,
        $filterTypeDiv: null,

        $addDataButton:null,
        $controllerDiv: null,
        $mainListDiv:null,
        mainListId:null,
        $loadingDiv:null,

        methClient: null,

        obj_list : [],
        obj_data : {}, // old style - type_name : info

        my_user_id: null,

        /**
         * @method init
         * Builds the DOM structure for the widget.
         * Includes the tables and panel.
         * If any data was passed in (options.data), that gets shoved into the datatable.
         * @param {Object} - the options set.
         * @returns {Object} this shiny new widget.
         * @private
         */
        init: function(options) {
            this._super(options);
            var self = this;
            this.getLandingPageMap();  //start off this request so that we hopefully get something back right away

            this.$controllerDiv = $('<div>');
            this.$elem.append(this.$controllerDiv);
            this.renderController();
            this.$loadingDiv = $('<div>').addClass('kb-data-loading')
                                 .append('<img src="' + this.options.loadingImage + '">');
            this.$elem.append(this.$loadingDiv);
            this.mainListId=this.genUUID();
            this.$mainListDiv = $('<div id='+this.mainListId+'>')
                .css({'overflow-x' : 'hidden', 'overflow-y':'auto', 'height':this.mainListPanelHeight })
                .on('scroll', function() {
                    if($(this).scrollTop() + $(this).innerHeight() >= this.scrollHeight) {
                        self.renderMore();
                    }
                });

            this.$addDataButton = $('<span>').addClass('kb-data-list-add-data-button fa fa-plus fa-2x')
                                    .css({'position':'absolute', bottom:'15px', right:'25px', 'z-index':'5'})
                                    .click(function() {
                                        self.trigger('hideGalleryPanelOverlay.Narrative');
                                        self.trigger('toggleSidePanelOverlay.Narrative', self.options.parentControlPanel.$overlayPanel);
                                    });
            var $mainListDivContainer = $('<div>').css({'position':'relative'})
                                            .append(this.$mainListDiv)
                                            .append(this.$addDataButton.hide());
            this.$elem.append($mainListDivContainer);

            if (window.kbconfig === undefined || window.kbconfig.urls === undefined ||
                window.kbconfig.icons === undefined) {
              // bail out now
              alert("Failed to load base configuration! Aborting narrative now.");
              window.location = "/"; //XXX: Need to load the error page!!
            }
            this.options.methodStoreURL = window.kbconfig.urls.narrative_method_store;
            this.options.ws_url = window.kbconfig.urls.workspace;
            this.data_icons = window.kbconfig.icons.data;
            this.icon_colors = window.kbconfig.icons.colors;



            if (this._attributes.auth) {
                this.ws = new Workspace(this.options.ws_url, this._attributes.auth);
            }
            setInterval(function(){self.refresh();}, this.options.refresh_interval); // check if there is new data every X ms

            // listener for refresh
            $(document).on('updateDataList.Narrative', function() {
                self.refresh()
            })

            this.showLoading();
            if (this.options.ws_name) {
                this.setWorkspace(this.options.ws_name);
            }

            this.methClient = new NarrativeMethodStore(this.options.methodStoreURL);

            return this;
        },

        setWorkspace : function(ws_name) {
            this.ws_name = ws_name;
            //this.ws_name = "janakacore"; // for testing a bigish workspace
            //this.ws_name = "KBasePublicGenomesV4"; // for testing a very big workspace
            this.refresh();
        },

        refresh: function() {
            var self = this;
            if (self.ws_name && self.ws) {
                self.ws.get_workspace_info({
                        workspace: this.ws_name
                    },
                    function(workspace_info) {
                        //[0] ws_id id, [1] ws_name workspace, [2] username owner, [3] timestamp moddate,
                        //[4] int object, [5] permission user_permission, [6] permission globalread,
                        //[7] lock_status lockstat, [8] usermeta metadata
                        //console.log('I have: '+self.ws_last_update_timestamp+ " remote has: "+workspace_info[3]);
                        if (self.ws_last_update_timestamp) {
                            if (self.ws_last_update_timestamp !== workspace_info[3]) {
                                self.ws_last_update_timestamp = workspace_info[3];
                                self.ws_obj_count = workspace_info[4];
                                self.reloadWsData();
                            } else {
                                //console.log('updating times');
                                self.refreshTimeStrings();
                            }
                        } else {
                            self.ws_last_update_timestamp = workspace_info[3];
                            self.ws_obj_count = workspace_info[4];
                            self.reloadWsData();
                        }
                    },
                    function(error) {
                        console.error(error);

                        self.$mainListDiv.show();
                        self.$mainListDiv.empty();
                        self.$mainListDiv.append($('<div>').css({'color':'#F44336','margin':'10px'})
                                                 .append('Error: '+error.error.message));
                        self.hideLoading();
                    });
            }
            else {
              // XXX: We should probably DO something
              var where = "kbaseNarrativeDataList.refresh";
              if (!self.ws) {
                KBError(where, "workspace not connected");
              }
              else {
                KBError(where, "workspace name is empty");
              }
            }
        },

        refreshSpecificObject: function() {

        },

        refreshTimeStrings: function() {
            var self = this; var newTime; var oldTime;
            if (self.objectList) {
                for(var i=0; i<self.objectList.length; i++) {
                    if(self.objectList[i].$div) {
                        newTime = self.getTimeStampStr(self.objectList[i].info[3]);
                        oldTime = self.objectList[i].$div.find('.kb-data-list-date').text();
                        if (newTime !== oldTime) {
                            self.objectList[i].$div.find('.kb-data-list-date').text(newTime);
                        }
                    }
                }
            }
        },

        reloadWsData: function () {
            var self = this;
            if (self.ws_name && self.ws) {
                // empty the existing object list first
                self.objectList = [];
                self.obj_data = {};
                self.availableTypes = {};

                self.getNextDataChunk(0);
            }
        },

        getNextDataChunk: function(skip) {
            var self = this;
            self.ws.list_objects({
                    workspaces : [self.ws_name],
                    includeMetadata: 1,
                    skip: skip,
                    limit: self.options.ws_chunk_size
                },
                function(infoList) {
                    // object_info:
                    // [0] : obj_id objid // [1] : obj_name name // [2] : type_string type
                    // [3] : timestamp save_date // [4] : int version // [5] : username saved_by
                    // [6] : ws_id wsid // [7] : ws_name workspace // [8] : string chsum
                    // [9] : int size // [10] : usermeta meta
                    for (var i=0; i<infoList.length; i++) {
                        // skip narrative objects
                        if (infoList[i][2].indexOf('KBaseNarrative') == 0) { continue; }
                        self.objectList.push(
                            {
                                $div:null, //self.renderObjectRowDiv(infoList[i]), // we defer rendering the div until it is shown
                                info:infoList[i],
                                attached:false
                            }
                        );
                        var typeKey = infoList[i][2].split("-")[0];
                        if (!(typeKey in self.obj_data)) {
                            self.obj_data[typeKey]=[];
                        }
                        self.obj_data[typeKey].push(infoList[i]);

                        var typeName = typeKey.split('.')[1];
                        if (!(typeName in self.availableTypes)) {
                            self.availableTypes[typeName] =
                                        {
                                            type:typeName,
                                            count:0
                                        };
                        }
                        self.availableTypes[typeName].count++;
                    }

                    // if we have more than 2k objects, make them hit enter to search...
                    self.$searchInput.off("input change blur");
                    self.$searchInput.on("change blur",function() { self.search(); });
                    if (self.objectList.length<=self.options.max_objs_to_prevent_filter_as_you_type_in_search) {
                        self.$searchInput.on("input",function() { self.search(); });
                    }

                    self.trigger('dataUpdated.Narrative');

                    //LOGIC: we keep trying to get more until we reach the ws_obj_count or untill the max
                    // fetch count option, UNLESS the last call returned nothing, in which case we stop.
                    //IMPORTANT NOTE: IN RARE CASES THIS DOES NOT GAURANTEE THAT WE GET ALL OBJECTS FROM
                    //THIS WS!!  IF THERE IS A CHUNK THAT RETURNED NOTHING, THERE STILL MAY BE MORE
                    //OBJECTS DUE TO A BUG IN THE WORKSPACE THAT INCLUDES OLD VERSIONS AND DELETED VERSIONS
                    //BEFORE FILTERING OUT THE NUMBER - A BETTER TEMP FIX WOULD BE TO LIMIT THE NUMBER OF
                    //RECURSIONS TO 2 or 3 MAYBE...
                    //BUT WHATEVER YOU DO PLEASE REMEMBER TO USE CAPITAL LETTERS EXTENSIVELY
                    //OTHERWISE PEOPLE MIGHT NOT NOTICE WHAT YOU ARE SAYING AND THAT WOULD
                    //BE EXTREMELY ANNOYING!!!! SERIOUSLY!!!
                    if (self.objectList.length < self.ws_obj_count
                            && self.objectList.length < self.options.ws_max_objs_to_fetch
                            && infoList.length>0) {
                        self.getNextDataChunk(skip+self.options.ws_chunk_size);
                    } else {
                        if (self.objectList.length<=self.options.max_objs_to_prevent_initial_sort) {
                            self.objectList.sort(function(a,b) {
                                    if (a.info[3] > b.info[3]) return -1; // sort by date
                                    if (a.info[3] < b.info[3]) return 1;  // sort by date
                                    return 0;
                                });
                            self.$elem.find('#nar-data-list-default-sort-label').addClass('active');
                            self.$elem.find('#nar-data-list-default-sort-option').attr('checked');
                        }
                    }

                    self.populateAvailableTypes();
                    self.renderList();
                    self.hideLoading();
                },
                function(error) {
                    console.error(error);
                    KBError("kbaseNarrativeDataList.getNextDataChunk",
                            error.error.message);
                    self.$mainListDiv.show();
                    self.$mainListDiv.empty();
                    self.$mainListDiv.append($('<div>').css({'color':'#F44336','margin':'10px'})
                                             .append('Error: '+error.error.message));
                    self.hideLoading();
                });

        },

        getObjData: function(type, ignoreVersion) {
            if (type) {
                var dataSet = {};
                if (typeof type === 'string') {
                    type = [type];
                }
                for (var i=0; i<type.length; i++) {
                    if (this.obj_data[type[i]]) {
                        dataSet[type[i]]=this.obj_data[type[i]];
                    }
                }
                return dataSet;
            }
            return this.obj_data;
        },

        $currentSelectedRow : null,
        selectedObject: null,
        setSelected: function($selectedRow, object_info) {
            var self = this;
            if (self.$currentSelectedRow) {
                self.$currentSelectedRow.removeClass('kb-data-list-obj-row-selected');
            }
            if (object_info[0]===self.selectedObject) {
                self.$currentSelectedRow = null;
                self.selectedObject = null;
                self.trigger('removeFilterMethods.Narrative');
            } else {
                $selectedRow.addClass('kb-data-list-obj-row-selected');
                self.$currentSelectedRow = $selectedRow;
                self.selectedObject = object_info[0];
                self.trigger('filterMethods.Narrative','type:'+object_info[2].split('-')[0].split('.')[1]);
            }
        },


        addDataControls: function(object_info, $alertContainer) {
            var self = this;
            var $btnToolbar = $('<span>')
                                        .addClass('btn-toolbar')
                                        .attr('role', 'toolbar');

            var btnClasses = "btn btn-xs btn-default";
            var css = {'color':'#888'};

                                /*.append($('<div>').css({'text-align':'center','margin':'5pt'})
                                            .append('<a href="'+landingPageLink+'" target="_blank">'+
                                                        'explore data</a>&nbsp&nbsp|&nbsp&nbsp')
                                            .append('<a href="'+this.options.landing_page_url+'objgraphview/'+object_info[7] +'/'+object_info[1] +'" target="_blank">'+
                                                        'view provenance</a><br>'))*/

            var $openLandingPage = $('<span>')
                                        .tooltip({title:'Explore data', 'container':'#'+this.mainListId})
                                        .addClass(btnClasses)
                                        .append($('<span>').addClass('fa fa-binoculars').css(css))
                                        .click(function(e) {
                                            e.stopPropagation(); $alertContainer.empty();
                                            var typeTokens = object_info[2].split('-')[0].split('.');
                                            var landingPageLink = self.options.default_landing_page_url +object_info[7]+ '/' + object_info[1];
                                            if (self.ws_landing_page_map) {
                                                if (self.ws_landing_page_map[typeTokens[0]]) {
                                                    if (self.ws_landing_page_map[typeTokens[0]][typeTokens[1]]) {
                                                        landingPageLink = self.options.landing_page_url +
                                                            self.ws_landing_page_map[typeTokens[0]][typeTokens[1]] + "/" +
                                                            object_info[7]+ '/' + object_info[1];
                                                    }
                                                }
                                            }
                                            window.open(landingPageLink);
                                        });

            var $openHistory = $('<span>')
                                        .addClass(btnClasses).css(css)
                                        .tooltip({title:'View history to revert changes', 'container':'body'})
                                        .append($('<span>').addClass('fa fa-history').css(css))
                                        .click(function(e) {
                                            e.stopPropagation(); $alertContainer.empty();

                                            if (self.ws_name && self.ws) {
                                                self.ws.get_object_history({ref:object_info[6]+"/"+object_info[0]},
                                                    function(history) {
                                                        $alertContainer.append($('<div>')
                                                            .append($('<button>').addClass('kb-data-list-cancel-btn')
                                                                        .append('Hide History')
                                                                        .click(function() {$alertContainer.empty();} )));
                                                        history.reverse();
                                                        var $tbl = $('<table>').css({'width':'100%'});
                                                        for(var k=0; k<history.length;k++) {
                                                            var $revertBtn = $('<button>').append('v'+history[k][4]).addClass('kb-data-list-btn');
                                                            if (k==0) {
                                                                $revertBtn.tooltip({title:'Current Version', 'container':'body',placement:'bottom'});
                                                            } else {
                                                                var revertRef = {wsid:history[k][6], objid:history[k][0], ver:history[k][4]};
                                                                (function(revertRefLocal) {
                                                                    $revertBtn.tooltip({title:'Revert to this version?', 'container':'body',placement:'bottom'})
                                                                        .click(function() {
                                                                            self.ws.revert_object(revertRefLocal,
                                                                                function(reverted_obj_info) {
                                                                                    self.refresh();
                                                                                }, function(error) {
                                                                                    console.error(error);
                                                                                    $alertContainer.empty();
                                                                                    $alertContainer.append($('<span>').css({'color':'#F44336'}).append("Error! "+error.error.message));
                                                                                });
                                                                        }); })(revertRef);
                                                            }
                                                            $tbl.append($('<tr>')
                                                                        .append($('<td>').append($revertBtn))
                                                                        .append($('<td>').append('Saved by '+history[k][5]+'<br>'+self.getTimeStampStr(history[k][3])))
                                                                        .append($('<td>').append($('<span>').css({margin:'4px'}).addClass('fa fa-info pull-right'))
                                                                                 .tooltip({title:history[k][2]+'<br>'+history[k][8]+'<br>'+history[k][9]+' bytes', container:'body',html:true,placement:'bottom'}))
                                                                                );
                                                        }
                                                        $alertContainer.append($tbl);
                                                    },
                                                    function(error) {
                                                        console.error(error);
                                                        $alertContainer.empty();
                                                        $alertContainer.append($('<span>').css({'color':'#F44336'}).append("Error! "+error.error.message));
                                                    });
                                            }


                                        });

            var $openProvenance = $('<span>')
                                        .addClass(btnClasses).css(css)
                                        .tooltip({title:'View data provenance and relationships', 'container':'body'})
                                        .append($('<span>').addClass('fa fa-sitemap fa-rotate-90').css(css))
                                        .click(function(e) {
                                            e.stopPropagation(); $alertContainer.empty();
                                            window.open(self.options.landing_page_url+'objgraphview/'+object_info[7]+'/'+object_info[1]);
                                        });
            var $download = $('<span>')
                                        .addClass(btnClasses).css(css)
                                        .tooltip({title:'Export / Download data', 'container':'body'})
                                        .append($('<span>').addClass('fa fa-download').css(css))
                                        .click(function(e) {
                                            e.stopPropagation(); $alertContainer.empty();
                                            var type = object_info[2].split('-')[0];
                                            var wsId = object_info[7];
                                            var objId = object_info[1];
                                            var downloadPanel = $('<div>');
                                            $alertContainer.append(downloadPanel);
                                            downloadPanel.kbaseNarrativeDownloadPanel({token: self._attributes.auth.token, type: type, wsId: wsId, objId: objId});
                                        });

            var $rename = $('<span>')
                                        .addClass(btnClasses).css(css)
                                        .tooltip({title:'Rename data', 'container':'body'})
                                        .append($('<span>').addClass('fa fa-font').css(css))
                                        .click(function(e) {
                                            e.stopPropagation(); $alertContainer.empty();
                                            var $newNameInput = $('<input type="text">').addClass('form-control').val(object_info[1]);
                                            $alertContainer.append($('<div>')
                                                .append($('<div>').append("Warning: Apps using the old name may break."))
                                                .append($('<div>').append($newNameInput))
                                                .append($('<button>').addClass('kb-data-list-btn')
                                                            .append('Rename')
                                                            .click(function() {
                                                                if (self.ws_name && self.ws) {
                                                                    self.ws.rename_object({
                                                                            obj: {ref:object_info[6]+"/"+object_info[0]},
                                                                            new_name: $newNameInput.val()
                                                                        },
                                                                        function(renamed_info) {
                                                                            self.refresh();
                                                                        },
                                                                        function(error) {
                                                                            console.error(error);
                                                                            $alertContainer.empty();
                                                                            $alertContainer.append($('<span>').css({'color':'#F44336'}).append("Error! "+error.error.message));
                                                                        });
                                                                }
                                                            }))
                                                .append($('<button>').addClass('kb-data-list-cancel-btn')
                                                            .append('Cancel')
                                                            .click(function() {$alertContainer.empty();} )));
                                        });
            var $delete = $('<span>')
                                        .addClass(btnClasses).css(css)
                                        .tooltip({title:'Delete data'})
                                        .append($('<span>').addClass('fa fa-trash-o').css(css))
                                        .click(function(e) {
                                            e.stopPropagation();
                                            $alertContainer.empty();
                                            $alertContainer.append($('<div>')
                                                .append($('<span>').append('Are you sure?'))
                                                .append($('<button>').addClass('kb-data-list-btn')
                                                            .append('Delete')
                                                            .click(function() {
                                                                if (self.ws_name && self.ws) {
                                                                    self.ws.rename_object({
                                                                            obj: {ref:object_info[6]+"/"+object_info[0]},
                                                                            new_name: object_info[1].split('-deleted-')[0] + "-deleted-"+(new Date()).getTime()
                                                                        },
                                                                        function(renamed_info) {
                                                                            self.ws.delete_objects([{ref:object_info[6]+"/"+object_info[0]}],
                                                                                function() {
                                                                                    self.refresh();
                                                                                },
                                                                                function(error) {
                                                                                    console.error(error);
                                                                                    $alertContainer.empty();
                                                                                    $alertContainer.append($('<span>').css({'color':'#F44336'}).append("Error! "+error.error.message));
                                                                                });
                                                                        },
                                                                        function(error) {
                                                                            console.error(error);
                                                                            $alertContainer.empty();
                                                                            $alertContainer.append($('<span>').css({'color':'#F44336'}).append("Error! "+error.error.message));
                                                                        });
                                                                }
                                                            }))
                                                .append($('<button>').addClass('kb-data-list-cancel-btn')
                                                            .append('Cancel')
                                                            .click(function() {$alertContainer.empty();} )));
                                        });

            $btnToolbar
                .append($openLandingPage)
                .append($openHistory)
                .append($openProvenance)
                .append($download)
                .append($rename)
                .append($delete);

            return $btnToolbar;
        },


        renderObjectRowDiv: function(object_info, object_key) {
            var self = this;
            // object_info:
            // [0] : obj_id objid // [1] : obj_name name // [2] : type_string type
            // [3] : timestamp save_date // [4] : int version // [5] : username saved_by
            // [6] : ws_id wsid // [7] : ws_name workspace // [8] : string chsum
            // [9] : int size // [10] : usermeta meta
            var type_tokens = object_info[2].split('.')
            var type_module = type_tokens[0];
            var type = type_tokens[1].split('-')[0];
            var unversioned_full_type = type_module + '.' + type;
            var icons = this.data_icons;
            var icon = _.has(icons, type) ? icons[type] : icons['DEFAULT'];
            var icon_cls = icon.join(' ');
            var $logo = $('<div>')
              // background circle
              .addClass("fa-stack fa-2x").css({'cursor':'pointer'})
              .append($('<i>')
                .addClass("fa fa-circle fa-stack-2x")
                .css({'color':this.logoColorLookup(type)}));
            // add stack of font-awesome icons
            _.each(icon, function(cls) {
              $logo.append($('<i>')
                .addClass("fa fa-inverse fa-stack-1x " + cls));
            });
            // add behavior
            $logo.click(function(e) {
                e.stopPropagation();
                self.insertViewer(object_key);
            });

            var shortName = object_info[1]; var isShortened=false;
            if (shortName.length>this.options.max_name_length) {
                shortName = shortName.substring(0,this.options.max_name_length-3)+'...';
                isShortened=true;
            }
            var $name = $('<span>').addClass("kb-data-list-name").append(shortName)
                            .css({'cursor':'pointer'})
                            .click(function(e) {
                                e.stopPropagation();
                                self.insertViewer(object_key);
                            });
            if (isShortened) { $name.tooltip({title:object_info[1], placement:'bottom', delay: { show: 750, hide: 0 } }); }

            var $version = $('<span>').addClass("kb-data-list-version").append('v'+object_info[4]);
            var $type = $('<span>').addClass("kb-data-list-type").append(type);

            var $date = $('<span>').addClass("kb-data-list-date").append(this.getTimeStampStr(object_info[3]));
            var $byUser = $('<span>').addClass("kb-data-list-edit-by");
            if (object_info[5] !== self.my_user_id) {
                $byUser.append(' by '+object_info[5])
                    .click(function(e) {
                        e.stopPropagation();
                        window.open(self.options.landing_page_url+'people/'+object_info[5]);
                    });
            }
            var metadata = object_info[10];
            var metadataText = '';
            for(var key in metadata) {
                if (metadata.hasOwnProperty(key)) {
                    metadataText += '<tr><th>'+ key +'</th><td>'+ metadata[key] + '</td></tr>';
                }
            }
            if (type==='Genome') {
                if (metadata.hasOwnProperty('Name')) {
                    $type.text(type+': '+metadata['Name']);
                }
            }

            var $savedByUserSpan = $('<td>').addClass('kb-data-list-username-td');
            this.displayRealName(object_info[5],$savedByUserSpan);

            var $alertDiv = $('<div>').css({'text-align':'center','margin':'10px 0px'});
            var typeLink = '<a href="'+this.options.landing_page_url+'spec/module/'+type_module+'" target="_blank">' +type_module+"</a>.<wbr>" +
                           '<a href="'+this.options.landing_page_url+'spec/type/'+object_info[2]+'" target="_blank">' +(type_tokens[1].replace('-','&#8209;')) + '.' + type_tokens[2] + '</a>';
            var $moreRow  = $('<div>').addClass("kb-data-list-more-div").hide()
                                .append($('<div>').css({'text-align':'center','margin':'5pt'})
                                            .append(self.addDataControls(object_info,$alertDiv)).append($alertDiv))
                                .append(
                                    $('<table style="width:100%;">')
                                        .append("<tr><th>Permament Id</th><td>" +object_info[6]+ "/" +object_info[0]+ "/" +object_info[4] + '</td></tr>')
                                        .append("<tr><th>Full Type</th><td>"+typeLink+'</td></tr>')
                                        .append($('<tr>').append('<th>Saved by</th>').append($savedByUserSpan))
                                        .append(metadataText));

            var $toggleAdvancedViewBtn = $('<span>').addClass("kb-data-list-more")//.addClass('btn btn-default btn-xs kb-data-list-more-btn')
                .hide()
                .html('<span class="fa fa-ellipsis-h" style="color:#999" aria-hidden="true"/>');
            var toggleAdvanced = function() {
                    if (self.selectedObject == object_info[0] && $moreRow.is(':visible')) {
                        // assume selection handling occurs before this is called
                        // so if we are now selected and the moreRow is visible, leave it...
                        return;
                    }
                    if ($moreRow.is(':visible')) {
                        $moreRow.slideUp('fast');
                        $toggleAdvancedViewBtn.show();
                    } else {
                        self.getRichData(object_info,$moreRow);
                        $moreRow.slideDown('fast');
                        $toggleAdvancedViewBtn.hide();
                    }
                };

            var $mainDiv  = $('<div>').addClass('kb-data-list-info').css({padding:'0px',margin:'0px'})
                                .append($name).append($version).append('<br>')
                                .append($type).append('<br>').append($date).append($byUser)
                                .append($toggleAdvancedViewBtn)
                                .click(
                                    function() {
                                        self.setSelected($(this).closest('.kb-data-list-obj-row'),object_info);
                                        toggleAdvanced();
                                    });

            var $topTable = $('<table>').attr('kb-oid', object_key)
                             .css({'width':'100%','background':'#fff'})  // set background to white looks better on DnD
                             .append($('<tr>')
                                     .append($('<td>')
                                             .css({'width':'15%'})
                                             .append($logo))
                                     .append($('<td>')
                                             .append($mainDiv)));

            var $row = $('<div>').addClass('kb-data-list-obj-row')
                            .append($('<div>').addClass('kb-data-list-obj-row-main')
                                        .append($topTable))
                            .append($moreRow)
                            // show/hide ellipses on hover, show extra info on click
                            .mouseenter(function(){
                                if (!$moreRow.is(':visible')) { $toggleAdvancedViewBtn.show(); }
                            })
                            .mouseleave(function(){ $toggleAdvancedViewBtn.hide(); });


            // Drag and drop
            this.addDragAndDrop($topTable);

            var $rowWithHr = $('<div>')
                                .append($('<hr>')
                                            .addClass('kb-data-list-row-hr')
                                            .css({'margin-left':'65px'}))
                                .append($row);

            return $rowWithHr;
        },

        // ============= DnD ==================

        addDragAndDrop: function($row) {

            var self = this;

            // Add data drag-and-drop (jquery-ui)
            // allow data element to visually leave the left column
            //$('#left-column').css('overflow', 'visible');
            $row.draggable({
                cursor: 'move',
                containment: '#main-container',
                helper: function() {
                            var w = $row.width(); // get orig. width
                            var $elt = $row.clone();
                            $elt.addClass("kb-data-inflight");
                            // append to root container, to help with z-index
                            $("#notebook-container").prepend($elt);
                            // reset width (was: 100%)
                            $elt.width(w);
                            return $elt; }
                //start: this.dataDragged
            });

            // Dropping data directly onto the notebook. (As opposed to on input fields)
            $('#notebook-container').droppable({
                drop: function(event, ui) {
                    var $elt = $(ui.draggable);
                    // Insert cell onto narrative canvas near drop point:
                    // (a) find nearest cell using 'jquery-nearest'
                    var $near_elt = $($elt.nearest('.cell'));
                    var near_idx = 0;
                    if ($near_elt == null || $near_elt.data() == null) {
                      // no cell found, so place at top
                    }
                    else {
                      // (b) map that cell back to an index
                      near_idx = IPython.notebook.find_cell_index($near_elt.data().cell);
                    }
                    // var cell = IPython.notebook.insert_cell_at_index('markdown', near_idx);
                    // // Add unique id attr. to cell
                    // var cell_id = self.genUUID();
                    // cell.rendered = false;
                    // cell.set_text('<div id="' + cell_id + '">&nbsp;</div>');
                    // cell.render();
                    // // Get object info
                    var key = $elt.attr('kb-oid');
                    var obj = _.findWhere(self.objectList, {key: key});
                    console.debug('drag-n-drop: key=' + key, obj);
                    var info = self.createInfoObject(obj.info);
                    // // Insert the narrative data cell into the div we just rendered
                    // $('#' + cell_id).kbaseNarrativeDataCell({cell: cell, info: info});
                    self.trigger('createViewerCell.Narrative', {
                        'nearCellIdx': near_idx,
                        'widget': 'kbaseNarrativeDataCell',
                        'info' : info
                    });
                }
            });

            // Add tooltip to indicate this functionality
            $row.attr({'data-toggle': 'tooltip',
                       'data-placement': 'top',
                        'title': 'Drag onto narrative &rarr;'});
            $row.tooltip({delay: { show: 1500, hide: 0 }, html: true});

            return this;
        },

        /**
         * Helper function to create named object attrs from
         * list of fields returned from Workspace service.
         */
        createInfoObject: function(info) {
          return _.object(['id', 'name', 'type', 'save_date', 'version',
                           'saved_by', 'ws_id', 'ws_name', 'chsum', 'size',
                           'meta'], info);
        },

        // ============= end DnD ================

        insertViewer: function(key) {
            var self = this;
            var cell = IPython.notebook.get_selected_cell();
            var near_idx = 0;
            if (cell) {
            	near_idx = IPython.notebook.find_cell_index(cell);
            	$(cell.element).off('dblclick');
            	$(cell.element).off('keydown');
            }
            console.log(cell, near_idx);

            //var cell_id = self.genUUID();
            //cell.rendered = false;
            //cell.set_text('<div id="' + cell_id + '">&nbsp;</div>');
            //cell.render();

            var obj = _.findWhere(self.objectList, {key: key});
            var info = self.createInfoObject(obj.info);
            // Insert the narrative data cell into the div we just rendered
            //$('#' + cell_id).kbaseNarrativeDataCell({cell: cell, info: info});
            self.trigger('createViewerCell.Narrative', {
                'nearCellIdx': near_idx,
                'widget': 'kbaseNarrativeDataCell',
                'info' : info
            });

        },

        renderMore: function() {
            var self=this;
            if (self.objectList) {

                if (!self.searchFilterOn) { // if search filter is off, then we just are showing everything
                    var start = self.n_objs_rendered;
                    for(var i=start; i<self.objectList.length; i++) {
                        // only show them as we scroll to them
                        if (self.n_objs_rendered >= start+self.options.objs_to_render_on_scroll) {
                            break;
                        }
                        if (self.objectList[i].key == undefined) {
                            self.objectList[i].key = self.genUUID();
                        }
                        self.attachRow(i);
                    }
                    //console.log('showing '+ self.n_objs_rendered + ' of ' + self.objectList.length);
                } else {
                    // search filter is on, so we have to base this on what is currently filtered
                    var start = self.n_filteredObjsRendered;
                    for(var i=start; i<self.currentMatch.length; i++) {
                        // only show them as we scroll to them
                        if (self.n_filteredObjsRendered >= start+self.options.objs_to_render_on_scroll) {
                            break;
                        }
                        self.attachRowElement(self.currentMatch[i]);
                        self.n_filteredObjsRendered++;
                    }
                    //console.log('showing '+ self.n_filteredObjsRendered + ' of ' + self.currentMatch.length + ' objs matching search filter');
                }
            }
        },

        attachRow: function(index) {
            var obj = this.objectList[index];
            if (obj.attached) { return; }
            if (obj.$div) {
                this.$mainListDiv.append(obj.$div);
            } else {
                obj.$div = this.renderObjectRowDiv(obj.info, obj.key);
                this.$mainListDiv.append(obj.$div);
            }
            obj.attached = true;
            this.n_objs_rendered++;
        },

        attachRowElement: function(row) {
            if (row.attached) { return; } // return if we are already attached
            if (row.$div) {
                this.$mainListDiv.append(row.$div);
            } else {
                row.$div = this.renderObjectRowDiv(row.info, row.key);
                this.$mainListDiv.append(row.$div);
            }
            row.attached = true;
            this.n_objs_rendered++;
        },

        detachAllRows: function() {
            for (var i=0; i<this.objectList.length; i++) {
                this.detachRow(i);
            }
            this.$mainListDiv.children().detach();
            this.n_objs_rendered=0;
            this.renderedAll = false;
        },
        detachRow: function(index) {
            if (this.objectList[index].attached) {
                if (this.objectList[index].$div) {
                    this.objectList[index].$div.detach();
                }
                this.objectList[index].attached = false;
                this.n_objs_rendered--;
            }
        },


        renderList: function() {
            var self = this;
            self.showLoading();

            self.detachAllRows();

            if (self.objectList.length>0) {
                for(var i=0; i < self.objectList.length; i++) {
                    // only show up to the given number
                    if (i >= self.options.objs_to_render_to_start) {
                        self.n_objs_rendered = i;
                        break;
                    }
                    // If object does not have a key, define one.
                    // This will be used for 'id' of rendered element.
                    // But do *not* replace an existing key.
                    if (self.objectList[i].key == undefined) {
                        self.objectList[i].key = self.genUUID();
                    }
                    self.attachRow(i);
                }
                this.$addDataButton.show();
            } else {
                // todo: show an upload button or some other message if there are no elements
                self.$mainListDiv.append($('<div>').css({'text-align':'center','margin':'20pt'})
                                         .append("This Narrative has no data yet.<br><br>")
                                         .append($("<button>").append('Add Data').addClass('kb-data-list-add-data-text-button').css({'margin':'20px'})
                                                 .click(function() {
                                                        self.trigger('hideGalleryPanelOverlay.Narrative');
                                                        self.trigger('toggleSidePanelOverlay.Narrative', self.options.parentControlPanel.$overlayPanel);
                                                    })));
            }

            self.hideLoading();
        },

        renderController: function() {
            var self = this;

            var $byDate = $('<label id="nar-data-list-default-sort-label" class="btn btn-default">').addClass('btn btn-default')
                                .append($('<input type="radio" name="options" id="nar-data-list-default-sort-option" autocomplete="off">'))
                                .append("date")
                                .on('click',function() {
                                    self.sortData(function(a,b) {
                                        if (a.info[3] > b.info[3]) return -1; // sort by date
                                        if (a.info[3] < b.info[3]) return 1;  // sort by date
                                        return 0;
                                    });
                                });

            var $byName = $('<label class="btn btn-default">')
                                .append($('<input type="radio" name="options" id="option2" autocomplete="off">'))
                                .append("name")
                                .on('click',function() {
                                    self.sortData(function(a,b) {
                                        if (a.info[1].toUpperCase() < b.info[1].toUpperCase()) return -1; // sort by name
                                        if (a.info[1].toUpperCase() > b.info[1].toUpperCase()) return 1;
                                        return 0;
                                    });
                                });

            var $byType = $('<label class="btn btn-default">')
                                .append($('<input type="radio" name="options" id="option3" autocomplete="off">'))
                                .append("type")
                                .on('click',function() {
                                    self.sortData(function(a,b) {
                                        if (a.info[2].toUpperCase() > b.info[2].toUpperCase()) return -1; // sort by type
                                        if (a.info[2].toUpperCase() < b.info[2].toUpperCase()) return 1;
                                        return 0;
                                    });
                                });
            var $upOrDown = $('<button class="btn btn-default btn-sm" type="button">').css({'margin-left':'5px'})
                                .append('<span class="glyphicon glyphicon-sort" style="color:#777" aria-hidden="true" />')
                                .on('click',function() {
                                    self.reverseData();
                                });

            var $sortByGroup = $('<div data-toggle="buttons">')
                                    .addClass("btn-group btn-group-sm")
                                    .css({"margin":"2px"})
                                    .append($byDate)
                                    .append($byName)
                                    .append($byType);

            // var $addDataBtn = $('<button>')
            //                     .addClass("btn btn-warning kb-data-list-get-data-button")
            //                     .append('<span class="fa fa-plus" style="color:#fff" aria-hidden="true" /> Add Data')
            //                     .on('click',function() {
            //                         self.trigger('toggleSidePanelOverlay.Narrative');
            //                     });



            var $openSearch = $('<span>')
                .addClass('btn btn-xs btn-default')
                .tooltip({title:'Search data in narrative', 'container':'body', delay: { "show": 400, "hide": 50 }})
                .append('<span class="fa fa-search"></span>')
                .on('click',function() {
                    if(!self.$searchDiv.is(':visible')) {
                        self.$searchDiv.show();
                        self.$sortByDiv.hide();
                        self.$filterTypeDiv.hide();
                    } else {
                        self.$searchDiv.hide();
                    }
                });

            var $openSort = $('<span>')
                .addClass('btn btn-xs btn-default')
                .tooltip({title:'Sort data list', 'container':'body', delay: { "show": 400, "hide": 50 }})
                .append('<span class="fa fa-sort-amount-asc"></span>')
                .on('click',function() {
                    if(!self.$sortByDiv.is(':visible')) {
                        self.$sortByDiv.show();
                        self.$searchDiv.hide();
                        self.$filterTypeDiv.hide();
                    } else {
                        self.$sortByDiv.hide();
                    }
                });

            var $openFilter = $('<span>')
                .addClass('btn btn-xs btn-default')
                .tooltip({title:'Filter data by type', 'container':'body', delay: { "show": 400, "hide": 50 }})
                .append('<span class="fa fa-filter"></span>')
                .on('click',function() {
                    if(!self.$filterTypeDiv.is(':visible')) {
                        self.$filterTypeDiv.show();
                        self.$sortByDiv.hide();
                        self.$searchDiv.hide();
                    } else {
                        self.$filterTypeDiv.hide();
                    }
                });
            self.$searchInput = $('<input type="text">').addClass('form-control');
            self.$searchDiv = $('<div>').addClass("input-group").css({'margin-bottom':'10px'})
                                .append(self.$searchInput)
                                .append($("<span>").addClass("input-group-addon")
                                            .append($("<span>")
                                                .addClass("glyphicon glyphicon-search")
                                                .css({'cursor':'pointer'})
                                                .on('click',function() {
                                                        self.search();
                                                    })  ));

            self.$sortByDiv = $('<div>').css({'margin':'3px','margin-left':'5px','margin-bottom':'10px'})
                                .append("<small>sort by: </small>")
                                .append($sortByGroup)
                                .append($upOrDown);

            self.$filterTypeSelect = $('<select>').addClass("form-control")
                                        .append($('<option value="">'))
                                        .change(function() {
                                            var optionSelected = $(this).find("option:selected");
                                            var typeSelected  = optionSelected.val();
                                            self.filterByType(typeSelected);
                                        });

            self.$filterTypeDiv = $('<div>').css({'margin':'3px','margin-left':'5px','margin-bottom':'10px'})
                                .append(self.$filterTypeSelect);

            var $header = $('<div>');
            if(self.options.parentControlPanel) {
                self.options.parentControlPanel.addButtonToControlPanel($openSearch);
                self.options.parentControlPanel.addButtonToControlPanel($openSort);
                self.options.parentControlPanel.addButtonToControlPanel($openFilter);
            }
            else {
                $header.addClass('row').css({'margin':'5px'})
                    .append($('<div>').addClass('col-xs-12').css({'margin':'0px','padding':'0px','text-align':'right'})
                        .append($openSearch)
                        .append($openSort)
                        .append($openFilter))
            }


            self.$sortByDiv.hide();
            self.$searchDiv.hide();
            self.$filterTypeDiv.hide();

            var $filterDiv = $('<div>')
                                .append(self.$sortByDiv)
                                .append(self.$searchDiv)
                                .append(self.$filterTypeDiv);

            self.$controllerDiv.append($header).append($filterDiv);
        },

        populateAvailableTypes: function() {
            var self = this;
            if (self.availableTypes && self.$filterTypeSelect) {

                var types = [];
                for(var type in self.availableTypes) {
                    if(self.availableTypes.hasOwnProperty(type)) {
                        types.push(type);
                    }
                }
                types.sort();

                self.$filterTypeSelect.empty();
                var runningCount = 0;
                for(var i=0; i<types.length; i++) {
                    runningCount += self.availableTypes[types[i]].count;
                    var countStr = '';
                    if(self.availableTypes[types[i]].count==1) {
                        countStr = " (".concat(self.availableTypes[types[i]].count).concat(" object)");
                    } else {
                        countStr = " (".concat(self.availableTypes[types[i]].count).concat(" objects)");
                    }
                    self.$filterTypeSelect.append(
                        $('<option value="'+self.availableTypes[types[i]].type+'">')
                            .append(self.availableTypes[types[i]].type + countStr));
                }
                if (runningCount==1) {
                    self.$filterTypeSelect.prepend($('<option value="">').append("Show All Types ("+runningCount+" object)"));
                } else {
                    self.$filterTypeSelect.prepend($('<option value="">').append("Show All Types ("+runningCount+" objects)"));
                }
            }
        },


        reverseData: function() {
            var self = this;
            if (!self.objectList) { return; }

            self.objectList.reverse();
            self.renderList();
            self.search();

            self.hideLoading();
        },

        sortData: function(sortfunction) {
            var self = this;
            if (!self.objectList) { return; }
            //should add spinning wait bar ....
            self.showLoading();

            self.objectList.sort(sortfunction);
            self.renderList();
            self.search();  // always refilter on the search term search if there is something there

            self.hideLoading();

            // go back to the top on sort
            self.$mainListDiv.animate({
                scrollTop:0
            }, 300); // fast = 200, slow = 600
        },


        currentMatch: [],
        currentTerm: '',
        searchFilterOn: false,
        n_filteredObjsRendered: null,

        search: function(term, type) {
            var self = this;
            if (!self.objectList) { return; }

            if (!term && self.$searchInput) {
                term = self.$searchInput.val();
            }

            // if type wasn't selected, then we try to get something that was set
            if (!type) {
                if (self.$filterTypeSelect) {
                    type = self.$filterTypeSelect.find("option:selected").val();
                }
            }

            term = term.trim();
            if (term.length>0 || type) {
                self.searchFilterOn = true;
                // todo: should show searching indicator (could take several seconds if there is a lot of data)
                // optimization => we filter existing matches instead of researching everything if the new
                // term starts with the last term searched for
                var newMatch = [];
                if (!self.currentTerm) {
                    // reset if currentTerm is null or empty
                    self.currentMatch = self.objectList;
                } else {
                    if (term.indexOf(self.currentTerm)!==0) {
                        self.currentMatch = self.objectList;
                    }
                }
                // clean the term for regex use
                term = term.replace(/\|/g,'\\|').replace(/\\\\\|/g,'|'); // bars are common in kb ids, so escape them unless we have \\|
                term = term.replace(/\./g,'\\.').replace(/\\\\\./g,'.'); // dots are common in names, so we escape them, but
                                                                         // if a user writes '\\.' we assume they want the regex '.'

                var regex = new RegExp(term, 'i');

                var n_matches = 0; self.n_filteredObjsRendered = 0;
                for(var k=0; k<self.currentMatch.length; k++) {
                    // [0] : obj_id objid // [1] : obj_name name // [2] : type_string type
                    // [3] : timestamp save_date // [4] : int version // [5] : username saved_by
                    // [6] : ws_id wsid // [7] : ws_name workspace // [8] : string chsum
                    // [9] : int size // [10] : usermeta meta
                    var match = false;
                    var info = self.currentMatch[k].info;
                    if (regex.test(info[1])) { match = true; } // match on name
                    else if (regex.test(info[2].split('.')[1].split('-'))) { match = true; } // match on type name
                    else if (regex.test(info[5])) { match = true; } // match on saved_by user

                    if (!match && info[10]) { // match on metadata values
                        for(var metaKey in info[10]) {
                            if (info[10].hasOwnProperty(metaKey)) {
                                if (regex.test(info[10][metaKey])) { match = true; break; }
                                else if (regex.test(metaKey+"::"+info[10][metaKey])) {
                                    match = true; break;
                                }
                            }
                        }
                    }


                    if (type) { // if type is defined, then our sort must also filter by the type
                        if (type !== info[2].split('-')[0].split('.')[1]) {
                            match = false; // no match if we are not the selected type!
                        }
                    }

                    if (match) {
                        // matches must always switch to show if they are rendered
                        if (self.currentMatch[k].$div) {
                            self.currentMatch[k].$div.show();
                        }

                        // todo: add check so we only show up to the number we render... switching to this will require that
                        // we revise the renderMore logic...
                        if (n_matches < self.options.objs_to_render_to_start) {
                            self.attachRowElement(self.currentMatch[k]);
                            self.n_filteredObjsRendered++;
                        }

                        newMatch.push(self.currentMatch[k]);
                        n_matches++;
                    }
                    else {
                        if (self.currentMatch[k].$div) {
                            self.currentMatch[k].$div.hide();
                        }
                    }
                }
                self.currentMatch = newMatch; // update the current match
            } else {
                self.searchFilterOn = false;
                // no new search, so show all and render the list
                for(var k=0; k<self.objectList.length; k++) {
                    if (self.objectList[k].$div) {
                        self.objectList[k].$div.show();
                    }
                }
                self.renderList();
            }
            self.currentTerm = term;
        },


        filterByType: function(type) {
            var self = this;
            self.search(null,type);
        },

        getRichData: function(object_info,$moreRow) {
            var self = this;
            var $usernameTd = $moreRow.find(".kb-data-list-username-td");
            self.displayRealName(object_info[5],$usernameTd);
        },

        showLoading : function() {
            this.$loadingDiv.show();
            this.$mainListDiv.hide();
        },
        hideLoading : function() {
            this.$loadingDiv.hide();
            this.$mainListDiv.show();
        },

        displayRealName: function(username,$targetSpan) {
	    var self = this;
	    // todo : use globus to populate user names, but we use a hack because of globus CORS headers
	    if (self.ws) { // make sure we are logged in and have some things

                if (self.real_name_lookup[username]) {
                    $targetSpan.html(self.real_name_lookup[username]+' (<a href="'+self.options.landing_page_url+'people/'+username+'" target="_blank">'+username+"</a>)");
                } else {
                    self.real_name_lookup[username] = "..."; // set a temporary value so we don't search again
                    $targetSpan.html('<a href="'+self.options.landing_page_url+'people/'+username+'" target="_blank">'+username+"</a>");
                    $.ajax({
                            type: "GET",
                            url: self.options.user_name_fetch_url + username + "&token="+self._attributes.auth.token,
                            dataType:"json",
                            crossDomain : true,
                            success: function(data,res,jqXHR) {
                                if (username in data['data'] && data['data'][username]['fullName']) {
                                    self.real_name_lookup[username] = data['data'][username]['fullName'];
                                    $targetSpan.html(self.real_name_lookup[username]+' (<a href="'+self.options.landing_page_url+'people/'+username+'" target="_blank">'+username+"</a>)");
                                }
                            },
                            error: function(jqXHR, textStatus, errorThrown) {
                                //do nothing
                            }
                        });
                }
	    }
        },

        getLandingPageMap: function() {
            this.ws_landing_page_map = window.kbconfig.landing_page_map;
        },

        /**
         * @method loggedInCallback
         * This is associated with the login widget (through the kbaseAuthenticatedWidget parent) and
         * is triggered when a login event occurs.
         * It associates the new auth token with this widget and refreshes the data panel.
         * @private
         */
        loggedInCallback: function(event, auth) {
            this.ws = new Workspace(this.options.ws_url, auth);
            //this.user_profile = new UserProfile(this.options.user_profile_url, auth);
            this.my_user_id = auth.user_id;
            this.isLoggedIn = true;
            this.refresh();
            return this;
        },

        /**
         * @method loggedOutCallback
         * Like the loggedInCallback, this is triggered during a logout event (through the login widget).
         * It throws away the auth token and workspace client, and refreshes the widget
         * @private
         */
        loggedOutCallback: function(event, auth) {
            this.ws = null;
            this.isLoggedIn = false;
            this.my_user_id = null;
            this.refresh();
            return this;
        },

        logoColorLookup:function(type) {
          var code = 0;
          for (var i=0; i < type.length; code += type.charCodeAt(i++));
          return this.icon_colors[ code % this.icon_colors.length ];
        },

        // edited from: http://stackoverflow.com/questions/3177836/how-to-format-time-since-xxx-e-g-4-minutes-ago-similar-to-stack-exchange-site
        getTimeStampStr: function (objInfoTimeStamp) {
            var date = new Date(objInfoTimeStamp);
            var seconds = Math.floor((new Date() - date) / 1000);

            // f-ing safari, need to add extra ':' delimiter to parse the timestamp
            if (isNaN(seconds)) {
                var tokens = objInfoTimeStamp.split('+');  // this is just the date without the GMT offset
                var newTimestamp = tokens[0] + '+'+tokens[0].substr(0,2) + ":" + tokens[1].substr(2,2);
                date = new Date(newTimestamp);
                seconds = Math.floor((new Date() - date) / 1000);
                if (isNaN(seconds)) {
                    // just in case that didn't work either, then parse without the timezone offset, but
                    // then just show the day and forget the fancy stuff...
                    date = new Date(tokens[0]);
                    return this.monthLookup[date.getMonth()]+" "+date.getDate()+", "+date.getFullYear();
                }
            }

            var interval = Math.floor(seconds / 31536000);
            if (interval > 1) {
                return this.monthLookup[date.getMonth()]+" "+date.getDate()+", "+date.getFullYear();
            }
            interval = Math.floor(seconds / 2592000);
            if (interval > 1) {
                if (interval<4) {
                    return interval + " months ago";
                } else {
                    return this.monthLookup[date.getMonth()]+" "+date.getDate()+", "+date.getFullYear();
                }
            }
            interval = Math.floor(seconds / 86400);
            if (interval > 1) {
                return interval + " days ago";
            }
            interval = Math.floor(seconds / 3600);
            if (interval > 1) {
                return interval + " hours ago";
            }
            interval = Math.floor(seconds / 60);
            if (interval > 1) {
                return interval + " minutes ago";
            }
            return Math.floor(seconds) + " seconds ago";
        },

        monthLookup : ["Jan", "Feb", "Mar","Apr", "May", "Jun", "Jul", "Aug", "Sep","Oct", "Nov", "Dec"],

        genUUID: function() {
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
                var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);
                return v.toString(16);
            });
        }
    })

})(jQuery);

(function( $, undefined ) {
    $.KBWidget({
        name: 'kbaseNarrativeAppsPanel', 
        parent: 'kbaseNarrativeControlPanel',
        version: '0.0.1',
        options: {
            loadingImage: 'static/kbase/images/ajax-loader.gif',
            autopopulate: true,
            title: 'Apps',
            methodStoreURL: 'http://dev19.berkeley.kbase.us/narrative_method_store/rpc',
            appHelpLink: '/functional-site/#/narrativestore/app/',
        },

        init: function(options) {
            this._super(options);
            if (window.kbconfig && window.kbconfig.urls) {
                this.options.methodStoreURL = window.kbconfig.urls.narrative_method_store;
            }

            this.methClient = new NarrativeMethodStore(this.options.methodStoreURL);

            this.$appListElem = $('<ul>');

            // Make a function panel for everything to sit inside.
            this.$appPanel = $('<div>')
                             .addClass('kb-function-body')
                             .append(this.$appListElem);

            // The 'loading' panel should just have a spinning gif in it.
            this.$loadingPanel = $('<div>')
                                 .addClass('kb-data-loading')
                                 .append('<img src="' + this.options.loadingImage + '">')
                                 .append($('<div>')
                                         .attr('id', 'message'))
                                 .hide();

            // The error panel should be empty for now.
            this.$errorPanel = $('<div>')
                               .addClass('kb-error')
                               .hide();

            // The help element should be outside of the panel itself, so it can be manipulated separately.
            // It should hide itself when clicked.
            this.$bodyDiv.append($('<div>')
                                 .addClass('kb-narr-panel-body')
                                 .append(this.$appPanel)
                                 .append(this.$loadingPanel)
                                 .append(this.$errorPanel));

            // Add the tooltip panel
            this.initMethodTooltip();
            
            if (this.options.autopopulate === true) {
                this.refresh();
            }
            return this;
        },

        refresh: function() {
            this.showLoadingMessage("Loading KBase Apps from service...");

            this.methClient.list_apps({}, 
                $.proxy(function (appList) {
                    appList.sort(function(a, b) {
                        return a.name.localeCompare(b.name);
                    });
                    this.appList = appList;
                    for (var i=0; i<appList.length; i++) {
                        this.$appListElem.append(this.buildAppElem(appList[i]));
                        this.showAppPanel();
                    }
                }, this),
                $.proxy(function (error) {
                    this.showError(error);
                }, this)
            );
        },

        buildAppElem: function(app) {
            var $helpButton = $('<span>')
                              .addClass('glyphicon glyphicon-question-sign kb-function-help')
                              .css({'margin-top': '-5px'})
                              .click($.proxy(function(event) {
                                  event.preventDefault();
                                  event.stopPropagation();
                                  this.showTooltip(app, event);
                              }, this));

            var $errButton = $('<span>')
                             .addClass('glyphicon glyphicon-warning-sign kb-function-help')
                             .css({'margin-top' : '-5px'})
                             .click($.proxy(function(event) {
                                event.preventDefault();
                                event.stopPropagation();
                                self.showErrorTooltip(app, event);
                             }, this));

            /* this is for handling long function names.
               long names will be cropped and have a tooltip
               with the full name */
            var appName = app.name;
            var $appSpan = $('<span class="kb-data-obj-name" style="margin-bottom:-5px">');
            if (appName.length > 31) {
                $appSpan.append(appName);
                $appSpan.tooltip({
                    title: app.name,
                    placement: "bottom"
                }); 
            } else {
                 $appSpan.append(appName);
            }
            
            var $newApp = $('<li>')
                             .append($appSpan);

            if (app.loading_error) {
                $newApp.addClass('kb-function-error')
                          .append($errButton)
                          .click($.proxy(function(event) {
                              this.showErrorTooltip(app, event);
                          }, this));
            }
            else {
                $newApp.append($helpButton)
                       .click(
                           $.proxy(function(event) {
                               this.trigger('appClicked.Narrative', app);
                           }, this));
                // $newApp.append($helpButton)
                //           .click($.proxy(function(event) {
                //               // needs to move to controller.
                //               this.methClient.get_app_spec({ 'ids' : [app.id] },
                //                   $.proxy(function(spec) {
                //                       this.trigger('appClicked.Narrative', spec[0]);
                //                   }, this),
                //                   $.proxy(function(error) {
                //                       this.showError(error);
                //                   }, this)
                //               );
                //           }, this));
            }
            return $newApp;            
        },
        
        initMethodTooltip: function() {
            this.help = {};

            this.help.$helpPanel = $('<div>')
                                   .addClass('kb-function-help-popup alert alert-info')
                                   .hide()
                                   .click($.proxy(function(event) { this.help.$helpPanel.hide(); }, this));
            this.help.$helpTitle = $('<span>');
            this.help.$helpVersion = $('<span>')
                                   .addClass('version');

            var $helpHeader = $('<div>')
                              //.addClass('header')
                              .append(
                                    $('<h1>')
                                      .css("display","inline")
                                      .css("padding-right","8px")
                                        .append(this.help.$helpTitle))
                              .append(this.help.$helpVersion);

            this.help.$helpBody = $('<div>')
                                  .addClass('body');
                                  
            /* No app page yet, so for now we don't add this element - also need to uncomment the link in the showTooltip function
            this.help.$helpLinkout = $('<a>')
                                     .attr('href', this.options.methodHelpLink)
                                     .attr('target', '_blank')
                                     .append('More...'); */

            this.help.$helpPanel.append($helpHeader)
                                .append(this.help.$helpBody)
                                .append($('<div>').append(this.help.$helpLinkout))
                                .append($('<h2>').append('Click to hide'));
            $('body').append(this.help.$helpPanel);

        },
        
        
        /**
         * Shows a popup panel with a description of the clicked method.
         * @param {object} method - the method containing a title and 
         * description for populating the popup.
         * @private
         */
        showTooltip: function(app, event) {
            this.help.$helpTitle.text(app.name);
            this.help.$helpVersion.text('v' + app.ver);
            this.help.$helpBody.html(app.tooltip);
            //this.help.$helpLinkout.attr('href', this.options.appHelpLink + app.id);
            this.help.$helpPanel.css({
                                       'left':event.pageX, 
                                       'top':event.pageY
                                     })
                                .show();
        },

        showErrorTooltip: function(app, event) {
            this.showTooltip({
                'name' : app.name,
                'ver' : app.ver,
                'id' : app.id,
                'tooltip' : "This App has an internal error and cannot currently be used.<br><br>The detailed error message is:<br>"+app.loading_error
            }, event);
        },
        

        /**
         * Shows a loading spinner or message on top of the panel.
         * @private
         */
        showLoadingMessage: function(message) {
            this.$loadingPanel.find('#message').empty();
            if (message) 
                this.$loadingPanel.find('#message').html(message);
            this.$appPanel.hide();
            this.$errorPanel.hide();
            this.$loadingPanel.show();
        },

        /**
         * Shows the main function panel, hiding all others.
         * @private
         */
        showAppPanel: function() {
            this.$errorPanel.hide();
            this.$loadingPanel.hide();
            this.$appPanel.show();
        },

        /**
         * Shows an error text message on top of the panel. All other pieces are hidden.
         * @param {string} error - the text of the error message
         * @private
         */
        showError: function(error) {
            var $errorHeader = $('<div>')
                               .addClass('alert alert-danger')
                               .append('<b>Sorry, an error occurred while loading KBase functions.</b><br>Please contact the KBase team at <a href="mailto:help@kbase.us?subject=Narrative%20function%20loading%20error">help@kbase.us</a> with the information below.');

            this.$errorPanel.empty();
            this.$errorPanel.append($errorHeader);

            // If it's a string, just dump the string.
            if (typeof error === 'string') {
                this.$errorPanel.append($('<div>').append(error));
            }

            // If it's an object, expect an error object as returned by the execute_reply callback from the IPython kernel.
            else if (typeof error === 'object') {
                var $details = $('<div>');
                $details.append($('<div>').append('<b>Type:</b> ' + error.ename))
                        .append($('<div>').append('<b>Value:</b> ' + error.evalue));

                var $tracebackDiv = $('<div>')
                                 .addClass('kb-function-error-traceback');
                for (var i=0; i<error.traceback.length; i++) {
                    $tracebackDiv.append(error.traceback[i] + "<br>");
                }

                var $tracebackPanel = $('<div>');
                var tracebackAccordion = [{'title' : 'Traceback', 'body' : $tracebackDiv}];

                this.$errorPanel.append($details)
                                .append($tracebackPanel);
                $tracebackPanel.kbaseAccordion({ elements : tracebackAccordion });
            }

            this.$appPanel.hide();
            this.$loadingPanel.hide();
            this.$errorPanel.show();
        },

    });
})(jQuery);
"use strict";

(function( $, undefined ) {
    $.KBWidget({
        name: 'kbaseNarrativeJobsPanel',
        parent: 'kbaseNarrativeControlPanel',
        version: '0.0.1',
        options: {
            loadingImage: 'static/kbase/images/ajax-loader.gif',
            autopopulate: true,
            title: 'Jobs',
        },
        $jobCountBadge: $('<span>')
                        .addClass('label label-danger'),
        title: $('<span>Jobs </span>'),
        // these are the elements that contain running apps and methods
        $appsList: null,
        $methodsList: null,

        /* when populated, should have the structure:
         * {
         *    jobId: { id: <str>,
                       status : <str>, 
                       source : <id of source cell>,
                       $elem : element of rendered job info,
                       timestamp: <str> }
         * }
         */
        jobStates: null,

        /* when populated should have structure:
         * {
         *    sourceId : jobId
         * }
         */
        source2Job: {},

        refreshTimer: null,
        refreshInterval: 10000,

        completedStatus: [ 'completed', 'done', 'deleted', 'suspend', 'not_found_error', 'unauthorized_error', 'awe_error' ],

        init: function(options) {
            this._super(options);
            this.title.append(this.$jobCountBadge);
            $(document).on('registerMethod.Narrative', $.proxy(
                function(e, jobInfo) {
                    this.registerJob(jobInfo, false);
                }, this)
            );

            $(document).on('registerApp.Narrative', $.proxy(
                function(e, jobInfo) {
                    this.registerJob(jobInfo, true);
                }, this)
            );

            $(document).on('refreshJobs.Narrative', $.proxy(
                function(e) {
                    this.refresh();
                }, this)
            );

            $(document).on('cancelJobCell.Narrative', $.proxy(
                function(e, cellId, showPrompt, callback) {
                    // Find job based on cellId
                    var jobId = this.source2Job[cellId];

                    // If we can't find the job, then it's not being tracked, so we
                    // should just assume it's gone already and return true to the callback.
                    if (jobId === undefined && callback)
                        callback(true);
                    else if (jobId !== undefined) {
                        if (showPrompt)
                            this.openJobDeletePrompt(jobId, null, callback);
                        else 
                            this.deleteJob(jobId, callback);
                    }
                }, this)
            );

            var $refreshBtn = $('<button>')
                              .addClass('btn btn-xs btn-default')
                              .click($.proxy(function(event) { this.refresh(); }, this))
                              .append($('<span>')
                                      .addClass('glyphicon glyphicon-refresh'));

            var $headerDiv = $('<div>')
                              .append('Jobs')
                              .append($('<button>')
                                      .addClass('btn btn-xs btn-default kb-ws-refresh-btn')
                                      .css({'margin-top': '-4px',
                                            'margin-right': '4px'})
                                      .click($.proxy(function(event) { this.refresh(); }, this))
                                      .append($('<span>')
                                              .addClass('glyphicon glyphicon-refresh')));

            this.$methodsList = $('<div>');
            this.$appsList = $('<div>');

            this.$jobsAccordion = $('<div>');
            // Make a function panel for everything to sit inside.
            this.$jobsPanel = $('<div>')
                              .addClass('kb-function-body');

            // The 'loading' panel should just have a spinning gif in it.
            this.$loadingPanel = $('<div>')
                                 .addClass('kb-data-loading')
                                 .append('<img src="' + this.options.loadingImage + '">')
                                 .append($('<div>')
                                         .attr('id', 'message'))
                                 .hide();

            // The error panel should be empty for now.
            this.$errorPanel = $('<div>')
                               .addClass('kb-error')
                               .hide();

            this.$jobsModalBody = $('<div>');
            this.$jobsModalTitle = $('<div>').html('Remove Job?');

            var buttonList = [
                {
                    name : 'Cancel',
                    type : 'default',
                    callback : function(e, $prompt) {
                        $prompt.closePrompt();
                        this.removeId = null;
                    },
                },
                {
                    name : 'Delete Job',
                    type : 'danger',
                    callback : $.proxy(function(e, $prompt) {
                        if (this.removeId) {
                            this.deleteJob(this.removeId);
                        }
                        if (this.deleteCallback)
                            this.deleteCallback(true);
                        this.deleteCallback = null;
                        $prompt.closePrompt();
                    }, this)
                }
            ];
            this.$jobsModal = $('<div>').kbasePrompt({
                title : this.$jobsModalTitle,
                body : this.$jobsModalBody,
                controls : buttonList
            });

            this.addButton($refreshBtn);

            this.body().append(this.$jobsPanel)
                       .append(this.$loadingPanel)
                       .append(this.$errorPanel);

            if (this.options.autopopulate) {
                this.initJobStates();
                this.refresh();
            }


            return this;
        },

        setJobCounter: function(numJobs) {
            this.$jobCountBadge.empty();
            if (numJobs > 0)
                this.$jobCountBadge.append(numJobs);
        },

        /**
         * @method
         * Initializes the jobStates object that the panel knows about.
         * We treat the IPython.notebook.metadata.job_ids as a (more or less) read-only 
         * object for the purposes of loading and refreshing.
         * 
         * At load time, that gets adapted into the jobStates object, which is used to
         * keep track of the job state.
         */
        initJobStates: function() {
            if (this.jobStates === null)
                this.jobStates = {};
            if (IPython.notebook && IPython.notebook.metadata && IPython.notebook.metadata.job_ids) {
                // this is actually like: ['apps': [list of app jobs], 'methods':[list of method jobs]
                var jobIds = IPython.notebook.metadata.job_ids;
                for (var jobType in jobIds) {
                    if (!(jobIds[jobType] instanceof Array))
                        continue;
                    for (var i=0; i<jobIds[jobType].length; i++) {
                        var job = jobIds[jobType][i];
                        this.jobStates[job.id] = $.extend({}, job, { 'status' : null, '$elem' : null, 'id' : job.id });
                        this.source2Job[job.source] = job.id;
                    }
                }
            }
        },

        /**
         * @method
         * Opens a delete prompt for this job, with a 'Delete' and 'Cancel' button.
         * If the user clicks 'Cancel', then it shouldn't do anything besides close.
         * If the user clicks 'Delete', then it tries to delete the job through the backend, 
         * then clears the job info from the front end and refreshes.
         * 
         * Under the covers, since we're using kbasePrompt and those buttons are a little
         * disconnected from everything else, this sets widget variables 'removeId' and 'deleteCallback'.
         * The 'removeId' is the id of the job to delete, and 'deleteCallback' is invoked 
         * after the deletion is done.
         *
         * @param {object} jobId
         * @param {object} jobState
         * @param {function} callback - a callback to invoke when finished.
         */
        openJobDeletePrompt: function(jobId, jobState, callback) {
            if (!jobId)
                return;

            var removeText = "Deleting this job will remove it from your Narrative. Any already generated data will be retained. Continue?";
            var warningText = "";

            if (jobState) {
                jobState = jobState.toLowerCase();
                var jobState = jobState.toLowerCase();
                if (jobState === 'queued' || jobState === 'running' || jobState === 'in-progress') {
                    warningText = "This job is currently running on KBase servers! Removing it will attempt to stop the running job.";
                }
                else if (jobState === 'completed') {
                    warningText = "This job has completed running. You may safely remove it without affecting your Narrative.";
                }
            }
            this.$jobsModalBody.empty().append(warningText + '<br><br>' + removeText);
            this.$jobsModalTitle.empty().html('Remove Job?');
            this.removeId = jobId;

            this.deleteCallback = callback;
            this.$jobsModal.openPrompt();
        },

        /**
         * Attempts to delete a job in the backend (by making a kernel call - this lets the kernel decide
         * what kind of job it is and how to stop/delete it).
         * When it gets a response, it then clears the job from the Jobs list.
         */
        deleteJob: function(jobId, callback) {
            var deleteJobCmd = 'from biokbase.narrative.common.kbjob_manager import KBjobManager\n' +
                               'jm = KBjobManager()\n' +
                               'print jm.delete_jobs(["' + jobId + '"], as_json=True)\n';

            var callbacks = {
                'output' : $.proxy(function(msgType, content) {
                    var response = this.deleteResponse(msgType, content, jobId);
                    if (callback)
                        callback(response);
                }, this),
                'execute_reply' : $.proxy(function(content) { 
                    this.handleCallback('execute_reply', content); 
                }, this),
                'clear_output' : $.proxy(function(content) { 
                    this.handleCallback('clear_output', content); 
                }, this),
                'set_next_input' : $.proxy(function(content) { 
                    this.handleCallback('set_next_input', content); 
                }, this),
                'input_request' : $.proxy(function(content) { 
                    this.handleCallback('input_request', content); 
                }, this)
            };

            IPython.notebook.kernel.execute(deleteJobCmd, callbacks, {store_history: false, silent: true});
        },

        /**
         * @method
         * When we get the deletion response from the kernel, we should delete the job.
         * We should *probably* just delete the job anyway, whether there's an error or not.
         */
        deleteResponse: function(msgType, content, jobId) {
            if (msgType != 'stream') {
                console.error('An error occurred while trying to delete a job');
                this.refresh(false);
                return;
            }
            var result = content.data;
            try {
                result = JSON.parse(result);
            }
            catch(err) {
                // ignore and return. assume it failed.
                // I guess we don't really care if it fails, though, the user just wants that job to be outro'd.
                // Comment this out for now, until we make some sensible error popup or something.
                // return false;
            }

            // first, wipe the metadata
            var appIds = IPython.notebook.metadata.job_ids.apps;
            appIds = appIds.filter(function(val) { return val.id !== jobId });
            IPython.notebook.metadata.job_ids.apps = appIds;

            // ...and from the method list
            var methodIds = IPython.notebook.metadata.job_ids.methods;
            methodIds = methodIds.filter(function(val) { return val.id !== jobId });
            IPython.notebook.metadata.job_ids.methods = methodIds;

            // remove it from the 'cache' in this jobs panel
            delete this.source2Job[this.jobStates[jobId].source];
            delete this.jobStates[jobId];

            // nuke the removeId
            this.removeId = null;
            
            // save the narrative!
            IPython.notebook.save_checkpoint();


            this.refresh(false);
            return true;
        },

        /**
         * Shows a loading spinner or message on top of the panel.
         * @private
         */
        showMessage: function(message, loading) {
            this.$loadingPanel.find('#message').empty();
            if (message) 
                this.$loadingPanel.find('#message').html(message);
            if (loading)
                this.$loadingPanel.find('img').show();
            else
                this.$loadingPanel.find('img').hide();
            this.$jobsPanel.hide();
            this.$errorPanel.hide();
            this.$loadingPanel.show();
        },

        showLoadingMessage: function(message) {
            this.showMessage(message, true);
        },

        /**
         * Shows the main jobs panel, hiding all others.
         * @private
         */
        showJobsPanel: function() {
            this.$errorPanel.hide();
            this.$loadingPanel.hide();
            this.$jobsPanel.show();
        },

        /**
         * @method
         * Registers a job with the Narrative. This adds its job id and source of the job (the cell that started it) to 
         * the narrative metadata. It also starts caching the state internally to the jobs panel. Once all this is done,
         * so the user doesn't accidentally lose the job, it triggers a narrative save.
         */
        registerJob: function(jobInfo, isApp) {
            // Check to make sure the Narrative has been instantiated to begin with.
            if (!IPython || !IPython.notebook || !IPython.notebook.kernel || !IPython.notebook.metadata)
                return;

            // If the job ids hasn't been inited yet, or it was done in the old way (as an array) then do it.
            if (!IPython.notebook.metadata.job_ids || 
                Object.prototype.toString.call(IPython.notebook.metadata.job_ids) === '[object Array]') {
                IPython.notebook.metadata.job_ids = {
                    'methods' : [],
                    'apps' : []
                };
            }
            // Double-check that it has the right properties
            if (!IPython.notebook.metadata.job_ids['methods'])
                IPython.notebook.metadata.job_ids['methods'] = [];
            if (!IPython.notebook.metadata.job_ids['apps'])
                IPython.notebook.metadata.job_ids['apps'] = [];

            var type = isApp ? 'apps' : 'methods';
            IPython.notebook.metadata.job_ids[type].push(jobInfo);
            // put a stub in the job states
            this.jobStates[jobInfo.id] = $.extend({}, jobInfo, {'status' : null, '$elem' : 'null'});
            this.source2Job[jobInfo.source] = jobInfo.id;
            // save the narrative!
            IPython.notebook.save_checkpoint();

            this.refresh();
        },

        /*
         * For now, ':' is the delimiter.
         * Anything before ':' is the job type.
         */
        jobTypeFromId: function(jobId) {
            if (jobId.indexOf(':') === -1) 
                return 'ujs';
            else {
                var type = jobId.split(':')[0];
                return type.toLowerCase();
            }
        },

        /**
         * There are a few different status options that show a job is complete vs. 
         * incomplete. We mark ones as "running" for our purpose if they do not
         * have any of these statuses.
         * @method
         * @private
         */
        jobIsIncomplete: function(status) {
            if (!status)
                return true;

            status = status.toLowerCase();
            // if status matches any of the possible cases in this.completedStatus, 
            // return true
            for (var i=0; i<this.completedStatus.length; i++) {
                if (status.indexOf(this.completedStatus[i]) !== -1)
                    return false;
            }
            if (status === 'error')
                return false;
            return true;
        },

        /**
         * @method
         */
        refresh: function(hideLoadingMessage, initStates) {
            if (this.jobStates === null || initStates)
                this.initJobStates();

            // if there's no timer, set one up - this should only happen the first time.
            if (this.refreshTimer === null) {
                this.refreshTimer = setInterval(
                    $.proxy(function() { this.refresh(true, false); }, this),
                    this.refreshInterval
                );
            }

            // If none of the base IPython stuff shows up, then it's not inited yet.
            // Just return silently.
            if (!IPython || !IPython.notebook || !IPython.notebook.kernel || 
                !IPython.notebook.metadata)
                return;

            // If we don't have any job ids, or it's length is zero, just show a 
            // message and return.
            if (!IPython.notebook.metadata.job_ids || 
                IPython.notebook.metadata.job_ids.length === 0 ||
                Object.keys(this.jobStates).length === 0) {
                this.populateJobsPanel();
                return;
            }

            if (!hideLoadingMessage)
                this.showLoadingMessage('Loading running jobs...');

            // This contains all the job info like this:
            // { jobId: {spec: {}, state: {}}}
            var jobInfo = {};
            // This contains the list of lookup parameters for each job.
            // We pass back all specs/parameters so the back end can munge them into the right 
            // output structures.
            var jobParamList = [];

            for (var jobId in this.jobStates) {
                var jobState = this.jobStates[jobId];
                // if the job's incomplete, we have to go get it.
                var jobIncomplete = this.jobIsIncomplete(jobState.status);

                // The type dictates what cell it came from and how to deal with the inputs.
                var jobType = this.jobTypeFromId(jobId);
                var specInfo = null;
                var $sourceCell = $('#' + jobState.source);
                if ($sourceCell.length > 0) {  // if the source cell is there (kind of a jQuery trick).
                    // if it's an NJS job, then it's an App cell, so fetch all that info.
                    if (jobType === "njs") {
                        specInfo = $sourceCell.kbaseNarrativeAppCell('getSpecAndParameterInfo');
                        if (specInfo && jobIncomplete) {
                            jobParamList.push("['" + jobId + "', " +
                                              "'" + this.safeJSONStringify(specInfo.appSpec) + "', " +
                                              "'" + this.safeJSONStringify(specInfo.methodSpecs) + "', " +
                                              "'" + this.safeJSONStringify(specInfo.parameterValues) + "']");
                        }
                    }
                    // otherwise, it's a method cell, so fetch info that way.
                    else {
                        specInfo = $sourceCell.kbaseNarrativeMethodCell('getSpecAndParameterInfo');
                        if (jobIncomplete) {
                            if (specInfo) {
                                jobParamList.push("['" + jobId + "', " +
                                                  "'" + this.safeJSONStringify(specInfo.methodSpec) + "', " +
                                                  "'" + this.safeJSONStringify(specInfo.parameterValues) + "']");
                            }
                            else {
                                jobParamList.push("['" + jobId + "']");
                            }
                        }
                    }
                    jobInfo[jobId] = { 'spec': specInfo };
                }
                else
                    this.jobStates[jobId].status = 'error';
            }

            // console.log(['REFRESH: looking up ' + jobParamList.length]);
            // console.log(['REFRESH: jobstates:', this.jobStates]);

            var pollJobsCommand = 'from biokbase.narrative.common.kbjob_manager import KBjobManager\n' +
                                  'job_manager = KBjobManager()\n' +
                                  'print job_manager.poll_jobs([' + jobParamList + '], as_json=True)\n';
            var callbacks = {
                'output' : $.proxy(function(msgType, content) { 
                    this.parseKernelResponse(msgType, content, jobInfo); 
                }, this),
                'execute_reply' : $.proxy(function(content) { 
                    this.handleCallback('execute_reply', content); 
                }, this),
                'clear_output' : $.proxy(function(content) { 
                    this.handleCallback('clear_output', content); 
                }, this),
                'set_next_input' : $.proxy(function(content) { 
                    this.handleCallback('set_next_input', content); 
                }, this),
                'input_request' : $.proxy(function(content) { 
                    this.handleCallback('input_request', content); 
                }, this),
            };

            var msgid = IPython.notebook.kernel.execute(pollJobsCommand, callbacks, {silent: true, store_history: false});
        },

        /**
         * @method
         * convenience to stringify a structure while escaping everything that needs it.
         * @private
         */
        safeJSONStringify: function(method) {
            var esc = function(s) { 
                return s.replace(/'/g, "&apos;")
                        .replace(/"/g, "&quot;");
            };
            return JSON.stringify(method, function(key, value) {
                return (typeof(value) === 'string') ? esc(value) : value;
            });
        },

        /**
         * @method
         * Get the kernel response and render it if it's valid.
         */
        parseKernelResponse: function(msgType, content, jobInfo) {
            // if it's not a datastream, display some kind of error, and return.
            if (msgType != 'stream') {
                this.showError('Sorry, an error occurred while loading the job list.');
                return;
            }
            var buffer = content.data;
            if (buffer.length > 0) {
                var jobStatus = JSON.parse(buffer);
                this.populateJobsPanel(jobStatus, jobInfo);
            }
            this.$loadingPanel.hide();
            this.$jobsPanel.show();
        },

        /** 
         * @method
         * Generic callback handler for the IPython kernel.
         */
        handleCallback: function(call, content) {
            if (content.status === 'error') {
                this.showError(content);
            }
            else {
                // commented out for now
                // console.debug('kbaseJobManagerPanel.' + call);
                // console.debug(content);
            }
        },

        /**
         * @method
         * Here we go, the first part of the rendering routine.
         * @param {object} fetchedJobStatus - the results of the jobs looked up through the kernel. This has the job status objects from NJS, etc.
         * @param {object} jobInfo - the specs (and status) of ALL jobs, not just those looked up through the kernel. 
         * The specs and state are used to decorate both the job renderings and the cells with results, etc.
         * 
         * Here's the flow:
         * 1. Get a sorted list of *all* jobs from the this.jobStates buffer
         * 2. All of those are getting rendered one way or another. Iterate on through.
         * 3. When we get to one that has an update from the server, then we need to update this.jobStates, render that job info, and update the cell
         * (possibly).
         * 4. That's it. All should be refreshed! Update the DOM node that holds all job info.
         *
         * XXX - it would probably be faster to re-render all jobs in place iff they need it (e.g., probably just the time since start field).
         * But it's Friday night at 8:30 before the big build meeting, so that might not happen yet. In all reality, I have a hard time seeing a 
         * case where there's more than, say, 20 job elements at once in any given Narrative.
         * We should also expire jobs in a reasonable time, at least from the Narrative.
         */
        populateJobsPanel: function(fetchedJobStatus, jobInfo) {
            if (!this.jobStates || Object.keys(this.jobStates).length === 0) {
                this.showMessage('No running jobs!');
                this.setJobCounter(0);
                return;
            }

            // Instantiate a shiny new panel to hold job info.
            var $jobsList = $('<div>').addClass('kb-jobs-items');

            // If we don't have any running jobs, just leave a message.
            if (Object.keys(this.jobStates).length === 0) {
                $jobsList.append($('<div class="kb-data-loading">').append('No running jobs!'));
            }
            else {
                // sort our set of jobs.
                var sortedJobs = Object.keys(this.jobStates);
                sortedJobs.sort($.proxy(function(a, b) {
                    var aTime = this.jobStates[a].timestamp;
                    var bTime = this.jobStates[b].timestamp;
                    // if we have timestamps for both, compare them
                    if (aTime && bTime)
                        return (new Date(aTime) < new Date(bTime)) ? 1 : -1;
                    else if (aTime) // if we only have one for a, sort for a
                        return 1;
                    else            // if aTime is null, but bTime isn't, (OR they're both null), then put b first
                        return -1;
                }, this));

                var stillRunning = 0;
                for (var i=0; i<sortedJobs.length; i++) {
                    var jobId = sortedJobs[i];
                    var info = jobInfo[jobId];

                    // if the id shows up in the "render me!" list:
                    // only those we fetched might still be running.
                    if (fetchedJobStatus[jobId]) {
                        // update the state and cell
                        this.jobStates[jobId].status = fetchedJobStatus[jobId].job_state;
                        if (this.jobIsIncomplete(this.jobStates[jobId].status))
                            stillRunning++;
                        this.jobStates[jobId].state = fetchedJobStatus[jobId];
                        this.updateCell(jobId, jobInfo[jobId]);
                    }
                    // updating the given state first allows us to just pass the id and the status set to
                    // the renderer. If the status set doesn't exist (e.g. we didn't look it up in the 
                    // kernel), then that's just undefined and the renderer can deal.
                    $jobsList.append(this.renderJob(jobId, jobInfo[jobId]));
                }
                this.setJobCounter(stillRunning);
            }
            this.$jobsPanel.empty().append($jobsList);
        },

        renderJob: function(jobId, jobInfo) {
            var getStepSpec = function(id, spec) {
                for (var i=0; i<spec.steps.length; i++) {
                    if (id === spec.steps[i].step_id)
                        return spec.steps[i];
                }
                return null;
            };

            // get the state from this.jobStates[jobInfo.]
            var jobState = this.jobStates[jobId];


            /* Cases:
             * 1. have job, have info
             *    a. job has 'error' property
             *        - render as an error'd job!
             *        - include delete btn
             *    b. job looks normal, not complete
             *        - show status as usual
             *    c. job is completed
             *        - show delete btn
             * 2. have job, no info
             *    - probably an error - missing app cell or something
             *        - show an error, option to delete.
             * 3. have no job
             *    - just return null. nothing invokes this like that, anyway
             */
            var jobType = this.jobTypeFromId(jobId);

            var $jobDiv = $('<div>')
                          .addClass('kb-data-list-obj-row');
            // jobinfo: {
            //     state: { id, source, target, timestamp, $elem, status },
            //     spec: { appSpec?, methodSpec?, methodSpecs?, parameterValues }
            //     type=njs: appSpec, methodSpecs
            //     type=method: methodSpec
            // }
            var specType = null;
            switch(jobType) {
                case 'njs':
                    specType = 'appSpec';
                    break;
                case 'method':
                    specType = 'methodSpec';
                    break;
                default:
                    specType = 'methodSpec';
                    break;
            }

            // get the job's name from its spec
            var jobName = "Unknown " + ((jobType === 'njs') ? "App" : "Method");
            if (jobInfo && jobInfo.spec && jobInfo.spec[specType] && jobInfo.spec[specType].info)
                jobName = jobInfo.spec[specType].info.name;

            var $jobInfoDiv = $('<div class="kb-data-list-name">')
                               .append(jobName);
            var $jobControlDiv = $('<span class="pull-right">')
                                 .append(this.makeJobClearButton(jobId, jobState.status))
                                 .append('<br>')
                                 .append(this.makeScrollToButton(jobState.source));
            $jobInfoDiv.append($jobControlDiv)
                       .append($('<div style="font-size:75%">')
                               .append(jobId));

            var status = "Unknown";
            if (jobState)
                status = jobState.status.charAt(0).toUpperCase() + 
                         jobState.status.substring(1);
            var started = "Unknown";
            var position = null;
            var task = null;

            /* Lots of cases for status:
             * suspend, error, unknown, awe_error - do the usual blocked error thing.
             * deleted - treat job as deleted
             * not_found_error - job's not there, so say so.
             * unauthorized_error - not allowed to see it
             * network_error - a (hopefully transient) error response based on network issues. refreshing should fix it.
             * jobstate has step_errors - then at least one step has an error, so we should show them
             * otherwise, no errors, so render their status happily.
             */
            if (status === 'Suspend' || status === 'Error' || status === 'Unknown' || status === 'Awe_error') {
                status = this.makeJobErrorButton(jobId, jobInfo, 'Error');
                $jobDiv.addClass('kb-jobs-error');
            }
            else if (status === 'Deleted') {
                status = this.makeJobErrorButton(jobId, jobInfo, 'Deleted');
                $jobDiv.addClass('kb-jobs-error');                
            }
            else if (status === 'Not_found_error') {
                status = this.makeJobErrorButton(jobId, jobInfo, 'Job Not Found');
                $jobDiv.addClass('kb-jobs-error');
            }
            else if (status === 'Unauthorized_error') {
                status = this.makeJobErrorButton(jobId, jobInfo, 'Unauthorized');
                $jobDiv.addClass('kb-jobs-error');
            }
            else if (status === 'Network_error') {
                status = this.makeJobErrorButton(jobId, jobInfo, 'Network Error');
            }
            else if (jobState.state.step_errors && Object.keys(jobState.state.step_errors).length !== 0) {
                var $errBtn = this.makeJobErrorButton(jobId, jobInfo);
                status = $('<span>').append(status + ' ')
                                    .append($errBtn);
            }
            else {
                if (jobType === "njs" && jobState.state) {
                    var stepId = jobState.state.running_step_id;
                    if (stepId) {
                        var stepSpec = getStepSpec(stepId, jobInfo.spec.appSpec);
                        task = jobInfo.spec.methodSpecs[stepSpec.method_id].info.name;
                    }
                }
                if (jobState.state && jobState.state.position !== undefined && jobState.state.position !== null && jobState.state.position > 0)
                    position = jobState.state.position;
            }
            if (jobState.timestamp) {
                started = this.makePrettyTimestamp(jobState.timestamp);
            }
            var $infoTable = $('<table class="kb-jobs-info-table">')
                             .append(this.makeInfoRow('Status', status));
            if (task !== null)
                $infoTable.append(this.makeInfoRow('Task', task));
            if (position !== null)
                $infoTable.append(this.makeInfoRow('Queue Position', position));
            $infoTable.append(this.makeInfoRow('Started', started));

            $jobDiv.append($jobInfoDiv)
                   .append($infoTable);
            return $jobDiv;
        },

        /**
         * @method
         * Updates the status of the cell the given job is associated with. This figures out
         * which cell type it needs to talk to, then sends a message to that cell.
         * 'job' = the response from the server about the job. Contains info from the job service
         * 'jobInfo' = the info we know about the running job: its id, associated cell, etc.
         */
        updateCell: function(jobId, jobInfo) {
            var jobState = this.jobStates[jobId];
            var source = jobState.source;
            var jobType = this.jobTypeFromId(jobId);

            // console.log(['UPDATE_CELL', job, jobInfo]);
            var status = '';
            if (jobState.status)
                status = jobState.status.toLowerCase();
            
            // don't do anything if we don't know the source cell. it might have been deleted.
            if (!source)
                return;

            var $cell = $('#' + source);
            // don't do anything if we know what the source should be, but we can't find it.
            if (!$cell)
                return;

            // if it's running and an NJS job, then it's in an app cell
            if (jobState.state.running_step_id && jobType === 'njs') {
                $cell.kbaseNarrativeAppCell('setRunningStep', jobState.state.running_step_id);
            }
            // if it's a ujs or method job, then it's a method cell
            else if (jobType === 'ujs' || jobType === 'method') {
                // assume we have 'in-progress' or 'running' vs. 'complete' or 'done'
                var submitState = 'complete';
                if (status.indexOf('run') != -1 || status.indexOf('progress') != -1 || status.indexOf('started') != -1)
                    submitState = 'running';
                else if (status.indexOf('queue') != -1 || status.indexOf('submit') != -1)
                    submitState = 'submitted';
                $cell.kbaseNarrativeMethodCell('changeState', submitState);
            }
            // if we have outputs, those need to be passed along
            if (jobState.state.widget_outputs && Object.keys(jobState.state.widget_outputs).length > 0) {
                if (jobType === 'njs') {
                    for (var key in jobState.state.widget_outputs) {
                        if (jobState.state.widget_outputs.hasOwnProperty(key)) {
                            try {
                                $cell.kbaseNarrativeAppCell('setStepOutput', key, jobState.state.widget_outputs[key]);
                            }
                            catch (err) {
                                console.log(["ERROR'D APP OUTPUT", err]);
                            }
                        }
                    }
                }
                else {
                    try {
                        $cell.kbaseNarrativeMethodCell('setOutput', { 'cellId' : source, 'result' : jobState.state.widget_outputs });
                    }
                    catch (err) {
                        console.log(["ERROR'D METHOD OUTPUT", err]);
                    }
                }
            }
            // if it's an error, then we need to signal the cell
            if (status === "error" || (jobState.state.step_errors && Object.keys(jobState.state.step_errors).length !== 0)) {
                if (jobType === 'njs') {
                    $cell.kbaseNarrativeAppCell('setRunningState', 'error');
                }
                else {
                    $cell.kbaseNarrativeMethodCell('changeState', 'error');
                }
            }
            // ...and if it's done, we need to signal that, too. Note that it can be both (i.e. done with errors)
            if (status.indexOf('complete') !== -1 || status.indexOf('done') !== -1) {
                if (jobType === 'njs') {
                    $cell.kbaseNarrativeAppCell('setRunningState', 'complete');
                }
            }

            // other statuses - network_error, not_found_error, unauthorized_error, etc. - are ignored for now.
        },

        /**
         * @method
         * Dummy convenience method to make a little table row.
         */
        makeInfoRow: function(heading, info) {
            return $('<tr>').append($('<th>')
                                    .append(heading + ':'))
                            .append($('<td>')
                                    .append(info));
        },

        /**
         * @method
         * @private
         * Makes an error button for a job.
         * This invokes the JobPanel's popup error modal, so most of the logic here is figuring out what
         * should appear in that modal.
         * @param {object} jobStatus - the job status object 
         * @param {object} jobInfo - the job info object - main keys are 'state' and 'specs'
         * @param {string} btnText - the text of the button. If empty or null, the button just gets a /!\ icon.
         */
        makeJobErrorButton: function(jobId, jobInfo, btnText) {
            var jobState = this.jobStates[jobId];
            var removeText = "Deleting this job will remove it from your Narrative. Any generated data will be retained. Continue?";
            var headText = "An error has been detected in this job!";
            var errorText = "The KBase servers are reporting an error for this job:";
            var errorType = "Unknown";

            var $errBtn = $('<div>')
                          .addClass('btn btn-danger btn-xs kb-jobs-error-btn')
                          .append('<span class="fa fa-warning" style="color:white"></span>');
            if (btnText)
                $errBtn.append(' ' + btnText);
            $errBtn.click($.proxy(function(e) {
                this.removeId = jobId;
                this.$jobsModalTitle.html('Job Error');
                /* 1. jobState.source doesn't exist = not pointed at a cell
                 * 2. $('#jobState.source') doesn't exist = cell is missing
                 * 3. jobstate.state.error is a string.
                 * 4. jobstate.state is missing.
                 */
                if (!jobState || !jobState.source) {
                    errorText = "This job is not associated with a Running Cell.";
                    errorType = "Unknown Cell";                    
                }
                else if ($('#' + jobState.source).length === 0) {
                    errorText = "The App Cell associated with this job can no longer be found in your Narrative.";
                    errorType = "Missing Cell";
                }
                else if (btnText === 'Deleted') {
                    errorText = "This job has already been deleted from KBase Servers.";
                    errorType = "Invalid Job";
                }
                else if (btnText === 'Job Not Found') {
                    errorText = "This job was not found to be running on KBase Servers. It may have been deleted, or may not be started yet.";
                    errorType = "Invalid Job";
                }
                else if (btnText === 'Unauthorized') {
                    errorText = "You do not have permission to view information about this job.";
                    errorType = "Unauthorized";
                }
                else if (btnText === 'Network Error') {
                    errorText = "An error occurred while looking up job information. Please refresh the jobs panel to try again.";
                    errorType = "Network";
                }
                else if (jobState.state.error) {
                    errorText = $('<div class="kb-jobs-error-modal">').append(jobState.state.error);
                    errorType = "Runtime";
                    if (jobState.state.error === 'awe_error')
                        errorType = 'AWE Error';                    
                }

                /* error types:
                 * 1. jobState.state.error is a real string. Just cough it up.
                 * 2. jobState.state is missing
                 * 3. jobInfo is partly missing (e.g., lost the cell that it should point to)
                 * 4. jobInfo is still partly missing (e.g., dont' know what cell it should point to)
                 */
                else if (Object.keys(jobState.state.step_errors).length !== 0) {
                    errorType = "Runtime";
                    errorText = $('<div class="kb-jobs-error-modal">');
                    for (var stepId in jobState.state.step_errors) {
                        if (jobState.state.step_errors.hasOwnProperty(stepId)) {
                            // contort that into the method name
                            // gotta search for it in the spec for the method id, first.
                            var methodName = "Unknown method: " + stepId;
                            if (this.jobTypeFromId(jobId) === "njs") {
                                var methodId = null;
                                for (var i=0; i<jobInfo.spec.appSpec.steps.length; i++) {
                                    if (stepId === jobInfo.spec.appSpec.steps[i].step_id) {
                                        methodId = jobInfo.spec.appSpec.steps[i].method_id;
                                        break;
                                    }
                                }
                                if (methodId)
                                    methodName = jobInfo.spec.methodSpecs[methodId].info.name;
                            }
                            else {
                                methodName = jobInfo.spec.methodSpec.info.name;
                            }
                            errorText.append($('<b>').append('In ' + methodName + ':<br>'))
                                     .append(jobState.state.step_errors[stepId] + '<br><br>');
                        }
                    }
                }
 
                var $errorTable = $('<table class="table table-bordered">')
                                  .append(this.makeInfoRow('Id', jobId))
                                  .append(this.makeInfoRow('Type', errorType))
                                  .append(this.makeInfoRow('Error', errorText));

                this.$jobsModalBody.empty();
                this.$jobsModalBody.append($('<div>').append(headText))
                                   .append($errorTable);
                if (jobState.state.traceback) {
                    var $tb = $('<div>');
                    $tb.kbaseAccordion({
                        elements: [{
                            title: 'Detailed Error Information',
                            body: $('<pre style="max-height:300px; overflow-y: auto">').append(jobState.state.traceback)
                        }]
                    });
                    this.$jobsModalBody.append($tb);
                }

                this.$jobsModalBody.append($('<div>').append(removeText));
                this.$jobsModal.openPrompt();
            }, this));
            return $errBtn;
        },


        /**
         * @method
         * @private
         * Makes a little 'x' button to delete a job.
         * @param {string} jobId
         * @param {string} jobStatus 
         */
        makeJobClearButton: function(jobId, jobStatus) {
            return $('<span data-toggle="tooltip" title="Remove Job" data-placement="left">')
                   .addClass('btn-xs kb-data-list-more-btn pull-right fa fa-times')
                   .css({'cursor':'pointer'})
                   .click($.proxy(function() {
                       this.openJobDeletePrompt(jobId, jobStatus);
                   }, this))
                   .tooltip();
        },

        /**
         * @method
         * @private
         * Makes a little arrow button to scroll from a job to the associated app/method cell
         */
        makeScrollToButton: function(sourceId) {
            return $('<span data-toggle="tooltip" title="Scroll To App" data-placement="left">')
                   .addClass('btn-xs kb-data-list-more-btn pull-right fa fa-location-arrow')
                   .css({'cursor':'pointer'})
                   .click(function(e) {
                       if (sourceId) {
                           $('html, body').animate({ scrollTop: $('#' + sourceId).offset().top-85 }, 1000);
                           $('#' + sourceId).click();
                       }
                   })
                   .tooltip();
        },

        /**
         * @method makePrettyTimestamp
         * Makes a div containing the 'started time' in units of time ago, with a Bootstrap 3 tooltip
         * that gives the exact time.
         *
         * Note that this tooltip needs to be activated with the $().tooltip() method before it'll function.
         *
         * @param timestamp the timestamp to calculate this div around. Should be in a Date.parse() parseable format.
         * @param suffix an optional suffix for the time element. e.g. "ago" or "from now".
         * @return a div element with the timestamp calculated to be in terms of how long ago, with a tooltip containing the exact time.
         * @private
         */
        makePrettyTimestamp: function(timestamp, suffix) {
            var d = this.parseDate(timestamp);

            var parsedTime = this.parseTimestamp(null, d);
            var timediff = this.calcTimeDifference(null, d);
            var timeMillis = d ? d.getTime() : "";

            var timeHtml = '<div href="#" data-toggle="tooltip" title="' + parsedTime + '" millis="' + timeMillis + '" >' + timediff + '</div>';
            return timeHtml;
        },

        /**
         * Shows an error text message on top of the panel. All other pieces are hidden.
         * @param {string} error - the text of the error message
         * @private
         */
        showError: function(error) {
            var $errorHeader = $('<div>')
                               .addClass('alert alert-danger')
                               .append('<b>Sorry, an error occurred while loading KBase jobs.</b><br>Please contact the KBase team at <a href="mailto:help@kbase.us?subject=Narrative%20jobs20loading%20error">help@kbase.us</a> with the information below.');

            this.$errorPanel.empty();
            this.$errorPanel.append($errorHeader);

            // If it's a string, just dump the string.
            if (typeof error === 'string') {
                this.$errorPanel.append($('<div>').append(error));
            }

            // If it's an object, expect an error object as returned by the execute_reply callback from the IPython kernel.
            else if (typeof error === 'object') {
                var $details = $('<div>');
                $details.append($('<div>').append('<b>Type:</b> ' + error.ename))
                        .append($('<div>').append('<b>Value:</b> ' + error.evalue));

                var $tracebackDiv = $('<div>')
                                 .addClass('kb-function-error-traceback');
                for (var i=0; i<error.traceback.length; i++) {
                    error.traceback[i] = error.traceback[i].replace(/\[\d(;\d+)?m/g, '');
                    $tracebackDiv.append(error.traceback[i] + "<br>");
                }

                var $tracebackPanel = $('<div>');
                var tracebackAccordion = [{'title' : 'Traceback', 'body' : $tracebackDiv}];

                this.$errorPanel.append($details)
                                .append($tracebackPanel);
                $tracebackPanel.kbaseAccordion({ elements : tracebackAccordion });
            }
            if (this.refreshTimer)
                clearTimeout(this.refreshTimer);

            this.$jobsPanel.hide();
            this.$loadingPanel.hide();
            this.$errorPanel.show();
        },

        /**
         * @method parseTimestamp
         * Parses the user_and_job_state timestamp and returns it as a user-
         * readable string in the UTC time.
         *
         * This assumes that the timestamp string is in the following format:
         * 
         * YYYY-MM-DDThh:mm:ssZ, where Z is the difference
         * in time to UTC in the format +/-HHMM, eg:
         *   2012-12-17T23:24:06-0500 (EST time)
         *   2013-04-03T08:56:32+0000 (UTC time)
         * 
         * If the string is not in that format, this method returns the unchanged
         * timestamp.
         *        
         * @param {String} timestamp - the timestamp string returned by the service
         * @returns {String} a parsed timestamp in the format "YYYY-MM-DD HH:MM:SS" in the browser's local time.
         * @private
         */
        parseTimestamp: function(timestamp, dateObj) {
            var d = null;
            if (timestamp)
                d = this.parseDate(timestamp);
            else if(dateObj)
                d = dateObj;

            if (d === null)
                return timestamp;

            var addLeadingZeroes = function(value) {
                value = String(value);
                if (value.length === 1)
                    return '0' + value;
                return value;
            };

            return d.getFullYear() + '-' + 
                   addLeadingZeroes((d.getMonth() + 1)) + '-' + 
                   addLeadingZeroes(d.getDate()) + ' ' + 
                   addLeadingZeroes(d.getHours()) + ':' + 
                   addLeadingZeroes(d.getMinutes()) + ':' + 
                   addLeadingZeroes(d.getSeconds());
        },

        /**
         * @method calcTimeDifference
         * From two timestamps (i.e. Date.parse() parseable), calculate the
         * time difference and return it as a human readable string.
         *
         * @param {String} time - the timestamp to calculate a difference from
         * @returns {String} - a string representing the time difference between the two parameter strings
         */
        calcTimeDifference: function(timestamp, dateObj) {
            var now = new Date();
            var time = null;

            if (timestamp)
                time = this.parseDate(timestamp);
            else if(dateObj)
                time = dateObj;

            if (time === null)
                return 'Unknown time';

            // start with seconds
            var timeRem = Math.abs((time - now) / 1000 );
            var unit = ' sec';

            // if > 60 seconds, go to minutes.
            if (timeRem >= 60) {
                timeRem /= 60;
                unit = ' min';

                // if > 60 minutes, go to hours.
                if (timeRem >= 60) {
                    timeRem /= 60;
                    unit = ' hrs';

                    // if > 24 hours, go to days
                    if (timeRem >= 24) {
                        timeRem /= 24;
                        unit = ' days';
                    }

                    // now we're in days. if > 364.25, go to years)
                    if (timeRem >= 364.25) {
                        timeRem /= 364.25;
                        unit = ' yrs';

                        // now we're in years. just for fun, if we're over a century, do that too.
                        if (timeRem >= 100) {
                            timeRem /= 100;
                            unit = ' centuries';

                            // ok, fine, i'll do millennia, too.
                            if (timeRem >= 10) {
                                timeRem /= 10;
                                unit = ' millennia';
                            }
                        }
                    }
                }
            }


            var timediff = '~' + timeRem.toFixed(1) + unit;
            if (time > now)
                timediff += ' from now';
            else
                timediff += ' ago';

            return timediff;
        },

        /**
         * VERY simple date parser.
         * Returns a valid Date object if that time stamp's real. 
         * Returns null otherwise.
         * @param {String} time - the timestamp to convert to a Date
         * @returns {Object} - a Date object or null if the timestamp's invalid.
         */
        parseDate: function(time) {
            var d = new Date(time);
            // if that doesn't work, then split it apart.
            if (Object.prototype.toString.call(d) !== '[object Date]') {
                var t = time.split(/[^0-9]/);
                while (t.length < 7) {
                    t.append(0);
                }
                d = new Date(t[0], t[1]-1, t[2], t[3], t[4], t[5], t[6]);
                if (Object.prototype.toString.call(d) === '[object Date]') {
                    if (isNaN(d.getTime())) {
                        return null;
                    }
                    else {
                        d.setFullYear(t[0]);
                        return d;
                    }
                }
                return null;
            }
            else {
                return d;
            }
        },
    });
})( jQuery );
/**
 * Widget for viewing and modifying narrative share settings
 * @author Michael Sneddon <mwsneddon@lbl.gov>
 * @public
 */
(function( $, undefined ) {

    $.KBWidget({
        name: "kbaseNarrativeSharePanel", 
        parent: "kbaseAuthenticatedWidget",
        version: "1.0.0",
        
        options: {
            ws_url: "https://kbase.us/services/ws",
            user_profile_url: "https://kbase.us/services/user_profile/rpc",
            user_page_link:"/functional-site/#/people/",
            loadingImage: 'static/kbase/images/ajax-loader.gif',
            ws_name_or_id: null,
            max_name_length: 35,
            max_list_height: '250px',
            add_user_input_width: '200px'
        },
        
        ws:null, // workspace client
        user_profile:null, //user_profile client
        
        $mainPanel:null,
        $notificationPanel:null,
        
        init: function(options) {
            this._super(options);
            
            // always overwrite based on kbconfig
            if (window.kbconfig && window.kbconfig.urls) {
                this.options.ws_url = window.kbconfig.urls.workspace;
                this.options.user_profile_url = window.kbconfig.urls.user_profile;
            }
            
            this.$notificationPanel = $('<div>');
            this.$elem.append(this.$notificationPanel);
        
            this.$mainPanel = $('<div>');
            this.$elem.append(this.$mainPanel);
            this.showWorking("loading narrative information");
            this.getInfoAndRender();
            
            if (!this.options.ws_name_or_id) {
                $(document).on(
                    'setWorkspaceName.Narrative', $.proxy(function(e, info) {
                        this.options.ws_name_or_id = info.wsId;
                        this.refresh();
                    }, this)
                );
            }
            
            return this;
        },

        my_user_id: null,
        
        loggedInCallback: function(event, auth) {
            this.ws = new Workspace(this.options.ws_url, auth);
            this.user_profile = new UserProfile(this.options.user_profile_url, auth);
            this.my_user_id = auth.user_id;
            this.refresh();
            return this;
        },
        loggedOutCallback: function(event, auth) {
            this.ws = null;
            this.user_profile = null;
            this.my_user_id = null;
            this.refresh();
            return this;
        },
        
        
        ws_info: null,
        ws_permissions: null,
        user_data: {},
        
        all_users: null,
        
        getInfoAndRender: function() {
            var self = this;
            if (self.ws && self.options.ws_name_or_id) {
                var wsIdentity = {};
                if (this.options.ws_name_or_id) {
                    if(/^[1-9]\d*$/.test(this.options.ws_name_or_id)) {
                        wsIdentity.id = parseInt(this.options.ws_name_or_id);
                    } else {
                        wsIdentity.workspace = this.options.ws_name_or_id;
                    }
                }
                // first get ws info
                self.ws.get_workspace_info(wsIdentity,
                    function(info) {
                        self.ws_info = info;
                        self.ws.get_permissions(wsIdentity,
                            function(perm) {
                                self.ws_permissions = [];
                                self.user_data = {};
                                
                                var usernameList = [self.my_user_id];
                                var usernames = self.my_user_id + ",";
                                for(var u in perm) {
                                    if (perm.hasOwnProperty(u)) {
                                        if (u!=='*') {
                                            self.ws_permissions.push([u,perm[u]]);
                                            usernames += u+',';
                                            usernameList.push(u);
                                        }
                                    }
                                }
                                self.user_profile.lookup_globus_user(usernameList,
                                    function(data) {
                                        self.user_data = data;
                                        self.render();
                                    },
                                    function(error) {
                                        console.error(error);
                                        self.render();
                                    });
                            },
                            function(error){self.reportError(error);}
                            );
                    },
                    function(error){self.reportError(error);});
            }
        },
        /*

WORKSPACE INFO
0: ws_id id
1: ws_name workspace
2: username owner
3: timestamp moddate,
4: int object
5: permission user_permission
6: permission globalread,
7: lock_status lockstat
8: usermeta metadata

 
*/
        isPrivate:true, // set if this ws is private or public
        render: function() {
            var self = this;
            if (self.ws_info && self.ws_permissions) {
                self.$mainPanel.empty();
            
                var globalReadStatus = '<strong><span class="fa fa-lock" style="margin-right:10px"></span>Private</strong>';
                var globalReadClass = "alert alert-info";
                self.isPrivate = true;
                if (self.ws_info[6]==='r') {
                    self.isPrivate = false;
                    globalReadClass = "alert alert-success";
                    globalReadStatus = '<strong><span class="fa fa-unlock" style="margin-right:10px"></span>Public</strong>';
                }
            
                var $topDiv = $('<div>')
                        .addClass(globalReadClass)
                        .css({'text-align':'center','padding':'10px','margin':'5px'})
                        .append(globalReadStatus);
                self.$mainPanel.append($topDiv);
                
                var $togglePublicPrivate = $('<div>').css({'text-align':'center'}).hide();
                if (self.isPrivate) {
                    $togglePublicPrivate.append($('<a>').append('make public?')
                        .on('click',function() {
                            self.showWorking("updating permissions...");
                            self.ws.set_global_permission(
                                {id: self.ws_info[0], new_permission:'r' },
                                function() { self.refresh();},
                                function(error) {
                                    console.log(error);
                                    self.refresh();
                                }
                            );
                        }));
                } else {
                    $togglePublicPrivate.append($('<a>').append('make private?')
                        .on('click',function() {
                            self.showWorking("updating permissions...");
                            self.ws.set_global_permission(
                                {id: self.ws_info[0], new_permission:'n' },
                                function() { self.refresh();},
                                function(error){self.reportError(error); self.refresh(); }
                            );
                        }));
                }
                self.$mainPanel.append($togglePublicPrivate);
                
                var $meDiv = $('<div>').css({'margin':'5px','margin-top':'20px'});
                var status = "You do not have access to this Narrative.";
                var isOwner = false;
                if (self.ws_info[2]===self.my_user_id) {
                    status="You own this Narrative. You can edit it and share it with other users.";
                    isOwner = true;
                    $togglePublicPrivate.show();
                } else if (self.ws_info[5]==='a') {
                    status="You can edit and share this Narrative.";
                    isOwner = true;  // not really, but set this so we show sharing controls
                    $togglePublicPrivate.show();
                } else if (self.ws_info[5]==='w') {
                    status="You can edit this Narrative, but you cannot share it.";
                } else if (self.ws_info[5]==='r' || self.ws_info[6]==='r') { // either you can read it, or it is globally readable
                    status="You can view this Narrative, but you cannot edit or share it.";
                } 
                var display = self.renderUserIconAndName(self.my_user_id,null,true);
                $meDiv.append(display[0],display[1]);
                $meDiv.append($('<div>').css({'margin-top':'10px'}).append(status));
                self.$mainPanel.append($meDiv);
            
                if (isOwner) {
                    var $addUsersDiv = $('<div>').css({'margin-top':'10px'});
                    var $input = $('<input>').attr('type','text').css({'width':self.options.add_user_input_width});
                    
                    var $addAction =
                        $('<div>').addClass('btn-group')
                            .append($('<button>').addClass('btn btn-default dropdown-toggle ')
                                .attr('type','button').attr('data-toggle','dropdown').attr('aria-expanded','false')
                                .append('<span class="fa fa-caret-down"></span>'))
                            .append($('<ul>').addClass('dropdown-menu pull-right').attr('role','menu')
                                    // TODO: pull-right is deprecated, use dropdown-menu-right when bootstrap updates
                                    .append($('<li>').append(
                                        $('<a>').append('Add with view privileges')
                                            .on('click',function() {
                                                var data = $input.select2("data");
                                                self.showWorking("updating permissions...");
                                                var users = [];
                                                for(var i=0; i<data.length; i++) {
                                                    if(data[i].id.trim()!=='') {
                                                        users.push(data[i].id.trim());
                                                    }
                                                }
                                                self.ws.set_permissions(
                                                    {id: self.ws_info[0], new_permission:'r', users:users },
                                                    function() { self.refresh();},
                                                    function(error){self.reportError(error); self.refresh(); }
                                                );
                                            })))
                                    .append($('<li>').append($('<a>').append('Add with edit privileges')
                                            .on('click',function() {
                                                var data = $input.select2("data");
                                                self.showWorking("updating permissions...");
                                                var users = [];
                                                for(var i=0; i<data.length; i++) {
                                                    if(data[i].id.trim()!=='') {
                                                        users.push(data[i].id.trim());
                                                    }
                                                }
                                                self.ws.set_permissions(
                                                    {id: self.ws_info[0], new_permission:'w', users:users },
                                                    function() { self.refresh();},
                                                    function(error){self.reportError(error); self.refresh(); }
                                                );
                                            })))
                                    .append($('<li>').append($('<a>').append('Add with edit/share privileges')
                                            .on('click',function() {
                                                var data = $input.select2("data");
                                                self.showWorking("updating permissions...");
                                                var users = [];
                                                for(var i=0; i<data.length; i++) {
                                                    if(data[i].id.trim()!=='') {
                                                        users.push(data[i].id.trim());
                                                    }
                                                }
                                                self.ws.set_permissions(
                                                    {id: self.ws_info[0], new_permission:'a', users:users },
                                                    function() { self.refresh();},
                                                    function(error){self.reportError(error); self.refresh(); }
                                                );
                                            }))));
                    
                    $addUsersDiv.append(
                        $('<table>').css({'width':'100%'})
                            .append($('<tr>')
                                .append($('<td>').append($input))
                                .append($('<td>').append($addAction))));
                    
                    self.setupSelect2($input,'share with...');
                    self.$mainPanel.append($addUsersDiv);
                }
            
            
            
                var $othersDiv = $('<div>').css({
                        'margin-top':'15px',
                        'max-height':self.options.max_list_height,
                        'overflow-y':'auto',
                        'overflow-x':'hidden'
                        });
                var $tbl = $('<table>');
                $othersDiv.append($tbl);
                
                // sort
                self.ws_permissions.sort(function(a,b) {
                    if (a[1]!==b[1]) { // based on privilege first
                        var aLevel = 0; var bLevel = 0;
                        if(a[1]==='a') { aLevel=1; }
                        else if(a[1]==='w') { aLevel=2; }
                        else if(a[1]==='r') { aLevel=3; }
                        if(b[1]==='a') { bLevel=1; }
                        else if(b[1]==='w') { bLevel=2; }
                        else if(b[1]==='r') { bLevel=3; }
                        if(aLevel<bLevel) return -1;
                        if(aLevel>bLevel) return 1;
                    } // then on user name
                    if(a[0]<b[0]) return -1;
                    if(a[0]>b[0]) return 1;
                    return 0;
                });
                
                // show all other users
                for (var i=0; i<self.ws_permissions.length; i++) {
                    if (self.ws_permissions[i][0] !== self.my_user_id && self.ws_permissions[i][0] !== '*') {
                        var $select;
                        if (isOwner) {
                            var thisUser = self.ws_permissions[i][0];
                            // note that we can simply add a space since usernames cannot have spaces
                            $select = $('<select>').addClass('form-control kb-share-user-permissions-dropdown')
                                .append($('<option>').val(thisUser+' ---r').append('can view'))
                                .append($('<option>').val(thisUser+' ---w').append('can edit'))
                                .append($('<option>').val(thisUser+' ---a').append('can edit/share'))
                                .append($('<option>').val(thisUser+' ---n').append('remove access'))
                                .val(thisUser+' ---'+self.ws_permissions[i][1])
                                .on('change', function() {
                                    self.showWorking("updating permissions...");
                                    var tokens = $(this).val().split(' ---');
                                    self.ws.set_permissions(
                                        {
                                            id: self.ws_info[0],
                                            new_permission: tokens[1],
                                            users: [tokens[0]]
                                        },
                                        function () {
                                            self.refresh();
                                        },
                                        function(error){self.reportError(error); self.refresh(); }
                                    );
                                    
                                });
                        } else {
                            $select = $('<div>').addClass('form-control kb-share-user-permissions-dropdown');
                            if (self.ws_permissions[i][1]==='r') { $select.append('can view'); }
                            if (self.ws_permissions[i][1]==='w') { $select.append('can edit'); }
                            if (self.ws_permissions[i][1]==='a') { $select.append('can edit/share'); }
                        }
                        var user_display = self.renderUserIconAndName(self.ws_permissions[i][0],null,true);
                        $tbl.append(
                            $('<tr>')
                                .append($('<td>')
                                        .append(user_display[0]))
                                .append($('<td>').css({'padding':'4px','padding-top':'6px'})
                                        .append(user_display[1]).append($select)));
                    }
                }
                self.$mainPanel.append($othersDiv);
            }
        },
        
        
        /* private method - note: if placeholder is empty, then users cannot cancel a selection*/
        setupSelect2: function ($input, placeholder) {
            var self = this;
            var noMatchesFoundStr = "Search by Name or Username";//"no users found";
            $input.select2({
                matcher: self.select2Matcher,
                formatNoMatches: noMatchesFoundStr,
                placeholder:placeholder,
                allowClear: true,
                multiple: true,
                query: function (query) {
                    
                    var term = query.term.trim();
                    var results = [];
                    
                    if (term.length>=2) {
                        self.user_profile.filter_users({filter:term},
                            function(users) {
                                if (users.length>0) {
                                    for (var k=0; k<users.length; k++) {
                                        results.push({id:users[k].username, text:users[k].realname, found:true});
                                    }
                                    query.callback({results:results});
                                } else {
                                    // no matches in our profile, see if there was a globus match...
                                    term = term.toLowerCase();
                                    if(!/[^a-z0-9]/.test(term) ) {
                                        self.user_profile.lookup_globus_user([term],
                                            function(data) {
                                                if (data.hasOwnProperty(term)) {
                                                    results.push({id:term, text:data[term].fullName, found:false});
                                                } else {
                                                    results.push({id:term, text:term, found:false});
                                                }
                                                query.callback({results:results});
                                            },
                                            function(error) {
                                                // something went really wrong
                                                console.error(error);
                                                self.render();
                                                results.push({id:term, text:term, found:false});
                                                query.callback({results:results});
                                            });
                                    } else {
                                        results.push({id:term, text:term, found:false});
                                        query.callback({results:results});
                                    }
                                }
                            },
                            function(error) {
                                results.push({id:term,text:term, found:false});
                                console.error(error);
                                query.callback({results:results}); 
                            });
                    } else {
                       query.callback({results:results}); 
                    }
                },
                
                formatSelection: function(object, container) {
                    if (object.found) {
                        var toShow = self.renderUserIconAndName(object.id, object.text);
                        return $('<div>').append(toShow[0]).append(toShow[1].css({'white-space':'normal'})).html(); // wrapped in a div that we drop
                    }
                    return "<b>"+object.text+"</b> (not found)";
                },
                formatResult: function(object, container, query) {
                    if (object.found) {
                        var toShow = self.renderUserIconAndName(object.id, object.text);
                        // hack on a hack on a hack!
                        return $('<div>').append(toShow[0]).append(toShow[1].html()).html(); // wrapped in a div that we drop
                    }
                    return "<b>"+object.text+"</b> (not found)";
                }
            });
        },
        
        showWorking: function(message) {
            this.$mainPanel.empty();
            this.$mainPanel.append('<br><br><div style="text-align:center"><img src="' + this.options.loadingImage
                                   + '"><br>' + message + '</div>');
        },
        
        reportError: function(error) {
            console.error(error);
            this.$notificationPanel.append(
                $('<div>').addClass('alert alert-danger alert-dismissible').attr('role','alert')
                    .append('<button type="button" class="close" data-dismiss="alert"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>')
                    .append('<strong>Error: </strong> '+error.error.message)
            );
        },
        
        refresh: function() {
            this.getInfoAndRender();    
        },
        
        colors : [
            '#F44336', //red
            '#E91E63', //pink
            '#9C27B0', //purple
            '#673AB7', //deep purple
            '#3F51B5', //indigo
            '#2196F3', //blue
            '#03A9F4', //light blue
            '#00BCD4', //cyan
            '#009688', //teal
            '#4CAF50', //green
            '#8BC34A', //lime green
            '#CDDC39', //lime
            '#FFEB3B', //yellow
            '#FFC107', //amber
            '#FF9800', //orange
            '#FF5722', //deep orange
            '#795548', //brown
            '#9E9E9E', //grey
            '#607D8B'  //blue grey
        ],
        
        renderUserIconAndName: function(username, realName, turnOnLink) {
            var code = 0;
            for(var i=0; i<username.length; i++) {
                code += username.charCodeAt(i);
            }
            var userColor = this.colors[ code % this.colors.length ];
            var $span =  $("<span>").addClass("fa fa-user").css({'color':userColor});
            
            var userString = username;
            if (username === this.my_user_id) {
                userString = " Me ("+username+")";
            } else if (realName) {
                userString = " "+realName+" ("+username+")";
            } else if (this.user_data[username]) {
                userString = " "+this.user_data[username].fullName+" ("+username+")";
            }
            
            var shortName = userString; var isShortened=false;
            if (userString.length>this.options.max_name_length) {
                shortName = shortName.substring(0,this.options.max_name_length-3)+'...';
                isShortened=true;
            }
            var $name =  $("<span>").css({'color':userColor, 'white-space':'nowrap'}).append(shortName);
            if (isShortened) { $name.tooltip({title:userString, placement:'bottom'}); }
            
            if (turnOnLink) {
                $name =  $('<a href="'+this.options.user_page_link+username+'" target="_blank">').append(
                            $("<span>").css({'color':userColor, 'white-space':'nowrap'}).append(shortName));
            }
            return [$span,$name];
        }
        
    });

})( jQuery );

/**
 * Top-level 'widget' for the workspace interaction with the KBase narrative.
 *
 * The widget lists the objects in the workspace and include a search field
 * to filter the list, as well as a button to 'Add' new items from sources
 * like the CDS and local files.
 *
 * Options:
 *    loadingImage - an image to show in the middle of the widget while loading data
 *    tableElem - HTML element container for the data table
 *    controlsElem - HTML element container for the controls (search/add)
 *
 * Triggers events:
 * updateData.Narrative - when any externally represented data should be updated.
 *
 * @author Bill Riehl <wjriehl@lbl.gov>
 * @author Dan Gunter <dkgunter@lbl.gov>
 * @public
 */

(function( $, undefined ) {
    $.KBWidget({
        name: 'kbaseNarrativeWorkspace',
        parent: 'kbaseWidget',
        version: '1.0.0',
        options: {
            loadingImage: 'static/kbase/images/ajax-loader.gif',
            tableElem: null,
            controlsElem: null,
            ws_id: null,
            methodStoreURL: 'https://kbase.us/services/narrative_method_store',
        },
        ws_client: null,
        ws_id: null,
        defaultOutputWidget: "kbaseDefaultNarrativeOutput",
        defaultInputWidget: "kbaseDefaultNarrativeInput",
        errorWidget: "kbaseNarrativeError",
        connectable: {},

        inputsRendered: false,
        maxSavedStates: 2,      // limit the states saved to 2 for now.
        nextOutputCellId: '',

        // constant strings.
        KB_CELL: 'kb-cell',
        KB_TYPE: 'type',
        KB_APP_CELL: 'kb_app',
        KB_FUNCTION_CELL: 'function_input',
        KB_OUTPUT_CELL: 'function_output',
        KB_ERROR_CELL: 'kb_error',
        KB_CODE_CELL: 'kb_code',
        KB_STATE: 'widget_state',

        curCell: null,

        // set up as a hash for quickie lookup time!
        ignoredDataTypes : {
            'string' : 1,
            'unicode' : 1,
            'numeric' : 1,
            'integer' : 1,
            'list' : 1,
            'a number' : 1
        },

        init: function(options) {
            this._super(options);
            this.ws_id = this.options.ws_id;

            if (window.kbconfig && window.kbconfig.urls) {
                this.options.methodStoreURL = window.kbconfig.urls.narrative_method_store;
            }
            this.methClient = new NarrativeMethodStore(this.options.methodStoreURL);

            // Whenever the notebook gets loaded, it should rebind things.
            // This *should* only happen once, but I'm putting it here anyway.
            $([IPython.events]).on('notebook_loaded.Notebook',
                $.proxy(function() {
                    this.rebindActionButtons();
                    this.hideGeneratedCodeCells();
                }, this)
            );

            $(document).on('workspaceUpdated.Narrative',
                $.proxy(function(e, ws_id) {
                    this.ws_id = ws_id;
                },
                this)
            );

            $(document).on('dataUpdated.Narrative',
                $.proxy(function(event) {
                    if (IPython && IPython.notebook) {
                        // XXX: This is a hell of a hack. I hate
                        // using the 'first time' bit like this,
                        // but without some heavy rewiring, it's difficult
                        // to track when some event occurred.
                        // So, dirty bit it is.
                        this.refreshFunctionInputs(!this.inputsRendered);
                        if (!this.inputsRendered) {
                            this.loadAllRecentCellStates();
                            this.trigger('refreshJobs.Narrative');
                        }

                        this.inputsRendered = true;
                    }
                },
                this)
            );

            $(document).on('narrativeDataQuery.Narrative',
                $.proxy(function(e, callback) {
                    var objList = this.getNarrativeDependencies();
                    if (callback) {
                        callback(objList);
                    }
                },
                this)
            );

            // When a user clicks on a function, this event gets fired with
            // method information. This builds a function cell out of that method
            // and inserts it in the right place.
            /** DEPRECATED **
             * use methodClicked.Narrative or appClicked.Narrative instead *
             */
            // $(document).on('function_clicked.Narrative',
            //     $.proxy(function(event, method) {
            //         this.buildFunctionCell(method);
            //     },
            //     this)
            // );

            $(document).on('methodClicked.Narrative',
                $.proxy(function(event, method) {
                    this.buildMethodCell(method);
                },
                this)
            );

            $(document).on('appClicked.Narrative',
                $.proxy(function(event, appInfo) {
                    this.buildAppCell(appInfo);
                },
                this)
            );

            $(document).on('deleteCell.Narrative',
                $.proxy(function(event, index) {
                    this.deleteCell(index);
                },
                this)
            );

            $(document).on('runCell.Narrative',
                $.proxy(function(event, data) {
                    this.runMethodCell(data);
                },
                this)
            );

            $(document).on('runApp.Narrative',
                $.proxy(function(event, data) {
                    this.runAppCell(data);
                },
                this)
            );

            $(document).on('createOutputCell.Narrative',
                $.proxy(function(event, data) {
                    var cellIndex = $('#'+data.cellId).nearest('.cell').index();
                    var params = {'embed' : true,
                                  'data': this.safeJSONStringify(data.result)};
                    if (data.next_steps) {
                      console.debug("adding next steps in create");
                      params.next_steps = data.next_steps;
                    }
                    this.createOutputCell(IPython.notebook.get_cell(cellIndex),
                                          params);
                }, this)
            );

            $(document).on('showNextSteps.Narrative',
              $.proxy(function(event, obj) {
                this.showNextSteps(obj);
              }, this));

            $(document).on('createViewerCell.Narrative',
                $.proxy(function(event, data) {
                    this.createViewerCell(data.nearCellIdx, data, data.widget);
                }, this)
            );

            this.initDeleteCellModal();
            // Initialize the data table.
            this.render();
            return this;
        },

        initDeleteCellModal: function() {
            this.$deleteCellModalBody = $('<div>');

            var buttonList = [
                {
                    name : 'Cancel',
                    type : 'default',
                    callback : function(e, $prompt) {
                        this.cellToDelete = null;
                        $prompt.closePrompt();
                    },
                },
                {
                    name : 'Delete',
                    type : 'danger',
                    callback : $.proxy(function(e, $prompt) {
                        if (this.cellToDelete !== undefined && this.cellToDelete !== null) {
                            var cell = IPython.notebook.get_cell(this.cellToDelete);
                            var removeId = $(cell.element).find('[id^=kb-cell-]').attr('id');
                            this.trigger('cancelJobCell.Narrative', removeId, false);
                            IPython.notebook.delete_cell(this.cellToDelete);
                            this.cellToDelete = null;
                        }
                        $prompt.closePrompt();
                    }, this)
                }
            ];
            this.$deleteCellModal = $('<div>').kbasePrompt({
                title : 'Delete Cell and Job?',
                body : this.$deleteCellModalBody,
                controls : buttonList
            });
        },

        showDeleteCellModal: function(index, cell, message) {
            if (cell && cell.metadata[this.KB_CELL]) {
                this.cellToDelete = index;
                if (message)
                    this.$deleteCellModalBody.empty().html(message);
                this.$deleteCellModal.openPrompt();
            }
        },

        /**
         * @method buildMethodCell
         * @param {Object} method -
         * @public
         */
        buildMethodCell: function(method) {
            var cell = IPython.notebook.insert_cell_below('markdown');
            cell.celltoolbar.hide();

            // make this a function input cell, as opposed to an output cell
            this.setMethodCell(cell, method);

            // THIS IS WRONG! FIX THIS LATER!
            // But it should work for now... nothing broke up to this point, right?
            var cellIndex = IPython.notebook.ncells() - 1;
            var cellId = 'kb-cell-' + cellIndex + '-' + this.uuidgen();

            // The various components are HTML STRINGS, not jQuery objects.
            // This is because the cell expects a text input, not a jQuery input.
            // Yeah, I know it's ugly, but that's how it goes.
            var cellContent = "<div id='" + cellId + "'></div>" +
                              "\n<script>" +
                              "$('#" + cellId + "').kbaseNarrativeMethodCell({'method' : '" + this.safeJSONStringify(method) + "', 'cellId' : '" + cellId + "'});" +
                              "</script>";

            cell.set_text(cellContent);
            cell.rendered = false;
            cell.render();

            // restore the input widget's state.
            this.removeCellEditFunction(cell);
        },

        runMethodCell: function(data) {
            if (!data || !data.cell || !data.method || !data.parameters) {
                // do some erroring later.
                return;
            }
            this.saveCellState(data.cell);
            this.updateNarrativeDependencies();
            var self = this;
            var code = '';
            var showOutput = true;

            // Three cases to NOT show immediately:
            // 1. method.job_id_output_field is not null    -- long running (via UJS)
            // 2. method.behavior.kb_service_method is not null && method.behavior.kb_service_url IS null    -- long running service call (via NJS)
            // 3. method.behavior.script_module is not null -- AWE script backend (via NJS)

            // if there's a job_id_output_field in the method, then it's long-running, and we shouldn't show an output cell right away.
            // ...or maybe show a temporary one?
            if ((data.method.job_id_output_field && data.method.job_id_output_field != null) ||
                (data.method.behavior.kb_service_method && (!data.method.behavior.kb_service_url || data.method.behavior.kb_service_url.length === 0)) ||
                (data.method.behavior.script_module)) {
                showOutput = false;
            }
            // old, pre-njs style where the methods were all living in IPython-land
            if (data.method.behavior.python_class && data.method.behavior.python_function) {
                code = this.buildRunCommand(data.method.behavior.python_class, data.method.behavior.python_function, data.parameters);
            }
            // newer, njs/njs-mock style where methods get farmed out
            else if ((data.method.behavior.kb_service_method && data.method.behavior.kb_service_name) ||
                     (data.method.behavior.script_module && data.method.behavior.script_name)) {
                code = this.buildGenericRunCommand(data);
            }
            else {
                // something else!
                // do the standard for now.
                code = this.buildGenericRunCommand(data);
            }
            var callbacks = {
                'execute_reply' : function(content) { self.handleExecuteReply(data.cell, content); },
                'output' : function(msgType, content) { self.handleOutput(data.cell, msgType, content, showOutput); },
                'clear_output' : function(content) { self.handleClearOutput(data.cell, content); },
                'set_next_input' : function(text) { self.handleSetNextInput(data.cell, content); },
                'input_request' : function(content) { self.handleInputRequest(data.cell, content); },
            };

            $(data.cell.element).find('#kb-func-progress').css({'display': 'block'});
            IPython.notebook.kernel.execute(code, callbacks, {silent: true});
        },

        buildAppCell: function(appSpec) {
            var cell = IPython.notebook.insert_cell_below('markdown');
            cell.celltoolbar.hide();
            this.removeCellEditFunction(cell);

            var tempContent = '<img src="' + this.options.loadingImage + '">';
            cell.set_text(tempContent);
            cell.rendered = false;
            cell.render();

            this.setAppCell(cell, appSpec);
            var cellIndex = IPython.notebook.ncells() - 1;
            var cellId = 'kb-cell-' + cellIndex + '-' + this.uuidgen();

            // The various components are HTML STRINGS, not jQuery objects.
            // This is because the cell expects a text input, not a jQuery input.
            // Yeah, I know it's ugly, but that's how it goes.
            var cellContent = "<div id='" + cellId + "'></div>" +
                              "\n<script>" +
                              "$('#" + cellId + "').kbaseNarrativeAppCell({'appSpec' : '" + this.safeJSONStringify(appSpec) + "', 'cellId' : '" + cellId + "'});" +
                              "</script>";
            cell.set_text(cellContent);
            cell.rendered = false;
            cell.render();
        },

        runAppCell: function(data) {
            if (!data || !data.cell || !data.appSpec || !data.methodSpecs || !data.parameters) {
                // error out.
                return;
            }
            this.saveCellState(data.cell);
            this.updateNarrativeDependencies();
            var self = this;
            var callbacks = {
                'execute_reply' : function(content) { self.handleExecuteReply(data.cell, content); },
                'output' : function(msgType, content) { self.handleOutput(data.cell, msgType, content, "app"); },
                'clear_output' : function(content) { self.handleClearOutput(data.cell, content); },
                'set_next_input' : function(text) { self.handleSetNextInput(data.cell, content); },
                'input_request' : function(content) { self.handleInputRequest(data.cell, content); },
            };

            var code = this.buildAppCommand(data.appSpec, data.methodSpecs, data.parameters);
            IPython.notebook.kernel.execute(code, callbacks, {silent: true});
        },

        buildAppCommand: function(appSpec, methodSpecs, parameters) {
            console.log([appSpec, methodSpecs, parameters]);
            var appSpecJSON = this.safeJSONStringify(appSpec);
            var methodSpecJSON = this.safeJSONStringify(methodSpecs);
            var paramsJSON = this.safeJSONStringify(parameters);

            return "import biokbase.narrative.common.service as Service\n" +
                   "method = Service.get_service('app_service').get_method('app_call')\n" +
                   "method('" + appSpecJSON + "', '" + methodSpecJSON + "', '" + paramsJSON + "')";
        },

        /** DEPRECATED / OBSOLETED - use buildMethodCell or buildAppCell instead. **/
        // /**
        //  * @method buildFunctionCell
        //  * @param {Object} method - the JSON schema version of the method to invoke. This will
        //  * include a list of parameters and outputs.
        //  */
        // buildFunctionCell: function(method) {
        //     var cell = IPython.notebook.insert_cell_below('markdown');
        //     cell.celltoolbar.hide();
        //     // make this a function input cell, as opposed to an output cell
        //     this.setFunctionCell(cell, method);

        //     // THIS IS WRONG! FIX THIS LATER!
        //     // But it should work for now... nothing broke up to this point, right?
        //     var cellIndex = IPython.notebook.ncells() - 1;
        //     var cellId = 'kb-cell-' + cellIndex + '-' + this.uuidgen();

        //     // The various components are HTML STRINGS, not jQuery objects.
        //     // This is because the cell expects a text input, not a jQuery input.
        //     // Yeah, I know it's ugly, but that's how it goes.
        //     var cellContent;

        //     if (this.validateMethod(method)) {
        //         // This is the list of parameters for the given method
        //         var inputWidget = this.defaultInputWidget;
        //         if (method.properties.widgets.input)
        //             inputWidget = method.properties.widgets.input;

        //         var inputDiv = "<div id='inputs'></div>";

        //         // These are the 'delete' and 'run' buttons for the cell
        //         var button_content;
        //         if (this.readonly) {
        //             button_content = "";
        //         }
        //         else {
        //             button_content = "<button id='" + cellId + "-delete' type='button' value='Delete' class='btn btn-default btn-sm'>Delete</button> " +
        //                              "<button id='" + cellId + "-run' type='button' value='Run' class='btn btn-primary btn-sm'>Run</button>";
        //                              //style='margin-top:10px'>" +
        //         }
        //         var buttons = "<div class='buttons pull-right'>" + button_content +
        //                       "</div>";

        //         // The progress bar remains hidden until invoked by running the cell
        //         var progressBar = "<div id='kb-func-progress' class='pull-left' style='display:none;'>" +
        //                             "<div class='progress progress-striped active kb-cell-progressbar'>" +
        //                                 "<div class='progress-bar progress-bar-success' role='progressbar' aria-valuenow='0' " +
        //                                 "aria-valuemin='0' aria-valuemax='100' style='width:0%'/>" +
        //                             "</div>" +
        //                             "<p class='text-success'/>" +
        //                           "</div>";

        //         // Associate method title with description via BS3 collapsing
        //         var methodId = cellId + "-method-details";
        //         var buttonLabel = "...";
        //         var methodDesc = method.description.replace(/"/g, "'"); // double-quotes hurt markdown rendering
        //         var methodInfo = "<span class='kb-func-desc'>" +
        //                            "<h1 style='display:inline'><b>" + method.title + "</b></h1>" +
        //                            "<span class='pull-right kb-func-timestamp' id='last-run'></span>" +
        //                            "<button class='btn btn-default btn-xs' type='button' data-toggle='collapse'" +
        //                               " data-target='#" + methodId + "'>" + buttonLabel + "</button>" +
        //                             "<div><h2 class='collapse' id='" + methodId + "'>" +
        //                               methodDesc + "</h2></div>" +
        //                          "</span>";

        //         // Bringing it all together...
        //         cellContent = "<div class='panel kb-func-panel kb-cell-run' id='" + cellId + "'>" +
        //                           "<div class='panel-heading'>" +
        //                               methodInfo +
        //                           "</div>" +
        //                           "<div class='panel-body'>" +
        //                               inputDiv +
        //                           "</div>" +
        //                           "<div class='panel-footer' style='overflow:hidden'>" +
        //                               progressBar +
        //                               buttons +
        //                           "</div>" +
        //                       "</div>" +
        //                       "\n<script>" +
        //                       "$('#" + cellId + " > div > div#inputs')." + inputWidget + "({ method:'" +
        //                        this.safeJSONStringify(method) + "'});" +
        //                       "</script>";
        //         console.debug("created input cell '", methodDesc, "', id = ", cellId);
        //     }
        //     else {
        //         cellContent = "Error - the selected method is invalid.";
        //     }
        //     cell.set_text(cellContent);

        //     cell.rendered = false;
        //     cell.render();

        //     // restore the input widget's state.
        //     this.removeCellEditFunction(cell);
        //     this.bindActionButtons(cell);
        // },

        /**
         * A TEMPORARY FUNCTION that should refresh and update the given cell's metadata to the new(er) version,
         * if it needs to happen.
         * should be the structure:
         * {
         *     'kb-cell': {
         *         'type' : 'function_input' | 'function_output',
         *         'method' : object (if input cell),
         *         'widget' : <widget name>
         *         'widget_state' : [array of states]
         *     }
         * }
         */
        checkCellMetadata: function(cell) {
            if (cell.metadata[this.KB_CELL]) {
                // if that top-level one is a string, it'll probably be an output cell, so make it one.
                if (typeof cell.metadata[this.KB_CELL] === "string") {
                    var newMeta = {};
                    newMeta[this.KB_TYPE] = this.KB_OUTPUT_CELL;
                    newMeta['widget'] = undefined;
                    newMeta[this.KB_STATE] = [];
                    cell.metadata[this.KB_CELL] = newMeta;
                }
                else if (typeof cell.metadata[this.KB_CELL] === "object") {
                    // The "old" version (i.e. at the beginning of the workshop starting 1/6/2013)
                    // just needs to make sure the input cells have the widget state as an array.
                    // AND it should store the widget name, as found in the method, as a separate field.

                    if (cell.metadata[this.KB_CELL][this.KB_TYPE] === this.KB_FUNCTION_CELL) {
                        if (!cell.metadata[this.KB_CELL]['widget'])
                            cell.metadata[this.KB_CELL]['widget'] = cell.metadata[this.KB_CELL]['method'].properties.widgets.input || this.defaultInputWidget;
                        if (!cell.metadata[this.KB_CELL][this.KB_STATE]) {
                            cell.metadata[this.KB_CELL][this.KB_STATE] = [];
                            if (cell.metadata[this.KB_CELL]['input_state']) {
                                cell.metadata[this.KB_CELL][this.KB_STATE].unshift({ 'time': 0, 'state' : cell.metadata[this.KB_CELL]['input_state'] });
                            }
                        }
                        else if (Object.prototype.toString.call(cell.metadata[this.KB_CELL][this.KB_STATE]) !== '[object Array]') {
                            cell.metadata[this.KB_CELL][this.KB_STATE] = [ { 'time' : 0, 'state' : cell.metadata[this.KB_CELL][this.KB_STATE] } ];
                        }
                    }
                }
            }
        },

        /**
         * Escape chars like single quotes in descriptions and titles,
         * before rendering as a JSON string.
         *
         *
         *  THIS IS NOT SAFE BECAUSE THERE ARE HARD CODED KEYS THAT ARE CHECKED!!!! -mike
         *  It should be more safe now - **all** strings should have their quotes escaped before JSONifying them.
         *
         * @post This does not modify the input object.
         * @return {string} JSON string
         */
        safeJSONStringify: function(method) {
            var esc = function(s) {
                return s.replace(/'/g, "&apos;")
                        .replace(/"/g, "&quot;");
            };
            return JSON.stringify(method, function(key, value) {
                return (typeof(value) === 'string') ? esc(value) : value;
                // this seems not safe, since we can have many keys in the spec that are not these... -mike
                // return (typeof(value) == "string" &&
                //         (key == "description" || key == "title" || key=="header" || key=="tooltip" || key=="name" || key=="subtitle")) ?
                //     esc(value) : value;
            });
        },

        /**
         * Refreshes any function inputs to sync with workspace data.
         * Since this re-renders the cell, it must rebind all buttons, too.
         * Kind of annoying, but it should run quickly enough.
         *
         * Also checks to see if that cell has any parameter state associated
         * with it, and if so, sends that to the widget.
         * @private
         */
        refreshFunctionInputs: function(fullRender) {
            if (IPython && IPython.notebook) {
                var cells = IPython.notebook.get_cells();
                for (var i=0; i<cells.length; i++) {
                    var cell = cells[i];
                    if (this.isFunctionCell(cell)) {
                        var method = cell.metadata[this.KB_CELL].method;
                        // legacy cells.
                        if (method.properties) {
                            var inputWidget = method.properties.widgets.input || this.defaultInputWidget;

                            if (fullRender) {
                                cell.rendered = false;
                                cell.render();

                                this.loadRecentCellState(cell);
                                this.bindActionButtons(cell);
                            }
                            else {
                                $(cell.element).find("#inputs")[inputWidget]('refresh');
                            }
                        }
                        else {
                            $(cell.element).find("div[id^=kb-cell-]").kbaseNarrativeMethodCell('refresh');
                        }
                    }
                    else if (this.isAppCell(cell)) {
                        $(cell.element).find("div[id^=kb-cell-]").kbaseNarrativeAppCell('refresh');
                    }
                }
            }
        },

        /**
         * Checks if the given method object has a minimally valid structure.
         * Each method needs the following properties:
         * title - string, the title of the method (required non-empty)
         * service - string, the service where the method came from (required non-empty)
         * description - string, the description of the method
         * properties - object, contains parameters for the method
         * properties.parameters - object, essentially a list of parameters for the method
         *
         * @param {object} method - the method to validate
         * @private
         */
        validateMethod: function(method) {
            // if no title, return false
            if (!method.hasOwnProperty('title') || method.title.length == 0)
                return false;

            // if no service, return false
            if (!method.hasOwnProperty('service') || method.service.length == 0)
                return false;

            // if no properties, or it's not an object, return false
            if (!method.hasOwnProperty('properties') || typeof method.properties !== 'object')
                return false;

            if (!method.properties.hasOwnProperty('parameters') || typeof method.properties.parameters !== 'object')
                return false;

            return true;
        },

        /**
         * @method removeCellEditFunction
         * Removes the ability to edit a markdown cell by double-clicking or pressing Enter.
         * Handy for dealing with KBase function or output cells.
         * @param cell - the cell to modify.
         * @private
         */
        removeCellEditFunction: function(cell) {
            // remove its double-click and return functions. sneaky!
            $(cell.element).off('dblclick');
            $(cell.element).off('keydown');
        },

        /**
         * @method bindActionButtons
         * Binds the action (delete and run) buttons of a function cell.
         * This requires the cell to have {'kb-cell' : 'function'} in its metadata, otherwise it's ignored.
         * @param cell - the IPython Notebook cell with buttons to be bound.
         * @private
         */
        bindActionButtons: function(cell) {
            // get the cell.
            // look for the two buttons.
            // bind them to the right actions.
            if (this.isFunctionCell(cell)) {
                $(cell.element).find(".buttons [id*=delete]").off('click');
                $(cell.element).find(".buttons [id*=delete]").click(this.bindDeleteButton());
                $(cell.element).find(".buttons [id*=run]").off('click');
                $(cell.element).find(".buttons [id*=run]").click(this.bindRunButton());
            }
        },

        /**
         * Set narrative into read-only mode.
         */
        activateReadonlyMode: function() {
            var self = this;

            console.debug("activate read-only mode");
            // Hide delete and run buttons
            cells = IPython.notebook.get_cells();
            cells.forEach(function(cell) {
               ['delete', 'run'].forEach(function (e) {
                    $(this.element).find(".buttons [id*=" + e + "]").hide();
                }, cell);
            });

            // Delete left-side panel!
            $('#left-column').detach(); //hide();

            // Hide IPython toolbar
            $('#maintoolbar').hide();

            // Move content panels to the left
            $('#ipython-main-app').css({'left': '10px'});
            $('#menubar-container').css({'left': '10px'});

            // Disable text fields
            console.debug("readonly: Disable text fields");
            $(".cell input").attr('disabled', 'disabled');

            // Disable buttons
            console.debug("readonly: Disable internal buttons");
            $(".cell button").hide();  //attr('disabled', 'disabled');

            // Hide save/checkpoint status
            $('#autosave_status').text("(read-only)");
            $('#checkpoint_status').hide();

            var input_titles = [];

            // Remove h1 from input titles
            $('div.kb-func-desc h1').each(function(idx) {
                var title = $(this).text();
                var title_span = $('<span>' + title + '</span>');
                var desc = $(this).parent();
                desc.prepend(title_span);
                $(this).remove();
                input_titles.push([title, desc]);
                desc.prepend(
                    '<span class="label label-info" style="margin-right: 8px;" ' +
                    ' id="kb-input-' + idx + '">' +
                    'Input' +
                    '</span>');
            });

            // Add label before input titles
            // $('.kb-func-panel .panel-heading .kb-func-desc').prepend(
            //     '<span class="label label-info" style="margin-right: 8px;">' +
            //     ' id="kb-input-' + idx +
            //     'Input' +
            //     '</span>');

            // Remove trailing ' - Output' junk from output titles
            // and add label before them.
            // If a matching input title can be found, store in 'connectable'
            var matched_input = 0;
            var connectable = {};
            $('.kb-cell-output').each(function(idx) {
                var desc = $(this).find('.kb-out-desc');
                var title_full = desc.text();
                var otitle = title_full.replace(/\s*-\s*Output/,'');
                if (title_full != otitle) {
                    desc.text(otitle); // replace
                }
                var title_span = $('<span class="label label-primary" style="margin-right: 8px;"' +
                    ' id="kb-output-' + idx + '">' +
                'Output' +
                '</span>')
                desc.prepend(title_span);
                // Look for matching input
                for (var i=matched_input; i < input_titles.length; i++) {
                    var ititle = input_titles[i][0];
                    //console.debug('input title="'+ ititle + '" output title="' + otitle + '"');
                    if (ititle == otitle) {
                        matched_input = i + 1;
                        connectable[i] = idx;
                        break;
                    }
                }
            });

            // Add 'Copy' button after narrative title
            var narr_copy_id = "narr-copy";
            var button = $('<button type="button" ' +
                           'class="btn btn-success" ' +
                           'id="'  + narr_copy_id + '" ' +
                           'data-toggle="tooltip" ' +
                           'title="Copy this narrative to a workspace ' +
                           'where you can modify and run it" ' +
                           '>Copy</button>');
            button.css({'line-height': '1em',
                        'margin-top': '-15px',
                        'margin-left': '5em'});
            e = $('#menubar').append(button);
            this.bindCopyButton($('#' + narr_copy_id));

            this.connectable = connectable;
        },

        /**
         * Connect two elements with a 'line'.
         *
         * Args:
         *   p - Top element
         *   q - Bottom element
         *   g - Left gutter width, in pixels
         *   w - Line width, in pixels
         *   container - Containing element for line
         *   line_class - CSS class for line elements (for coloring)
         */
        connect: function(p, q, g, w, container, line_class) {
            var pc = $(p).position();
            var qc = $(q).position();
            console.debug("connect ", pc, " to ", qc);
            var py = pc.top + (p.height() - w) / 2.0;
            var qy = qc.top + (q.height() - w) / 2.0;
            var coords = [{
                left: g,
                top: py,
                width: (pc.left - g),
                height: w
            }, {
                left: g,
                top: py + w,
                width: w,
                height: qy - py
            }, {
                left: g,
                top: qy,
                width: qc.left - g,
                height: w
            }];
            for (var i = 0; i < 3; i += 1) {
                var $elt = $('<div>').addClass(line_class).attr('id', 'kb-line' + i);
                $elt.css(coords[i]);
                container.append($elt);
            }
        },

        /**
         * Activate "normal" R/W mode
         */
         activateReadwriteMode: function() {
            console.debug("activate read-write mode");
         },

        /**
         * Bind the 'Copy narrative' button to
         * a function that copies the narrative.
         */
        bindCopyButton: function(element) {
            var oid = this.getNarrId();
            element.click(function() {
                console.debug("Make a copy for narr. obj = ", oid);
                // XXX: Complete and utter FAKE!
                // XXX: Just jump to a hardcoded read/write narrative based on the input one
                var copy_id_map = {
                    'ws.2590.obj.8': 'ws.2615.obj.8', // comparative genomics
                };
                var copy_id = copy_id_map[oid];
                if (copy_id !== undefined) {
                    // Open new narrative
                    var oldpath = window.location.pathname;
                    var parts = oldpath.split('/');
                    parts.pop(); // pop off old id
                    parts.push(copy_id); // add new one
                    var newpath = parts.join('/'); // rejoin as a path
                    var newurl = window.location.protocol + '//' + window.location.host + newpath;
                    console.debug("Moving to new URL: ", newurl);
                    window.location.replace(newurl);
                }
            });
            return;
        },

        /**
         * Object identifier of current narrative, extracted from page URL.
         */
         getNarrId: function() {
            return window.location.pathname.split('/').pop();
         },

        /**
         * Once the notebook is loaded, all code cells with generated code
         * (e.g. the placeholder, provenance cells) should be hidden.
         * At least for now.
         * So this function does that.
         * @private
         */
        hideGeneratedCodeCells: function() {
            var cells = IPython.notebook.get_cells();
            for (var i=0; i<cells.length; i++) {
                var cell = cells[i];
                if (this.isFunctionCodeCell(cell))
                    cell.element.css('display', 'none');
            }
        },

        // Function input cell type.
        isFunctionCell: function(cell) {
            return this.checkCellType(cell, this.KB_FUNCTION_CELL);
        },

        isAppCell: function(cell) {
            return this.checkCellType(cell, this.KB_APP_CELL);
        },

        setFunctionCell: function(cell, method) {
            var cellInfo = {};
            cellInfo[this.KB_TYPE] = this.KB_FUNCTION_CELL;
            cellInfo['method'] = method;
            cellInfo[this.KB_STATE] = [];
            cellInfo['widget'] = method.properties.widgets.input || this.defaultInputWidget;

            cell.metadata[this.KB_CELL] = cellInfo;
        },

        setMethodCell: function(cell, method) {
            var cellInfo = {};
            cellInfo[this.KB_TYPE] = this.KB_FUNCTION_CELL;
            cellInfo['method'] = method;
            cellInfo[this.KB_STATE] = [];
            cellInfo['widget'] = method.widgets.input || this.defaultInputWidget;

            cell.metadata[this.KB_CELL] = cellInfo;
        },

        setAppCell: function(cell, appInfo) {
            var cellInfo = {};
            cellInfo[this.KB_TYPE] = this.KB_APP_CELL;
            cellInfo['app'] = appInfo;
            cellInfo[this.KB_STATE] = [];

            cell.metadata[this.KB_CELL] = cellInfo;
        },

        // Function output cell type.
        isOutputCell: function(cell) {
            return this.checkCellType(cell, this.KB_OUTPUT_CELL);
        },

        setOutputCell: function(cell, widget) {
            var cellInfo = {};
            cellInfo[this.KB_TYPE] = this.KB_OUTPUT_CELL;
            cellInfo[this.KB_STATE] = [];
            cellInfo['widget'] = widget;

            cell.metadata[this.KB_CELL] = cellInfo;
        },

        setErrorCell: function(cell) {
            var cellInfo = {};
            cellInfo[this.KB_TYPE] = this.KB_ERROR_CELL;
            cell.metadata[this.KB_CELL] = cellInfo;
        },

        // Backup function code cell type (usually hidden through css... I still think this is superfluous)
        isFunctionCodeCell: function(cell) {
            return this.checkCellType(cell, this.KB_CODE_CELL);
        },

        setCodeCell: function(cell) {
            var cellInfo = {};
            cellInfo[this.KB_TYPE] = this.KB_CODE_CELL;
            cell.metadata[this.KB_CELL] = cellInfo;
        },

        checkCellType: function(cell, type) {
            return cell.metadata &&
                   cell.metadata[this.KB_CELL] &&
                   cell.metadata[this.KB_CELL][this.KB_TYPE] === type;
        },

        getMethodCellDependencies: function(cell, paramValues) {
            if (!this.isFunctionCell(cell))
                return;
            paramValues = $(cell.element).find('div[id^=kb-cell-]').kbaseNarrativeMethodCell('getParameters') || [];
            var params = cell.metadata[this.KB_CELL].method.parameters;

            var data = [];

            // paramValues and method.properties.parameters should be parallel, but check anyway.
            // assume that those elements between the parameters list and method's params that
            var cellDeps = [];
            var types = [];
            var typesHash = {};

            // note - it's method.parameters.param##
            for (var i=0; i<params.length; i++) {
                var p = params[i];

                /* fields: default, description, type, ui_name */
                if (p.text_options) {
                    if (p.text_options.valid_ws_types) {
                        var type = p.text_options.valid_ws_types[0];
                        if (type && !this.ignoredDataTypes[type.toLowerCase()] && paramValues[i]) {
                            cellDeps.push([type, paramValues[i]]);
                            if (!typesHash[type]) {
                                typesHash[type] = 1;
                                types.push(type);
                            }
                        }
                    }
                }

            }

            // look up the deps in the data panel.
            // Cheating for now - needs to be a synchronous call, though! There's no reason for it not to be, if the data's already loaded!
            var objList = $('#kb-ws').kbaseNarrativeDataPanel('getLoadedData', types);

            // Man, now what. N^2 searching? What a drag.
            for (var i=0; i<cellDeps.length; i++) {
                var type = cellDeps[i][0];
                var found = false;
                if (objList[type] && objList[type].length > 0) {
                    for (var j=0; j<objList[type].length; j++) {
                        if (objList[type][j][1] === cellDeps[i][1]) {
                            data.push(objList[type][j][6] + '/' + objList[type][j][0] + '/' + objList[type][j][4]);
                            found = true;
                            break;
                        }
                    }
                }
            }
            return data;

        },

        /**
         * @method
         * Returns a list of Workspace object dependencies for a single cell.
         * These dependencies are returned as workspace object references of the format:
         * X/Y/Z
         * X = workspace number
         * Y = object number
         * Z = version number
         * @private
         */
        getCellDependencies: function(cell, paramValues) {
            if (!this.isFunctionCell(cell))
                return;

            var data = [];
            var target = '#inputs';
            // get a 'handle' (really just the invocable name) of the input widget
            var inputWidget = cell.metadata[this.KB_CELL].method.properties.widgets.input || this.defaultInputWidget;
            var params = cell.metadata[this.KB_CELL]['method'].properties.parameters;

            if (!paramValues) {
                paramValues = $(cell.element).find('#inputs')[inputWidget]('getParameters') || [];
            }

            // paramValues and method.properties.parameters should be parallel, but check anyway.
            // assume that those elements between the parameters list and method's params that
            var cellDeps = [];
            var types = [];
            var typesHash = {};

            // note - it's method.parameters.param##
            for (var i=0; i<Object.keys(params).length; i++) {
                var pid = 'param' + i;
                var p = params[pid];  // this is the param object itself.

                /* fields: default, description, type, ui_name */
                var type = p.type;
                if (!this.ignoredDataTypes[type.toLowerCase()] && paramValues[i]) {
                    cellDeps.push([type, paramValues[i]]);
                    if (!typesHash[type]) {
                        typesHash[type] = 1;
                        types.push(type);
                    }
                }
            }

            // look up the deps in the data panel.
            // Cheating for now - needs to be a synchronous call, though! There's no reason for it not to be, if the data's already loaded!
            var objList = $('#kb-ws').kbaseNarrativeDataPanel('getLoadedData', types);

            // Man, now what. N^2 searching? What a drag.
            for (var i=0; i<cellDeps.length; i++) {
                var type = cellDeps[i][0];
                var found = false;
                if (objList[type] && objList[type].length > 0) {
                    for (var j=0; j<objList[type].length; j++) {
                        if (objList[type][j][1] === cellDeps[i][1]) {
                            data.push(objList[type][j][6] + '/' + objList[type][j][0] + '/' + objList[type][j][4]);
                            found = true;
                            break;
                        }
                    }
                }
            }
            return data;
        },

        /**
         * @method
         * @return a list containing all dependencies as WS references.
         * @public
         */
        getNarrativeDependencies: function() {
            var cells = IPython.notebook.get_cells();
            var deps = {};
            // For each cell in the Notebook
            $.each(cells, $.proxy(function(idx, cell) {
                // Get its dependencies (it'll skip non-input cells)
                if (this.isFunctionCell(cell)) {
                    var cellDeps = [];
                    if (cell.metadata[this.KB_CELL].method.properties) {
                        cellDeps = this.getCellDependencies(cell);
                    }
                    else {
                        cellDeps = this.getMethodCellDependencies(cell);
                    }
                    // Shove them in the Object as properties to uniquify them.
                    for (var i=0; i<cellDeps.length; i++) {
                        deps[cellDeps[i]] = 1;
                    }
                }
            }, this));
            // Return the final, unique list (cleaner than looping over every returned hit)
            return Object.keys(deps);
        },

        /**
         * @method
         * @private
         */
        updateNarrativeDependencies: function() {
            var deps = this.getNarrativeDependencies();
            IPython.notebook.metadata.data_dependencies = deps;
        },

        /**
         * Saves a cell's state into its metadata.
         * This includes marking that state with a timestamp.
         * We might need to add more stuff as well, but this is a start.
         * Mostly, it gathers the state from the cell's widget (if it has one) and puts it together
         * with the timestamp.
         * {
         *    state: <cell state>,
         *    time: <timestamp in ms since the epoch>,
         * }
         * This is prepended to the front - so the most recent state is the first element of the array.
         */
        saveCellState: function(cell) {
            // ignore it if it isn't a KBase cell with a widget state to save.
            if (!this.isFunctionCell(cell) && !this.isOutputCell(cell) && !this.isAppCell(cell))
                return;

            var target = 'div[id^=kb-cell-]';
            var widget;

            if (this.isFunctionCell(cell)) {
                var method = cell.metadata[this.KB_CELL].method;
                // older way
                if (method.properties) {
                    widget = cell.metadata[this.KB_CELL].method.properties.widgets.input || this.defaultInputWidget;
                    target = '#inputs';
                }
                else {
                    widget = 'kbaseNarrativeMethodCell';
                }
            }
            else if (this.isOutputCell(cell)) {
                // do output widget stuff.
                widget = 'kbaseNarrativeOutputCell';
            }
            else if (this.isAppCell(cell)) {
                widget = 'kbaseNarrativeAppCell';
            }

            try {
                var state;
                if (widget && $(cell.element).find(target)[widget](['prototype'])['getState']) {
                    // if that widget can save state, do it!
                    state = $(cell.element).find(target)[widget]('getState');
                }

                var timestamp = this.getTimestamp();
                cell.metadata[this.KB_CELL][this.KB_STATE].unshift({ 'time' : timestamp, 'state' : state });
                while (this.maxSavedStates && cell.metadata[this.KB_CELL][this.KB_STATE].length > this.maxSavedStates) {
                    cell.metadata[this.KB_CELL][this.KB_STATE].pop();
                }
            }
            catch(error) {
                this.dbg('Unable to save state for cell:');
                this.dbg(cell);
            }
        },

        /**
         * Loads the most recent cell state (i.e. the top of the stack) of the given cell.
         * If that state is undefined (or if the state array is undefined or not an array), nothing is done.
         * @param {Object} cell - the cell to fetch the most recent cell state from
         * @returns the most recent cell state, in whatever form that state takes (scalar, array, object, etc.)
         * @private
         */
        loadRecentCellState: function(cell) {
            var state = this.getRecentState(cell);
            if (state) {
                var target = 'div[id^=kb-cell-]';
                var widget;

                // if it's labeled as a function cell do that.
                if (this.isFunctionCell(cell)) {
                    var method = cell.metadata[this.KB_CELL].method;
                    // older way
                    if (method.properties) {
                        widget = cell.metadata[this.KB_CELL].method.properties.widgets.input || this.defaultInputWidget;
                        target = '#inputs';
                    }
                    else {
                        widget = 'kbaseNarrativeMethodCell';
                    }
                }
                // if it's labeled as an output cell do that.
                else if (this.isOutputCell(cell)) {
                    // get the output cell's target and widget.
                    // eventually, we should probably just update the cells to the new version
                    // but this should sort out any backward compatibility issues for now.

                    var cellText = cell.get_text();
                    var capture = cellText.match(/<script>\$\([\"\'](.+)[\"\']\)\.(\w+)\(.+\);<\/script>/);
                    if (capture) {
                        target = capture[1];
                        widget = capture[2];
                    }

                    // // do output widget stuff.
                    // widget = 'kbaseNarrativeOutputCell';

                    // // if it's an older Narrative, then it might have metadata invoking a different widget.
                    // var metadata = cell.metadata[this.KB_CELL];
                    // if (metadata.widget)
                    //     widget = metadata.widget;
                }
                else if (this.isAppCell(cell)) {
                    widget = 'kbaseNarrativeAppCell';
                }
                // it might not be either! if we don't have both a target and widget, don't do anything!
                if (target && widget) {
                    try {
                        if ($(cell.element).find(target)[widget](['prototype'])['loadState']) {
                            $(cell.element).find(target)[widget]('loadState', state.state);
                            // later, do something with the timestamp.
                        }
                    } catch(err) {
                        // just ignore it and move on.
                        // this.dbg('Unable to load cell state! Ignoring the following cell:')
                        // this.dbg(cell);
                        // this.dbg(err);
                    }
                }
            }
        },

        /**
         * Returns the entire state array from the given cell.
         * If there is not an array present, or if the state object is not an array, then an empty list is returned.
         * @param {Object} cell - the cell to fetch the state array from
         * @returns {Array} an array of states for that cell
         * @private
         */
        getCellStateArray: function(cell) {
            if (this.isFunctionCell(cell) || this.isOutputCell(cell)) {
                var stateArr = cell.metadata[this.KB_CELL][this.KB_STATE];
                // if it's an array, return it.
                if (Object.prototype.toString.call(stateArr) === "[object Array]")
                    return stateArr;
            }
            // if the cell doesn't have a state array, or if it's NOT an array, return the empty array.
            return [];
        },

        /**
         * Saves the state of all cells into their respective arrays.
         * @public
         */
        saveAllCellStates: function() {
            var cells = IPython.notebook.get_cells();
            $.each(cells, $.proxy(function(idx, cell) {
                this.saveCellState(cell);
            }, this));
        },

        /**
         * Loads the most recently saved state into all cells.
         * @public
         */
        loadAllRecentCellStates: function() {
            var cells = IPython.notebook.get_cells();
            $.each(cells, $.proxy(function(idx, cell) {
                this.loadRecentCellState(cell);
            }, this));
        },

        /**
         * Fetches the most recent cell state. If the cell state is an array, it gets the first element,
         * if it's NOT an array, it just returns that state.
         * This *should* make things still functional for the older (non-array-based) stateful cells.
         * XXX: eventually update this to just array, once we're out of dev-panic-mode and closer to production.
         */
        getRecentState: function(cell) {
            var state;
            if (this.isFunctionCell(cell) || this.isOutputCell(cell) || this.isAppCell(cell)) {
                var stateList = cell.metadata[this.KB_CELL][this.KB_STATE];
                if (Object.prototype.toString.call(stateList) === "[object Array]")
                    state = stateList[0];
                else
                    state = stateList;
            }
            return state;
        },

        /**
         * @method bindRunButton
         * @private
         */
        bindRunButton: function() {
            var self = this;
            return (
                function(event) {
                    event.preventDefault();
                    // get the cell
                    var cell = IPython.notebook.get_selected_cell();

                    // get a 'handle' (really just the invocable name) of the input widget
                    var inputWidget = cell.metadata[self.KB_CELL].method.properties.widgets.input || self.defaultInputWidget;

                    // get the list of parameters and save the state in the cell's metadata
                    var paramList = $(cell.element).find("#inputs")[inputWidget]('getParameters');
                    self.saveCellState(cell);
                    self.updateNarrativeDependencies();

                    // var state = $(cell.element).find("#inputs")[inputWidget]('getState');
                    // cell.metadata[self.KB_CELL][self.KB_STATE] = state;

                    // Run the method.
                    var method = cell.metadata[self.KB_CELL].method;
                    self.runCell()(cell, method.service, method.title, paramList);
                    $(cell.element).find("#last-run").html("Last run: " + self.readableTimestamp(self.getTimestamp()));
                }
            );
        },

        /**
         * @method deleteCell
         * @private
         */
        deleteCell: function(index) {
            if (index !== undefined && index !== null) {
                var cell = IPython.notebook.get_cell(index);
                if (cell) {
                    // if it's a kbase method or app cell, trigger a popup
                    if (cell.metadata[this.KB_CELL]) {
                        widget = null; // default is app cell
                        var state = 'input'; // default is input... also doubles as a proxy for output cells
                        if (this.isFunctionCell(cell))
                            widget = 'kbaseNarrativeMethodCell';
                        else if (this.isAppCell(cell))
                            widget = 'kbaseNarrativeAppCell';
                        if (widget)
                            state = $(cell.element).find('div[id^=kb-cell-]')[widget]('getRunningState');

                        if (state === 'input') {
                            IPython.notebook.delete_cell(index);
                            return;
                        }
                        else {
                            // if it's running, say so, and say it'll stop and delete the job
                            // if it's done, say it'll clear the associated job, but won't delete data
                            // if it's error, say it'll delete the assoc'd job

                            var stateWarning = 'Deleting this cell will also delete any associated job. ' +
                                               'Any generated data will be retained. Continue?';

                            this.showDeleteCellModal(index, cell, stateWarning);
                            // switch(state) {
                            //     case 'running':
                            //         // set some text
                            //         stateWarning = 'This cell appears to have a running job associated with it. ' +
                            //                        'Deleting this cell will also stop and delete the running job. ' +
                            //                        'Any generated data will not be deleted. Continue?';
                            //         break;
                            //     case 'error':
                            //         // set some text
                            //         stateWarning = 'This cell appears to have produced an error while running. ' +
                            //                        'Deleting this cell will also stop and delete the associated job. ' +
                            //                        'Any generated data will be maintained. Continue?';
                            //         break;
                            //     case 'done':
                            //         // set some text
                            //         stateWarning = 'This cell has finished running but may have a job still associated with it. ' +
                            //                        'Deleting this cell will also delete that job, but not any generated data. ' +
                            //                        'Continue?';
                            //         break;
                            //     default:
                            //         // set no text
                            //         stateWarning = 'Deleting this cell will also delete any associated job. Any generated data will be retained. Continue?';
                            //         break;
                            // }
                        }
                    }
                    else {
                        IPython.notebook.delete_cell(index);
                    }
                }
            }
        },

        /**
         * @method bindDeleteButton
         * @private
         */
        bindDeleteButton: function() {
            var self = this;
            return(
                function(event) {
                    event.preventDefault();
                    var idx = IPython.notebook.get_selected_index();
                    IPython.notebook.delete_cell(idx);
                }
            );
        },

        /**
         * @method rebindActionButtons
         * Rebinds all the run buttons to their original function.
         * This iterates over all cells, looking for a 'kb-cell' field in its metadata.
         * If it finds it, it removes the double-click and keyboard-enter abilities from the cell.
         * If that 'kb-cell' field === 'function', it rebinds the delete and run buttons as well.
         *
         * @public
         */
        rebindActionButtons: function() {
            if (!(IPython && IPython.notebook))
                return;

            // Rewrite the following to iterate using the IPython cell
            // based methods instead of DOM objects

            var cells = IPython.notebook.get_cells();

            // not using $.each because its namespacing kinda screws things up.
            for (var i=0; i<cells.length; i++) {
                var cell = cells[i];
                var cellType = cell.metadata[this.KB_CELL];
                if (cellType) {
                    this.removeCellEditFunction(cell);
                    if (this.isFunctionCell(cell)) {
                        // added to only update the built-in non-widgetized function cells
                        if (cell.metadata[this.KB_CELL].method.properties) { // cheat to see if it's an old one!
                            this.bindActionButtons(cell);
                        }
                    }
                }
            }
        },

        /**
         * Run a function cell
         * The cell should contain all the information it needs to run.
         *
         * @param {Object} cell - the cell that needs to be run
         * @param {}
         * @private
         */
        runCell: function() {
            var self = this;
            return function(cell, service, method, params) {
                var nb = IPython.notebook;
                var currentIndex = nb.get_selected_index();

                var callbacks = {
                    'execute_reply' : function(content) { self.handleExecuteReply(cell, content); },
                    'output' : function(msgType, content) { self.handleOutput(cell, msgType, content); },
                    'clear_output' : function(content) { self.handleClearOutput(cell, content); },
                    'set_next_input' : function(text) { self.handleSetNextInput(cell, content); },
                    'input_request' : function(content) { self.handleInputRequest(cell, content); },
                };

                // ignore making code cells for now.
                // var codeCell = nb.insert_cell_below('code', currentIndex);
                // self.setCodeCell(codeCell);
                // codeCell.element.css('display', 'none');

                var code = self.buildRunCommand(service, method, params);
                // codeCell.set_text(code);
                // codeCell.output_area.clear_output(true, true, true);
                // codeCell.set_input_prompt('*');

                $(cell.element).find('#kb-func-progress').css({'display': 'block'});
                nb.kernel.execute(code, callbacks, {silent: true});
            };
        },

        buildGenericRunCommand: function(data) {
            var methodJSON = this.safeJSONStringify(data.method);
            var paramsJSON = this.safeJSONStringify(data.parameters);

            return "import biokbase.narrative.common.service as Service\n" +
                   "method = Service.get_service('generic_service').get_method('method_call')\n" +
                   "method('" + methodJSON + "', '" + paramsJSON + "')";
        },

        /**
         * Stitches together the command needed to run a method in the IPython kernel.
         * It is assumed that params is a list, with all values in the right order.
         * @param {String} service - the registered service name
         * @param {String} method - the registered method name
         * @param {Array} params - a list of parameter values
         * @returns {String} the constructed IPython kernel command
         * @private
         */
        buildRunCommand: function(service, method, params) {
            // very nice quote-escaper found here:
            // http://stackoverflow.com/questions/770523/escaping-strings-in-javascript
            // and
            // http://phpjs.org/functions/addslashes/
            var addSlashes = function(str) {
                return (str + '').replace(/[\\"']/g, '\\$&').replace(/\u0000/g, '\\0');
            };

            var escService = addSlashes(service);
            var escMethod = addSlashes(method);
            var cmd = "import biokbase.narrative.common.service as Service\n" +
                      "method = Service.get_service('" + escService + "').get_method('" + escMethod + "')\n";

            var paramList = params.map(
                function(p) {
                    return "'" + addSlashes(p) + "'";
                }
            );
            cmd += "method(" + paramList + ")";

            return cmd;
        },

        /**
         * Make JS dict into Python dict (string)
         */
         _pythonDict: function(data) {
            var dict = "{";
            $.each(data, function(key, value) {
                dict += "'" + key + "': ";
                // XXX: assume either more maps or simple type
                var vtype = typeof value;
                switch(vtype) {
                    case "boolean":
                        if (value)
                            dict += "True";
                        else
                            dict += "False";
                        break;
                    case "number":
                        dict += value;
                        break;
                    case "string":
                        dict += "'" + value + "'";
                        break;
                    case "undefined":
                        dict += "None";
                        break;
                    case "object":
                        dict += this._pythonDict(value);
                        break;
                    default:
                        console.error("Cannot convert to Python:", vtype);
                }
                dict += ", "
            });
            return dict + "}";
         },

        /* ------------------------------------------------------
         * Functions to handle running code.
         */
        /**
         * @method _handle_execute_reply
         * @private
         */
        handleExecuteReply: function (cell, content) {
            // this.dbg('[handleExecuteReply]');
            // // this.dbg(content);

            // this.dbg(cell);
            /* This catches and displays any errors that don't get piped through
             * the back-end service.py mechanism.
             * Any code that makes it that far gets reported through the output
             * mechanism and ends here with an 'ok' message.
             */
            if (content.status === 'error') {
                var errorBlob = {
                    msg : content.evalue,
                    type : content.ename,
                };

                if (cell && cell.metadata && cell.metadata['kb-cell'] &&
                    cell.metadata['kb-cell'].method)
                    errorBlob.method_name = cell.metadata['kb-cell'].method.title;

                var removeVt = function(line) {
                    return line.replace(/\[\d+(;\d+)?m/g, '');
                };

                var errTb = content.traceback.map(function(line) {
                    return {
                        filename: null,
                        function: null,
                        line: null,
                        text: removeVt(line)
                    };
                });

                errorBlob.traceback = errTb;
                this.createOutputCell(cell, '{"error" :' + JSON.stringify(errorBlob) + '}', true);

            }
            this.showCellProgress(cell, "DONE", 0, 0);
            //this.set_input_prompt(content.execution_count);
            $([IPython.events]).trigger('set_dirty.Notebook', {value: true});
        },
        /**
         * @method _handle_set_next_input
         * @private
         */
        handleSetNextInput: function (cell, text) {
            var data = {'cell': this, 'text': text}
            $([IPython.events]).trigger('set_next_input.Notebook', data);
        },
        /**
         * @method _handle_input_request
         * @private
         */
        handleInputRequest: function (cell, content) {
            this.dbg("handle input request called");
            return;
            //this.output_area.append_raw_input(content);
        },
        /**
         * @method _handle_clear_output
         * @private
         */
        handleClearOutput: function (cell, content) {
            this.dbg("handle clear output called");
            return;
            //this.clear_output(content.stdout, content.stderr, content.other);
        },

        /**
         * @method _handle_output
         */
        handleOutput: function (cell, msgType, content, showOutput) {
            // copied from outputarea.js
            var buffer = "";
            if (msgType === "stream") {
                buffer += content.data;
                var lines = buffer.split("\n");
                var offs = 0,
                    done = false,
                    self = this,
                    result = "";

                $.each(lines, function(index, line) {
                    if (!done) {
                        if (line.length == 0) {
                            offs += 1; // blank line, move offset
                        }
                        else {
                            // look for @@S, @@P, @@D, @@G, @@J, @@E, or @@A
                            var matches = line.match(/^@@([ADEGJSP])(.*)/);
                            if (matches) { // if we got one
                                switch(matches[1]) {
                                    case 'S': // Start running
                                        // if we're starting, init the progress bar.
                                        break;

                                    case 'D': // Done running
                                        // were done, so hide the progress bar (wait like a second or two?)
                                        self.resetProgress(cell);
                                        break;

                                    case 'P': // Progress step
                                        var progressInfo = matches[2].split(',');
                                        if (progressInfo.length == 3) {
                                            self.showCellProgress(cell, progressInfo[0], progressInfo[1], progressInfo[2]);
                                            offs += line.length;
                                            if (index < lines.length - 1)
                                                offs += 1;
                                        }
                                        else
                                            done = true;
                                        break;

                                    case 'E': // Error while running
                                        var errorJson = matches[2];
                                        errorJson = errorJson.replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/\$/g, "&#36;");
                                        self.createOutputCell(cell, '{"error" :' + errorJson + '}', true);
                                        break;

                                    case 'G': // debuG message
                                        var debug = matches[2];
                                        self.dbg("[KERNEL] " + debug);
                                        break;

                                    case 'J': // Job id register
                                        var jobId = matches[2];
                                        self.dbg("[JOB ID] " + jobId);
                                        self.registerJobId(jobId, cell);
                                        break;

                                    case 'A': // App id register
                                        var appId = matches[2];
                                        self.dbg("[APP ID] " + appId);
                                        self.registerJobId(appId, cell);
                                        break;

                                    default:
                                        // by default just dump it to the console
                                        self.dbg("[UNKNOWN TAG] " + line);
                                        break;
                                }
                                return;
                            }
                            // No progress marker on non-empty line => treat as final output of program.
                            else {
                                result += line;
                                // all but the last line should have \n appended
                                if (index < lines.length - 1) {
                                    result += "\n";
                                }
                            }
                        }
                    }
                });
                if (offs > 0) {
                    // if we found progress markers, trim processed prefix from buffer
                    buffer = buffer.substr(offs, buffer.length - offs);
                }
                if (result.length > 0) {
                    if (showOutput === "app" && window.kbconfig && window.kbconfig.mode === "debug") {
                        if (!cell.metadata[this.KB_CELL].stackTrace)
                            cell.metadata[this.KB_CELL].stackTrace = [];
                        // try to parse the result as JSON - if so, then it's a final result and we just
                        // need the 'data' field
                        try {
                            var data = JSON.parse(result);
                            if (data && typeof data === 'object')
                                cell.metadata[this.KB_CELL].stackTrace.push(data.data);
                        }
                        catch (err) {
                            // it's NOT JSON, and we should just append it.
                            cell.metadata[this.KB_CELL].stackTrace.push(result);
                        }
                    }
                    else if (showOutput)
                        this.createOutputCell(cell, result);
                }
            }
        },

        /**
         * @method
         * Registers the given job id with the Narrative.
         * This stores the job id in the Narrative's metadata.
         * XXX: Should this trigger a save?
         */
        registerJobId: function(jobId, sourceCell) {
            // This is possibly the ugliest hack here. In the future, all cells should actually know their
            // fancy UUIDs. But that *might* be backwards incompatible with existing narratives that we want
            // to show off.
            //
            // Really, all cells should be "NarrativeInput" or "NarrativeOutput" widgets that wrap their actual
            // contents, and we can poke those widgets for their IDs. But that's later.
            var txt = sourceCell.get_text();
            var cellId = 'unknown';

            if (txt)
                cellId = $('<div>').append(txt).find('div[id^=kb-cell-]').attr('id');

            var jobInfo = {
                id : jobId,
                source : cellId,
                target : '',
                timestamp : new Date().toISOString()
            };

            if (this.isAppCell(sourceCell))
                this.trigger('registerApp.Narrative', jobInfo);
            else
                this.trigger('registerMethod.Narrative', jobInfo);
        },


        createViewerCell: function(cellIndex, data, widget) {
            var cell = this.addOutputCell(cellIndex, widget);
            var title = "Data Viewer";
            var type = "viewer";

            var uuid = this.uuidgen();
            var outCellId = 'kb-cell-out-' + uuid;
            var outputData = '{"data":' + this.safeJSONStringify(data) + ', ' +
                               '"type":"' + type + '", ' +
                               '"widget":"' + widget + '", ' +
                               '"cellId":"' + outCellId + '", ' +
                               '"title":"' + title + '", ' +
                               '"time":' + this.getTimestamp() + '}';

            cellText = '<div id="' + outCellId + '"></div>\n' +
                       '<script>' +
                       '$("#' + outCellId + '").kbaseNarrativeOutputCell(' + outputData + ');' +
                       '</script>';
            cell.set_text(cellText);
            cell.rendered = false; // force a render
            cell.render();
        },

        /**
         * Result is an object with this structure:
         * cell = the invoking function cell.
         * result = the result data object from the Python call.
         * widget - the widget to use (if null, then use kbaseDefaultNarrativeOutput)
         * data - the object to be passed in to the widget
         * embed - if true, then embed the widget and render it.
         * Returns unique id (string) of output cell <div>
         */
        createOutputCell: function(cell, result, isError, widget) {
            if (typeof result === 'string' && !isError) {
                // try to parse it as JSON.
                // if we fail, then it's not something we can deal with and shouldn't
                // make an output cell from it.
                try {
                    result = JSON.parse(result);
                    if (!result || typeof result !== 'object' || result === null)
                        return;
                }
                catch (err) {
                    return;
                }
            }

            // If result.embed is false,
            // or if the result doesn't have any data to put into a widget,
            // don't make a widget! Assume that this will have thrown an error somewhere
            // along the way.
            //
            // Note that an empty object is not null! So if result.data = {}, it'll still do something.
            if (!isError && (!result.embed || result.data === null || result.data === undefined)) {
                //do something.
                console.error('Unable to create output cell from supplied data object');
                console.error(result);
                return;
            }

            var widget = this.defaultOutputWidget;
            var outputTitle = '';
            var outputType = 'method';
            var data = isError ? result : result.data;

            if (this.isFunctionCell(cell)) {
                /**
                 * 2 cases here:
                 * cell.metadata['kb-cell'].method exists:
                 * it either has widgets.output (new cell)
                 * or it doesn't, and that comes from result.widget (old cell)
                 *
                 * cell.metadata[kb-cell].app exists:
                 * use default output for now
                 */
                var method = cell.metadata[this.KB_CELL].method;
                widget = result.widget;
                if (!widget) {
                    if (method.widgets && method.widgets.output) {
                        widget = method.widgets.output;
                    }
                    else {
                        widget = this.defaultOutputWidget;
                    }
                }
                outputTitle = method.title;
                if (!outputTitle && method.info && method.info.name)
                    outputTitle = method.info.name;
            }
            else if (this.isAppCell(cell)) {
                var app = cell.metadata[this.KB_CELL].app;
                outputTitle = app.info.name || 'KBase App';
                outputType = 'app';
            }
            if (isError) {
                widget = this.errorWidget;
                outputType = 'error';
            }

            var outputCell = isError ? this.addErrorCell(IPython.notebook.find_cell_index(cell), widget) :
                                       this.addOutputCell(IPython.notebook.find_cell_index(cell), widget);

            var uuid = this.uuidgen();
            var outCellId = 'kb-cell-out-' + uuid;
            var outputData = '{"data":' + data + ', ' +
                               '"type":"' + outputType + '", ' +
                               '"widget":"' + widget + '", ' +
                               '"cellId":"' + outCellId + '", ' +
                               '"title":"' + outputTitle + '", ' +
                               '"time":' + this.getTimestamp() + '}';

            cellText = '<div id="' + outCellId + '"></div>\n' +
                       '<script>' +
                       '$("#' + outCellId + '").kbaseNarrativeOutputCell(' + outputData + ');' +
                       '</script>';
            outputCell.set_text(cellText);
            outputCell.rendered = false; // force a render
            outputCell.render();
            // If present, add list of "next steps"
            if (result.next_steps.apps || result.next_steps.methods) {
              var $body = $('#' + outCellId).find('.panel-body');
              this.showNextSteps({elt: $body, next_steps: result.next_steps});
            }
            this.resetProgress(cell);
            this.trigger('updateData.Narrative');
            return outCellId;
        },

        /**
        * Show a list of suggested 'next steps' after we have finished the run.
        * The input is an object of the form:
        *   { next_steps: value is exactly the same type of object,
        *                 returned by the `getfunctionSpecs.Narrative`
        *                 trigger in `kbaseNarrativeMethodPanel`.
        *     elt: Created <div> is added with .append()
        *   }
        * Returns the <div> that was populated.
        */
        showNextSteps: function(obj) {
          var $elt = obj.elt, next_steps = obj.next_steps;
          var $tgt = $('<div>').addClass('kb-app-next');
          var $title = $('<h3>').text('Suggested next steps:');
          $tgt.append($title);
          // init hide/unhide behavior
          $hide_btn = $('<span>').addClass('kb-app-next-hide').text('hide');
          $unhide_btn = $('<span>').addClass('kb-app-next-unhide')
                      .text('next steps').hide();
          $hide_btn.click(function() {                  // hide
            $title.hide(); $tgt.find('a').hide();
            $hide_btn.hide(); $unhide_btn.show(); });
          $unhide_btn.click(function() {                // unhide
            $title.show(); $tgt.find('a').show();
            $unhide_btn.hide(); $hide_btn.show(); });
          $tgt.append($hide_btn).append($unhide_btn);
          // add all the links to the next-step apps/methods
          var $apps = $('<div>'), comma = {v: ''}, self = this;
          // iterate over apps and methods in the result
          var has_both = next_steps.apps && next_steps.methods;
          _.each(['apps', 'methods'], function(mtype) {
            if (has_both) { /* XXX: prefix with (App) or something? */ }
            var specs = next_steps[mtype];
            // Iterate over all specs in app/method section
            _.each(_.values(specs), function(s) {
              var name = s.info.name; // readable name, displayed to user
              var href = $('<a>').attr({'href': 'javascript:;'})
                                 .text(comma.v + name);
              // insert app/method on click
              href.click(function() {
                self.trigger(mtype.slice(0, -1) + "Clicked.Narrative", s);
              });
              $apps.append(href);
              comma.v = ', ';
            });
          });
          $tgt.append($apps);
          $elt.append($tgt);
          return $tgt;
        },

        /**
         * @method resetProgress
         * @private
         * Resets the progress bar in the given cell to not show any progress or progress message.
         * @param cell - the IPython notebook cell to reset.
         */
        resetProgress: function(cell) {
            var $progressBar = $(cell.element).find("#kb-func-progress .kb-cell-progressbar .progress-bar");
            $progressBar.css('width', '0%');

            var $progressMsg = $(cell.element).find("#kb-func-progress .text-success");
            $progressMsg.text("");
        },

        /**
         * @method showCellProgress
         *
         * Shows current progress in a running IPython function.
         * @param cell - the cell being run
         * @param name - the text of the progress to set
         * @param done - the number of steps finished.
         * @param total - the total number of steps to go through.
         *
         * @private
         */
        showCellProgress: function(cell, name, done, total) {
            var percentDone = 0;

            var $progressBar = $(cell.element).find("#kb-func-progress .kb-cell-progressbar .progress-bar");
            var $progressMsg = $(cell.element).find("#kb-func-progress .text-success");
            if (name === 'DONE') {
                $progressMsg.text("Completed");
                percentDone = 100;
                $progressBar.css('width', '100%');
                $(cell.element).find("#kb-func-progress").fadeOut(1000, $.proxy(function() { this.resetProgress(cell); }, this));
            }
            else {
                $progressMsg.text("Step " + done + " / " + total + ": " + name);
                percentDone = (100 * done - 100) / total;
                $progressBar.css('width', percentDone + '%');
            }
        },

        /**
         * Add a new cell for output of the script.
         *
         * The cell is added below the cell in currentIndex. This position
         * should be set by the calling function to represent the position of
         * the calling function cell.
         *
         * @method _addOutputCell
         * @private
         * @return id of <div> inside cell where content can be placed
         */
        addOutputCell: function(currentIndex, widget) {
            var cell = IPython.notebook.insert_cell_below('markdown', currentIndex);
            cell.celltoolbar.hide();
            this.setOutputCell(cell, widget);
            this.removeCellEditFunction(cell);

            return cell;
        },

        addErrorCell: function(currentIndex) {
            var cell = IPython.notebook.insert_cell_below('markdown', currentIndex);
            cell.celltoolbar.hide();
            this.setErrorCell(cell);
            this.removeCellEditFunction(cell);
            return cell;
        },

        /** Not really used right now. */
        convert_mime_types: function (json, data) {
            if (data === undefined) {
                return json;
            }
            if (data['text/plain'] !== undefined) {
                json.text = data['text/plain'];
            }
            if (data['text/html'] !== undefined) {
                json.html = data['text/html'];
            }
            if (data['image/svg+xml'] !== undefined) {
                json.svg = data['image/svg+xml'];
            }
            if (data['image/png'] !== undefined) {
                json.png = data['image/png'];
            }
            if (data['image/jpeg'] !== undefined) {
                json.jpeg = data['image/jpeg'];
            }
            if (data['text/latex'] !== undefined) {
                json.latex = data['text/latex'];
            }
            if (data['application/json'] !== undefined) {
                json.json = data['application/json'];
            }
            if (data['application/javascript'] !== undefined) {
                json.javascript = data['application/javascript'];
            }
            return json;
        },

        /* ------------------------------------------------------ */
        /* Accessors */

        workspace : function(key, value) {
            return this._accessor('_workspace', key, value);
        },

        _accessor : function(name, key, value) {
            if (this.data(name) == undefined) {
                this.data(name, {});
            }

            var obj = this.data(name);

            if (arguments.length == 2) {
                obj[key] = value;
            }

            if (arguments.length > 0) {
                return obj[key];
            }
            else {
                return obj;
            }
        },

        /* ------------------------------------------------------ */

        /**
         * Render the widgets.
         *
         * @returns this
         */
        render: function() {
            var creator = IPython.notebook.metadata.creator;
            if (creator) {// insert agnosticism here
                $('.creator-stamp').text('Created by ' + creator);
            }

            this.rebindActionButtons();
            this.hideGeneratedCodeCells();
            var cells = IPython.notebook.get_cells();
            for (var i=0; i<cells.length; i++) {
                this.checkCellMetadata(cells[i]);
            }
            this.loadAllRecentCellStates();
            // Check for older version of data dependencies
            // update them if necessary.
            this.trigger('updateData.Narrative');

            return this;
        },

        /*
         * Show input/output cell connections.
         */
         show_connections: function() {
            var self = this;
            console.debug("show_connections.start");
            _.each(_.pairs(this.connectable), function(pair) {
                var e1 = $('#kb-input-' + pair[0]);
                var e2 = $('#kb-output-' + pair[1]);
                self.connect(e1, e2, 20, 2,
                    $('#notebook-container'), 'kb-line');
            });
            console.debug("show_connections.end");
        },

        /**
         * Log out from all the widgets.
         *
         * @param token
         * @returns this
         */
        loggedOut: function(token) {
            if (this.dataTableWidget)
                this.dataTableWidget.loggedOut(token);
            this.ws_client = null, this.ws_auth = null;
        },

        /**
         * Initialize the logger
         */
        initLogging: function(level) {
            Logger.useDefaults();
            Logger.setLevel(level);
        },
        /**
         * uuid generator
         *
         * @private
         */
        uuidgen: function() {
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
                var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);
                return v.toString(16);});
        },

        /**
         * Returns a timestamp in milliseconds since the epoch.
         * (This is a one-liner, but kept as a separate function in case our needs change.
         * Maybe we'll want to use UTC or whatever...)
         * @public
         */
        getTimestamp: function() {
            return new Date().getTime();
        },

        /**
         * Converts a timestamp to a simple string.
         * Do this American style - HH:MM:SS MM/DD/YYYY
         *
         * @param {string} timestamp - a timestamp in number of milliseconds since the epoch.
         * @return {string} a human readable timestamp
         */
        readableTimestamp: function(timestamp) {
            var format = function(x) {
                if (x < 10)
                    x = '0' + x;
                return x;
            };

            var d = new Date(timestamp);
            var hours = format(d.getHours());
            var minutes = format(d.getMinutes());
            var seconds = format(d.getSeconds());
            var month = d.getMonth()+1;
            var day = format(d.getDate());
            var year = d.getFullYear();

            return hours + ":" + minutes + ":" + seconds + ", " + month + "/" + day + "/" + year;
        },

        /**
         * @method
         * Scans through all cells and performs a version updating, if necessary.
         * Updates performed:
         * 1. kbaseNarrativeCell -> kbaseNarrativeMethodCell
         * 2. More to come!
         */
        scanAndUpdateCells: function() {
            var cells = IPython.notebook.get_cells();
            for (var i=0; i<cells.length; i++) {
                var cell = cells[i];
                if (this.isFunctionCell(cell)) {
                    var cellText = cell.get_text();
                    var matchArr = cellText.match(/(<script>\s*\$\(['"]\#(.+)['"]\)\.)kbaseNarrativeCell/);
                    if (matchArr && matchArr.length >= 2) {
                        cellText = cellText.replace(matchArr[0], matchArr[1] + 'kbaseNarrativeMethodCell');
                    }
                    cell.set_text(cellText);
                    cell.rendered = false;
                    cell.render();
                }
            }
        },

    });

})( jQuery );

/**
 * Base for our custom Narrative cells.
 *
 * @public
 */
(function($, undefined) {
    $.KBWidget({
        /* 
         * (required) Your widget should be named in CamelCase.
         */
        name: 'kbaseNarrativeCell',
        parent: 'kbaseWidget',
        version: '0.0.1',
        options: {
        },

        /**
         * Init cell.
         */
        init: function(options) {
            //console.debug("kbaseNarrativeCell.init");
            this._super(options);
        },
    });
})(jQuery);

/**
 * Narrative data cell.
 *
 * Uses kbaseNarrativeViewers.js to "view" itself.
 *
 * @public
 */

// Global singleton for viewers
kb_g_viewers = null;


/**
 * Get/store info on all viewers from method store.
 *
 * Parameters:
 *  mclient - Method store client
 */
var KBaseNarrativeViewers = function(mclient, done) {
    this.viewers = {};
    this.landing_page_urls = {};
    this.type_names = {};
    this.specs = {};
    this.method_ids = [];
    var self = this;
    // Get application types, and populate data structures
    mclient.list_categories({'load_methods': 1, 'load_apps': 0, 'load_types': 1},
        function(data) {
    		var methodInfo = data[1];
            var aTypes = data[3];
            _.each(aTypes, function(val, key) {
                if (val.loading_error) {
                    console.error("Error loading method [" + key + "]: " + val.loading_error);
                }
                else if (val.view_method_ids && val.view_method_ids.length > 0) {
                    //console.debug("adding view method[" + key + "]=", val);
                    var mid = val.view_method_ids[0];
                    if (!methodInfo[mid]) {
                    	console.log('Can\'t find method info for id: ' + mid);
                    } else if (methodInfo[mid].loading_error) {
                    	console.log('There is an error for method info with id [' + mid + ']: ' + methodInfo[mid].loading_error);
                    } else {
                    	self.viewers[key] = mid;
                    	self.landing_page_urls[key] = val.landing_page_url_prefix;
                    	self.type_names[key] = val.name;
                    	self.method_ids.push(mid);
                    }
                }
                else {
                    //console.warn("No output types for: " + key);
                }
            });
            // Get method specs from all method_ids associated with some type in the previous loop
            // and populate `specs` with the data.
            self.method_ids = _.uniq(self.method_ids);
            mclient.get_method_spec({'ids':self.method_ids},
                function(specs) {
                    _.each(specs, function(value, key) {
                        //console.debug("Set spec[" + value.info.id + "]");
                        self.specs[value.info.id] = value;
                    });
                    if (done) {
                        done();
                    }
                },
                function(error) {
                    console.error("get_method_spec:",error);
            });
    });
    return this;
};

// Methods
KBaseNarrativeViewers.prototype.create_viewer = function(elt, data_cell) {
    // Helper functions
    /** Get value of parameter in mapping. */
    var get_param_value = function(o, mapping) {
          var param = null;
          // Get input/output parameter value
          if (mapping.input_parameter) {
              param = o.name;
          }
          else if (mapping.constant_value) {
              param = mapping.constant_value;
          }
          else if (mapping.narrative_system_variable) {
              switch (mapping.narrative_system_variable) {
                  case 'workspace':
                      param = o.ws_name;
                      break;
                  default:
                      console.error('Method (' + method_id + ') spec: unknown narrative system variable=' + sysProp);
              }
          }
          return param;
    };
    /** Transform parameter according to transform given by mapping */
    var transform_param = function(o, mapping, param) {
          if (mapping.target_type_transform) {
          	switch (mapping.target_type_transform) {
              case 'list':
          		param = [param];
                  break;
              case 'ref':
          		param = o['ws_name'] + '/' + param;
                  break;
          	default:
                  param = null;
          	}
          }
          return param;
    };
    // Variables and main method
    var o = data_cell.obj_info;
    var method_id = this.viewers[o.bare_type];
    if (!method_id) {
        //console.debug("No viewer found for type=" + o.bare_type);
        return null;
    }
    var spec = this.specs[method_id];
	  var inputParamId = spec['parameters'][0]['id'];
	  var output = {};
    var mappings = spec.behavior.output_mapping;
    _.each(mappings, function(mapping) {
        // Get parameter value
        var param = get_param_value(o, mapping);
        if (param == null) {
            console.error('Unsupported output mapping structure:', mapping);
            return null;
        }
        // Get transformed parameter value
        param = transform_param(o, mapping, param);
        if (param == null) {
            console.error('Method (' + method_id + ') spec: bad transformation type=',
                          method.target_type_transform);
            return null;
        }
        // Get target property
        if (!mapping.target_property) {
            console.error('Method (' + method_id + ') spec: missing target property');
            return null;
        }
        // Set target property to transformed parameter value
        output[mapping.target_property] = param;
    });
    output.widget_title = this.type_names[o.bare_type];  //spec.info.name;
    output.landing_page_url_prefix = this.landing_page_urls[o.bare_type];
    var output_widget = spec.widgets.output;
    try {
      var w = elt[output_widget](output);
      return w;
    }
    catch(err){
      console.error("error making widget: " + output_widget);
    }
    // return elt[output_widget](output);
};

/**
 * Default viewer.
 *
 * Parameters:
 *    elt - jQuery element that the viewer should be attached to
 *    data_cell - The kbaseNarrativeDataCell widget with the data, etc.
 */
var KBaseNarrativeDefaultViewer = function(elt, data_cell) {
    var o = data_cell.obj_info;
    var md_desc = '';
    if (_.isEmpty(o.meta)) {
        md_desc += "No metadata";
    } else {
      md_desc += "Metadata\n";
      this.prev = false;
      _.each(_.pairs(o.meta), function(p) {
        if (this.prev) {
          md_desc += "\n";
        }
        md_desc += p[0] + ": " + p[1];
        this.prev = true;
      });
    }
    return elt.append($('<pre>').append(md_desc));
};

/**
 * NarrativeDataCell widget.
 *
 * This is the widget passed into
 * the viewer.
*/

(function($, undefined) {
    $.KBWidget({
        name: 'kbaseNarrativeDataCell',
        parent: 'kbaseNarrativeCell',
        version: '0.0.1',
        options: {
            info: null, // object info
            cell: null  // IPython cell
        },
        obj_info: null,
        // for 'method_store' service
        method_client: null,
        // IPython cell
        ip_cell: null,

        /**
         * Initialize
         */
        init: function(options) {
            //console.debug("kbaseNarrativeDataCell.init.start");
            this._super(options);
            this.obj_info = options.info;
            this.obj_info.bare_type = /[^-]*/.exec(this.obj_info.type);
            this.obj_info.simple_date = /[^+]*/.exec(this.obj_info.save_date);
            this.ip_cell = options.cell;
            this._initMethodStoreClient();
            if (kb_g_viewers == null) {
		// we have to wait until the type/method specs are loaded the first time
		var self = this;
		
		var done = function() {
		    //console.debug("kbaseNarrativeDataCell.init.done with load");
		    kb_g_viewers = this.all_viewers;
		    self.render(options.info);
		}
		this.all_viewers = new KBaseNarrativeViewers(this.method_client,done);
            } else {
		// if they are already loaded, we can just grab it and render
		this.all_viewers = kb_g_viewers;
		//console.debug("kbaseNarrativeDataCell.init.done");
		this.render(options.info);
	    }
            
            return this; 
        },

        _initMethodStoreClient: function() {
            if (this.method_client === null) {
              this.method_client = new NarrativeMethodStore(this._getMethodStoreURL());
            }
        },

        _getMethodStoreURL: function() {
            var methodStoreURL = null;
            if (window.kbconfig && window.kbconfig.urls) {
                methodStoreURL = window.kbconfig.urls.narrative_method_store;
            } else {
                methodStoreURL = 'http://dev19.berkeley.kbase.us/narrative_method_store';
            }
            return methodStoreURL;
        },

        /**
         * Instantiate viewer widget for a data object.
         *
         * @param object_info (object) Object with info about data item
         * @return Whatever the 'viewer' function returns.
         */
        render: function() {
            var $label = $('<span>').addClass('label label-info').append('Data');
            var baseClass = 'kb-cell-output';
            var panelClass = 'panel-default';
            var headerClass = 'kb-out-desc'; 

            var is_default = false; // default-viewer
            var self = this;
            var widgetTitleElem = self.$elem.closest('.kb-cell-output').find('.panel').find('.panel-heading').find('.kb-out-desc').find('b');
            var mainPanel = $('<div>');
            self.$elem.append(mainPanel);
            var $view = this.all_viewers.create_viewer(mainPanel, self);

            var landing_page_url_prefix = null;
            var type_tokens = self.obj_info.type.split('.')
            var type_module = type_tokens[0];
            var type = type_tokens[1].split('-')[0];
            var ws_landing_page_map = window.kbconfig.landing_page_map;
            if (ws_landing_page_map && ws_landing_page_map[type_module] && ws_landing_page_map[type_module][type]) {
            	landing_page_url_prefix = ws_landing_page_map[type_module][type];
            }
            var widget_title = '';
            if (_.isNull($view)) {
                KBaseNarrativeDefaultViewer(mainPanel, self);
                widget_title = type;
                is_default = true;
            }
            else {
                widget_title = $view.options.widget_title;
                if (!landing_page_url_prefix)
                	landing_page_url_prefix = $view.options.landing_page_url_prefix;
            }
            if (!landing_page_url_prefix)
            	landing_page_url_prefix = 'json';
            widgetTitleElem.empty();
            widgetTitleElem.append(widget_title);
            widgetTitleElem.append('&nbsp;<a href="'+self.shortMarkdownDesc(self.obj_info, 
            		landing_page_url_prefix)+'" target="_blank">'+self.obj_info.name+'</a>');
            // Return the rendered widget
            return this;
        },

        shortMarkdownDesc: function(o, landing_page_url_prefix) {
          var link = "https://"; // force https
          if (window.location.hostname == '0.0.0.0' ||
              window.location.hostname == '127.0.0.1') {
            link += "narrative-dev.kbase.us"; // for testing
          }
          else {
            link += window.location.host;
          }
          link += "/functional-site/#/" + landing_page_url_prefix + "/" + o.ws_name + "/" + o.name;
          return link;
        },

        /**
         * Converts a timestamp to a simple string.
         * Do this American style - HH:MM:SS MM/DD/YYYY
         *
         * @param {string} timestamp - a timestamp in number of milliseconds since the epoch.
         * @return {string} a human readable timestamp
         */
        readableTimestamp: function(timestamp) {
            var format = function(x) {
                if (x < 10)
                    x = '0' + x;
                return x;
            };

            var d = new Date(timestamp);
            var hours = format(d.getHours());
            var minutes = format(d.getMinutes());
            var seconds = format(d.getSeconds());
            var month = d.getMonth()+1;
            var day = format(d.getDate());
            var year = d.getFullYear();

            return hours + ":" + minutes + ":" + seconds + ", " + month + "/" + day + "/" + year;
        }

    })
})(jQuery);

/**
 * This is the entry point for the Narrative's front-end. It initializes
 * the login session, fires up the data and function widgets, and creates
 * the kbaseNarrativeWorkspace wrapper around the IPython notebook that
 * does fun things like manage widgets and cells and kernel events to talk to them.
 */
"use strict";

// Bind all page buttons right at startup.
(function() {
    $(document).on('workspaceIdQuery.Narrative', function(e, callback) {
        if (callback) {
            callback(workspaceId);
        }
    });

    // bind menubar buttons
    $('#kb-save-btn').click(function(e) {
        if (IPython && IPython.notebook) {
            var narrName = IPython.notebook.notebook_name;
            // we do not allow users to leave their narratives untitled
            if (narrName.trim().toLowerCase()==='untitled' || narrName.trim().length === 0) {
                IPython.save_widget.rename_notebook("Please name your Narrative before saving.", false);
            } else {
                IPython.notebook.save_checkpoint();
            }
        }
    });
    $('#kb-narr-name #name').click(function(e) {
        if (IPython && IPython.save_widget) {
            IPython.save_widget.rename_notebook("Rename your Narrative.", true);
            var narrName = IPython.notebook.notebook_name;
            // this code needs to move to the save widget since rename_notebook is async!!
            //$('#kb-narr-name #name').text(narrName);
        }
    });
    $('#kb-kernel-int-btn').click(function(e) {
        if (IPython && IPython.notebook && IPython.notebook.kernel) {
            IPython.notebook.kernel.interrupt();
        }
    });
    $('#kb-kernel-ref-btn').click(function(e) {
        if (IPython && IPython.notebook && IPython.notebook.kernel) {
            IPython.notebook.kernel.restart();
        }
    });
    $('#kb-del-btn').click(function(e) {
        if (IPython && IPython.notebook)
            IPython.notebook.delete_cell();
    });
    $('#kb-jira-btn').attr('href', window.kbconfig.urls.submit_jira_ticket + '%20' + window.kbconfig.version);
    $('#kb-status-btn').attr('href', window.kbconfig.urls.status_page);

    var $dataList = $('<div>');
    var $shareWidget = $dataList["kbaseNarrativeSharePanel"]({});
    $('#kb-share-btn').popover({
        html : true,
        placement : "bottom",
        //title: function() {
        //    return "Share this Narrative & Data";
        //},
        content: function() {
            // we do not allow users to leave thier narratives untitled
            if (IPython && IPython.notebook) {
                var narrName = IPython.notebook.notebook_name;
                if (narrName.trim().toLowerCase()==='untitled' || narrName.trim().length === 0) {
                    IPython.save_widget.rename_notebook("Your Narrative must be named before you can share it with others.", false);
                    return "<br><br>Please name your Narrative before sharing.<br><br>"
                }
            }

            //!! arg!! I have to refresh to get reattach the events, which are lost when
            //the popover is hidden!!!  makes it a little slower because we refetch permissions from ws each time
            $shareWidget.refresh();
            return $dataList;
        }
    });

    $('#kb-add-code-cell').click(function() { IPython.notebook.insert_cell_below('code'); })
    $('#kb-add-md-cell').click(function() { IPython.notebook.insert_cell_below('markdown'); })

})();

/**
 * Error logging for detectable failure conditions.
 * Logs go through the kernel and thus are sent to the
 * main KBase logging facility (Splunk, as of this writing).
 *
 * Usage:
 *    KBFail(<is_it_fatal>, "what you were doing", "what happened");
 * Returns: false if IPython not initialized yet, true otherwise
 */
var _kb_failed_once = false;
var KBFail = function(is_fatal, where, what) {
    if (!IPython || !IPython.notebook || !IPython.notebook.kernel) {
        return false;
    }
    var code = "";
    if (_kb_failed_once == false) {
        code += "from biokbase.narrative.common import kblogging\n";
        _kb_failed_once = true;
    }
    code += "kblogging.NarrativeUIError(";
    if (is_fatal) {
        code += "True,";
    }
    else {
        code += "False,";
    }
    if (where) {
        code += 'where="' + where + '"';
    }
    if (what) {
        if (where) { code += ", "; }
        code += 'what="' + what + '"';
    }
    code += ")\n";
    // Log the failure
    try {
        IPython.notebook.kernel.execute(code, null, {store_history: false});        
    }
    catch (err) {
        // wait half a second and try one more time.
        console.log(err);
        setTimeout( function() { IPython.notebook.kernel.execute(code, null, {store_history: false}); }, 500 );
    }    
    return true;
}
/**
 * Syntactic sugar for logging error vs. fatal error.
 *
 * Same as KBFail() with boolean flag replaced by different names
 * for the function.
 */
var KBError = function(where, what) {
  return KBFail(false, where, what);
}
var KBFatal = function(where, what) {
  return KBFail(true, where, what);
}

var Narrative = function() {
    this.narr_ws = null;
    this.readonly = false; /* whether whole narrative is read-only */
    this.authToken = null;
    this.versionCheckTime = 6000*60*1000;
    this.versionHtml = 'KBase Narrative<br>Alpha version';
    this.selectedCell = null;
    this.currentVersion = window.kbconfig.version;

    return this;
};

Narrative.prototype.showIPythonCellToolbar = function(cell) {
    if (this.selectedCell && cell != this.selectedCell)
        this.selectedCell.celltoolbar.hide();
    this.selectedCell = cell;
    // show the new one
    if (this.selectedCell && !this.selectedCell.metadata['kb-cell'])
        this.selectedCell.celltoolbar.show();
};

Narrative.prototype.registerEvents = function() {
    $([IPython.events]).on('status_idle.Kernel',function () {
        $("#kb-kernel-icon").removeClass().addClass('fa fa-circle-o');
    });

    $([IPython.events]).on('status_busy.Kernel',function () {
        $("#kb-kernel-icon").removeClass().addClass('fa fa-circle');
    });

    $([IPython.events]).on('select.Cell', $.proxy(function(event, data) {
        this.showIPythonCellToolbar(data.cell);
    }, this));

    $([IPython.events]).on('create.Cell', $.proxy(function(event, data) {
        this.showIPythonCellToolbar(data.cell);
    }, this));

    $([IPython.events]).on('delete.Cell', $.proxy(function(event, data) {
        this.showIPythonCellToolbar(IPython.notebook.get_selected_cell());
    }, this));
};

Narrative.prototype.initUpgradeDialog = function() {
    var $newVersion = $('<span>')
                      .append('<b>No new version</b>');  // init to the current version
    var $cancelBtn = $('<button type="button" data-dismiss="modal">')
                     .addClass('btn btn-default')
                     .append('Cancel');
    var $upgradeBtn = $('<button type="button" data-dismiss="modal">')
                      .addClass('btn btn-success')
                      .append('Update and Reload')
                      .click($.proxy(function(e) {
                          this.updateVersion();
                      }, this));
    var $upgradeModal = $('<div tabindex=-1 role="dialog" aria-hidden="true">')
                        .addClass('modal fade')
                        .append($('<div>')
                                .addClass('modal-dialog')
                                .append($('<div>')
                                    .addClass('modal-content')
                                    .append($('<div>')
                                            .addClass('modal-header')
                                            .append($('<h4>')
                                                    .addClass('modal-title')
                                                    .attr('id', 'kb-version-label')
                                                    .append('New Narrative Version available!')))
                                    .append($('<div>')
                                            .addClass('modal-body')
                                            .append($('<span>').append('Your current version of the Narrative is <b>' + this.currentVersion + '</b>. Version '))
                                            .append($newVersion)
                                            .append($('<span>').append(' is now available.<br><br>' + 
                                                                       'See <a href="' + window.kbconfig.release_notes + '" target="_blank">here</a> for current release notes.<br>' +
                                                                       'Click "Update and Reload" to reload with the latest version!<br><br>' + 
                                                                       '<b>Any unsaved data in any open Narrative in any window WILL BE LOST!</b>')))
                                    .append($('<div>')
                                            .addClass('modal-footer')
                                            .append($('<div>')
                                                    .append($cancelBtn)
                                                    .append($upgradeBtn)))));
    $('#kb-update-btn').click(function(event) {
        $upgradeModal.modal('show');
    });
    this.checkVersion($newVersion);
    // ONLY CHECK AT STARTUP FOR NOW.
    // setInterval(function() {
    //     self.checkVersion($newVersion);
    // }, this.versionCheckTime);
};

Narrative.prototype.checkVersion = function($newVersion) {
    // look up new version here.
    var self = this;
    $.ajax({
        url: window.kbconfig.urls.version_check,
        async: true,
        dataType: 'text',
        crossDomain: true,
        success: function(ver) {
            ver = $.parseJSON(ver);
            if (self.currentVersion !== ver.version) {
                $newVersion.empty().append('<b>' + ver.version + '</b>');
                $('#kb-update-btn').fadeIn('fast'); 
            }
        },
        fail: function(err) {
            console.log('err');
        }
    });
};

Narrative.prototype.initAboutDialog = function() {
    if (window.kbconfig &&
        window.kbconfig.name &&
        window.kbconfig.version) {
        var $versionDiv = $('<div>')
                          .append('<b>Version:</b> ' + window.kbconfig.version);
        if (window.kbconfig.git_commit_hash && window.kbconfig.git_commit_time)
            $versionDiv.append('<br><b>Git Commit:</b> ' + window.kbconfig.git_commit_hash + ' -- ' + window.kbconfig.git_commit_time);
        if (window.kbconfig.release_notes)
            $versionDiv.append('<br>View release notes on <a href="' + window.kbconfig.release_notes + '" target="_blank">Github</a>');

        if (window.kbconfig.urls) {
            var urlList = Object.keys(window.kbconfig.urls).sort();
            var $versionTable = $('<table>')
                                .addClass('table table-striped table-bordered');
            $.each(urlList,
                function(idx, val) {
                    var url = window.kbconfig.urls[val].toString();
                    // if url looks like a url (starts with http), include it.
                    // ignore job proxy and submit ticket
                    if (val === 'narrative_job_proxy' || val === 'submit_jira_ticket')
                        return;
                    if (url && url.toLowerCase().indexOf('http') == 0) {
                        var $testTarget = $('<td>');
                        $versionTable.append($('<tr>')
                                             .append($('<td>').append(val))
                                             .append($('<td>').append(url)));
                    }
                }
            );
            var $verAccordion = $('<div style="margin-top:15px">');
            $verAccordion.kbaseAccordion({
                elements: [{
                    title: 'KBase Service URLs',
                    body: $versionTable
                }]
            })
            $versionDiv.append($verAccordion);
        }
    }

    var $shutdownButton = $('<button>')
                          .attr({'type':'button', 'data-dismiss':'modal'})
                          .addClass('btn btn-danger')
                          .append('Okay. Shut it all down!')
                          .click($.proxy(function(e) {
                              this.updateVersion();
                          }, this));
    var $reallyShutdownPanel = $('<div style="margin-top:10px">')
                               .append('This will shutdown your Narrative session and close this window.<br><b>Any unsaved data in any open Narrative in any window WILL BE LOST!</b><br>')
                               .append($shutdownButton)
                               .hide();

    var $firstShutdownBtn = $('<button>')
                            .attr({'type':'button'})
                            .addClass('btn btn-danger')
                            .append('Shutdown')
                            .click(function(e) {
                                $reallyShutdownPanel.slideDown('fast');
                            });

    var $versionModal = $('<div tabindex=-1 role="dialog" aria-labelledby="kb-version-label" aria-hidden="true">')
                        .addClass('modal fade')
                        .append($('<div>')
                                .addClass('modal-dialog')
                                .append($('<div>')
                                    .addClass('modal-content')
                                    .append($('<div>')
                                            .addClass('modal-header')
                                            .append($('<h4>')
                                                    .addClass('modal-title')
                                                    .attr('id', 'kb-version-label')
                                                    .append('KBase Narrative Properties')))
                                    .append($('<div>')
                                            .addClass('modal-body')
                                            .append($versionDiv))
                                    .append($('<div>')
                                            .addClass('modal-footer')
                                            .append($('<div>')
                                                    .append($('<button type="button" data-dismiss="modal">')
                                                            .addClass('btn btn-default')
                                                            .append('Dismiss')
                                                            .click(function(e) {
                                                                $reallyShutdownPanel.hide();
                                                            }))
                                                    .append($firstShutdownBtn))
                                            .append($reallyShutdownPanel))));

    $('#kb-about-btn').click(function(event) {
        $versionModal.modal('show');
    });
    $('#notebook').append($versionModal);
};

Narrative.prototype.init = function() {
    this.registerEvents();
    this.initAboutDialog();
    this.initUpgradeDialog();

    $('[data-toggle="tooltip"]').tooltip()
    /*
     * Before we get everything loading, just grey out the whole %^! page
     */
    var $sidePanel = $('#kb-side-panel').kbaseNarrativeSidePanel({ autorender: false });

    /*
     * Once everything else is loaded and the Kernel is idle,
     * Go ahead and fill in the rest of the Javascript stuff.
     */
    $([IPython.events]).one('status_started.Kernel', function() {
        // NAR-271 - Firefox needs to be told where the top of the page is. :P
        window.scrollTo(0,0);
        
        IPython.notebook.set_autosave_interval(0);
        IPython.CellToolbar.activate_preset("KBase");

        var ws_name = null;
        if (IPython && IPython.notebook && IPython.notebook.metadata) {
            ws_name = IPython.notebook.metadata.ws_name;
            var narrname = IPython.notebook.notebook_name;
            var username = IPython.notebook.metadata.creator;
            $('#kb-narr-name #name').text(narrname);
            $('#kb-narr-creator').text(username);
            $('.kb-narr-namestamp').css({'display':'block'});

            var token = null;
            if (window.kb && window.kb.token)
                token = window.kb.token;

            $.ajax({
                type: 'GET',
                url: 'https://kbase.us/services/genome_comparison/users?usernames=' + username + '&token=' + token,
                dataType: 'json',
                crossDomain: true,
                success: function(data, res, jqXHR) {
                    if (username in data.data && data.data[username].fullName) {
                        var fullName = data.data[username].fullName;
                        $('#kb-narr-creator').text(fullName + ' (' + username + ')');
                    }
                }
            });

            // This puts the cell menu in the right place.
            $([IPython.events]).trigger('select.Cell', {cell: IPython.notebook.get_selected_cell()});
        }
        if (ws_name) {
            /* It's ON like DONKEY KONG! */
            $('a#workspace-link').attr('href', $('a#workspace-link').attr('href') + 'objects/' + ws_name);
            var narr_ws = $('#notebook_panel').kbaseNarrativeWorkspace({
                loadingImage: "/static/kbase/images/ajax-loader.gif",
                ws_id: IPython.notebook.metadata.ws_name
            });
            $sidePanel.render();
            $(document).trigger('setWorkspaceName.Narrative', {'wsId' : ws_name, 'narrController': narr_ws});
        }
        else {
            // ?
        }
    });
};

Narrative.prototype.updateVersion = function() {
    var user = $('#signin-button').kbaseLogin('session', 'user_id');
    var prom = $.ajax({
        contentType: 'application/json',
        url: '/narrative_shutdown/' + user,
        type: 'DELETE',
        crossDomain: true
    });
    prom.done(function(jqXHR, response, status) {
        setTimeout(function() { location.reload(true); }, 200);
    });
    prom.fail(function(jqXHR, response, error) {
        alert('Unable to update your Narrative session\nError: ' + jqXHR.status + ' ' + error);
    });
};
/**
 * A simple widget intended to format and display errors that come from
 * the narrative kernel (these are typically back-end errors that
 * occur while running the function). The cause of these errors will
 * probably be either errors with user inputs, or errors while 
 * communicating with the KBase API.
 *
 * @author Bill Riehl <wjriehl@lbl.gov>
 * @public
 */
(function($, undefined) {
    $.KBWidget({
        /* 
         * (required) Your widget should be named in CamelCase.
         */
        name: 'kbaseNarrativeError',

        /*
         * Extending kbaseAuthenticatedWidget lets you use auth tokens
         * semi-automatically, assuming the page this is used in fires
         * the loggedIn.kbase, loggedOut.kbase, and loggedInQuery events.
         * These are usually fired by the kbaseLogin widget.
         *
         * this.user_id() = the logged in user id
         * this.authToken() = the current authentication token
         */
        parent: 'kbaseWidget',

        /*
         * (optional) Widgets should be semantically versioned.
         * See http://semver.org
         */
        version: '1.0.0',

        /*
         * (optional) Widgets are implied to include an options structure.
         * It's useful to put default values here.
         */
        options: {
            error: {
                'msg' : 'An error occurred',
                'method_name' : 'No method',
                'type' : 'Error',
                'severity' : 'Catastrophic'
            },
        },

        /**
         * (required) This is the only required function for a KBase Widget.
         * @param {object} options - a structure containing the set of 
         * options to be passed to this widget.
         * @private
         */
        init: function(options) {
            this._super(options);

            return this.render();
        },

        render: function() {
            var addRow = function(name, value) {
                return "<tr><td><b>" + name + "</b></td><td>" + value + "</td></tr>";
            };

            // Shamelessly lifted from kbaseNarrativeWorkspace.
            // Thanks Dan!
            var esc = function(s) { 
                return s;
                // return s.replace(/'/g, "&apos;")
                //         .replace(/"/g, "&quot;")
                //         .replace(/</g, "&gt;")
                //         .replace(/>/g, "&lt;");
            };

            // Reformat a TB as a list
            var format_tb = function(err) {
                var s = "\n";
                var ind = ""; // keep in case change of mind
                if (err.traceback === undefined) {
                    s += "No traceback available.\n";
                }
                else if (err.traceback instanceof Array) {
                    s += "Traceback (most recent call last):\n";
                    var tb = err.traceback;
                    for (var i=0, ctr=0; i < tb.length; i++) {
                        var entry = tb[i];
                        if (entry.function == "__call__")
                            continue;  // ignore wrapper
                        ctr++;
                        var txt = "";
                        if (entry.function || entry.line) {
                            var txt = ctr + ") ";
                            txt += "in '" + entry.function + "' line " + entry.line + ": ";
                        }
                        txt += entry.text;
                        s += ind + txt + "\n";
                    }
                }
                else if (err.traceback instanceof Object) {
                    for (var i in err.traceback) {
                        s += JSON.stringify(err.traceback[i]);
                    }
                }
                else {
                    s += err.traceback;
                }
                return s;
            };

            var $errorHead = $('<div>')
                             .addClass('well well-sm')
                             .append('<b>An error occurred while running your function!</b>');

            var $errorTable = $('<table>')
                              .addClass('table table-bordered')
                              .css({'margin-right':'auto', 'margin-left':'auto'})
                              .append(addRow("Function", esc(this.options.error.method_name)))
                              .append(addRow("Error Type", esc(this.options.error.type)))
                              .append(addRow("Severity", esc(this.options.error.severity)));

            var $stackTraceAccordion = $('<div>');

            this.$elem.append($errorHead)
                      .append($errorTable)
                      .append($stackTraceAccordion);

            $stackTraceAccordion.kbaseAccordion(
                { 
                    elements: [
                        {
                            title: 'Detailed Error Message',
                            body: $('<pre>')
                                  .addClass('kb-err-msg')
                                  .append(esc(this.options.error.msg))
                                  .append(format_tb(this.options.error)),
                        }
                    ]
                }
            );

            return this;
        },
    });
})(jQuery);
/**
 * This is a simple template for building KBase Narrative Widgets.
 * KBase Widgets are based around the jQuery widget extension architecture,
 * and are also instantiated as such.
 *
 * Your widget will need (at minimum) a unique name, a parent to inherit 
 * from, a semantic version, an 'options' structure, and an init() function
 * that returns itself.
 *
 * Details are described below.
 *
 * Instantiating a widget is done using a code form like this:
 * $("#myElement").MyWidget({ option1: value1, option2:value2 });
 *
 * Instantiating this widget within the narrative just requires the output
 * of a function that is run in the IPython Kernel to output the widget and
 * the set of options it requires. Examples to follow.
 *
 * This version of the widget template includes authentication options for
 * free - you shouldn't need to handle passing in user ids or auth tokens.
 * These are referenced by the functions:
 * this.user_id();
 * and
 * this.authToken();
 *
 * @see kbaseAuthenticatedWidget.js
 * @public
 */
(function($, undefined) {
    $.KBWidget({
        /* 
         * (required) Your widget should be named in CamelCase.
         */
        name: 'kbaseDefaultNarrativeOutput',

        /*
         * Extending kbaseAuthenticatedWidget lets you use auth tokens
         * semi-automatically, assuming the page this is used in fires
         * the loggedIn.kbase, loggedOut.kbase, and loggedInQuery events.
         * These are usually fired by the kbaseLogin widget.
         *
         * this.user_id() = the logged in user id
         * this.authToken() = the current authentication token
         */
        parent: 'kbaseWidget',

        /*
         * (optional) Widgets should be semantically versioned.
         * See http://semver.org
         */
        version: '1.0.0',

        /*
         * (optional) Widgets are implied to include an options structure.
         * It's useful to put default values here.
         */
        options: {
            data: null,
        },

        /**
         * (required) This is the only required function for a KBase Widget.
         * @param {object} options - a structure containing the set of 
         * options to be passed to this widget.
         * @private
         */
        init: function(options) {
            /*
             * This should be the first line of your init function.
             * It registers the new widget, overriding existing options.
             *
             * The members of the options structure will become members of 
             * this.options, overriding any existing members.
             */
            this._super(options);

            /*
             * It is required to return this.
             */
            return this.render();
        },

        /**
         * (not required)
         * I prefer to keep initialization and rendering code separate, but
         * that's just a style thing. You can do whatever the widget requires.
         */
        render: function() {
            var s = this.options.data;
            if (typeof s != 'string') {
                s = JSON.stringify(s, undefined, 2);
                s = s.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
                s = s.replace(/("(\\u[a-zA-Z0-9]{4}|\\[^u]|[^\\"])*"(\s*:)?|\b(true|false|null)\b|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?)/g, 
                    function (match) {
                        var cls = 'number';
                        if (/^"/.test(match)) {
                            if (/:$/.test(match)) {
                                cls = 'key';
                            } else {
                                cls = 'string';
                            }
                        } else if (/true|false/.test(match)) {
                            cls = 'boolean';
                        } else if (/null/.test(match)) {
                            cls = 'null';
                        }
                        return '<span class="' + cls + '">' + match + '</span>';
                    }
                );
            }
            this.$elem.append($('<pre>').append(s));

            return this;
        },


    });
})(jQuery);
/**
 * Requires bootstrap 3 for buttons
 */
(function( $, undefined ){
    $.KBWidget({
        name: "KBaseContigBrowserButtons", 
        parent: "kbaseWidget", 
        version: "1.0.0",
        options: {
            direction: "horizontal", // also "vertical" eventually.
            browser: null
        },

        init: function(options) {
            this._super(options);

            if (this.options.browser === null) {
                return;
            }

            var self = this;
            var $buttonSet = $("<div/>")
                             .addClass("btn-group")
                             .append($("<button/>")
                                     .attr("type", "button")
                                     .addClass("btn btn-default")
                                     .append("First")
                                     .click(function() { self.options.browser.moveLeftEnd(); })
                                    )
                             .append($("<button/>")
                                     .attr("type", "button")
                                     .addClass("btn btn-default")
                                     .append("Previous")
                                     .click(function() { self.options.browser.moveLeftStep(); })
                                    )
                             .append($("<button/>")
                                     .attr("type", "button")
                                     .addClass("btn btn-default")
                                     .append("Zoom In")
                                     .click(function() { self.options.browser.zoomIn(); } )
                                    )
                             .append($("<button/>")
                                     .attr("type", "button")
                                     .addClass("btn btn-default")
                                     .append("Zoom Out")
                                     .click(function() { self.options.browser.zoomOut(); })
                                    )
                             .append($("<button/>")
                                     .attr("type", "button")
                                     .addClass("btn btn-default")
                                     .append("Next")
                                     .click(function() { self.options.browser.moveRightStep(); })
                                    )
                             .append($("<button/>")
                                     .attr("type", "button")
                                     .addClass("btn btn-default")
                                     .append("Last")
                                     .click(function() { self.options.browser.moveRightEnd(); })
                                    );


            this.$elem.append($("<div align='center'/>").append($buttonSet));

            return this;

        },

        render: function() {
            return this;
        }
    });

})( jQuery );
/**
 * @author Bill Riehl <wjriehl@lbl.gov>
 * @public
 */

(function( $, undefined ) {
    $.KBWidget({
        name: "devVizSelector",
        parent: "kbaseNarrativeInput",
        version: "1.0.0",
        options: {
	    //id: null,
            ws: 3350 ,
            auth: null,
            //name: 0,
            //top: "10",
            //order: "average",
            loadingImage: "../images/ajax-loader.gif"
        },

	ws_url: "https://kbase.us/services/ws/",
        loading_image: "static/kbase/images/ajax-loader.gif",

        /**
         * Builds the input div for a function cell, based on the given method object.
         * @param {Object} method - the method being constructed around.
         * @returns {String} an HTML string describing the available parameters for the cell.
         * @private
         */
        init: function(options) {
            this._super(options);

	    var self = this;
	    var kbws = new Workspace(self.ws_url, {'token': self.options.auth});
	    self.kbws = kbws ;

	    $(document).on(
		'setWorkspaceName.Narrative', $.proxy(function(e, info) {
		    self.options.ws = info.wsId;
		}, this)
		);

	    this.render();
            return this;
        },
	render: function() {
		var self = this;
	    
		var container = this.$elem;
		var lslen = 0;
        	if (window.hasOwnProperty('rendererListselect') && rendererListselect.length) {
        		lslen = rendererListselect.length;
       		}
		container.append("<div id='inputListselect"+lslen+"'><img src='../../static/kbase/images/ajax-loader.gif'></div>");
		var listSelect = standaloneListselect.create({index: lslen});
		listSelect.settings.target = document.getElementById('inputListselect'+lslen);
		listSelect.settings.callback = this.metagenomesSelected;
		listSelect.settings.synchronous = true;
		listSelect.settings.data = [];
		listSelect.settings.filter = [ "id", "name", "project id", "project name", "PI lastname", "biome", "feature", "material", "env package", "location", "country", "longitude", "latitude", "collection date", "sequence type", "sequencing method", "status", "created" ];
		listSelect.settings.multiple = true;
		listSelect.settings.result_field = true;
		listSelect.settings.result_field_placeholder = "collection name";
		listSelect.settings.extra_wide = true;
		listSelect.settings.return_object = true;
		listSelect.settings.filter_attribute = 'name';
		listSelect.settings.asynch_filter_attribute = 'name';
		listSelect.settings.value = "id";
		listSelect.settings.master = self;
		var r = document.createElement('div');
		r.setAttribute('id', 'myResultDiv');
		container.append(r);

		var kbws = self.kbws;

                // Get list of metagenome ids from workspace
                var response = kbws.list_objects({ ids : [self.options.ws] , type : 'Communities.Metagenome'} , function(data) {
                        var idList = [];
                        for (var i=0; i<data.length; i++) {
                                idList.push({ref: self.options.ws+"/"+data[i][0] });
                        }
		        // get the metadata for the ids
                        kbws.get_objects(idList, function(resData) {
                                var listSelectData = [];
                                for (var i=0; i<resData.length; i++) {
                                        listSelectData.push({
					        "wsid": resData[i].info[6],
						"wsitem": resData[i].info[0],
                                                "id": resData[i].data.id,
                                                "name": resData[i].data.name,
                                                "project id": resData[i].data.mixs.project_id,
                                                "project name": resData[i].data.mixs.project_name,
                                                "PI lastname": resData[i].data.mixs.PI_lastname,
                                                "biome": resData[i].data.mixs.biome,
                                                "feature": resData[i].data.mixs.feature,
                                                "material": resData[i].data.mixs.material,
                                                "env package": resData[i].data.mixs.env_package,
                                                "location": resData[i].data.mixs["location"],
                                                "country": resData[i].data.mixs.country,
                                                "longitude": resData[i].data.mixs.longitude,
                                                "latitude": resData[i].data.mixs.latitude,
                                                "collection date": resData[i].data.mixs.collection_date,
                                                "sequence type": resData[i].data.mixs.sequence_type,
                                                "sequencing method": resData[i].data.mixs.seq_method,
                                                "status": resData[i].data["status"],
                                                "created": resData[i].data.created
                                        });
                                }
			        // render the listselect
				listSelect.settings.data = listSelectData;
				listSelect.render(lslen);
                        });
                });

	},
	metagenomesSelected: function(items, listName) {
	    var self = this.master;
	
	    var d = document.getElementById("myResultDiv");

	    // if data is selected create list and save it to ws
	    var collection = {
	    	name: listName,
	    	type: 'Metagenome',
	    	created: 'no timestamp available',
	    	members: []
	    };
	    
	    for (var i=0 ; i<items.length;i++){
		
	    	var member = {
	    	    ID: items[i].wsitem,
	    	    URL: items[i].wsid
	    	};
		
	    	collection.members.push(member);
	    }
	    
	    var object_data = {
	     	type: 'Communities.Metagenome',
	     	data: collection,
	     	name: listName,
	    };
	    
	    var save_params = {
	     	id: self.options.ws, //if only ws name is given change to workspace
	     	objects: [object_data]
	    };
	   
	    var kbws = self.kbws; 
	    kbws.save_objects(save_params);
	    
	    d.innerHTML = "<h5>collection "+listName+" saved.</h5>";
	}
    });

})( jQuery );

/**
 * @author Andreas Wilke <wilke@anl.gov>
 * @public
 */

(function( $, undefined ) {
    $.KBWidget({
        name: "create_metagenome_set",
        parent: "kbaseNarrativeInput",
        version: "1.0.0",
        token: null,
        options: {},
        ws_id: window.kbconfig.workspaceId,
        ws_url: window.kbconfig.urls.workspace,
        loading_image: "static/kbase/images/ajax-loader.gif",

        /**
         * Builds the input div for a function cell, based on the given method object.
         * @param {Object} method - the method being constructed around.
         * @returns {String} an HTML string describing the available parameters for the cell.
         * @private
         */
        init: function(options) {
            this._super(options);
            this.ws_id = parseInt(this.ws_id, 10);
            return this;
        },

	    render: function() {
		    var self = this;
		    var container = this.$elem;
            
            container.empty();
            if (self.token == null) {
                container.append("<div>[Error] You're not logged in</div>");
                return;
            }
            var kbws = new Workspace(self.ws_url, {'token': self.token});
        
		    var lslen = 0;
        	if (window.hasOwnProperty('rendererListselect') && rendererListselect.length) {
        		lslen = rendererListselect.length;
       		}
		    container.append("<div id='inputListselect"+lslen+"'><img src='../../static/kbase/images/ajax-loader.gif'></div>");
		    var listSelect = standaloneListselect.create({index: lslen});
		    listSelect.settings.target = document.getElementById('inputListselect'+lslen);
		    listSelect.settings.callback = this.metagenomesSelected;
		    listSelect.settings.synchronous = true;
		    listSelect.settings.data = [];
		    listSelect.settings.filter = [ "id", "name", "project id", "project name", "PI lastname", "biome", "feature", "material", "env package", "location", "country", "longitude", "latitude", "collection date", "sequence type", "sequencing method", "status", "created" ];
		    listSelect.settings.multiple = true;
		    listSelect.settings.result_field = true;
		    listSelect.settings.result_field_placeholder = "collection name";
		    listSelect.settings.extra_wide = true;
		    listSelect.settings.return_object = true;
		    listSelect.settings.filter_attribute = 'name';
		    listSelect.settings.asynch_filter_attribute = 'name';
		    listSelect.settings.value = "id";
		    listSelect.settings.master = self;
		    var r = document.createElement('div');
		    r.setAttribute('id', 'myResultDiv');
		    container.append(r);

            // Get list of metagenome ids from workspace
            kbws.list_objects({ ids : [self.ws_id] , type : 'Communities.Metagenome'} , function(data) {
                var idList = [];
                for (var i=0; i<data.length; i++) {
                    idList.push({ref: self.ws_id+"/"+data[i][0] });
                }
                //console.log(idList);
                if (idList.length > 0) {
                    // get the metadata for the ids
                    kbws.get_objects(idList, function(resData) {
                        var listSelectData = [];
                        for (var i=0; i<resData.length; i++) {
                            listSelectData.push({
					            "wsid": resData[i].info[6],
						        "wsitem": resData[i].info[0],
                                "id": resData[i].data.id,
                                "name": resData[i].data.name,
                                "project id": resData[i].data.mixs.project_id,
                                "project name": resData[i].data.mixs.project_name,
                                "PI lastname": resData[i].data.mixs.PI_lastname,
                                "biome": resData[i].data.mixs.biome,
                                "feature": resData[i].data.mixs.feature,
                                "material": resData[i].data.mixs.material,
                                "env package": resData[i].data.mixs.env_package,
                                "location": resData[i].data.mixs["location"],
                                "country": resData[i].data.mixs.country,
                                "longitude": resData[i].data.mixs.longitude,
                                "latitude": resData[i].data.mixs.latitude,
                                "collection date": resData[i].data.mixs.collection_date,
                                "sequence type": resData[i].data.mixs.sequence_type,
                                "sequencing method": resData[i].data.mixs.seq_method,
                                "status": resData[i].data["status"],
                                "created": resData[i].data.created
                            });
                        }
				        listSelect.settings.data = listSelectData;
				        listSelect.render(lslen);
				    });
			    } else {
			        listSelect.settings.data = [];
			        listSelect.render(lslen);
			    }
            });

	    },
	
	    loggedInCallback: function(event, auth) {
            this.token = auth.token;
            this.render();
            return this;
        },

        loggedOutCallback: function(event, auth) {
            this.token = null;
            this.render();
            return this;
        },
    
	    metagenomesSelected: function(items, listName) {
	        var self = this.master;
	        var d = document.getElementById("myResultDiv");

	        // if data is selected create list and save it to ws
	        var date = new Date();
	        var collection = {
	    	    name: listName,
	    	    type: 'Metagenome',
	    	    created: date.toISOString(),
	    	    members: []
	        };
	    
	        for (var i=0 ; i<items.length;i++){
		        collection.members[i] = {'ID': items[i].id, 'URL': items[i].wsid+"/"+items[i].wsitem};
	        }
	    
	        var object_data = {
	     	    type: 'Communities.Collection',
	     	    data: collection,
	     	    name: listName
	        };
	        var save_params = {
	     	    id: self.ws_id, //if only ws name is given change to workspace
	     	    objects: [object_data]
	        };
	        //console.log(save_params);
	   
	        var kbws = new Workspace(self.ws_url, {'token': self.token});
	        kbws.save_objects(save_params);
	        d.innerHTML = "<h5>collection "+listName+" saved.</h5>";
	    }
    });
})( jQuery );

/**
 * Input widget for import genomes into workspace.
 * @author Roman Sutormin <rsutormin@lbl.gov>
 * @author Bill Riehl <wjriehl@lbl.gov>
 * @public
 */

(function( $, undefined ) {
    $.KBWidget({
        name: "kbaseTabbedInput",
        parent: "kbaseNarrativeMethodInput",
        version: "1.0.0",
        options: {
            isInSidePanel: false
        },

        tabParamId: null,		// string
        tabParamPos: null,		// int
        tabPane: null,			// div jquery element
        tabPaneWasAdded: false,
        tabs: null,				// mapping {tabId -> div}
        tabNames: null,			// mapping {tabId -> tabName}
        tabParamToSpec: null,	// mapping {tabId -> {paramId -> paramSpec}}
        paramIdToTab: null,		// mapping {paramId -> tabId}
        
        init: function(options) {
            this._super(options);
            // render and refresh are done in super-class.
            return this;
        },

        render: function() {
            // figure out all types from the method
            var self = this;
            var method = this.options.method;
            var params = method.parameters;
            var tabParamSpec = null;
            for (var i=0; i<params.length; i++) {
                var paramSpec = params[i];
                // check what kind of parameter here.
                if (paramSpec.field_type === "tab") {
                	tabParamSpec = paramSpec;
                	self.tabParamPos = i;
                	break;
                }
            }
            if (tabParamSpec) {
            	//console.log(tabParamSpec);
            	self.paramIdToTab = {};
            	var tabIdToParamCount = {};
            	for (var tabId in tabParamSpec.tab_options.tab_id_to_param_ids) {
            		var paramIds = tabParamSpec.tab_options.tab_id_to_param_ids[tabId];
            		tabIdToParamCount[tabId] = paramIds.length;
            		for (var paramPosInTab in paramIds) {
            			paramId = paramIds[paramPosInTab];
            			self.paramIdToTab[paramId] = tabId;
            		}
            	}
            	var tabNamesRaw = tabParamSpec.tab_options.tab_id_to_tab_name;
            	if (this.options.isInSidePanel) {
                	self.tabNames = {};
            		for (var tabId in tabNamesRaw) {
            			if (tabIdToParamCount[tabId] && tabIdToParamCount[tabId] > 0)
            				self.tabNames[tabId] = tabNamesRaw[tabId];
            		}
            	} else {
                	self.tabNames = tabNamesRaw;            		
            	}
            	self.tabParamId = tabParamSpec.id;
            	self.tabPane = $('<div/>');
            	if (self.options.isInSidePanel) {
            		self.buildTabs(self.tabPane);
            	} else {
            		self.tabPane.kbaseTabs({canDelete : true, tabs : []});
            	}
            	self.tabs = {};
            	self.tabParamToSpec = {};
            	var tabCount = 0;
            	for (var tabPos in tabParamSpec.tab_options.tab_id_order) {
            		var tabId = tabParamSpec.tab_options.tab_id_order[tabPos];
            		var tabName = self.tabNames[tabId];
            		if (!tabName)
            			continue;
            		tab = $('<div/>');
            		var isShown = tabCount == 0;
            		self.tabPane.kbaseTabs('addTab', {tab: tabName, content: tab, canDelete : false, show: isShown});
            		tabCount++;
            		self.tabs[tabId] = tab;
            		self.tabParamToSpec[tabId] = {};
            	}
            }
            self._superMethod('render');
        },
        
        buildTabs: function(tabPane) {
            var $header = $('<div>');
            var $body = $('<div>');
            var tabNameToIndex = {};
            var tabCount = 0;
            tabPane['kbaseTabs'] = function(funcName, params) {
            	if (funcName === 'addTab') {
            		tabNameToIndex[params.tab] = tabCount;
            		tabCount++;
            		var tabHeader = $('<div>')
                    	.addClass('kb-side-header')
                    	//.css('width', (100/tabs.length)+'%')
                    	.append(params.tab);
                    $header.append(tabHeader);
                    var tabContent = $('<div>')
                    	.addClass('kb-side-tab2')
                    	.css("display", "none")
                    	.append(params.content);
                    $body.append(tabContent);
                    if (params.show) {
                        tabHeader.addClass('active');
                        tabContent.css('display', '');
                    }
            		tabHeader.click($.proxy(function(event) {
                        event.preventDefault();
                        event.stopPropagation();
                        var $headerDiv = $(event.currentTarget);
                        if (!$headerDiv.hasClass('active')) {
                            var idx = $headerDiv.index();
                            $header.find('div').removeClass('active');
                            $headerDiv.addClass('active');
                            $body.find('div.kb-side-tab2').css('display', 'none');
                            $body.find('div:nth-child(' + (idx+1) + ').kb-side-tab2').css('display', '');
                        }
                    }, this));
            	}
            };
            tabPane.append($header).append($body);
        },

        addParameterDiv: function(paramPos, paramSpec, $stepDiv, $optionsDiv, $advancedOptionsDiv, isAdvanced) {
        	var tabId = this.paramIdToTab[paramSpec.id];
        	if (tabId) {
        		this.putInTab(paramSpec, $stepDiv, $optionsDiv, tabId);
        	} else {
            	this._superMethod('addParameterDiv', paramPos, paramSpec, $stepDiv, $optionsDiv, $advancedOptionsDiv, isAdvanced);
        	}
        },
        
        putInTab: function(paramSpec, $stepDiv, $optionsDiv, tabId) {
            if ($optionsDiv.children().length == 0)
                $stepDiv.css({"margin-top":"5px"});
            if (!this.tabPaneWasAdded) {
            	$optionsDiv.append(this.tabPane);
            	this.tabPaneWasAdded = true;
            }
            var tab = this.tabs[tabId];
            if (tab.children().length == 0)
            	tab.css({"margin-top":"5px"});
            tab.append($stepDiv);
            this.tabParamToSpec[tabId][paramSpec.id] = paramSpec;
        },
        
        getParameters: function() {
        	var ret = [];
            var selectedParameterTab = this.getSelectedTabId();
            for(var i=0; i<this.parameters.length; i++) {
            	var paramId = this.parameters[i].id;
                var tabId = this.paramIdToTab[paramId];
            	var value = ((!tabId) || tabId === selectedParameterTab) ? 
            			this.parameters[i].widget.getParameterValue() : "";
            	ret.push(value);
            }
        	ret.splice(this.tabParamPos, 0, this.getSelectedTabId());
        	return ret;
        },
        
        getState: function() {
            var state = this._superMethod('getState');
            var selectedParameterTab = this.getSelectedTabId();
            state['selectedParameterTab'] = selectedParameterTab;
            return state;
        },
        
        getSelectedTabId: function() {
            var ret = null;
            for (var tabId in this.tabs) {
            	var tab = this.tabs[tabId];
            	if (tab.is(':visible'))
            		ret = tabId;
            }
            return ret;
        },
        
        loadState: function(state) {
            if (!state)
                return;
            this._superMethod('loadState', state);
            var selectedParameterTab = state['selectedParameterTab'];
            if (selectedParameterTab) {
            	this.tabPane.kbaseTabs('showTab', this.tabNames[selectedParameterTab]);
            }
        },
        
        isValid: function() {
            var isValidRet = { isValid:true, errormssgs: [] };
            var selectedParameterTab = this.getSelectedTabId();
            if (this.parameters) {
                for (var i=0; i<this.parameters.length; i++) {
                	var paramId = this.parameters[i].id;
                    var tabId = this.paramIdToTab[paramId];
                    if ((!tabId) || tabId === selectedParameterTab) {
                    	var parameterStatus = this.parameters[i].widget.isValid();
                    	if (!parameterStatus.isValid) {
                    		isValidRet.isValid = false;
                    		for(var e = 0; e<parameterStatus.errormssgs.length; e++) {
                    			isValidRet.errormssgs.push(parameterStatus.errormssgs[e]);
                    		}
                    	}
                    }
                }
            }
            return isValidRet; 
        },
        
        getAllParameterValues: function() {
        	var ret = this._superMethod('getAllParameterValues');
        	ret.splice(this.tabParamPos, 0, {id:this.tabParamId, value:this.getSelectedTabId()});
        	return ret;
        },
        
        prepareDataBeforeRun: function() {
            var selectedParameterTab = this.getSelectedTabId();
            if (this.parameters) {
                for (var i = 0; i < this.parameters.length; i++) {
                	var paramId = this.parameters[i].id;
                    var tabId = this.paramIdToTab[paramId];
                    if ((!tabId) || tabId === selectedParameterTab) {
                    	this.parameters[i].widget.prepareValueBeforeRun(this.options.method);
                    }
                }
            }
        }

    });

})( jQuery );
/**
 * @author Bill Riehl <wjriehl@lbl.gov>
 * @public
 */

(function( $, undefined ) {
    $.KBWidget({
        name: "kbaseDefaultNarrativeInput",
        parent: "kbaseNarrativeInput",
        version: "1.0.0",
        options: {
            loadingImage: "../images/ajax-loader.gif",
        },

        init: function(options) {
            this._super(options);

            this.render();
            this.refresh();
            return this;
        },

        useSelect2: true,

        /**
         * Builds the input div for a function cell, based on the given method object.
         * @param {Object} method - the method being constructed around.
         * @returns {String} an HTML string describing the available parameters for the cell.
         * @private
         */
        render: function() {
            // figure out all types from the method
            var method = this.options.method;
            var params = method.properties.parameters;

            var inputDiv = "<div class='kb-cell-params'><table class='table'>";
            for (var i=0; i<Object.keys(params).length; i++) {
                var pid = 'param' + i;
                var p = params[pid];

                var input_default = (p.default !== "" && p.default !== undefined) ?
                                    " placeholder='" + p.default + "'" : "";
                input = "<input class='form-control' style='width: 95%' name='" + pid + "'" + input_default +
                        " value='' type='text'></input>";

                var cellStyle = "border:none; vertical-align:middle;";
                inputDiv += "<tr style='" + cellStyle + "'>" + 
                                "<th style='" + cellStyle + " font-family: 'OxygenBold', sans-serif; font-weight: bold;>" + p.ui_name + "</th>" +
                                "<td style='" + cellStyle + " width: 40%;'>" + input + "</td>" +
                                "<td style='" + cellStyle + " color: #777;'>" + p.description + "</td>" +
                            "</tr>";
            }
            inputDiv += "</table></div>";
            this.$elem.append(inputDiv);
        },

        /**
         * Returns a list of parameters in the order in which the given method
         * requires them.
         * @return {Array} an array of strings - one for each parameter
         * @public
         */
        getParameters: function() {
            var paramList = [];

            $(this.$elem).find("[name^=param]").filter(":input").each(function(key, field) {
                var value = field.value;
                if (!value)
                    value = field.placeholder;
                paramList.push(value.trim());
            });

            return paramList;
        },

        /**
         * Returns an object representing the state of this widget.
         * In this particular case, it is a list of key-value pairs, like this:
         * { 
         *   'param0' : 'parameter value',
         *   'param1' : 'parameter value'
         * }
         * with one key/value for each parameter in the defined method.
         */
        getState: function() {
            var state = {};

            $(this.$elem).find("[name^=param]").filter(":input").each(function(key, field) {
                state[field.name] = field.value;
            });

            return state;
        },

        /**
         * Adjusts the current set of parameters based on the given state.
         * Doesn't really do a whole lot of type checking yet, but it's assumed that
         * a state will be loaded from an object generated by getState.
         */
        loadState: function(state) {
            if (!state)
                return;

            $(this.$elem).find("[name^=param]").filter(":input").each(function(key, field) {
                var $field = $(field);
                var fieldName = $field.attr("name");

                // If it's a text field, just dump the value in there.
                if ($field.is("input") && $field.attr("type") === "text") {
                    $field.val(state[fieldName]);
                }

                // If it's a select field, do the same... we'll have comboboxen or something,
                // eventually, so I'm just leaving this open for that.
                else if ($field.is("select")) {
                    $field.val(state[fieldName]);
                }
            });
        },

        /**
         * Refreshes the input fields for this widget. I.e. if any of them reference workspace
         * information, those fields get refreshed without altering any other inputs.
         */
        refresh: function() {
            var method = this.options.method;
            var params = method.properties.parameters;
            var lookupTypes = [];
            var tempObj = {};
            for (var p in params) {
                if (!tempObj.hasOwnProperty(params[p].type)) {
                    lookupTypes.push(params[p].type);
                    tempObj[params[p].type] = 1;
                }
            }

            this.trigger('dataLoadedQuery.Narrative', [lookupTypes, this.IGNORE_VERSION, $.proxy(
                function(objects) {
                    // we know from each parameter what each input type is.
                    // we also know how many of each type there is.
                    // so, iterate over all parameters and fulfill cases as below.

                    for (var i=0; i<Object.keys(params).length; i++) {
                        var pid = 'param' + i;
                        var p = params[pid];

                        // we're refreshing, not rendering, so assume that there's an
                        // input with name = pid present.
                        var $input = $($(this.$elem).find("[name=" + pid + "]"));
                        var objList = [];

                        /*
                         * New sorting - by date, then alphabetically within dates.
                         */
                        if (objects[p.type] && objects[p.type].length > 0) {
                            objList = objects[p.type];
                            objList.sort(function(a, b) {
                                if (a[3] > b[3]) return -1;
                                if (a[3] < b[3]) return 1;
                                if (a[1] < b[1]) return -1;
                                if (a[1] > b[1]) return 1;
                                return 0;
                            });
                        }

                        /* down to cases:
                         * 1. (simple) objList is empty, $input doesn't have a list attribute.
                         * -- don't do anything.
                         * 2. objList is empty, $input has a list attribute.
                         * -- no more data exists, so remove that list attribute and the associated datalist element
                         * 3. objList is not empty, $input doesn't have a list attribute.
                         * -- data exists, new datalist needs to be added and linked.
                         * 4. objList is not empty, $input has a list attribute.
                         * -- datalist needs to be cleared and updated.
                         */

                        // case 1 - no data, input is unchanged

                        // case 2 - no data, need to clear input
                        var datalistID = $input.attr('list');
                        if (objList.length == 0 && datalistID) {
                            $(this.$elem.find("#" + datalistID)).remove();
                            $input.removeAttr('list');
                            $input.val("");
                        }

                        // case 3 - data, need new datalist
                        // case 4 - data, need to update existing datalist
                        else if (objList.length > 0) {
                            var $datalist;
                            if (!datalistID) {
                                datalistID = this.genUUID();
                                $input.attr('list', datalistID);
                                $datalist = $('<datalist>')
                                            .attr('id', datalistID);
                                $input.after($datalist);
                            }
                            else {
                                $datalist = $(this.$elem.find("#" + datalistID));
                            }
                            $datalist.empty();
                            for (var j=0; j<objList.length; j++) {
                                $datalist.append($('<option>')
                                                 .attr('value', objList[j][1])
                                                 .append(objList[j][1]));
                            }
                        }
                    }
                },
                this
            )]);
        },

        genUUID: function() {
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
                var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);
                return v.toString(16);
            });
        }

    });

})( jQuery );
/**
 * An input widget to handle building a media set.
 * This has the option of loading/modifying an existing media.
 * @author Bill Riehl <wjriehl@lbl.gov>
 * @public
 */

(function( $, undefined ) {
    $.KBWidget({
        name: "kbaseBuildMediaInput", 
        parent: "kbaseNarrativeInput",
        version: "1.0.0",
        options: {
            loadingImage: "static/kbase/images/ajax-loader.gif",
            //fbaURL: "https://kbase.us/services/fba_model_services",
            //fbaURL: "http://140.221.84.183:7036",
            fbaURL: "https://kbase.us/services/KBaseFBAModeling",
        },
        mediaType: "KBaseBiochem.Media",
        IGNORE_VERSION: false,

        init: function(options) {
            this._super(options);
            this.fbaClient = new fbaModelServices(this.options.fbaURL);
            this.trigger("workspaceQuery.Narrative", $.proxy(
                function(wsId) {
                    this.wsId = wsId;
                    this.$fetchMediaDiv = this.buildFetchMediaDiv();
                    this.$headerInputDiv = this.buildHeaderInputs();
                    this.$mediaTable = this.buildMediaTable();
                    this.addEmptyMediaRow();

                    this.$elem.append(this.$fetchMediaDiv)
                              .append(this.$headerInputDiv)
                              .append(this.$mediaTable);

                    this.refresh();

                }, this));

            return this;
        },

        /**
         * Builds controls to fetch a media set and populate the current list.
         */
        buildFetchMediaDiv: function() {
            var $fetchMediaDiv = $("<div class='form-inline'>");
            $fetchMediaDiv.append("Select an existing media to modify (optional): ");

            var $mediaList = $("<select>")
                              .addClass('form-control')
                              .css({'max-width': '80%', 'margin-right' : '10px'});

            var $fetchButton = $("<button>")
                               .attr("type", "button")
                               .attr("value", "Fetch")
                               .addClass("btn btn-primary")
                               .append("Fetch")
                               .click($.proxy(
                                    function(event) {
                                        var mediaName = this.$elem.find("div > select").val();

                                        if (!mediaName) {
                                            this.fetchMediaError({
                                                status: -1,
                                                error: {
                                                    code: -1,
                                                    error: "Unable to fetch media - no name given",
                                                    message: "Unable to fetch media - no name given",
                                                    name: "NoMediaError",
                                                },
                                            });
                                            return;
                                        }
                                        if (!this.wsId) {
                                            this.fetchMediaError({
                                                status: -2,
                                                error: {
                                                    code: -2,
                                                    error: "Unable to fetch media - no workspace ID given",
                                                    message: "Unable to fetch media - no workspace ID given",
                                                    name: "NoWsIdError",
                                                }
                                            });
                                            return;
                                        }

                                        $fetchMediaDiv.find("img").show();
                                        $fetchMediaDiv.find("button.btn-danger").hide();
                                        this.fbaClient.get_media({
                                                auth: this.authToken(),
                                                medias: [mediaName],
                                                workspaces: [this.wsId],
                                            },
                                            $.proxy(function(media) { 
                                                this.updateMediaTable(media);
                                                $fetchMediaDiv.find("img").hide();

                                            }, this),
                                            $.proxy(function(error) {
                                                this.fetchMediaError(error);
                                                $fetchMediaDiv.find("img").hide();
                                            }, this)
                                        );
                                    },
                                    this));

            this.$errorPanel = $("<div>")
                               .css({
                                   "margin" : "20px 0",
                                   "padding" : "20px",
                                   "border-left" : "3px solid #d9534f",
                                   "background-color" : "#fdf7f7",
                               })
                               .append($("<p>")
                                       .addClass("text-danger")
                                       .append("<b>An error occurred while fetching media!</b>"))
                               .append($("<table>")
                                       .addClass("table table-bordered")
                                       .css({ 'margin-left' : 'auto', 'margin-right' : 'auto' }))
                               .append($("<div>")
                                       .attr("id", "error-accordion"));

            $fetchMediaDiv.append($mediaList)
                          .append($fetchButton)
                          .append($("<img>")
                                  .attr("src", this.options.loadingImage)
                                  .css("margin-left", "10px")
                                  .hide())
                          .append(this.$errorPanel);

            this.$errorPanel.find("#error-accordion").kbaseAccordion({
                    elements: [{ 
                        title: "Error Details", 
                        body: $("<pre>")
                              .addClass('kb-err-msg')
                              .append("ERROR'D!"),
                    }]
                });

            $mediaList.append("<option>No media found</option>");
            $fetchButton.hide();
            this.$errorPanel.hide();

            return $fetchMediaDiv;
        },

        /**
         * name and pH
         */
        buildHeaderInputs: function() {
            var $headerInputDiv = $("<div>");
            $headerInputDiv.append($("<b>")
                                   .append("Name (required): "))
                           .append($("<input>")
                                   .attr("type", "text")
                                   .attr("id", "media-name")
                                   .addClass("form-control"));
            $headerInputDiv.append($("<b>")
                                   .append("pH (optional): "))
                           .append($("<input>")
                                   .attr("type", "text")
                                   .attr("id", "media-ph")
                                   .addClass("form-control"));

            return $headerInputDiv;
        },

        buildMediaTable: function() {
            var $mediaTable = $("<table>")
                              .addClass("table table-striped table-bordered")
                              .css({"margin-right": "auto", "margin-left": "auto"})
                              .append($("<tr>")
                                      .append($("<th>")
                                              .append("Compound"))
                                      .append($("<th>")
                                              .append("Concentration"))
                                      .append($("<th>")
                                              .append("Min Flux"))
                                      .append($("<th>")
                                              .append("Max Flux"))
                                      .append($("<th>")));

            return $mediaTable;
        },

        buildRowControlButton: function(trashOnly) {
            var self = this;

            var deleteRow = function(event) {
                $(event.currentTarget).closest("tr").remove();
            };

            var addRow = function(event) {
                self.addEmptyMediaRow();
                $(event.currentTarget).find("span")
                                      .addClass("glyphicon-trash")
                                      .removeClass("glyphicon-plus");

                $(event.currentTarget).off("click")
                                      .click(deleteRow);
            };

            var $button = $("<button>")
                          .addClass("form-control")
                          .append($("<span>")
                                  .addClass("glyphicon")
                                  .addClass(trashOnly ? "glyphicon-trash" : "glyphicon-plus"));

            if (trashOnly)
                $button.click(deleteRow);
            else
                $button.click(addRow);

            return $button;
        },

        /**
         * Just a convenience function to add a media row with no elements.
         */
        addEmptyMediaRow: function() {
            this.addMediaRow();
        },

        addMediaRow: function(cpd) {
            var self = this;
            var $newRowBtn = this.buildRowControlButton(cpd);

            // little hack to make the ternary operators below a little cleaner.
            if (!cpd) cpd = {};

            var $row = $("<tr>")
                       .append($("<td>")
                               .append($("<input>")
                                       .addClass("form-control")
                                       .attr("placeholder", "Add Compound")
                                       .attr("value", (cpd.name ? cpd.name : ""))))
                       .append($("<td>")
                               .append($("<input>")
                                       .addClass("form-control")
                                       .attr("placeholder", "Add Concentration")
                                       .attr("value", (cpd.concentration ? cpd.concentration : ""))))
                       .append($("<td>")
                               .append($("<input>")
                                       .addClass("form-control")
                                       .attr("placeholder", "Add Min Flux")
                                       .attr("value", (cpd.min_flux ? cpd.min_flux : ""))))
                       .append($("<td>")
                               .append($("<input>")
                                       .addClass("form-control")
                                       .attr("placeholder", "Add Max Flux")
                                       .attr("value", (cpd.max_flux ? cpd.max_flux : ""))))
                       .append($("<td>")
                               .append($newRowBtn));

            this.$mediaTable.append($row);
        },

        updateMediaTable: function(media) {
            media = media[0];
            this.$mediaTable.find("tr > td").closest("tr").remove();

            for (var i=0; i<media.media_compounds.length; i++) {
                this.addMediaRow(media.media_compounds[i]);
            }
            this.addEmptyMediaRow();

            this.$headerInputDiv.find("#media-name").val(media.name);
            this.$headerInputDiv.find("#media-ph").val(media.pH);
        },

        /**
         * This puts together and returns an array with a single JSON string
         * representing a new media set. This gets passed to the IPython back end
         * to be processed into a new medium.
         * @public
         * @return 
         */
        getParameters: function() {
            var mediaName = this.$headerInputDiv.find("#media-name").val().trim().replace(/\s+/g, "_");
            if (!mediaName) {
                // stuuuuuuuuff...
            }

            var mediaParams = {
                // workspace and auth token will be handled by the IPython kernel.
                name : mediaName,
                media : mediaName,
                isDefined : 0,
                isMinimal : 0
            };

            var cpds = [],
                concs = [],
                minFluxes = [],
                maxFluxes = [];

            //$(cell.element).find("tr").each(function(a, b){ console.log($(b).find("td:nth-child(1) > input").val()); })

            // Find all <tr> in the table that has a <td> (e.g., NOT the header row - that has <th>)
            // and iterate over those rows.
            this.$mediaTable.find("tr:has('td')").each(function(idx, row) {
                var cpd = $(row).find("td:nth-child(1) input").val().trim();
                var conc = $(row).find("td:nth-child(2) input").val().trim();
                var min = $(row).find("td:nth-child(3) input").val().trim();
                var max = $(row).find("td:nth-child(4) input").val().trim();

                if (cpd) {
                    cpds.push(cpd);
                    concs.push(conc);
                    minFluxes.push(min);
                    maxFluxes.push(max);
                }
            });

            mediaParams['compounds'] = cpds;
            mediaParams['concentrations'] = concs;
            mediaParams['maxflux'] = maxFluxes;
            mediaParams['minflux'] = minFluxes;

            return [ JSON.stringify(mediaParams) ];
        },

        /**
         * Returns the current state of this widget as a single Javascript object.
         * This object is structured as:
         *
         * {
         *   'name' : <string name>,
         *   'ph' : <string ph>,
         *   'compounds' : 
         *       [
         *          {
         *              'name' : <cpd name>,
         *              'conc' : <cpd concentration>,
         *              'min' : <string>,
         *              'max' : <string>,
         *          },
         *          { ... as above ...},
         *       ],
         * }
         *
         * The compounds in the structure might contain nulls/blanks. So watch for that.
         * It also gives the compound list in the same order as on the screen. Hopefully.
         */
        getState: function() {
            var state = {};
            state['name'] = this.$headerInputDiv.find("#media-name").val();
            state['ph'] = this.$headerInputDiv.find("#media-ph").val();

            var cpds = [];
            this.$mediaTable.find("tr:has('td')").each(function(idx, row) {
                cpds.push({
                    'name' : $(row).find("td:nth-child(1) input").val(),
                    'conc' : $(row).find("td:nth-child(2) input").val(),
                    'min' : $(row).find("td:nth-child(3) input").val(),
                    'max' : $(row).find("td:nth-child(4) input").val(),
                });
            });
            state['compounds'] = cpds;
            return state;
        },

        /**
         * Loads up the previous state into the widget.
         * This expects to see the object generated with this widget's getState function.
         */
        loadState: function(state) {
            if (!state)
                return;

            this.$headerInputDiv.find("#media-name").val(state['name']);
            this.$headerInputDiv.find("#media-ph").val(state['ph']);

            var cpds = state['compounds'];
            this.$mediaTable.find("tr > td").closest("tr").remove();
            for (var i=0; i<cpds.length; i++) {
                var cpd = cpds[i];
                cpd.concentration = cpd.conc;
                cpd.min_flux = cpd.min;
                cpd.max_flux = cpd.max;
                this.addMediaRow(cpd);
            }
            this.addEmptyMediaRow();

        },

        refresh: function() {
            this.trigger("dataLoadedQuery.Narrative", [ [ this.mediaType ], this.IGNORE_VERSION,
                $.proxy(function(objects) {
                    var mediaList = objects[ this.mediaType ];
                    if (mediaList && mediaList.length > 0) {
                        this.$fetchMediaDiv.find('select').empty();
                        for (var i=0; i<mediaList.length; i++) {
                            this.$fetchMediaDiv.find('select').append($('<option>').append(mediaList[i][1]));
                        }
                        this.$fetchMediaDiv.find('button').hide();
                        this.$fetchMediaDiv.find('button.btn-primary').show();
                    }
                    else {
                        this.$fetchMediaDiv.find('select').empty().append($('<option>').append('No media found'));
                        this.$fetchMediaDiv.find('button').hide();
                    }
                },
                this)
            ]);
        },

        fetchMediaError: function(error) {
            var addRow = function(name, val) {
                return "<tr><td><b>" + name + "</b></td><td>" + val + "</td></tr>";
            };

            var esc = function(s) { 
                return String(s).replace(/'/g, "&apos;")
                                .replace(/"/g, "&quot;")
                                .replace(/</g, "&gt;")
                                .replace(/>/g, "&lt;");
            };

            $( this.$errorPanel.find('table') ).empty()
                                               .append(addRow('Status', esc(error.status)))
                                               .append(addRow('Code', esc(error.error.code)))
                                               .append(addRow('Name', esc(error.error.name)));
            $( this.$errorPanel.find('.kb-err-msg') ).empty()
                                                     .append(esc(error.error.error));

            this.$errorPanel.show();
        }

    });
})( jQuery );
/**
 * @author Bill Riehl <wjriehl@lbl.gov>
 * @public
 */

(function( $, undefined ) {
    $.KBWidget({
        name: "rastGenomeImportInput",
        parent: "kbaseNarrativeInput",
        version: "1.0.0",
        options: {
            loadingImage: "../images/ajax-loader.gif",
        },

        /**
         * Renders an input div specialized for the "Import RAST Genomes" function.
         * This includes two blocks:
         * The first is an extendable list of genome IDs. It starts with one available,
         * with a [+] button next to it. Clicking that button will add an additional row.
         *
         * The second block is a username/password block. When the widget's state get saved,
         * this stores the username, but NOT the password.
         *
         * Builds the input div for a function cell, based on the given method object.
         * @param {Object} method - the method being constructed around.
         * @returns {String} an HTML string describing the available parameters for the cell.
         * @private
         */
        init: function(options) {
            this._super(options);

            this.$genomeIdTable = this.makeGenomeIdTable();
            this.addGenomeIdRow();

            this.$rastCreds = this.makeRastCredsBlock();

            var $inputDiv = $('<div>').addClass('kb-cell-params')
                                     .append('<p><b>RAST Genome Ids:</b></p>')
                                     .append(this.$genomeIdTable)
                                     .append(this.$rastCreds);


            this.$elem.append($inputDiv);

            return this;
        },

        makeGenomeIdTable: function() {
            var $table = $('<form class="form-horizontal">');
            return $table;
        },

        addGenomeIdRow: function(id) {
            var $newRowBtn = this.makeAddIdButton(id ? true : false);
            var $row = $('<div class="form-group" style="margin-bottom:5px">')
                       .append($('<div class="col-sm-10">')
                               .append($('<input>')
                                       .addClass('form-control')
                                       .attr('placeholder', 'Genome Id')
                                       .attr('value', (id ? id : ''))))
                       .append($('<div class="col-sm-2">')
                               .append($newRowBtn));

            this.$genomeIdTable.append($row);
            return $row;
        },

        makeAddIdButton: function(trashOnly) {
            var self = this;

            var deleteRow = function(event) {
                event.preventDefault();
                $(event.currentTarget).closest(".form-group").remove();
            };

            var addRow = function(event) {
                event.preventDefault();
                var $newRow = self.addGenomeIdRow();

                $(event.currentTarget).find("span")
                                      .addClass("glyphicon-trash")
                                      .removeClass("glyphicon-plus");

                $(event.currentTarget).off("click")
                                      .click(deleteRow);

                $newRow.find('input').focus();
            };

            var $button = $("<button>")
                          .addClass("btn")
                          .append($("<span>")
                                  .addClass("glyphicon")
                                  .addClass(trashOnly ? "glyphicon-trash" : "glyphicon-plus"));

            if (trashOnly)
                $button.click(deleteRow);
            else
                $button.click(addRow);

            return $button;
        },

        refreshIdTable: function(ids) {
            if (!(ids instanceof Array) || ids.length < 1)
                return;

            this.$genomeIdTable.empty();
            for (var i=0; i<ids.length; i++) {
                this.addGenomeIdRow(ids[i]);
            }
            this.addGenomeIdRow();
        },

        /**
         * Creates and returns a jQuery node with a user id and password field.
         * @return {} a jQuery node with user id and password input fields.
         * @private
         */
        makeRastCredsBlock: function() {
            return $('<div>')
                   .append($('<div>').append('Rast Login:'))
                   .append($('<div>')
                           .append($('<form class="form-inline" role="form" autocomplete="off">')
                                .append($('<div class="form-group">')
                                   .append($('<input>')
                                           .attr('id', 'rast-id')
                                           .attr('placeholder', 'RAST username')
                                           .attr('autocomplete', 'off')
                                           .addClass('form-control')
                                           .attr('type', 'text')
                                           ).css({'padding-right' : '10px'}))
                                .append($('<div class="form-group">')
                                   .append($('<input>')
                                           .attr('id', 'rast-pw')
                                           .attr('placeholder', 'RAST password')
                                           .attr('type', 'password')
                                           .attr('autocomplete', 'off')
                                           .addClass('form-control')))));
        },

        /**
         * Returns a list of parameters in the order in which the given method
         * requires them.
         * @return {Array} an array of strings - one for each parameter
         * @public
         */
        getParameters: function() {
            // First, the genome ids.
            var idList = [];
            
            this.$genomeIdTable.find('input').each(function(idx, elem) {
                var id = $(elem).val().trim();
                if (id)
                    idList.push(id);
            });

            var genomeIds = idList.join(',');

            var user = this.$elem.find('#rast-id').val();
            var pw = this.$elem.find('#rast-pw').val();
            return [genomeIds, user, pw];
        },

        /**
         * Returns an object representing the state of this widget.
         * In this particular case, it is a list of key-value pairs, like this:
         * { 
         *   'param0' : 'parameter value',
         *   'param1' : 'parameter value'
         * }
         * with one key/value for each parameter in the defined method.
         */
        getState: function() {
            var paramsList = this.getParameters();

            return { idList : paramsList[0],
                     user : paramsList[1] };
        },

        /**
         * Adjusts the current set of parameters based on the given state.
         * Doesn't really do a whole lot of type checking yet, but it's assumed that
         * a state will be loaded from an object generated by getState.
         */
        loadState: function(state) {
            if (!state)
                return;

            if (state.hasOwnProperty('idList')) {
                var ids = state['idList'].split(',');
                this.refreshIdTable(ids);
            }

            if (state.hasOwnProperty('user')) {
                $(this.$elem.find('#rast-id')).val(state['user']);
            }
        },

        refresh: function() { },

    });

})( jQuery );
/**
 * Input widget for import NCBI genomes into workspace.
 * @author Roman Sutormin <rsutormin@lbl.gov>
 * @author Bill Riehl <wjriehl@lbl.gov>
 * @public
 */

(function( $, undefined ) {
    $.KBWidget({
        name: "NcbiGenomeImportInput",
        parent: "kbaseNarrativeInput",
        version: "1.0.0",
        options: {
            loadingImage: "../images/ajax-loader.gif",
        },

        init: function(options) {
            this._super(options);

            this.render();
            this.refresh();
            return this;
        },

        useSelect2: true,

        render: function() {
            var $inputDiv = $('<div>')
                            .addClass('kb-cell-params');
            var $inputGenome = $('<input>')
                               .addClass('form-control')
                               .css({'width' : '95%'})
                               .attr('name', 'param0')
                               .attr('placeholder', 'Select an NCBI Genome')
                               .attr('type', 'text');
            var $outputGenome = $('<input>')
                               .addClass('form-control')
                               .css({'width' : '95%'})
                               .attr('name', 'param1')
                               .attr('placeholder', 'Select an output genome')
                               .attr('type', 'text');

            var cellCss = { 'border' : 'none', 'vertical-align' : 'middle' };
            var thCss = {'font-family' : '"OxygenBold", sans-serif', 'font-weight': 'bold'};
            var inputCss = {'width' : '40%'};
            var descCss = {'color' : '#777'};
            $inputDiv.append($('<table>')
                             .addClass('table')
                             .append($('<tr>')
                                     .css(cellCss)
                                     .append($('<th>')
                                        .css(cellCss)
                                        .css(thCss)
                                        .append('NCBI Genome Name'))
                                     .append($('<td>')
                                        .css(cellCss)
                                        .css(inputCss)
                                        .append($inputGenome))
                                     .append($('<td>')
                                        .css(cellCss)
                                        .append('Name of public genome accessible on NCBI FTP')))
                             .append($('<tr>')
                                     .css(cellCss)
                                     .append($('<th>')
                                        .css(cellCss)
                                        .css(thCss)
                                        .append('Output Genome Id'))
                                     .append($('<td>')
                                        .css(cellCss)
                                        .css(inputCss)
                                        .append($outputGenome))
                                     .append($('<td>')
                                        .css(cellCss)
                                        .append('Output Genome Id. If empty, an ID will be chosen automatically.'))));

            this.$elem.append($inputDiv);
        },

        /**
         * Returns a list of parameters in the order in which the given method
         * requires them.
         * @return {Array} an array of strings - one for each parameter
         * @public
         */
        getParameters: function() {
            var paramList = [];

            $(this.$elem).find("[name^=param]").filter(":input").each(function(key, field) {
                paramList.push(field.value.trim());
            });

            return paramList;
        },

        /**
         * Returns an object representing the state of this widget.
         * In this particular case, it is a list of key-value pairs, like this:
         * { 
         *   'param0' : 'parameter value',
         *   'param1' : 'parameter value'
         * }
         * with one key/value for each parameter in the defined method.
         */
        getState: function() {
            var state = {};

            $(this.$elem).find("[name^=param]").filter(":input").each(function(key, field) {
                state[field.name] = field.value;
            });

            return state;
        },

        /**
         * Adjusts the current set of parameters based on the given state.
         * Doesn't really do a whole lot of type checking yet, but it's assumed that
         * a state will be loaded from an object generated by getState.
         */
        loadState: function(state) {
            if (!state)
                return;

            $(this.$elem).find("[name^=param]").filter(":input").each(function(key, field) {
                var $field = $(field);
                var fieldName = $field.attr("name");

                // If it's a text field, just dump the value in there.
                if ($field.is("input") && $field.attr("type") === "text") {
                    $field.val(state[fieldName]);
                }

                // If it's a select field, do the same... we'll have comboboxen or something,
                // eventually, so I'm just leaving this open for that.
                else if ($field.is("select")) {
                    $field.val(state[fieldName]);
                }
            });
        },

        refresh: function() {
            this.fixGenomeNames();
            var type = 'KBaseGenomes.Genome';
            this.trigger('dataLoadedQuery.Narrative', [type, this.IGNORE_VERSION, $.proxy(
                function(objects) {
                    var $input = $($(this.$elem).find('[name=param1]'));
                    var objList = [];

                    if (objects[type] && objects[type].length > 0) {
                        objList = objects[type];
                        /*
                         * Sorting - by date, then alphabetically within dates.
                         */
                        objList.sort(function(a, b) {
                            if (a[3] > b[3]) return -1;
                            if (a[3] < b[3]) return 1;
                            if (a[1] < b[1]) return -1;
                            if (a[1] > b[1]) return 1;
                            return 0;
                        })
                    }
                    /* down to cases:
                     * 1. (simple) objList is empty, $input doesn't have a list attribute.
                     * -- don't do anything.
                     * 2. objList is empty, $input has a list attribute.
                     * -- no more data exists, so remove that list attribute and the associated datalist element
                     * 3. objList is not empty, $input doesn't have a list attribute.
                     * -- data exists, new datalist needs to be added and linked.
                     * 4. objList is not empty, $input has a list attribute.
                     * -- datalist needs to be cleared and updated.
                     */

                    // case 1 - no data, input is unchanged

                    // case 2 - no data, need to clear input
                    var datalistID = $input.attr('list');
                    if (objList.length == 0 && datalistID) {
                        $(this.$elem.find("#" + datalistID)).remove();
                        $input.removeAttr('list');
                        $input.val("");
                    }

                    // case 3 - data, need new datalist
                    // case 4 - data, need to update existing datalist
                    else if (objList.length > 0) {
                        var $datalist;
                        if (!datalistID) {
                            datalistID = this.genUUID();
                            $input.attr('list', datalistID);
                            $datalist = $('<datalist>')
                                        .attr('id', datalistID);
                            $input.after($datalist);
                        }
                        else {
                            $datalist = $(this.$elem.find("#" + datalistID));
                        }
                        $datalist.empty();
                        for (var j=0; j<objList.length; j++) {
                            $datalist.append($('<option>')
                                             .attr('value', objList[j][1])
                                             .append(objList[j][1]));
                        }
                    }
                }, this)])
            return;
        },

        fixGenomeNames: function() {
            var pid = 'param0';
            var $input = $($(this.$elem).find("[name=" + pid + "]"));
            var self = this;
            
            var request = $.getJSON('static/kbase/js/widgets/function_input/ncbi_genome2ftp.json');            
            
            //kbws.list_referencing_objects([objectIdentity], function(data) {
            $.when(request).done(function(data) {
                var objList = [];
                for (var key in data)
                    objList.push(key);
                var datalistID = $input.attr('list');
                var $datalist;
                if (!datalistID) {
                    datalistID = self.genUUID();
                    $input.attr('list', datalistID);
                    $datalist = $('<datalist>').attr('id', datalistID);
                    $input.after($datalist);
                } else {
                    $datalist = $(self.$elem.find("#" + datalistID));
                }
                $datalist.empty();
                for (var j=0; j<objList.length; j++) {
                    $datalist.append($('<option>').attr('value', objList[j]).append(objList[j]));
                }
            }).fail(function(err){
                console.error("Error loading ncbi genome names from JSON resource file:");
                console.error(err);
            });
        },
        
        genUUID: function() {
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
                var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);
                return v.toString(16);
            });
        }

    });

})( jQuery );
/**
 * Input widget for import genomes into workspace.
 * @author Roman Sutormin <rsutormin@lbl.gov>
 * @author Bill Riehl <wjriehl@lbl.gov>
 * @public
 */

(function( $, undefined ) {
    $.KBWidget({
        name: "GenomeImportWidget",
        parent: "kbaseTabbedInput",
        version: "1.0.0",
        options: {
        },
        init: function(options) {
            this._super(options);
            return this;
        },
    });
})( jQuery );
/* 
   Listselect Renderer

   Provides a select list that allows the selection of one or multiple data items that can be filtered by their attributes. The attribute to be filtered will be displayed as the label in the selection list. Filters can be chained by pressing the enter key in the filter box.

   Options:

   target (HTML Container Element)
      Element to render in.

   data (ARRAY of objects)
      The data to display.

   multiple (BOOLEAN)
      If set to false, displays a single select vs a multi select. Default is false.

   no_button (BOOLEAN)
      If set to true, does not display submit button (callback triggers on change event). Default is false.

   rows (INT)
      The number of rows to display in the select list. Default is 10.

   sort (BOOLEAN)
      Setting this to true will automatically sort the lists by the currently selected filter. Default is false.

   filter (ARRAY of STRING)
      An ordered list of attribute names that are attributes of the objects passed in data that the selection list may be filtered by

   filter_value (STRING)
      Initial value of the filter. Default is an empty string.

   filter_attribute (STRING)
      Initial attribute to be displayed and filtered by. Default is the first element in the filter list.

   no_filter (BOOLEAN)
      If set to true, hides the filter. Default is false.

   result_field (BOOLEAN)
      If set to true, shows a text input field to name the result. Default is false.

   result_field_default (STRING)
      Default string to put into the result field. Default is an empty string.

   result_field_placeholder (STRING)
      Placeholder text for the result field. Default is "selection name".

   select_name (STRING)
      Name attribute of the result listselect. Default is "selection".

   select_id (STRING)
      ID attribute of the result listselect. Default is "selection".

   value (STRING)
      The attribute of the data objects to be used as the value of the select options.

   callback (FUNCTION)
      The function to be called when the submit button is pressed. This function will pass the values of the selected option(s).

   selection (HASH of STRING)
      Hash of values pointing to 1. The inital selection in the result box. The values must be attribute values of the data object attribute selected as the value attribute of the selection list.

   button (OBJECT)
      This allows setting of the class, style, text and icon attributes of the button, i.e. { class: 'btn btn-error', style: 'border: 1px dotted black;', icon: '<i class="icon-ok icon-white"></i>', text: 'search' }

   synchronous (BOOLEAN)
      This is true by default. If set to false, the listselect expects its data to be set, filtered and browsed externally. It will issue a callback to the navigation callback function on any of those events, expecting an external data update.

   navigation_callback (FUNCTION)
      The function to be called when a navigation / filter action is issued and the listselect is in asynchronous state (synchronous set to false). It will be passed either a string ("more", "reset") or an object that can contain one of the following structures:
        query: [ { searchword: $filter_value, field: $column_name_to_search, comparison: $comparison_operator }, ... ]
        limit: $number_of_rows_per_page

   asynch_limit (INTEGER)
      The number of items initially loaded in asynchronous mode, default is 100.

   asynch_filter_min_length (INTEGER)
      The number of characters that need to be entered into the filter before the filter callback is performed. Default is 3.

   asynch_keystroke_threshold (INTEGER)
      The number of miliseconds in between keystrokes the navigation callback method will wait for new keystrokes before sending the full request. Default is 1000 (one second).
*/
(function () {
    var root = this;
    var standaloneListselect = root.standaloneListselect = {
	about: {
	    name: "listselect",
	    title: "List Select",
            author: "Tobias Paczian",
            version: "1.0",
            requires: [],
            defaults: {
		'rows': 10,
		'filter': [],
		'filter_value': '',
		'filter_type': 'substring',
		'filter_attribute': null,
		'filtered_data': [],
		'selection_data': [],
		'select_name': "selection",
		'select_id': "selection",
		'filter_breadcrumbs': [],
		'result_field': false,
		'result_field_default': '',
		'result_field_placeholder': 'selection name',
		'selection': {},
		'data': [],
		'target': null,
		'sort': false,
		'multiple': false, 
		'no_button': false,
		'no_filter': false,
		'extra_wide': false,
		'synchronous': true,
		'navigation_callback': null,
		'navigation_url': null,
		'asynch_limit': 100,
		'asynch_keystroke_threshold': 1000,
		'asynch_filter_min_length': 3,
		'return_object': false,
		'style': "" }
	},

	exampleData: function () {
	    return { };
        },

	create: function (params) {
	    var renderer = this;
	    if (! window.hasOwnProperty('rendererListselect')) {
		window.rendererListselect = [];
	    }
	    var instance = { settings: {},
			     index: params.index };
	    jQuery.extend(true, instance, renderer);
	    jQuery.extend(true, instance.settings, renderer.about.defaults, params);
	    window.rendererListselect.push(instance);

	    return instance;
	},

	render: function (index) {
	    var renderer = rendererListselect[index];
	    
	    if (renderer.settings.navigation_url) {
		renderer.settings.navigation_callback = renderer.update_data;
	    }

	    // get the target div
	    var target = renderer.settings.target;
	    var tstyle = 'background-image: linear-gradient(to bottom, #FAFAFA, #F2F2F2); background-repeat: repeat-x; border: 1px solid #D4D4D4; border-radius: 4px 4px 4px 4px; box-shadow: 0 1px 4px rgba(0, 0, 0, 0.067); padding-left: 10px; padding-top: 10px; width: ';
	    if (renderer.settings.multiple) {
		tstyle += renderer.settings.extra_wide ? '1010px;' : '600px;';
	    } else if (renderer.settings.no_button) {
		tstyle += '256px;';
	    } else {
	        tstyle += '426px;';
	    }
	    target.setAttribute('style', tstyle+renderer.settings.style);
	    target.innerHTML = "";

	    // initialize filter attribute
	    if (renderer.settings.filter_attribute == null) {
		renderer.settings.filter_attribute = renderer.settings.filter[0];
	    }

	    // get the selection list
	    var selection_list = document.createElement('select');
	    if (typeof renderer.settings.navigation_callback == "function") {
		selection_list.addEventListener('scroll', function(event) {
		    event = event || window.event;
		    if (event.target.scrollTop == event.target.scrollTopMax) {
			rendererListselect[index].settings.scroll_position = event.target.scrollTop;
			rendererListselect[index].settings.navigation_callback("more", index);
		    }
		});
	    }
	    if (renderer.settings.extra_wide) {
		selection_list.setAttribute('style', 'width: 415px');
	    }
	    if (renderer.settings.multiple) {
		selection_list.setAttribute('multiple', '');
	    }
	    selection_list.setAttribute('size', renderer.settings.rows);
	    renderer.redrawSelection(selection_list, index);

	    // create a filter box
	    var filter = document.createElement('div');
	    var filter_grp = document.createElement('div');
	    filter_grp.setAttribute('class', 'input-append');
	    var filter_input = document.createElement('input');
	    filter_input.setAttribute('type', 'text');
	    filter_input.setAttribute('style', renderer.settings.extra_wide ? 'width: 205px;' : 'width: 122px;');
	    filter_input.setAttribute('placeholder', 'Enter filter');
	    filter_input.setAttribute('value', renderer.settings.filter_value);
	    filter_input.addEventListener('keyup', function (event) {
		if (event.keyCode == 13) {
		    rendererListselect[index].addBreadcrumb(index);
		    return;
		}
		rendererListselect[index].settings.filter_value = filter_input.value;
		if (rendererListselect[index].settings.synchronous) {
		    rendererListselect[index].redrawSelection(selection_list, index);
		} else {
		    if (filter_input.value.length >= rendererListselect[index].settings.asynch_filter_min_length) {
			rendererListselect[index].typing = new Date().getTime();
			window.setTimeout("rendererListselect["+index+"].check_threshold("+index+")", rendererListselect[index].settings.asynch_keystroke_threshold);
		    }
		}
	    });
	    var filter_surround = document.createElement('div');
	    filter_surround.setAttribute('class', 'btn-group');
	    var filter_select = document.createElement('button');
	    filter_select.setAttribute('class', 'btn dropdown-toggle');
	    filter_select.setAttribute('style', (renderer.settings.extra_wide ? 'width: 210px;' : 'width: 85px;') + ' text-align: right;');
	    filter_select.setAttribute('data-toggle', 'dropdown');
	    filter_select.innerHTML = renderer.settings.filter_attribute + ' <span class="caret"></span>';
	    var filter_list = document.createElement('ul');
	    filter_list.setAttribute('class', 'dropdown-menu');
	    filter_list.setAttribute('style', renderer.settings.extra_wide ? 'max-height: 200px; overflow: auto;' : 'max-height: 200px; overflow: auto;');
	    var filter_string = '';
	    for (var i=0; i<renderer.settings.filter.length; i++) {
		filter_string += '<li><a onclick="rendererListselect['+renderer.index+'].settings.filter_value=\'\';rendererListselect['+renderer.index+'].settings.filter_attribute=this.innerHTML.slice(0, -1);rendererListselect['+renderer.index+'].render('+renderer.index+');" style="cursor: pointer;">'+renderer.settings.filter[i]+' </a></li>';
	    }
	    filter_list.innerHTML = filter_string;
	    filter_grp.appendChild(filter_input);
	    filter_surround.appendChild(filter_select);
	    filter_surround.appendChild(filter_list);
	    filter_grp.appendChild(filter_surround);
	    filter.appendChild(filter_grp);

	    // create the filter breadcrumbs
	    var filter_breadcrumbs = document.createElement('div');
	    filter_breadcrumbs.setAttribute('style', 'font-size: 9px; position: relative; top: -5px;');
	    for (var i=0;i<renderer.settings.filter_breadcrumbs.length;i++) {
		var bc_button = document.createElement('button');
		bc_button.setAttribute('class', "btn btn-mini");
		bc_button.setAttribute('style', "margin-right: 3px;");
		bc_button.setAttribute('title', "remove filter");
		bc_button.setAttribute('name', i);
		bc_button.innerHTML = renderer.settings.filter_breadcrumbs[i][0]+": "+renderer.settings.filter_breadcrumbs[i][1]+' <span style="font-size: 11px; color: gray;">x</span>';
		bc_button.addEventListener('click', function (event) {
		    rendererListselect[index].removeBreadcrumb(this, index);
		});
		filter_breadcrumbs.appendChild(bc_button);
	    }

	    // check for multi-select vs single select
	    if (renderer.settings.multiple) {
	    
		// create the result list
		var result_list = document.createElement('select');
		result_list.setAttribute('multiple', '');
		result_list.setAttribute('style', 'width: 415px');
		result_list.setAttribute('size', renderer.settings.rows);
		result_list.setAttribute('name', renderer.settings.select_name);
		result_list.setAttribute('id', renderer.settings.select_id);
		renderer.redrawResultlist(result_list, index);
		
		// create the action buttons
		var button_span = document.createElement('span');
		button_span.setAttribute('style', "position: relative; bottom: 100px;");
		var button_left = document.createElement('a');
		button_left.setAttribute('class', 'btn btn-small btn-default');
		button_left.setAttribute('style', 'position: relative; left: 36px; top: 40px;');
		button_left.innerHTML = '<i class="fa fa-chevron-left"></i>';
		button_left.addEventListener('click', function () {
		    for (var x=0; x<result_list.options.length; x++) {
			if (result_list.options[x].selected) {
			    for (var y=0;y<rendererListselect[index].settings.selection_data.length;y++) {
				if (rendererListselect[index].settings.selection_data[y][rendererListselect[index].settings.value] == result_list.options[x].value) {
				    rendererListselect[index].settings.selection_data.splice(y,1);
				    break;
				}
			    }

			    delete rendererListselect[index].settings.selection[result_list.options[x].value];			
			}
		    }
		    rendererListselect[index].redrawResultlist(result_list, index);
		    rendererListselect[index].redrawSelection(selection_list, index);
		});
		var button_right = document.createElement('a');
		button_right.setAttribute('class', 'btn btn-small btn-default');
		button_right.setAttribute('style', 'position: relative; right: 36px; bottom: 40px;');
		button_right.innerHTML = '<i class="fa fa-chevron-right"></i>';
		button_right.addEventListener('click', function () {
		    for (var x=0; x<selection_list.options.length; x++) {
			if (selection_list.options[x].selected) {
			    rendererListselect[index].settings.selection[selection_list.options[x].value] = 1;
			    for (var y=0;y<rendererListselect[index].settings.data.length;y++) {
				if (rendererListselect[index].settings.data[y][rendererListselect[index].settings.value] == selection_list.options[x].value) {
				    rendererListselect[index].settings.selection_data.push(rendererListselect[index].settings.data[y]);
				    break;
				}
			    }
			}
		    }
		    rendererListselect[index].redrawResultlist(result_list, index);
		    rendererListselect[index].redrawSelection(selection_list, index);
		});
		var button_x = document.createElement('a');
		button_x.setAttribute('class', 'btn btn-small btn-default');
		button_x.innerHTML = '<i class="fa fa-times"></i>';
		button_x.addEventListener('click', function () {
		    rendererListselect[index].settings.selection = {};
		    rendererListselect[index].settings.selection_data = [];
		    rendererListselect[index].redrawResultlist(result_list, index);
		    rendererListselect[index].redrawSelection(selection_list, index);
		});
		button_span.appendChild(button_left);
		button_span.appendChild(button_x);
		button_span.appendChild(button_right);

		// check for a result field
		if (renderer.settings.result_field) {
		    var resultField = document.createElement('input');
		    resultField.setAttribute('type', 'text');
		    resultField.setAttribute('placeholder', renderer.settings.result_field_placeholder);
		    resultField.value = renderer.settings.result_field_default;
		    resultField.setAttribute('style', 'margin-left: 110px;');
		    resultField.setAttribute('id', 'listselect'+index+'selectionname');
		    filter_surround.appendChild(resultField);
		}
	    }

	    // create the submit button
	    var submit_button = document.createElement('a');
	    submit_button.setAttribute('class', (renderer.settings.button && renderer.settings.button.class) ? renderer.settings.button.class : 'btn btn-small btn-success');
	    submit_button.setAttribute('id', 'listselect_submit_button'+index);
	    submit_button.setAttribute('style', (renderer.settings.button && renderer.settings.button.style) ? renderer.settings.button.style : 'margin-left: 8px; margin-bottom: 8px;');
	    submit_button.innerHTML = ((renderer.settings.button && renderer.settings.button.text) ? renderer.settings.button.text : '') + ( (renderer.settings.button && renderer.settings.button.icon) ? renderer.settings.button.icon : '<i class="fa fa-check"></i>');
	    if (typeof(renderer.settings.callback) == 'function') {
	        var index = renderer.index;
		if (renderer.settings.multiple) {
		    submit_button.addEventListener('click', function () {
			var selection_result = [];
			if (renderer.settings.return_object) {
			    for (var x=0; x<result_list.options.length; x++) {
			        for (var y=0; y<renderer.settings.data.length; y++) {
                                    if (result_list.options[x].value == renderer.settings.data[y][renderer.settings.value]) {
					selection_result.push(renderer.settings.data[y]);
					break;
                                    }
				}
		            }
			} else {
			    for (var x=0; x<result_list.options.length; x++) {
				selection_result.push(result_list.options[x].value);
		            }
			}
			var selection_name = document.getElementById('listselect'+index+'selectionname') ? document.getElementById('listselect'+index+'selectionname').value : "";
			rendererListselect[index].settings.callback(selection_result, selection_name);
		    });
		} else if (renderer.settings.no_button) {
		    selection_list.addEventListener('change', function () {
		        var selection_result;
		        if (renderer.settings.return_object) {
			    for (var x=0; x<renderer.settings.data.length; x++) {
				if (selection_list.options[selection_list.selectedIndex].value == renderer.settings.data[x][renderer.settings.value]) {
				    selection_result = renderer.settings.data[x];
				    break;
				}
			    }
	                } else {
			    selection_result = selection_list.options[selection_list.selectedIndex].value;
	                }
			var selection_name = document.getElementById('listselect'+index+'selectionname') ? document.getElementById('listselect'+index+'selectionname').value : "";
			rendererListselect[index].settings.callback(selection_result, selection_name);
		    });
		} else {
		    submit_button.addEventListener('click', function () {
			var selection_result;
		        if (renderer.settings.return_object) {
			    for (var x=0; x<renderer.settings.data.length; x++) {
				if (selection_list.options[selection_list.selectedIndex].value == renderer.settings.data[x][renderer.settings.value]) {
				    selection_result = renderer.settings.data[x];
				    break;
				}
			    }
	                } else {
			    selection_result = selection_list.options[selection_list.selectedIndex].value;
	                }
			var selection_name = document.getElementById('listselect'+index+'selectionname') ? document.getElementById('listselect'+index+'selectionname').value : "";
	                rendererListselect[index].settings.callback(selection_result, selection_name);
		    });
	        }
            }
	    
	    // build the output
	    if (! renderer.settings.no_filter) {
		target.appendChild(filter);
	    }
	    target.appendChild(filter_breadcrumbs);
	    target.appendChild(selection_list);
	    selection_list.scrollTop = rendererListselect[index].settings.scroll_position || 0;
	    if (renderer.settings.multiple) {
		target.appendChild(button_span);
		target.appendChild(result_list);
		if (! renderer.settings.no_button) {
		    target.appendChild(submit_button);
		}
	    } else if (! renderer.settings.no_button) {
	        target.appendChild(submit_button);
	    }
	    filter_input.focus();
	    filter_input.selectionStart = filter_input.value.length;
	    filter_input.selectionEnd = filter_input.value.length;
	},
	// add a breadcrumb to the list
	addBreadcrumb: function (index) {
	    var renderer = rendererListselect[index];
	    if (renderer.settings.filter_value != "") {
		renderer.settings.filter_breadcrumbs.push([renderer.settings.filter_attribute, renderer.settings.filter_value]);
		renderer.settings.filter_value = "";
		if (renderer.settings.synchronous) {
		    renderer.render(index);
		} else {
		    renderer.update(index);
		}
	    }
	},
	// remove a breadcrumb from the list
	removeBreadcrumb: function (button, index) {
	    var renderer = rendererListselect[index];
	    renderer.settings.filter_breadcrumbs.splice(button.name, 1);
	    renderer.settings.filter_value = '';
	    if (renderer.settings.synchronous) {
		renderer.render(index);
	    } else {
		renderer.update(index);
	    }
	},
	// redraw the result list (right)
	redrawResultlist: function (result_list, index) {  
	    var renderer = rendererListselect[index];
	    var result_list_array = [];
	    for (var i=0; i<renderer.settings.selection_data.length; i++) {
		result_list_array.push( [ renderer.settings.selection_data[i][renderer.settings.value], '<option value="'+renderer.settings.selection_data[i][renderer.settings.value]+'" title="'+renderer.settings.selection_data[i][renderer.settings.filter_attribute]+'">'+renderer.settings.selection_data[i][renderer.settings.filter_attribute]+'</option>'] );
	    }
	    if (renderer.settings.sort) {
		result_list_array.sort(renderer.listsort);
	    }
	    var result_list_string = "";
	    for (var i=0; i<result_list_array.length; i++) {
		result_list_string += result_list_array[i][1];
	    }
	    result_list.innerHTML = result_list_string;
	},
	// redraw the selection list (left)
	redrawSelection: function (selection_list, index) {
	    var renderer = rendererListselect[index];

	    // initialize the filter
	    renderer.settings.filtered_data = renderer.settings.data;

	    // apply all filter breadcrumbs
	    for (var i=0; i<renderer.settings.filter_breadcrumbs.length; i++) {
		renderer.settings.filtered_data = renderer.filter({ data: renderer.settings.filtered_data, value: renderer.settings.filter_breadcrumbs[i][1], type: renderer.settings.filter_type, attribute: renderer.settings.filter_breadcrumbs[i][0] }, index);
	    }
	    
	    // filter the list with the current filter
	    renderer.settings.filtered_data = renderer.filter({ data: renderer.settings.filtered_data, value: renderer.settings.filter_value, type: renderer.settings.filter_type, attribute: renderer.settings.filter_attribute }, index);
	    
	    // sort the list
	    if (renderer.settings.sort) {
		renderer.settings.filtered_data.sort(renderer.objectsort);
	    }
	    
	    // create the selection list
	    var settings_string = "";
	    for (var i=0; i<renderer.settings.filtered_data.length; i++) {
		if (! renderer.settings.selection[renderer.settings.filtered_data[i][renderer.settings.value]]) {
		    settings_string += '<option value="'+renderer.settings.filtered_data[i][renderer.settings.value]+'" title="'+renderer.settings.filtered_data[i][renderer.settings.filter_attribute]+'">'+renderer.settings.filtered_data[i][renderer.settings.filter_attribute]+'</option>';
		}
	    }
	    selection_list.innerHTML = settings_string;

	    return;
	},

	check_threshold: function(index) {
	    var threshold = new Date().getTime();
	    if (rendererListselect[index].typing + rendererListselect[index].settings.asynch_keystroke_threshold < threshold) {
		rendererListselect[index].update(index);
	    }		
	},

	update: function (index) {
	    var renderer = rendererListselect[index];
	    var query = [];
	    for (var i=0; i<renderer.settings.filter_breadcrumbs.length; i++) {
		query.push( { "field": renderer.settings.filter_breadcrumbs[i][0],
			      "searchword": renderer.settings.filter_breadcrumbs[i][1] } );
	    }
	    if (renderer.settings.filter_value.length) {
		query.push( { "field": renderer.settings.filter_attribute,
			      "searchword": renderer.settings.filter_value } );
	    }
	    renderer.settings.navigation_callback( { "clear": true, "query": query }, index );
	},

	// filter the data according to all breadcrumbs and the current filter
	filter: function(settings, index) {
	    var renderer = rendererListselect[index];
	    var results = [];
	    for (var x=0;x<settings.data.length;x++) {
		if (typeof(renderer.settings.selection[x]) == 'undefined') {
		    if (settings.data[x].hasOwnProperty(settings.attribute) && typeof(settings.data[x][settings.attribute]) == 'string') {
			if (settings.type == 'substring') {
			    if (settings.data[x][settings.attribute].toLowerCase().indexOf(settings.value.toLowerCase()) > -1) {
				results.push(settings.data[x]);
			    }
			} else if (settings.type == 'complete') {
			    if (settings.data[x][settings.attribute] == settings.value) {
				results.push(settings.data[x]);
			    }
			}
		    }
		}
	    }
	    return results;
	},
	// sort the list by the label attribute
	objectsort: function(a, b) {
	    if (a[renderer.settings.label] > b[renderer.settings.label]) {
		return 1;
	    } else if (b[renderer.settings.label] > a[renderer.settings.label]) {
		return -1;
	    } else {
		return 0;
	    }
	},
	// sort the list by the first item in the sublist
	listsort: function (a, b) {
	    if (a[0] > b[0]) {
		return 1;
	    } else if (b[0] > a[0]) {
		return -1;
	    } else {
		return 0;
	    }
	},
	update_data: function (params, index) {
	    var renderer = rendererListselect[index];

	    if (typeof params == 'string' && params == 'more') {
		renderer.settings.offset = renderer.settings.data.length;
		if (renderer.settings.total_count <= renderer.settings.asynch_limit) {
		    return;
		}
	    } 
	    if (typeof params == 'object') {
	        if (params.sort) {
	            if (params.sort == 'default') {
	                renderer.settings.sort = 'name';
    		        renderer.settings.sortDir = 'asc';
	            } else {
		        renderer.settings.sort = params.sort;
		        renderer.settings.sortDir = params.dir;
	            }
	        }
	        if (params.query) {
		    renderer.settings.offset = 0;
		    if (params.clear) {
		        renderer.settings.query = {};
		    }
	            if (typeof params.query != 'object') {
	                renderer.settings.query = {};
	            } else {
			renderer.settings.query = params.query;
		    }
	        }
	        if (params.goto != null) {
		    renderer.settings.offset = params.goto;
	        }
	        if (params.limit) {
		    renderer.settings.limit = params.limit;
	        }
	    }

	    var query = "";
	    for (var i in renderer.settings.query) {
	        if (renderer.settings.query.hasOwnProperty(i) && renderer.settings.query[i].searchword.length) {
		    query +=  "&" + renderer.settings.query[i].field + '=*' + renderer.settings.query[i].searchword + '*';
	        }
	    }

	    var url = renderer.settings.navigation_url + query + "&limit=" + renderer.settings.asynch_limit + "&offset=" + (renderer.settings.offset || 0) + "&order=" +renderer.settings.asynch_filter_attribute;

	    var headers = renderer.Authentication ? {'AUTH': renderer.Authentication} : {};
	
	    jQuery.ajax({ url: url, headers: headers, dataType: "json", success: function(data) {
		var renderer =  rendererListselect[index];
		renderer.settings.total_count = data.total_count;
		if (typeof params == 'string' && params == "more") {
		    renderer.settings.data = renderer.settings.data.concat(data.data);
		} else {
		    renderer.settings.data = data.data;
		}
		renderer.render(index);
	    }});
	}
    }
}).call(this);

/**
 * Just a simple example widget - makes a div with "Hello world!"
 * in a user-defined color (must be a css color - 'red' or 'yellow' or '#FF0000')
 */
 (function( $, undefined ) {
    $.KBWidget({
        name: "AssemblyWidget",
        parent: "kbaseWidget",
        version: "1.0.0",
        options: {
            color: "black",
        },

        job_id: 0,
        arURL: null,
        ws_url: null,
        ws_name: null,
        fba_url: null,
        state: {},

        init: function(options) {
            this._super(options);
            var self = this;
            var kb_info = options.kbase_assembly_input;
            console.log(kb_info);
            console.log('test');
            //Get this from options
            var user = options.ar_user;
            self.token = options.ar_token;
            self.arURL = options.ar_url;
            //self.arURL = 'http://140.221.84.121:8000/'
            self.ws_url = options.ws_url;
            self.ws_name = options.ws_name;
            self.fba_url = "http://kbase.us/services/KBaseFBAModeling/";

            var arRequest = {
                "data_id": null,
                "kbase_assembly_input": options.kbase_assembly_input,
                "file_sizes": [], 
                "filename": [], 
                "ids": [], 
                "message": null, 
                "recipe": null,
                "pipeline": [['spades']],
                "queue": null, 
                "single": [[]],
                "pair": [],
                "reference": null, 
                "version": "widget"
            };
            // State variables

            /////////// Functions 

            var make_status_table = function(job_id, desc, status) {
                var status_box = $('<table class="table table-striped table-bordered" style="margin-left:auto; margin-right:auto">')
                .append('<thead><tr><th>Job ID</th><th>Description</th><th>Status</th></tr></thead>')
                .append('<tbody><td>' + job_id + '</td><td>'+ desc +'</td><td>'+ status +'</td></tbody>');
                return status_box;
            };

            var check_status = function(j_id) {
                var prom = $.get(self.arURL + '/user/' + user + '/job/' + j_id + '/status/');
                return prom;
            };
            
            var request_job_report = function(job_id) {
                console.log('report');
                var prom = $.get(self.arURL + '/static/serve/' + user + '/job/' + job_id);
                return prom;
            };
            
            var get_job_report_txt = function(job_id) {
                var prom = $.get(self.arURL + '/user/' + user + '/job/' + job_id + '/report');
                return prom;
            };

            var get_job_report_log = function(job_id) {
                var prom = $.get(self.arURL + '/user/' + user + '/job/' + job_id + '/log');
                return prom;
            };

            var get_assemblies = function(job_id){
                var prom = $.get(self.arURL + '/user/' + user + '/job/' + job_id + '/results?type=contigs,scaffolds');
                return prom;
            };

            var get_best_assembly = function(job_id){
                var prom = $.get(self.arURL + '/user/' + user + '/job/' + job_id + '/assemblies/auto')
                return prom;
            };

            var get_assemblers = function(){
                var deferred = $.Deferred();
                $.get(self.arURL + '/module/avail').done(function(mod_avail){
                    asms = []
                    all = JSON.parse(mod_avail);
                    console.log(all)
                    for (i=0; i<all.length; i++) {
                        if (all[i].stages.search('assembler') != -1){
                            asms.push(all[i]);
                        }
                    }
                    deferred.resolve(asms);
                });
                return deferred.promise();
            };

            var get_modules = function(){
                var deferred = $.Deferred();
                $.get(self.arURL + '/module/avail').done(function(mod_avail){
                    pre = [];
                    asms = [];
                    post = [];
                    all = JSON.parse(mod_avail);
                    for (i=0; i<all.length; i++) {
                        if (all[i].stages.search('pre') != -1){
                            pre.push(all[i]);
                        }
                    }
                    for (i=0; i<all.length; i++) {
                        if (all[i].stages.search('assembler') != -1){
                            asms.push(all[i]);
                        }
                    }
                    for (i=0; i<all.length; i++) {
                        if (all[i].stages.search('post') != -1){
                            post.push(all[i]);
                        }
                    }
                    console.log('all');
                    console.log(all);

                    //// FIX: modules are tagged, rather than categorized
                    //          deferred.resolve([pre, asms, post]);
                    deferred.resolve([all]);
                });
                return deferred.promise();
            };

            var kill_job = function(job_id, token) {
                var prom = $.ajax({
                    contentType: 'application/json',
                    url: self.arURL + 'user/' + user + '/job/' + job_id + '/kill',
                    type: 'get',
                    headers: {Authorization: token}
                });
                return prom;
            };

            //////////// End functions

            // Parses the AssemblyInput object and displays it in the table
            var data_report = $('<div class="panel panel-info" style="padding:10px">')
                              .append('<div class="panel-heading panel-title">Assembly Service Data Set </div>');

            var make_data_table = function(info) {
                var tables = $('<div>')
                if (info.paired_end_libs != undefined) {
                    for (var i = 0; i < info.paired_end_libs.length; i++) {
                        var tbl = $('<table class="table table-striped table-bordered" style="margin-left:auto; margin-right:auto">');
                        tbl.append('<thead><tr><th>Paired-End Files</th></tr></thead>');
                        for (var j = 0; j < 2; j++) {
                            var file_row = '';
                            handle = 'handle_' + String(j+1);
                            if (info.paired_end_libs[i][handle] != undefined) {
                                var fname = info.paired_end_libs[i][handle].file_name;
                                file_row += '<tr><td>' + fname + '</td>';
                                file_row += '</tr>';
                                tbl.append(file_row);
                            }
                        }
                        tables.append(tbl);
                    }
                }
                if (info.single_end_libs != undefined) {
                    for (var i = 0; i < info.single_end_libs.length; i++) {
                        var tbl = $('<table class="table table-striped table-bordered" style="margin-left:auto; margin-right:auto">');
                        tbl.append('<thead><tr><th>Single-End File</th></tr></thead>');
                        var file_row = '';
                        var fname = info.single_end_libs[i]['handle'].file_name;
                        file_row += '<tr><td>' + fname + '</td>';
                        file_row += '</tr>';
                        tbl.append(file_row);
                        tables.append(tbl);
                    }
                }
                if (info.references != undefined) {
                    for (var i = 0; i < info.references.length; i++) {
                        var tbl = $('<table class="table table-striped table-bordered" style="margin-left:auto; margin-right:auto">');
                        tbl.append('<thead><tr><th>Reference File</th></tr></thead>');
                        var file_row = '';
                        var fname = info.references[i]['handle'].file_name;
                        file_row += '<tr><td>' + fname + '</td>';
                        file_row += '</tr>';
                        tbl.append(file_row);
                        tables.append(tbl);
                    }
                }
                return tables;
            };

            var dt = make_data_table(kb_info);
            data_report.append(dt);
            self.$elem.append(data_report);
            var tabs = $('<div id="tabs">');
            var nav = $('<ul class="nav nav-pills"> \
             <li><a href="#frag-recipes"><span class="glyphicon glyphicon-list-alt"><span> Recipe</a></li> \
             <li><a href="#frag-assemblers"><span class="glyphicon glyphicon-flash"><span> Assemblers</a></li> \
             <li><a href="#frag-pipeline"><span class="glyphicon glyphicon-pencil"><span> Pipeline</a><span class="label label-info">beta</span></li> \
             </ul>');
            tabs.append(nav);

            /////// Recipes
            var asm_div = $('<div class="row" id="frag-recipes"><small>Recipes are curated intelligent workflows designed for specific scenarios.</small></div>');
            var asm_choose = $('<span class="col-md-3"><select class="form-control" name="assemblers"> \
              <option value="auto">Automatic Assembly</option> \
              <option value="faster">Fast Pipeline</option> \
              <option value="smart">Arast Smart Workflow</option> \
              <option value="kiki">Kiki Assembler</option> \
              </select></span>');
            var asm_desc = $('<span class="col-md-7"><input type="text" class="form-control" style="width:100%" placeholder="Description"></span>');
            var asm_btn = $('<span class="col-md-1 pull-right"><button class="btn btn-large btn-primary pull-right"><span class="glyphicon glyphicon-play-circle"  style="color:white;"></span> Assemble</button></span>');
            asm_div.append($('<fieldset><div class="form-group">').append(asm_choose, asm_desc, asm_btn));


            //////// Assemblers
            var asm_div2 = $('<div id="frag-assemblers"><small>Assemble contigs using multiple assemblers and compare results</small></div>');
            var asm_row = $('<div class="row">');
            var add_asm_group = $('<span class="btn-group col-md-2"></span>');
            var add_asm_btn = $('<button type="button" class="btn btn-warning asm-form dropdown-toggle" data-toggle="dropdown"> \
             <span class="glyphicon glyphicon-plus-sign"></span>  Assembler <span class="caret"></span> </button>');
            add_asm_btn.find('span').css("color", "white");
            var add_asm_sel = $('<ul class="dropdown-menu" role="menu"></ul>');
            var assembler_pool = $('<div class="well col-md-8 col-md-offset-1" id="asm-pool">');
            var asm_picked = [];
            var asm_row2 = $('<div class="row">');
            var asm_desc2 = $('<div class="col-md-10"><input type="text" class="asm-form form-control" style="width:100%" placeholder="Description"></div>');
            var asm_btn2 = $('<button class="btn btn-default col-md-2 btn-primary pull-right asm-form"><span class="glyphicon glyphicon-play-circle"  style="color:white;"></span> Assemble</button>');

            var update_asm_pool = function(assembler_pool, pool){
                var body = $('<div>');
                for (i=0; i<pool.length;i++){
                    (function(i) {
                        body.append($('<div class="btn btn-primary btn-sm" style="margin:5px">' + pool[i] + '</div>').on('click', function(){
                            $('#asm-' + pool[i]).attr('disabled', "false");
                            $('#asm-' + pool[i]).show();
                            var asm_idx = pool.indexOf(pool[i]);
                            pool.splice(asm_idx, 1);
                            update_asm_pool(assembler_pool, pool);
                        }));
                    })(i);
                }
                console.log(body);
                assembler_pool.html(body);
            };

            get_assemblers().done(function(asms){
                for (i=0; i<asms.length;i++){
                    (function(i) {
                        var asm_id = 'asm-' + asms[i].name;
                        var asm = $('<li data-toggle="tooltip" data-placement="right" title="' + asms[i].description + '" id="' + asm_id + '"><a>' + asms[i].name + '</a></li>');
                        asm.tooltip({container: 'body'});
                        var asm_name = asms[i].name;
                        asm.on('click', function(){
                            asm_picked.push(asm_name);
                            console.log(asm_picked);
                            update_asm_pool(assembler_pool, asm_picked);
                            $('#' + asm_id).attr('disabled', "true");
                            $('#' + asm_id).hide();
                        });
                        add_asm_sel.append(asm);
                    })(i);
                }
                console.log(asms);
            });
            
            add_asm_group.append(add_asm_btn);
            add_asm_group.append(add_asm_sel);
            asm_row.append(add_asm_group, assembler_pool);
            asm_row2.append(asm_desc2, asm_btn2);
            asm_div2.append($('<fieldset><div class="form-group">')).append(asm_row, asm_row2);
            //////////////////// end Assemblers


            //////// Pipeline
            var asm_div3 = $('<div id="frag-pipeline"> <small>Build a customized pipeline using available preprocessing, assembly, and postprocessing tools</small></div>');
            var pipe_row1 = $('<div class="row">');
            var add_pipe_group = $('<span class="btn-group col-md-2"></span>');
            var add_pipe_btn = $('<button type="button" class="asm-form btn btn-large btn-warning dropdown-toggle" data-toggle="dropdown"> \
             <span class="glyphicon glyphicon-plus-sign"></span>  Pipe Stage <span class="caret"></span> </button>');
            add_pipe_btn.find('span').css("color", "white");

            var add_pipe_sel = $('<ul class="dropdown-menu" role="menu"></ul>');
            var pipeline_pool = $('<div class="well col-md-8 col-md-offset-1" id="pipe-pool">');
            var pipe_picked = [];
            var pipe_row2 = $('<div class="row">');
            var pipe_desc = $('<div class="col-md-10"><input type="text" class="asm-form form-control" style="width:100%" placeholder="Description"></div>');
            var pipe_btn = $('<button class="btn btn-large col-md-2 asm-form btn-primary pull-right"><span class="glyphicon glyphicon-play-circle"  style="color:white;"></span> Assemble</button>');

            var update_pipe_pool = function(pool){
                var body = $('<div>');
                for (i=0; i<pool.length;i++){
                    (function(i) {
                        body.append($('<div class="btn btn-primary btn-sm">' + pool[i] + '<span class="glyphicon glyphicon-chevron-right pull-right" style="color:white"></span></div>').on('click', function(){
                            console.log(pool[i]);
                            console.log('#asm-' + pool[i]);
                            $('#pipe-' + pool[i]).attr('disabled', "false");
                            $('#pipe-' + pool[i]).show();
                            var asm_idx = pool.indexOf(pool[i]);
                            pool.splice(asm_idx, 1);
                            update_pipe_pool(pool);
                        }));
                    })(i);
                }
                console.log(body);
                pipeline_pool.html(body);
            };

            get_modules().done(function(lists){
                for (i=0; i<lists.length;i++){
                    (function(i) {
                        var asms = lists[i];
                        for (j=0; j<asms.length;j++){
                            (function(j) {
                                var asm_id = 'pipe-' + asms[j].name;
                                var asm2 = $('<li data-toggle="tooltip" data-placement="right" title="' + asms[j].description + '" id="' + asm_id + '"><a>' + asms[j].name + '</a></li>');
                                asm2.tooltip({container: 'body'});
                                var asm_name = asms[j].name;
                                asm2.on('click', function(){
                                    pipe_picked.push(asm_name);
                                    update_pipe_pool(pipe_picked);
                                    $('#' + asm_id).attr('disabled', "true");
                                    $('#' + asm_id).hide();
                                });
                                add_pipe_sel.append(asm2);

                            })(j);}


                        })(i);
                    }
                }
            );

            add_pipe_group.append(add_pipe_btn);
            add_pipe_group.append(add_pipe_sel);
            pipe_row1.append(add_pipe_group, pipeline_pool);
            pipe_row2.append(pipe_desc, pipe_btn);
            asm_div3.append($('<fieldset><div class="form-group">')).append(pipe_row1, pipe_row2);
            //////////////////// end Pipeline

            var run_asm = function(arRequest) {
                self.state['clicked'] = true;
                self.state['tab'] = tabs.tabs("option", "active");
                // Disable fields
                asm_div.find('fieldset').attr('disabled', "true");
                self.$elem.find('.asm-form').attr('disabled', "true");
                $.ajax({
                    contentType: 'application/json',
                    url: self.arURL + 'user/' + user + '/job/new/',
                    type: 'post',
                    data: JSON.stringify(arRequest),
                    headers: {Authorization: self.token},
                    datatype: 'json',
                    success: function(data){
                        console.log(data);
                        job_id = data;
                        self.state['job_id'] = data;
                        var status = 'Submitted';
                        var status_box = make_status_table(job_id, arRequest.message, status);
                        var kill_div = $('<div></div>');
                        var kill_btn = $('<span class="button btn btn-danger pull-right">Terminate</span>');
                        kill_btn.one("click", function(){
                            kill_job(job_id, self.token).done(function(res){
                                console.log(res);
                                kill_btn.text('Terminating...');
                            });
                        });
                        self.$elem.append(status_box);
                        kill_div.append(kill_btn);
                        self.$elem.append(kill_div);


                        /////////////////////////////////////////
                        ///     Wait for job to complete  ///////
                        /////////////////////////////////////////
                        var update_status = function() {
                            var prom = check_status(job_id);

                            $.when(prom).done(function(stat){
                                status_box.html(make_status_table(job_id, arRequest.message, stat));
                                status_box.css("border", "none")
                                if (stat.search('Complete') != -1 || stat.search('FAIL') != -1) {
                                    clearInterval(status_updater);
                                    kill_div.html("");
                                    if (stat.search('Complete') != -1) {
                                        var report_txt = null;
                                        var defer_asm = $.Deferred();
                                        var defer_auto = $.Deferred();
                                        var defer_route = $.Deferred();
                                        var defer_report = $.Deferred();
                                        //// Get all assemblies
                                        get_assemblies(job_id).done(function(asm){
                                            defer_asm.resolve(JSON.parse(asm));
                                            return defer_asm.promise();
                                        });

                                        //// Get auto assembly
                                        get_best_assembly(job_id).done(function(asm){
                                            best = JSON.parse(asm)[0];
                                            best_id = best.shock_id;
                                            best_url = best.shock_url;
                                            defer_auto.resolve({'shock_url': best.shock_url,
                                                                'shock_id': best.shock_id,
                                                                'name': best.filename});
                                            return defer_auto.promise();
                                        });

                                        ///// Ask server to serve files
                                        request_job_report(job_id).done(function(route){
                                            defer_route.resolve(route);
                                            return defer_route.promise();
                                        });

                                        ///// Get the quast report
                                        get_job_report_txt(job_id).done(function(quast_txt){
                                            var formatted = quast_txt.replace(/\n/g, '<br>');
                                            var formatted2 = formatted.replace(/\s/g, '&nbsp');
                                            defer_report.resolve(formatted2);
                                            return defer_report.promise();
                                        });

                                        //// All request done, show results and create buttons
                                        $.when(defer_asm, defer_auto, defer_route, defer_report).done(function(assemblies, best, route, report){
                                            self.state['assemblies'] = assemblies;
                                            self.state['best'] = best;
                                            self.state['route'] = route;
                                            self.state['report'] = report;
                                            console.log('showing results for the first time');
                                            self.showResults(self.token, assemblies, best, route, report, job_id);
                                        });
                                    }
                                }
                            });
                        };
                        var status_updater = null;
                        status_updater = setInterval(update_status, 10000);
                    },
                    error: function(data){
                        console.log(data);
                    }
                });
            };

            asm_btn.one("click", function(){
                asm_div.find('fieldset').attr('disabled', "true");
                var recipe = [asm_choose.find('select option:selected').val()];
                var desc = asm_desc.find('input').val();
                self.state['recipe'] = recipe;
                self.state['description'] = desc;
                arRequest.recipe = recipe;
                arRequest.message = desc;
                run_asm(arRequest, desc);
            });


            asm_btn2.one("click", function(){
                var desc = asm_desc2.find('input').val();
                self.state['description'] = desc;
                self.state['asm_pool'] = asm_picked;
                arRequest.pipeline = [asm_picked.join(' ')];
                arRequest.message = desc;
                run_asm(arRequest);
            });

            pipe_btn.one("click", function(){
                var desc = pipe_desc.find('input').val();
                self.state['description'] = desc;
                self.state['pipe_pool'] = pipe_picked;
                arRequest.pipeline = [pipe_picked]
                arRequest.message = desc;
                run_asm(arRequest);
            });


            tabs.append(asm_div);
            tabs.append(asm_div2);
            tabs.append(asm_div3);
            self.$elem.append(tabs);
            tabs.tabs();
            tabs.tabs("option", "active", 0);
            return this;        
        },

        import_contigs_to_ws: function(token, fba_url, ws_url, ws_name, shock_id, shock_url, contig_name){
            var contig_name = $('<div class="input-group"> <span class="input-group-addon">ContigSet Name</span> <input type="text" class="form-control cname-input" value="'+ contig_name +'"> </div>');
            var $importModal = $('<div></div>').kbasePrompt({
                title : 'Import Contigs',
                body : contig_name,
                modalClass : 'fade', //Not required. jquery animation class to show/hide. Defaults to 'fade'
                controls : [
                    'cancelButton',
                    {
                        name : 'Import',
                        type : 'primary',
                        callback : function(e, $prompt) {
                            $prompt.closePrompt();
                            cname = contig_name.find('input').val()
                            console.log(contig_name.find('input'));

                            console.log(cname);

                            //var fba = new fbaModelServices(fba_url, {'token': token});
                            kb.fba.fasta_to_ContigSet({'fasta': shock_id, 
                                                       'workspace': ws_name, 
                                                       'uid': cname, 
                                                       'name': cname, 
                                                       'shockurl': shock_url
                            }).done(function(data){
                                console.log(data);
                            });
//                  import_contigs_to_ws(token, fba_url, ws_url, ws_name, shock_id, shock_url, cname)
                        }
                    }
                ],
                footer : '',
            });
            $importModal.openPrompt();
        },

        getState: function(){
            var self = this;
            console.log('get state')
            var state = self.state;
            console.log(state);
            return state;
        },

        loadState: function(state){
            var self = this;
            console.log(self);
            console.log('load state');
            self.state = state;
            console.log(self.state);        
            if (self.state['clicked']) {
                console.log('assembly already run')
                self.$elem.find('fieldset').attr('disabled', "true");
                self.$elem.find('.asm-form').attr('disabled', "true");
                self.$elem.find('#tabs').tabs("option", "active", self.state.tab)
                self.$elem.find('#tabs').tabs("option", "disabled", true)
                $('select option[value = "' + self.state['recipe'] + '"]').attr('selected', 'selected');

                // //// Restore assemblers
                if (self.state.asm_pool){
                    var pool = self.state.asm_pool
                    var body = $('<div>');
                    for (i=0; i<pool.length;i++){
                        (function(i) {
                            body.append($('<div class="btn btn-primary btn-sm" style="margin:5px">' + pool[i] + '</div>'))

                        })(i);
                    }
                    self.$elem.find('#asm-pool').html(body);
                }

                // //// Restore pipeline
                if (self.state.pipe_pool){
                    var pool = self.state.pipe_pool
                    var body = $('<div>');
                    for (i=0; i<pool.length;i++){
                        (function(i) {
                            console.log(pool[i])
                            body.append($('<div class="btn btn-primary btn-sm">' + pool[i] + '</div>'))
                        })(i);
                    }
                    self.$elem.find('#pipe-pool').html(body);
                }

                self.showResults(self.token, 
                   self.state['assemblies'],
                   self.state['best'],
                   self.state['route'],
                   self.state['report'],
                   self.state['job_id']);
                
            } else{
                console.log('not run yet')
            }
        },

        showResults: function(token, assemblies, best, route, report, job_id){
            var self = this;
            if (!self.reloaded) {
                var result_btn_row = $('<div class="row pull-right">')
                var import_btn_group = $('<span class="btn-group"></span>');
                var import_btn = $('<button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown"> Save Contigs <span class="caret"></span> </button>');
                var import_btn_sel = $('<ul class="dropdown-menu" role="menu"></ul>')
                var contig_import_auto = $('<li><a>Auto Select</a></li>');
                contig_import_auto.one("click", function() {
                    self.import_contigs_to_ws(token, self.fba_url, self.ws_url, self.ws_name, best.shock_id, best.shock_url, best.name);
                });

                import_btn_sel.append(contig_import_auto);
                import_btn_sel.append('<li class="divider"></li>')
                for (i=0; i<assemblies.length;i++){
                    (function(i){
                        var contig_import = $('<li><a>' + assemblies[i].name + '</a></li>');
                        contig_import.on("click", function() {
                            shock_url = assemblies[i].file_infos[0].shock_url;
                            shock_id = assemblies[i].file_infos[0].shock_id;
                            ws_contig_name = job_id + '_' + assemblies[i].name;
                            self.import_contigs_to_ws(token, self.fba_url, self.ws_url, self.ws_name, shock_id, shock_url, ws_contig_name);
                        });
                        import_btn_sel.append(contig_import);
                    })(i);
                }
                import_btn_group.append(import_btn);
                import_btn_group.append(import_btn_sel);
                result_btn_row.append(import_btn_group);

                var report_btn_group = $('<div class="btn-group">')
                var full_link = self.arURL + route;
                var report_div = '<div class="" style="margin-top:15px">'
                var report_html = $('<iframe class="col-md-12" style="margin-top:15px" frameborder="0" height="1200px" src="' + full_link + '">');
                report_div += '<code style="font-size:4px>' + report +'</code><br>'
                var report_btn_toggle = $('<button class="btn btn-primary">Full Report</button>').on('click', function(){
                    report_html.toggle()
                })
                report_btn_group.append(report_btn_toggle);
                report_btn_group.append('<button class="btn btn-primary"><a href='+ full_link +' target="_blank"><span class="glyphicon glyphicon-new-window" style="color:white;font-size:90%"></span></a></button>')
                result_btn_row.append(report_btn_group)
                self.$elem.append(report_div);
                self.$elem.append(result_btn_row);
                self.$elem.append(report_html);
                report_html.hide();

                self.reloaded = true;
            }
        },
    });
})( jQuery );
/**
 * Output widget for visualization of assembly reports
 * @author Chris Bun <chrisbun@gmail.com>
 * @public
 */

(function( $, undefined ) {
    $.KBWidget({
        name: "kbaseAssemblyView",
        parent: "kbaseAuthenticatedWidget",
        version: "1.0.0",
        ws_id: null,
        ws_name: null,
        token: null,
        job_id: null,
        width: 1150,
        options: {
            ws_id: null,
            ws_name: null,
            job_id: null
        },
        loadingImage: "static/kbase/images/ajax-loader.gif",
        wsUrl: window.kbconfig.urls.workspace,
        timer: null,

        init: function(options) {
            this._super(options);

            this.ws_name = options.ws_name;
            this.ws_id = options.ws_id;
            if (options.job_id)
            	this.job_id = options.job_id;
            if (options.ws && options.id) {
                  this.ws_id = options.id;
                  this.ws_name = options.ws;
            }
            return this;
        },
        
        render: function() {
            var self = this;
        	var pref = this.uuid();

            var container = this.$elem;
            if (self.token == null) {
            	container.empty();
            	container.append("<div>[Error] You're not logged in</div>");
            	return;
            }

            var kbws = new Workspace(self.wsUrl, {'token': self.token});
            
            var ready = function() {
            	container.empty();
            	container.append("<div><img src=\""+self.loadingImage+"\">&nbsp;&nbsp;loading genome data...</div>");
		var objname;
		objname = self.ws_id
		console.log("wsid")
		console.log(self.ws_id)
		if (typeof self.ws_id == "string"){
		    if (self.ws_id.indexOf(".report") == -1) { //Check if contigset or report
			objname = self.ws_id + ".report"
		    } 
		}

            	kbws.get_objects([{ref: self.ws_name +"/"+ objname}], function(data) {
            	    container.empty();
		    var report_div = '<div class="" style="margin-top:15px">'
		    var report = data[0].data.report
		    report_div += '<code style="">' + report +'</code><br>'
		    container.append(report_div);

            	}, function(data) {
            		container.empty();
            		container.append('<p>[Error] ' + data.error.message + '</p>');
            	});            	
            };
            ready();
            return this;
        },
        
        getData: function() {
        	return {
        		type: "NarrativeTempCard",
        		id: this.ws_name + "." + this.ws_id,
        		workspace: this.ws_name,
        		title: "Temp Widget"
        	};
        },

        loggedInCallback: function(event, auth) {
            this.token = auth.token;
            this.render();
            return this;
        },

        loggedOutCallback: function(event, auth) {
            this.token = null;
            this.render();
            return this;
        },
        
        uuid: function() {
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, 
                function(c) {
                    var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);
                    return v.toString(16);
                });
        }
    });
})( jQuery );


/*
 *  Base class for workspace object classes
*/
function KBObjects() {}
function KBaseFBA_FBAModel(modeltabs) {
    var self = this;
    this.modeltabs = modeltabs;

    this.setMetadata = function (data) {
        this.workspace = data[7];
        this.objName = data[1];
        this.overview = {wsid: data[7]+"/"+data[1],
                         ws: data[7],
                         obj_name: data[1],
                         objecttype: data[2],
                         owner: data[5],
                         instance: data[4],
                         moddate: data[3]}

        // if there is user metadata, add it
        if ('Name' in data[10]) {
            this.usermeta = {name: data[10]["Name"],
                             source: data[10]["Source"]+"/"+data[10]["Source ID"],
                             genome: data[10]["Genome"],
                             modeltype: data[10]["Type"],
                             numreactions: data[10]["Number reactions"],
                             numcompounds: data[10]["Number compounds"],
                             numcompartments: data[10]["Number compartments"],
                             numbiomass: data[10]["Number biomasses"],
                             numgapfills: data[10]["Number gapfills"]}
            $.extend(this.overview, this.usermeta)
        }
    };

    this.tabList = [{
        "key": "overview",
        "name": "Overview",
        "type": "verticaltbl",
        "rows": [{
            "label": "Name",
            "key": "name"
        },{
            "label": "ID",
            "key": "wsid"
        },{
            "label": "Object type",
            "key": "objecttype",
            "type": "typelink"
        },{
            "label": "Owner",
            "key": "owner"
        },{
            "label": "Version",
            "key": "instance"
        },{
            "label": "Mod-date",
            "key": "moddate"
        },{
            "label": "Source",
            "key": "source"
        },{
            "label": "Genome",
            "key": "genome",
            "type": "wstype",
        },{
            "label": "Model type",
            "key": "modeltype"
        },{
            "label": "Number reactions",
            "key": "numreactions"
        },{
            "label": "Number compounds",
            "key": "numcompounds"
        },{
            "label": "Number compartments",
            "key": "numcompartments"
        },{
            "label": "Number biomass",
            "key": "numbiomass"
        },{
            "label": "Number gapfills",
            "key": "numgapfills"
        }
        ]
    }, {
        "key": "modelreactions",
        "name": "Reactions",
        "type": "dataTable",
        "columns": [{
            "label": "Reaction",
            "type": "tabLink",
            "linkformat": "dispIDCompart",
            "key": "id",
            "method": "ReactionTab",
            "width": "15%"
        }, {
            "label": "Name",
            "key": "name"
        }, {
            "label": "Equation",
            "key": "equation",
            "type": "tabLink",
            "linkformat": "linkequation",
        }, {
            "label": "Genes",
            "key": "genes",
            "type": "tabLinkArray",
            "method": "GeneTab",
        }]
    }, {
        "key": "modelcompounds",
        "name": "Compounds",
        "type": "dataTable",
        "columns": [{
            "label": "Compound",
            "key": "id",
            "type": "tabLink",
            "linkformat": "dispIDCompart",
            "method": "CompoundTab",
            "width": "15%"
        }, {
            "label": "Name",
            "key": "name"
        }, {
            "label": "Formula",
            "key": "formula"
        }, {
            "label": "Charge",
            "key": "charge"
        },/*{
            "label": "Compartment",
            "key": "compartment",
            "type": "tabLink",
            "method": "CompartmentTab"
        }*/]
    }, {
        "key": "modelgenes",
        "name": "Genes",
        "type": "dataTable",
        "columns": [{
            "label": "Gene",
            "key": "id",
            "type": "tabLink",
            "method": "GeneTab"
        }, {
            "label": "Reactions",
            "key": "reactions",
            "type": "tabLinkArray",
            "method": "ReactionTab",
        }]
    }, {
        "key": "modelcompartments",
        "name": "Compartments",
        "type": "dataTable",
        "columns": [{
            "label": "Compartment",
            "key": "id",
            "type": "tabLink",
            "method": "CompartmentTab"
        }, {
            "label": "Name",
            "key": "label"
        }, {
            "label": "pH",
            "key": "pH"
        }, {
            "label": "Potential",
            "key": "potential"
        }]
    }, {
        "key": "biomasscpds",
        "name": "Biomass",
        "type": "dataTable",
        "columns": [{
            "label": "Biomass",
            "key": "biomass",
            "type": "subTabLink",
            "method": "BiomassTab"
        }, {
            "label": "Compound",
            "key": "id",
            "type": "tabLink",
            "linkformat": "dispIDCompart",
            "method": "CompoundTab"
        }, {
            "label": "Name",
            "key": "name"
        }, {
            "label": "Coefficient",
            "key": "coefficient"
        }, /*{
            "label": "Compartment",
            "key": "compartment",
            "type": "tabLink",
            "method": "CompartmentTab"
        }*/]
    }, {
        "key": "gapfillings",
        "name": "Gapfilling",
        "type": "dataTable",
        "columns": [{
            "label": "Gapfill",
            "key": "id",
            "type": "tabLink",
            "method": "GapfillTab"
        }, {
            "label": "Integrated",
            "key": "integrated"
        }, {
            "label": "Media",
            "key": "media_ref",
            "type": "wslink"
        }, /*{
            "label": "FBA",
            "key": "fba_ref",
            "type": "wslink"
        }*/]
    }, /*{
        "name": "Pathways",
        "widget": "kbasePathways",
        "keys": "workspace, objName",
        "arguments": "model_ws, model_name"
    }*/];


    this.ReactionTab = function (info) {
        if (info.id.search(/rxn\d+/g) == -1)
            return;

        var p = this.modeltabs
                    .getBiochemReaction(info.id)
                    .then(function(rxn){
                        return [{
                                    label: "ID",
                                    data: rxn.id
                                },{
                                    label: "Name",
                                    data: rxn.name
                                },{
                                    label: "Equation",
                                    data: rxn.equation,
                                    type: "pictureEquation"
                                },/*{
                                    label: "GPR",
                                    data: rxn.gpr,
                            }*/];
                     })
        return p;
    }

    this.GeneTab = function (info) {
        // var gene = this.genehash[id];
        // doing this instead of creating hash
        var data;
        self.modelgenes.forEach(function(gene) {
            if (gene.id == info.id)
                data = [{
                            label: "ID",
                            data: gene.id
                        },{
                            label: "Reactions",
                            data: gene.reactions,
                            type: "tabLinkArray",
                            method: "ReactionTab"
                        }];
        })
        return data;
    }

    this.CompoundTab = function (info) {
        var cpd = this.cpdhash[info.id];
        if (info.id.search(/cpd\d+/g) == -1)
            return;

         // your hash includes the compartement, so cpd.compartment (or cpd.cmpkbid?) is missing
        var p = this.modeltabs
                    .getBiochemCompound(info.id)
                    .then(function(cpd){
                        return [{
                                     "label": "Compound",
                                     "data": cpd.id,
                                 }, {
                                     "label": "Name",
                                     "data": cpd.name
                                 }, {
                                     "label": "Formula",
                                     "data": cpd.formula
                                 }, {
                                     "label": "Charge",
                                     "data": cpd.charge
                                 }, {
                                     "label": "Compartment",
                                     "data": cpd.compartment,
                                     "type": "tabLink",
                                     "function": "CompartmentTab"
                                 }];
                     })
        return p;

    }

    this.CompartmentTab = function (info) {
        return [[]];
    }

    this.BiomassTab = function (info) {
        return [[]];
    }

    this.GapfillTab = function (info) {
        return [[]];
    }


    this.setData = function (indata) {
        this.data = indata;
        this.modelreactions = this.data.modelreactions;
        this.modelcompounds = this.data.modelcompounds;
        this.modelgenes = [];
        this.modelcompartments = this.data.modelcompartments;
        this.biomasses = this.data.biomasses;
        this.biomasscpds = [];
        this.gapfillings = this.data.gapfillings;
        this.cpdhash = {};
        this.rxnhash = {};
        this.cmphash = {};
        this.genehash = {};
        for (var i=0; i< this.modelcompartments.length; i++) {
            var cmp = this.modelcompartments[i];
            this.cmphash[cmp.id] = cmp;
        }
        for (var i=0; i< this.modelcompounds.length; i++) {
            var cpd = this.modelcompounds[i];
            cpd.cmpkbid = cpd.modelcompartment_ref.split("/").pop();
            cpd.cpdkbid = cpd.compound_ref.split("/").pop();
            if (cpd.name === undefined) {
                cpd.name = cpd.id;
            }
            cpd.name = cpd.name.replace(/_[a-zA-z]\d+$/, '');
            this.cpdhash[cpd.id] = cpd;
            if (cpd.cpdkbid != "cpd00000") {
                this.cpdhash[cpd.cpdkbid+"_"+cpd.cmpkbid] = cpd;
            }
        }
        for (var i=0; i < this.biomasses.length; i++) {
        	var biomass = this.biomasses[i];
        	biomass.dispid = biomass.id;
        	for(var j=0; j < biomass.biomasscompounds.length; j++) {
        		var biocpd = biomass.biomasscompounds[j];
        		biocpd.id = biocpd.modelcompound_ref.split("/").pop();
        		biocpd.name = this.cpdhash[biocpd.id].name+"<br>("+biocpd.id+")";
        		biocpd.formula = this.cpdhash[biocpd.id].formula;
        		biocpd.charge = this.cpdhash[biocpd.id].charge;
        		biocpd.cmpkbid = this.cpdhash[biocpd.id].cmpkbid;
        		biocpd.biomass = biomass.id;
        		this.biomasscpds.push(biocpd);
        	}
        }
        for (var i=0; i< this.modelreactions.length; i++) {
            var rxn = this.modelreactions[i];
            rxn.rxnkbid = rxn.reaction_ref.split("/").pop();
            rxn.cmpkbid = rxn.modelcompartment_ref.split("/").pop();
            rxn.dispid = rxn.id.replace(/_[a-zA-z]\d+$/, '')+"["+rxn.cmpkbid+"]";
            rxn.name = rxn.name.replace(/_[a-zA-z]\d+$/, '');
            if (rxn.name == "CustomReaction") {
                rxn.name = rxn.id.replace(/_[a-zA-z]\d+$/, '');
            }
            this.rxnhash[rxn.id] = rxn;
            if (rxn.rxnkbid != "rxn00000") {
                this.rxnhash[rxn.rxnkbid+"_"+rxn.cmpkbid] = rxn;
                if (rxn.rxnkbid+"_"+rxn.cmpkbid != rxn.id) {
                    rxn.dispid += "<br>("+rxn.rxnkbid+")";
                }
            }
            var reactants = "";
            var products = "";
            var sign = "<=>";
            if (rxn.direction == ">") {
                sign = "=>";
            } else if (rxn.direction == "<") {
                sign = "<=";
            }
            for (var j=0; j< rxn.modelReactionReagents.length; j++) {
                var rgt = rxn.modelReactionReagents[j];
                rgt.cpdkbid = rgt.modelcompound_ref.split("/").pop();
                if (rgt.coefficient < 0) {
                    if (reactants.length > 0) {
                        reactants += " + ";
                    }
                    if (rgt.coefficient != -1) {
                        var abscoef = Math.round(-1*100*rgt.coefficient)/100;
                        reactants += "("+abscoef+") ";
                    }
                    reactants += this.cpdhash[rgt.cpdkbid].name+"["+this.cpdhash[rgt.cpdkbid].cmpkbid+"]";
                } else {
                    if (products.length > 0) {
                        products += " + ";
                    }
                    if (rgt.coefficient != 1) {
                        var abscoef = Math.round(100*rgt.coefficient)/100;
                        products += "("+abscoef+") ";
                    }
                    products += this.cpdhash[rgt.cpdkbid].name+"["+this.cpdhash[rgt.cpdkbid].cmpkbid+"]";
                }
            }
            rxn.ftrhash = {};
            for (var j=0; j< rxn.modelReactionProteins.length; j++) {
                var prot = rxn.modelReactionProteins[j];
                for (var k=0; k< prot.modelReactionProteinSubunits.length; k++) {
                    var subunit = prot.modelReactionProteinSubunits[k];
                    for (var m=0; m< subunit.feature_refs.length; m++) {
                        rxn.ftrhash[subunit.feature_refs[m].split("/").pop()] = 1;
                    }
                }
            }

            rxn.dispfeatures = "";
            rxn.genes = [];
            for (var gene in rxn.ftrhash) {
                if (rxn.dispfeatures.length > 0) {
                    rxn.dispfeatures += "<br>";
                }
                rxn.genes.push(gene);

                var genes = [];
                this.modelgenes.forEach(function(item) {
                    genes.push(item.id)
                })

                if (genes.indexOf(gene) == -1)
                    this.modelgenes.push({id: gene, reactions: [rxn.name]});
                else
                    this.modelgenes[genes.indexOf(gene)].reactions.push(rxn.name)
            }

            rxn.equation = reactants+" "+sign+" "+products;
        }

    };

}

// make method of base class
KBObjects.prototype.KBaseFBA_FBAModel = KBaseFBA_FBAModel;

function KBaseFBA_FBA(modeltabs) {
    var self = this;
    this.modeltabs = modeltabs;

    this.tabList = [{
        "key": "overview",
        "name": "Overview",
        "type": "verticaltbl",
        "rows": [{
            "label": "ID",
            "key": "wsid"
        },{
            "label": "Object type",
            "key": "objecttype",
            "type": "typelink"
        },{
            "label": "Owner",
            "key": "owner"
        },{
            "label": "Version",
            "key": "instance"
        },{
            "label": "Mod-date",
            "key": "moddate"
        },{
            "label": "Objective value",
            "key": "objective"
        },{
            "label": "Objective function",
            "key": "objectivefunction"
        },{
            "label": "Model",
            "key": "model",
            "type": "wslink"
        },{
            "label": "Media",
            "key": "media",
            "type": "wslink"
        },{
            "label": "Regulome",
            "key": "regulome",
            "type": "wslink"
        },{
            "label": "Prom Constraint",
            "key": "promconstraint",
            "type": "wslink"
        },{
            "label": "Expression",
            "key": "expression",
            "type": "wslink"
        },{
            "label": "Single KO",
            "key": "singleko"
        },{
            "label": "Number reactions",
            "key": "numreactions"
        },{
            "label": "Number compounds",
            "key": "numcompounds"
        },{
            "label": "Gene KO",
            "key": "numgeneko"
        },{
            "label": "Reaction KO",
            "key": "numrxnko"
        },{
            "label": "Custom bounds",
            "key": "numcpdbounds"
        },{
            "label": "Custom constraints",
            "key": "numconstraints"
        },{
            "label": "Media supplements",
            "key": "numaddnlcpds"
        },{
            "label": "Uptake limits",
            "key": "uptakelimits"
        },{
            "label": "Uptake limits",
            "key": "uptakelimits"
        },{
            "label": "Minimize fluxes?",
            "key": "minfluxes",
            "type": "boolean"
        },{
            "label": "Find minimal media?",
            "key": "findminmedia",
            "type": "boolean"
        },{
            "label": "Minimize reactions?",
            "key": "minimizerxn",
            "type": "boolean"
        },{
            "label": "All reactions reversible?",
            "key": "allreversible",
            "type": "boolean"
        },{
            "label": "Thermodynamic constraints?",
            "key": "simplethermo",
            "type": "boolean"
        },{
            "label": "Objective fraction",
            "key": "objfraction"
        }]
    }, {
        "key": "modelreactions",
        "name": "Reactions",
        "visible": 1,
        "columns": [{
            "label": "Reaction",
            "key": "id",
            "type": "tabLink",
            "linkformat": "dispIDCompart",
            "method": "ReactionTab",
            "width": "15%",
            "visible": 1
        }, {
            "label": "Flux",
            "key": "flux",
            "visible": 1
        }, {
            "label": "Min flux<br>(Lower bound)",
            "key": "disp_low_flux",
            "visible": 1
        }, {
            "label": "Max flux<br>(Upper bound)",
            "key": "disp_high_flux",
            "visible": 1
        }, {
            "label": "Class",
            "key": "fluxClass",
            "visible": 1
        }, {
            "label": "Equation",
            "key": "equation",
            "visible": 1
        }, {
            "label": "Genes",
            "key": "genes",
            "type": "tabLinkArray",
            "method": "GeneTab",
            "visible": 1
        }]
    }, {
        "key": "compoundFluxes",
        "name": "Compounds",
        "visible": 1,
        "columns": [{
            "label": "Compound",
            "key": "id",
            "type": "tabLink",
            "linkformat": "dispIDCompart",
            "method": "CompoundTab",
            "visible": 1
        }, {
            "label": "Name",
            "key": "name",
            "visible": 1
        }, {
            "label": "Uptake flux",
            "key": "uptake",
            "visible": 1
        }, {
            "label": "Min flux<br>(Lower bound)",
            "key": "disp_low_flux",
            "visible": 1
        }, {
            "label": "Max flux<br>(Upper bound)",
            "key": "disp_high_flux",
            "visible": 1
        }, {
            "label": "Class",
            "key": "fluxClass",
            "visible": 1
        }, {
            "label": "Formula",
            "key": "formula",
            "visible": 1
        }, {
            "label": "Charge",
            "key": "charge",
            "visible": 1
        }, {
            "label": "Compartment",
            "key": "cmpkbid",
            "type": "tabLink",
            "method": "CompartmentTab",
            "visible": 1
        }]
    }, {
        "key": "modelgenes",
        "name": "Genes",
        "visible": 1,
        "columns": [{
            "label": "Gene",
            "key": "id",
            "type": "tabLink",
            "method": "GeneTab",
            "visible": 1
        }, {
            "label": "Gene knocked out",
            "key": "ko",
            "visible": 1
        },{
            "label": "Fraction of growth with KO",
            "key": "growthFraction",
            "visible": 0
        }]
    }, {
        "key": "biomasscpds",
        "name": "Biomass compounds",
        "visible": 1,
        "columns": [{
            "label": "Biomass",
            "key": "biomass",
            "type": "tabLink",
            "method": "BiomassTab",
            "visible": 1
        }, {
            "label": "Biomass flux",
            "key": "bioflux",
            "visible": 1
        }, {
            "label": "Name",
            "key": "name",
            "visible": 1
        }, {
            "label": "Coefficient",
            "key": "coefficient",
            "visible": 1
        }, {
            "label": "Compartment",
            "key": "cmpkbid",
            "type": "tabLink",
            "method": "CompartmentTab",
            "visible": 1
        }, {
            "label": "Max production",
            "key": "maxprod",
            "visible": 0
        }]
    }];

    this.setMetadata = function (indata) {
        this.workspace = indata[7];
        this.objName = indata[1];
        this.overview = {wsid: indata[7]+"/"+indata[1],
                         ws: indata[7],
                         obj_name: indata[1],
                         objecttype: indata[2],
                         owner: indata[5],
                         instance: indata[4],
                         moddate: indata[3]}

        this.usermeta = {};

        // if there is user metadata, add it
        if ('Model' in indata[10]) {
            this.usermeta = {objective: indata[10]["Objective"],
                             model: indata[10]["Model"],
                             media: indata[10]["Media"],
                             singleko: indata[10]["Combination deletions"],
                             numreactions: indata[10]["Number reaction variables"],
                             numcompounds: indata[10]["Number compound variables"],
                             numgeneko: indata[10]["Number gene KO"],
                             numrxnko: indata[10]["Number reaction KO"],
                             numcpdbounds: indata[10]["Number compound bounds"],
                             numconstraints: indata[10]["Number constraints"],
                             numaddnlcpds: indata[10]["Number additional compounds"]}

            $.extend(this.overview, this.usermeta)
        }
    };

    this.formatObject = function () {
        this.usermeta.model = self.data.fbamodel_ref;
        this.usermeta.media = self.data.media_ref;
        this.usermeta.objective = self.data.objectiveValue;
        this.usermeta.minfluxes = self.data.fluxMinimization;
        this.usermeta.findminmedia = self.data.findMinimalMedia;
        this.usermeta.minimizerxn = self.data.minimize_reactions;
        this.usermeta.allreversible = self.data.allReversible;
        this.usermeta.simplethermo = self.data.simpleThermoConstraints;
        this.usermeta.objfraction = self.data.objectiveConstraintFraction;
        this.usermeta.regulome = self.data.regulome_ref;
        this.usermeta.promconstraint = self.data.promconstraint_ref;
        this.usermeta.expression = self.data.tintlesample_ref;
        this.usermeta.phenotypeset = self.data.phenotypeset_ref;
        this.usermeta.phenotypesimulationset = self.data.phenotypesimulationset_ref;
        this.usermeta.singleko = self.data.comboDeletions;
        this.usermeta.defaultmaxflux = self.data.defaultMaxFlux;
        this.usermeta.defaultmaxdrain = self.data.defaultMaxDrainFlux;
        this.usermeta.defaultmindrain = self.data.defaultMinDrainFlux;
        this.usermeta.phenotypesimulationset = self.data.phenotypesimulationset_ref;
        this.usermeta.uptakelimits = "";
        for (var key in self.data.uptakelimits) {
            if (this.usermeta.uptakelimits.length > 0) {
                this.usermeta.uptakelimits += "<br>";
            }
            this.usermeta.uptakelimits += key+":"+this.uptakelimits[key];
        }
        this.usermeta.objectivefunction = "Minimize{";
        if (self.data.maximizeObjective == 1) {
            this.usermeta.objectivefunction = "Maximize{";
        }
        for (var key in self.data.compoundflux_objterms) {
            this.usermeta.objectivefunction += " ("+self.data.compoundflux_objterms[key]+") "+key;
        }
        for (var key in self.data.reactionflux_objterms) {
            this.usermeta.objectivefunction += " ("+self.data.reactionflux_objterms[key]+") "+key;
        }
        for (var key in self.data.biomassflux_objterms) {
            this.usermeta.objectivefunction += " ("+self.data.biomassflux_objterms[key]+") "+key;
        }
        this.usermeta.objectivefunction += "}";
        this.modelreactions = this.model.modelreactions;
        this.modelcompounds = this.model.modelcompounds;
        this.biomasses = this.model.biomasses;
        this.biomasscpds = this.model.biomasscpds;
        this.modelgenes = this.model.modelgenes;
        this.FBAConstraints = self.data.FBAConstraints;
        this.FBAMinimalMediaResults = self.data.FBAMinimalMediaResults;
        this.FBAMinimalReactionsResults = self.data.FBAMinimalReactionsResults;
        this.FBAMetaboliteProductionResults = self.data.FBAMetaboliteProductionResults;
        this.rxnhash = {};
        for (var i=0; i < self.data.FBAReactionVariables.length; i++) {
            var rxnid = self.data.FBAReactionVariables[i].modelreaction_ref.split("/").pop();
            self.data.FBAReactionVariables[i].ko = 0;
            this.rxnhash[rxnid] = self.data.FBAReactionVariables[i];
        }
        for (var i=0; i < self.data.reactionKO_refs.length; i++) {
            var rxnid = self.data.reactionKO_refs[i].split("/").pop();
            this.rxnhash[rxnid].ko = 1;
        }
        this.cpdhash = {};
        for (var i=0; i < self.data.FBACompoundVariables.length; i++) {
            var cpdid = self.data.FBACompoundVariables[i].modelcompound_ref.split("/").pop();
            self.data.FBACompoundVariables[i].additionalcpd = 0;
            this.cpdhash[cpdid] = self.data.FBACompoundVariables[i];
        }
        for (var i=0; i < self.data.additionalCpd_refs.length; i++) {
            var cpdid = self.data.additionalCpd_refs[i].split("/").pop();
            this.cpdhash[cpdid].additionalcpd = 1;
        }
        this.biohash = {};
        for (var i=0; i < self.data.FBABiomassVariables.length; i++) {
            var bioid = self.data.FBABiomassVariables[i].biomass_ref.split("/").pop();
            this.biohash[bioid] = self.data.FBABiomassVariables[i];
        }
        this.maxpod = 0;
        this.metprodhash = {};
        for (var i=0; i < this.FBAMetaboliteProductionResults.length; i++) {
            this.tabList[4].columns[5].visible = 1;
            var metprod = self.data.FBAMetaboliteProductionResults[i];
            var cpdid = metprod.modelcompound_ref.split("/").pop();
            this.metprodhash[cpdid] = metprod;
        }
        this.genehash = {};
        for (var i=0; i < this.modelgenes.length; i++) {
            this.genehash[this.modelgenes[i].id] = this.modelgenes[i];
            this.genehash[this.modelgenes[i].id].ko = 0;
        }
        /*
        for (var i=0; i < self.data.geneKO_refs.length; i++) {
            var geneid = self.data.geneKO_refs[i].split("/").pop();
            this.genehash[geneid].ko = 1;
        }*/
        this.delhash = {};
        for (var i=0; i < self.data.FBADeletionResults.length; i++) {
            var geneid = self.data.FBADeletionResults[i].feature_refs[0].split("/").pop();
            this.delhash[geneid] = self.data.FBADeletionResults[i];
        }
        this.cpdboundhash = {};
        for (var i=0; i < self.data.FBACompoundBounds.length; i++) {
            var cpdid = self.data.FBACompoundBounds[i].modelcompound_ref.split("/").pop();
            this.cpdboundhash[cpdid] = self.data.FBACompoundBounds[i];
        }
        this.rxnboundhash = {};
        for (var i=0; i < self.data.FBAReactionBounds.length; i++) {
            var rxnid = self.data.FBAReactionBounds[i].modelreaction_ref.split("/").pop();
            this.rxnboundhash[rxnid] = self.data.FBAReactionBounds[i];
        }
        for (var i=0; i< this.modelgenes.length; i++) {
            var mdlgene = this.modelgenes[i];
            if (this.genehash[mdlgene.id]) {
                mdlgene.ko = this.genehash[mdlgene.id].ko;
            }
            if (this.delhash[mdlgene.id]) {
                mdlgene.growthFraction = this.delhash[mdlgene.id].growthFraction;
            }
        }
        for (var i=0; i< this.modelreactions.length; i++) {
            var mdlrxn = this.modelreactions[i];
            if (this.rxnhash[mdlrxn.id]) {
                mdlrxn.upperFluxBound = this.rxnhash[mdlrxn.id].upperBound;
                mdlrxn.lowerFluxBound = this.rxnhash[mdlrxn.id].lowerBound;
                mdlrxn.fluxMin = this.rxnhash[mdlrxn.id].min;
                mdlrxn.fluxMax = this.rxnhash[mdlrxn.id].max;
                mdlrxn.flux = this.rxnhash[mdlrxn.id].value;
                mdlrxn.fluxClass = this.rxnhash[mdlrxn.id].class;
                mdlrxn.disp_low_flux = mdlrxn.fluxMin + "<br>(" + mdlrxn.lowerFluxBound + ")";
                mdlrxn.disp_high_flux = mdlrxn.fluxMax + "<br>(" + mdlrxn.upperFluxBound + ")";
            }
            if (this.rxnboundhash[mdlrxn.id]) {
                mdlrxn.customUpperBound = this.rxnboundhash[mdlrxn.id].upperBound;
                mdlrxn.customLowerBound = this.rxnboundhash[mdlrxn.id].lowerBound;
            }
        }
        this.compoundFluxes = [];
        this.cpdfluxhash = {};
        for (var i=0; i< this.modelcompounds.length; i++) {
            var mdlcpd = this.modelcompounds[i];
            if (this.cpdhash[mdlcpd.id]) {
                mdlcpd.upperFluxBound = this.cpdhash[mdlcpd.id].upperBound;
                mdlcpd.lowerFluxBound = this.cpdhash[mdlcpd.id].lowerBound;
                mdlcpd.fluxMin = this.cpdhash[mdlcpd.id].min;
                mdlcpd.fluxMax = this.cpdhash[mdlcpd.id].max;
                mdlcpd.uptake = this.cpdhash[mdlcpd.id].value;
                mdlcpd.fluxClass = this.cpdhash[mdlcpd.id].class;
                mdlcpd.disp_low_flux = mdlcpd.fluxMin + "<br>(" + mdlcpd.lowerFluxBound + ")";
                mdlcpd.disp_high_flux = mdlcpd.fluxMax + "<br>(" + mdlcpd.upperFluxBound + ")";
                this.cpdfluxhash[mdlcpd.id] = mdlcpd;
                this.compoundFluxes.push(mdlcpd);
            }
            if (this.metprodhash[mdlcpd.id]) {
                mdlcpd.maxProd = this.metprodhash[mdlcpd.id].maximumProduction;
                //if (!this.cpdfluxhash[mdlcpd.id]) {
                //  this.compoundFluxes.push(mdlcpd);
                //}
            }
            if (this.cpdboundhash[mdlcpd.id]) {
                mdlcpd.customUpperBound = this.cpdboundhash[mdlcpd.id].upperBound;
                mdlcpd.customLowerBound = this.cpdboundhash[mdlcpd.id].lowerBound;
                if (!this.cpdfluxhash[mdlcpd.id]) {
                    this.compoundFluxes.push(mdlcpd);
                }
            }
        }
        for (var i=0; i< this.biomasses.length; i++) {
            var bio = this.biomasses[i];
            if (this.biohash[bio.id]) {
                bio.upperFluxBound = this.biohash[bio.id].upperBound;
                bio.lowerFluxBound = this.biohash[bio.id].lowerBound;
                bio.fluxMin = this.biohash[bio.id].min;
                bio.fluxMax = this.biohash[bio.id].max;
                bio.flux = this.biohash[bio.id].value;
                bio.fluxClass = this.biohash[bio.id].class;
                this.modelreactions.push(bio);
            } else {
                this.biohash[bio.id] = bio;
                bio.upperFluxBound = 1000;
                bio.lowerFluxBound = 0;
                bio.fluxMin = 0;
                bio.fluxMax = 1000;
                bio.flux = 0;
                bio.fluxClass = "Blocked";
                this.modelreactions.push(bio);
            }
            bio.disp_low_flux = bio.fluxMin + "<br>(" + bio.lowerFluxBound + ")";
            bio.disp_high_flux = bio.fluxMax + "<br>(" + bio.upperFluxBound + ")";
        }
        for (var i=0; i < this.biomasscpds.length; i++) {
            var biocpd = this.biomasscpds[i];
            if (this.biohash[biocpd.biomass]) {
                biocpd.bioflux = this.biohash[biocpd.biomass].flux;
            }
            if (this.metprodhash[biocpd.id]) {
                biocpd.maxprod = this.metprodhash[biocpd.id].maximumProduction;
            }
        }
    };

    this.setData = function (indata) {
        self.data = indata;
        var p = self.modeltabs.kbapi('ws', 'get_objects', [{ref: indata.fbamodel_ref}])
                    .done(function(data){
                        var kbObjects = new KBObjects();
                        self.model = new kbObjects["KBaseFBA_FBAModel"](self.modeltabs);
                        self.model.setMetadata(data[0].info);
                        var setMethod = self.model.setData(data[0].data);
                        // see if setData method returns promise or not
                        if (setMethod && 'done' in setMethod) {
                            setMethod.done(function() {
                                self.formatObject()
                            })
                        } else {
                            self.formatObject();
                        }
        })
        return p;
    };

    this.ReactionTab = function (info) {
        if (info.id.search(/rxn\d+/g) == -1)
            return;

        var p = this.modeltabs
                    .getBiochemReaction(info.id)
                    .then(function(rxn){
                        return [{
                                   "label": "ID",
                                    "data": rxn.id
                                },{
                                    "label": "Name",
                                    "data": rxn.name
                                },{
                                    "label": "Equation",
                                    "data": rxn.equation,
                                    "type": "pictureEquation"
                                },/*{
                                    "label": "GPR",
                                    "data": rxn.gpr,
                            }*/];
                     })
        return p;
    };

    this.GeneTab = function (info) {
        var gene = this.genehash[info.id];

        return [{
                "label": "ID",
                "data": info.id
            },{
                "label": "Reactions",
                "data": gene.reactions,
                "type": "tabLinkArray"
        }];
    };

    this.CompoundTab = function (info) {
        var cpd = this.cpdhash[info.id];
        if (info.id.search(/cpd\d+/g) == -1)
            return;

         // your hash includes the compartement, so cpd.compartment (or cpd.cmpkbid?) is missing
        var p = this.modeltabs
                    .getBiochemCompound(info.id)
                    .then(function(cpd){
                        return [{
                                     "label": "Compound",
                                     "data": cpd.id,
                                 }, {
                                     "label": "Name",
                                     "data": cpd.name
                                 }, {
                                     "label": "Formula",
                                     "data": cpd.formula
                                 }, {
                                     "label": "Charge",
                                     "data": cpd.charge
                                 }, {
                                     "label": "Compartment",
                                     "data": cpd.compartment,
                                     "type": "tabLink",
                                     "function": "CompartmentTab"
                                 }];
                     })
        return p;

    };

    this.CompartmentTab = function (id) {
        return [[]];
    };

    this.BiomassTab = function (id) {
        return [[]];
    };

    this.GapfillTab = function (id) {
        return [[]];
    };
}

// make method of base class
KBObjects.prototype.KBaseFBA_FBA = KBaseFBA_FBA;
function KBaseBiochem_Media(tabwidget) {
    var self = this;
    this.tabwidget = tabwidget;

    this.setMetadata = function (data) {
        this.overview = {wsid: data[7]+"/"+data[1],
                         objecttype: data[2],
                         owner: data[5],
                         instance: data[4],
                         moddate: data[3],
                         name: data[10]["Name"],
                         source: data[10]["Source ID"],
                         minimal: data[10]["Is Minimal"],
                         defined: data[10]["Is Defined"],
                         numcompounds: data[10]["Number compounds"]}
    };

    this.setData = function (data) {
        this.data = data;
        this.mediacompounds = this.data.mediacompounds;
        this.reagents = this.data.reagents;
        this.cpdhash = {};
        var cpdarray = [];

        for (var i=0; i< this.mediacompounds.length; i++) {
            var cpd = this.mediacompounds[i];
            cpd.id = cpd.compound_ref.split("/").pop();

            this.cpdhash[cpd.id] = cpd;
            cpdarray.push(cpd.id);
        }

        var p = this.tabwidget.getBiochemCompounds(cpdarray)
                    .done(function(cpds) {

                        for (var i=0; i< self.mediacompounds.length; i++) {
                            var cpd = self.mediacompounds[i];
                            cpd.name = cpds[i].name;
                            cpd.formula = cpds[i].formula;
                            cpd.charge = cpds[i].charge;
                            cpd.deltaG = cpds[i].deltaG;
                            cpd.deltaGErr = cpds[i].deltaGErr;
                            cpd.abbrev = cpds[i].abbrev;
                        }
                    })

        return p;
    };

    this.CompoundTab = function (info) {
        var cpd = this.cpdhash[info.id];
        console.log('info', cpd)

        return [{
            "label": "Compound",
            "data": cpd.id,
        }, {
            "label": "Name",
            "data": cpd.name
        }, {
            "label": "Formula",
            "data": cpd.formula
        }, {
            "label": "Charge",
            "data": cpd.charge
        }, {
            "label": "deltaG",
            "data": cpd.deltaG
        }, {
            "label": "Max flux",
            "data": cpd.maxFlux
        }, {
            "label": "Min flux",
            "data": cpd.minFlux
        }, {
            "label": "Concentration",
            "data": cpd.concentration
        }];
    }

    this.tabList = [{
        "key": "overview",
        "name": "Overview",
        "type": "verticaltbl",
        "rows": [{
            "label": "ID",
            "key": "wsid"
        },{
            "label": "Object type",
            "key": "objecttype",
            "type": "typelink"
        },{
            "label": "Owner",
            "key": "owner"
        },{
            "label": "Version",
            "key": "instance"
        },{
            "label": "Mod-date",
            "key": "moddate"
        },{
            "label": "Name",
            "key": "name"
        },{
            "label": "Source",
            "key": "source"
        },{
            "label": "Is minimal",
            "key": "minimal",
        },{
            "label": "Is defined",
            "key": "defined"
        },{
            "label": "Number compounds",
            "key": "numcompounds"
        }]
    }, {
        "key": "mediacompounds",
        "name": "Media compounds",
        "type": "dataTable",
        "columns": [{
            "label": "Compound",
            "key": "id",
            "type": "tabLink",
            "linkformat": "dispID",
            "method": "CompoundTab",
        }, {
            "label": "Name",
            "key": "name"
        }, {
            "label": "Formula",
            "key": "formula"
        }, {
            "label": "Charge",
            "key": "charge"
        },/* {
            "label": "Compartment",
            "key": "compartment",
            "type": "tabLink",
            "method": "CompartmentTab"
        }*/]
    }, {
        "key": "reagents",
        "name": "Reagents",
        "type": "dataTable",
        "columns": [{
            "label": "Reagent",
            "key": "id",
        }, {
            "label": "Name",
            "key": "name",
        }, {
            "label": "Concentration",
            "key": "concentration",
        }]
    }];
}

// make method of base class
KBObjects.prototype.KBaseBiochem_Media = KBaseBiochem_Media;
function KBasePhenotypes_PhenotypeSet(modeltabs) {
    var self = this;
    this.modeltabs = modeltabs;

    this.setMetadata = function (data) {
        this.workspace = data[7];
        this.objName = data[1];
        this.overview = {wsid: data[7]+"/"+data[1],
                         objecttype: data[2],
                         owner: data[5],
                         instance: data[4],
                         moddate: data[3]};
        // if there is user metadata, add it
        if ('Name' in data[10]) {
            this.usermeta = {name: data[10]["Name"],
                             source: data[10]["Source"]+"/"+data[10]["Source ID"],
                             numphenotypes: data[10]["Number phenotypes"],
                             type: data[10]["Type"]}

            $.extend(this.overview, this.usermeta)}
    };

    this.setData = function (indata) {
        this.data = indata;
        this.phenotypes = this.data.phenotypes;
        var cpd_refs_hash = {};
        for (var i=0; i< this.phenotypes.length; i++) {
            var refs = this.phenotypes[i].additionalcompound_refs;
            for (var j=0; j<refs.length; j++) {
                cpd_refs_hash[refs[j]] = 1;
            }
        }

        var cpd_refs = [];

        for (var key in cpd_refs_hash) {
            cpd_refs.push(key);
        }

        var promise = this.modeltabs.getBiochemCompounds(cpd_refs)
                          .then(function(cpds){
                             var addcpd_names_hash = {};
                             for (var j=0; j<cpds.length; j++) {
                                     addcpd_names_hash[cpds[j].id] = cpds[j].name;
                                 }
                             for (var i=0; i< self.phenotypes.length; i++) {
                                 var refs = self.phenotypes[i].additionalcompound_refs;
                                 var names = [];
                                 for (var j=0; j<refs.length; j++) {
                                     names.push(addcpd_names_hash[refs[j].split("/").pop()]);
                                 }
                                 self.phenotypes[i].additionalcompound_names = names;
                             }
                          });

        return promise;
    }

    this.tabList = [{
        "key": "overview",
        "name": "Overview",
        "type": "verticaltbl",
        "rows": [{
            "label": "ID",
            "key": "wsid"
        },{
            "label": "Object type",
            "key": "objecttype",
            "type": "typelink"
        },{
            "label": "Owner",
            "key": "owner"
        },{
            "label": "Version",
            "key": "instance"
        },{
            "label": "Mod-date",
            "key": "moddate"
        },{
            "label": "Name",
            "key": "name"
        },{
            "label": "Source",
            "key": "source"
        },{
            "label": "Number phenotypes",
            "key": "numphenotypes"
        },{
            "label": "Phenotype type",
            "key": "type"
        }]
    }, {
        "key": "phenotypes",
        "name": "Phenotypes",
        "type": "dataTable",
        "columns": [{
            "label": "Name",
            "key": "name"
        }, {
            "label": "Growth condition",
            "key": "media_ref",
            "linkformat": "dispWSRef",
            "type": "wstype",
            "wstype": "KBaseFBA.Media"
        }, {
            "label": "Gene KO",
            "type": "wstype",
            "key": "geneko_refs"
        }, {
            "label": "Additional compounds",
            "key": "additionalcompound_names"
        }, {
            "label": "Observed normalized growth",
            "key": "normalizedGrowth"
        }]
    }];
}

// make method of base class
KBObjects.prototype. KBasePhenotypes_PhenotypeSet = KBasePhenotypes_PhenotypeSet;
function KBasePhenotypes_PhenotypeSimulationSet(tabwidget) {
    var self = this;
    this.tabwidget = tabwidget;

    this.setMetadata = function (data) {
        this.workspace = data[7];
        this.objName = data[1];
        this.overview = {wsid: data[7]+"/"+data[1],
                         objecttype: data[2],
                         owner: data[5],
                         instance: data[4],
                         moddate: data[3]};
        // if there is user metadata, add it
        if ('Name' in data[10]) {
            this.usermeta = {name: data[10]["Name"],
                             source: data[10]["Source"]+"/"+data[10]["Source ID"],
                             numphenotypes: data[10]["Number phenotypes"],
                             type: data[10]["Type"]}

            $.extend(this.overview, this.usermeta)}
    };

    this.setData = function (indata) {
        this.data = indata;
        this.phenotypes = this.data.phenotypeSimulations;
    }

    this.tabList = [{
        "key": "overview",
        "name": "Overview",
        "type": "verticaltbl",
        "rows": [{
            "label": "ID",
            "key": "wsid"
        },{
            "label": "Object type",
            "key": "objecttype",
            "type": "typelink"
        },{
            "label": "Owner",
            "key": "owner"
        },{
            "label": "Version",
            "key": "instance"
        },{
            "label": "Mod-date",
            "key": "moddate"
        },{
            "label": "Name",
            "key": "name"
        },{
            "label": "Source",
            "key": "source"
        },{
            "label": "Number phenotypes",
            "key": "numphenotypes"
        },{
            "label": "Phenotype type",
            "key": "type"
        }]
    }, {
        "key": "phenotypes",
        "name": "Phenotypes",
        "type": "dataTable",
        "columns": [{
            "label": "Phenotype Simulation id",
            "key": "id",
            "visible": 1
        }, {
            "label": "Experimental Growth",
            "key": "phenoclass",
            "type": "wstype"
        }, {
            "label": "PhenotypeRef",
            "type": "tabLink",
            "method": "PhenotypeSetTab",
            "linkformat": "dispID",
            "key": "phenotype_ref",
            "visible": 1
        }, {
            "label": "Predicted Growth",
            "key": "simulatedGrowth",
            "type": "wstype",
            "visible": 1
        }, {
            "label": "Simulated Growth Fraction",
            "key": "simulatedGrowthFraction",
            "visible": 1
        }]
    }];

    this.PhenotypeSetTab = function (ref) {
        var objIdentity = {"obj_ref": ref};
        var p = tabwidget.kbapi('ws', 'get_objects', [objIdentity])
                         .then(function(data) {

                         return [];
                });

        return p;

    }

}


// make method of base class
KBObjects.prototype.KBasePhenotypes_PhenotypeSimulationSet = KBasePhenotypes_PhenotypeSimulationSet;
/*
    // tabs.js widget for creating and displaying tabs

    // Instantiation
    // optional: content, active, removable
    // you can make all tabs or individual tabs removable

        var tabs = $('#ele').tabs();

        //or

        var tabs = $('#ele').tabs({tabs: [
                                {name: 'tab1', content: 'foo text or html', active: true},
                                {name: 'tab2', content: 'text or html 2', removable: true}
                                ]
                              });

    // Add a new tab
    // optional: content, active

        tabs.addTab({name: 'tab3', content: 'new content'})

    // Retrieve a tab button
    // (useful for adding events or other stuff)

        var mytab = tabs.tab('tab1')

    // Add content to existing tab
    // (useful for ajax/event stuff)

        tabs.tab({name: 'tab3', content: 'blah blah blah'})

    // manually show a tab
    // Tab panes are shown when clicked automatically.
    // This is a programmatic way of showing a tab.

        tabs.showTab('tab_name');
*/

(function( $, undefined ) {

    $.KBWidget({
        name: "kbTabs",
        version: "1.0.0",
        init: function(options) {
            this._super(options);
            if (!options) options = {};
            var container = this.$elem;
            var self = this;

            var tabs = $('<ul class="nav nav-'+(options.pills ? 'pills' : 'tabs')+'">');
            var tab_contents = $('<div class="tab-content">');
            container.append(tabs, tab_contents);

            // adds a single tab and content
            this.addTab = function(p) {
                // if tab exists, don't add
                if ( tabs.find('a[data-id="'+p.name+'"]').length > 0)
                    return;

                var tab = $('<li class="'+(p.active ? 'active' :'')+'">');
                var tab_link = $('<a data-toggle="tab" data-id="'+p.name+'">'+p.name+'</a>');

                // animate by sliding tab up
                if (p.animate === false) {
                    tab.append(tab_link)
                    tabs.append(tab);
                } else {
                    tab.append(tab_link).hide();
                    tabs.append(tab);
                    tab.toggle('slide', {direction: 'down', duration: 'fast'});
                }

                // add close button if needed
                if (p.removable || options.removable) {
                    var rm_btn = $('<span class="glyphicon glyphicon-remove">');
                    tab_link.append(rm_btn);

                    rm_btn.click(function(e) {
                        self.rmTab(p.name)
                    })
                }

                // add content pane
                var c = $('<div class="tab-pane '+(p.active ? 'active' :'')+'" data-id="'+p.name+'">')
                c.append((p.content ? p.content : ''))
                tab_contents.append(c);

                tab.click(function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    var id = $(this).find('a').data('id');
                    self.showTab(id);
                })

                return p.content;
            }

            // remove tab and tab content
            this.rmTab = function(name) {
                var tab = tabs.find('a[data-id="'+name+'"]').parent('li');
                var tab_content = tab_contents.children('[data-id="'+name+'"]')

                // get previous or next tab
                if (tab.next().length > 0)
                    var id = tab.next().children('a').data('id');
                else
                    var id = tab.prev().children('a').data('id');

                // remove the tab
                tab.remove();
                tab_content.remove();

                // show prev or next tab
                self.showTab(id);
            }

            // returns tab
            this.tab = function(name) {
                return tabs.children('[data-id="'+name+'"]');
            }

            // returns content of tab
            this.tabContent = function(name) {
                return tab_contents.children('[data-id="'+name+'"]');
            }

            // adds content to existing tab pane; useful for ajax
            this.addContent = function(p) {
                var c = tab_contents.children('[data-id="'+p.name+'"]')
                c.append((p.content ? p.content : ''));

                return c;
            }

            // highlights tab and shows content
            this.showTab = function(id) {
                tabs.children('li').removeClass('active');
                tab_contents.children('.tab-pane').removeClass('active');

                tabs.find('a[data-id="'+id+'"]').parent().addClass('active');
                tab_contents.children('[data-id="'+id+'"]').addClass('active');
            }

            this.getTabNav = function() {
                return tabs;
            }

            // if tabs are supplied, add them
            // don't animate intial tabs
            if ('tabs' in options) {
                for (var i in options.tabs) {
                    var p = $.extend(options.tabs[i], {animate: false})
                    this.addTab(p)
                }
            }


            return this;
        },
    });
}( jQuery ) );

(function( $, undefined ) {

$.KBWidget({
    name: "kbaseTabTable",
    parent: "kbaseAuthenticatedWidget",
    version: "1.0.0",
    options: {
    },

    init: function(input) {
        this._super(input);
        var self = this;

        var type = input.type;

        // tab widget
        var tabs;

        // 0) No more clients.  Make this global.  please.
        this.kbapi = function(service, method, params) {
            var url, method;
            if (service == 'ws') {
                url = "https://kbase.us/services/ws/";
                method = 'Workspace.'+method;
            } else if (service == 'fba') {
                url = "https://kbase.us/services/KBaseFBAModeling/";
                method = 'fbaModelServices.'+method;
            }

            var rpc = {
                params: [params],
                method: method,
                version: "1.1",
                id: String(Math.random()).slice(2),
            };

            var prom = $.ajax({
                url: url,
                type: 'POST',
                processData: false,
                data: JSON.stringify(rpc),
                beforeSend: function (xhr) {
                    if (self.authToken())
                        xhr.setRequestHeader("Authorization", self.authToken());
                }
            }).then(function(data) {
                return data.result[0];
            })

            return prom;
        }

        // base class for workspace object classes
        var kbObjects = new KBObjects();

        //
        // 1) Use type (periods replaced with underscores) to instantiate object
        //

        this.obj = new kbObjects[type.replace(/\./g, '_')](self);

        //
        // 2) add the tabs (at page load)
        //
        var tabList = this.obj.tabList;

        var uiTabs = [];
        for (var i = 0; i < tabList.length; i++) {
            var tab = tabList[i];

            // add loading status
            var placeholder = $('<div>')
            placeholder.loading();

            uiTabs.push({name: tabList[i].name, content: placeholder});
        }

        uiTabs[0].active = true;
        tabs = self.$elem.kbTabs({tabs: uiTabs});

        //
        // 3) get meta data, add any metadata tables
        //
        if (isNaN(input.ws) && isNaN(input.obj) )
            var param = {workspace: input.ws, name: input.obj};
        else if (!isNaN(input.ws) && !isNaN(input.obj) )
            var param = {ref: input.ws+'/'+input.obj};

        self.kbapi('ws', 'get_object_info_new', {objects: [param], includeMetadata: 1})
          .done(function(res) {
              self.obj.setMetadata(res[0]);

              for (var i = 0; i < tabList.length; i++) {
                  var spec = tabList[i];

                  if (spec.type == 'verticaltbl') {
                      var key = spec.key,
                          data = self.obj[key],
                          tabPane = tabs.tabContent(spec.name);

                      var table = self.verticalTable({rows: spec.rows, data: data});
                      tabPane.rmLoading();
                      tabPane.append(table)
                  }
              }
          })

        //
        // 4) get object data, create tabs
        //
        if (isNaN(input.ws) && isNaN(input.obj) )
            var param = {workspace: input.ws, name: input.obj};
        else if (!isNaN(input.ws) && !isNaN(input.obj) )
            var param = {ref: input.ws+'/'+input.obj};

        self.kbapi('ws', 'get_objects', [param])
          .done(function(data){
              var setMethod = self.obj.setData(data[0].data);

              // see if setData method returns promise or not
              if (setMethod && 'done' in setMethod) {
                  setMethod.done(function() {
                    buildContent()
                })
              } else {
                  buildContent();
              }
        })

        var refLookup = {};
        function preProcessDataTable(tabSpec) {
            // get refs
            var refs = [],
                cols = tabSpec.columns;
            cols.forEach(function(col){
                if ((col.type == 'tabLink' || col.type == 'wstype') && col.linkformat == 'dispWSRef') {
                    self.obj[tabSpec.key].forEach(function(item) {
                        refs.push( {ref: item[col.key]} );
                    })
                }
            })

            if (!refs.length)
                return;

            // get human readable info from workspaces
            return self.kbapi('ws', 'get_object_info_new', {objects: refs})
                       .then(function(data) {
                            refs.forEach(function(ref, i){

                                // if (ref in referenceLookup) return
                                refLookup[ref.ref] = {name: data[i][1],
                                                      ws: data[i][7],
                                                      type: data[i][2].split('-')[0],
                                                      link: data[i][2].split('-')[0]+'/'+data[i][7]+'/'+data[i][1]};
                            })
                       })
        }

        function buildContent() {

            //5) Iterates over the entries in the spec and instantiate things
            for (var i = 0; i < tabList.length; i++) {
                var tabSpec = tabList[i];
                var tabPane = tabs.tabContent(tabSpec.name);

                // skip any vertical tables for now
                if (tabSpec.type == 'verticaltbl') continue;

                // if widget, invoke widget with arguments
                else if (tabSpec.widget) {
                    var keys = tabSpec.keys.split(/\,\s+/g);
                    var params = {};
                    tabSpec.arguments.split(/\,\s+/g).forEach(function(arg, i) {
                        params[arg] = self.obj[keys[i]];
                    })

                    tabPane[tabSpec.widget](params);
                    continue;
                }

                // preprocess data to get workspace info on any references in class
                var prom = preProcessDataTable(tabSpec);
                if (prom)
                    prom.done(function() {
                        createDataTable(tabSpec, tabPane)
                    })
                else
                    createDataTable(tabSpec, tabPane);


            }
        }

        // creates a datatable on a tabPane
        function createDataTable(tabSpec, tabPane) {
            var settings = self.getTableSettings(tabSpec, self.obj.data);
            tabPane.rmLoading();

            // note: must add table first
            tabPane.append('<table class="table table-bordered table-striped" style="margin-left: auto; margin-right: auto;">');
            tabPane.find('table').dataTable(settings)

            // add any events
            newTabEvents(tabSpec.name);
        }

        // takes table spec and prepared data, returns datatables settings object
        this.getTableSettings = function(tab, data) {
            var tableColumns = getColSettings(tab);

            var settings = {dom: '<"top"lf>rt<"bottom"ip><"clear">',
                            aaData: self.obj[tab.key],
                            aoColumns: tableColumns,
                            language: { search: "_INPUT_",
                                        searchPlaceholder: 'Search '+tab.name}}

            // add any events
            for (var i=0; i<tab.columns.length; i++) {
                var col = tab.columns[i];

                settings.fnDrawCallback = function() {
                    newTabEvents(tab.name)
                }
            }

            return settings;
        }


        function newTabEvents(name) {
            var ids = tabs.tabContent(name).find('.id-click');

            ids.unbind('click');
            ids.click(function() {
                var info = {id: $(this).data('id'),
                            type: $(this).data('type'),
                            method: $(this).data('method'),
                            ref: $(this).data('ref'),
                            name: $(this).data('name'),
                            ws: $(this).data('ws'),
                            action: $(this).data('action')}

                var content = $('<div>');

                if (info.method && info.method != 'undefined') {
                    var res = self.obj[info.method](info);

                    if (res && 'done' in res) {
                        content = $('<div>').loading();
                        $.when(res).done(function(rows) {
                            content.rmLoading();
                            var table = self.verticalTable({rows: rows});
                            content.append(table);
                        })
                    } else if (res == undefined) {
                        content.append('<br>No data found for '+info.id);
                    } else {
                        var table = self.verticalTable({rows: res});
                        content.append(table);
                    }

                    tabs.addTab({name: info.id, content: content, removable: true});
                    tabs.showTab(info.id);
                    newTabEvents(info.id);

                } else if (info.action == 'openWidget') {
                    content.kbaseTabTable({ws: info.ws, type: info.type, obj: info.name} )
                    tabs.addTab({name: info.id, content: content, removable: true});
                    tabs.showTab(info.id);
                    newTabEvents(info.id);
                }



            });
        }


        // takes table spec, returns datatables column settings
        function getColSettings(tab) {

            var settings = [];

            var cols = tab.columns;

            for (var i=0; i<cols.length; i++) {
                var col = cols[i];
                var key = col.key,
                    type = col.type,
                    format = col.linkformat,
                    method = col.method,
                    action = col.action

                var config = {sTitle: col.label,
                              sDefaultContent: '-',
                              mData: ref(key, type, format, method, action)}

                if (col.width) config.sWidth = col.width;

                settings.push(config)
            }


            return settings
        }


        function ref(key, type, format, method, action) {
            return function(d) {
                        if (type == 'tabLink' && format == 'dispIDCompart') {
                            var id = d[key].split('_')[0];
                            var compart = d[key].split('_')[1];

                            if (id.search(/rxn\d+/g) != -1 || id.search(/cpd\d+/g) != -1)
                                return '<a class="id-click" data-id="'+id+'" data-method="'+method+'">'+
                                             id+'</a> ('+compart+')';
                            else
                                return id+' ('+compart+')';

                        } else if (type == 'tabLink' && format == 'dispID') {
                            var id = d[key];
                            return '<a class="id-click" data-id="'+id+'" data-method="'+method+'">'+
                                        id+'</a>';
                        } else if (type == 'wstype' && format == 'dispWSRef') {
                            var ws = refLookup[ d[key] ].ws,
                                name = refLookup[ d[key] ].name
                                wstype = refLookup[ d[key] ].type,
                                link = refLookup[ d[key] ].link;
                            return '<a href="#/test/'+link+
                                     '" class="id-click"'+
                                     '" data-ws="'+ws+
                                     '" data-id="'+name+
                                     '" data-ref="'+d[key]+
                                     '" data-type="'+wstype+
                                     '" data-action="openPage"'+
                                     '" data-method="'+method+
                                     '" data-name="'+name+'">'+
                                    name+'</a>';
                        }

                        var value = d[key];

                        if ($.isArray(value)) {
                            if (type == 'tabLinkArray')
                                return tabLinkArray(value, method)
                            return d[key].join(', ');
                        }

                        return value;
                    }
        }

        function tabLinkArray(a, method) {
            var links = [];
            a.forEach(function(id) {
                links.push('<a class="id-click" data-id="'+id+
                            '" data-method="'+method+'">'+
                            id+'</a>');
            })
            return links.join(', ');
        }

        this.verticalTable = function(p) {
            var data = p.data;
            var rows = p.rows;

            var table = $('<table class="table table-bordered" style="margin-left: auto; margin-right: auto;">');


            for (var i=0; i<rows.length; i++) {
                var row = rows[i],
                    type = row.type;

                // don't display undefined things in vertical table
                if ('data' in row && typeof row.data == 'undefined' ||
                    'key' in row && typeof data[row.key] == 'undefined')
                    continue

                var r = $('<tr>');
                r.append('<td><b>'+row.label+'</b></td>')

                // if the data is in the row definition, use it
                if ('data' in row) {
                    var value;
                    if (type == 'tabLinkArray')
                        value = tabLinkArray(row.data, row.method);
                    else
                        value = row.data;
                    r.append('<td>'+value+'</td>');
                } else if ('key' in row) {
                    if (row.type == 'wstype') {
                        var ref = data[row.key];
                        var cell = $('<td data-ref="'+ref+'">loading...</td>');

                        getLink(data[row.key]).done(function(url) {
                            var name = url.split('/')[2]
                            cell.html('<a href="#/test/'+url+'">'+name+'</a>');
                        })
                        r.append(cell);
                    } else {
                        r.append('<td>'+data[row.key]+'</td>');
                    }
                } else if (row.type == 'pictureEquation')
                    r.append('<td>'+pictureEquation(row.data)+'</td>');

                table.append(r);
            }

            return table;
        }


        this.getBiochemReaction = function(id) {
            return self.kbapi('fba', 'get_reactions', {reactions: [id]})
                       .then(function(data) {
                          return data[0];
                       })
        }

        this.getBiochemCompound = function(id) {
            return self.kbapi('fba', 'get_compounds', {compounds: [id]})
                       .then(function(data) {
                          return data[0];
                       })
        }

        this.getBiochemCompounds = function(ids) {
            return self.kbapi('fba', 'get_compounds', {compounds: ids})
        }

        this.compoundImage = function(id) {
            return 'http://bioseed.mcs.anl.gov/~chenry/jpeg/'+id+'.jpeg';
        }

        var imageURL = "http://bioseed.mcs.anl.gov/~chenry/jpeg/";
        this.pictureEquation = function(eq) {
            var cpds = get_cpds(eq);

            for (var i =0; i < cpds.left.length; i++) {
                var cpd = cpds.left[i];
                var img_url =  imageURL+cpd+'.jpeg';
                panel.append('<div class="pull-left text-center">\
                                    <img src="'+img_url+'" width=150 ><br>\
                                    <div class="cpd-id" data-cpd="'+cpd+'">'+cpd+'</div>\
                                </div>');

                var plus = $('<div class="pull-left text-center">+</div>');
                plus.css('margin', '30px 0 0 0');

                if (i < cpds.left.length-1) {
                    panel.append(plus);
                }
            }

            var direction = $('<div class="pull-left text-center">'+'<=>'+'</div>');
            direction.css('margin', '25px 0 0 0');
            panel.append(direction);

            for (var i =0; i < cpds.right.length; i++) {
                var cpd = cpds.right[i];
                var img_url = imageURL+cpd+'.jpeg';
                panel.append('<div class="pull-left text-center">\
                                    <img src="'+img_url+'" data-cpd="'+cpd+'" width=150 ><br>\
                                    <div class="cpd-id" data-cpd="'+cpd+'">'+cpd+'</div>\
                                </div>');

                var plus = $('<div class="pull-left text-center">+</div>');
                plus.css('margin', '25px 0 0 0');

                if (i < cpds.right.length-1) {
                    panel.append(plus);
                }
            }


            var cpd_ids = cpds.left.concat(cpds.right);
            var prom = self.kbapi('fba', 'get_compounds', {compounds: cpd_ids})
            $.when(prom).done(function(d){
                var map = {};
                for (var i in d) {
                    map [d[i].id ] = d[i].name;
                }

                $('.cpd-id').each(function() {
                    $(this).html(map[$(this).data('cpd')])
                })
            });


            return panel;
        }

        function get_cpds(equation) {
            var cpds = {};
            var sides = equation.split('=');
            cpds.left = sides[0].match(/cpd\d*/g);
            cpds.right = sides[1].match(/cpd\d*/g);

            return cpds;
        }

        function getLink(ref) {
            return self.kbapi('ws', 'get_object_info_new',
                        {objects: [{ref: ref}]})
                        .then(function(data){
                            var a = data[0];
                            return a[2].split('-')[0]+'/'+a[7]+'/'+a[1];
                        })
        }

        //mmmm... let's define this twice.  Why not.
        $.fn.loading = function(text, big) {
            $(this).rmLoading()

            if (big) {
                if (typeof text != 'undefined') {
                    $(this).append('<p class="text-center text-muted loader"><br>'+
                         '<img src="assets/img/ajax-loader-big.gif"> '+text+'</p>');
                } else {
                    $(this).append('<p class="text-center text-muted loader"><br>'+
                         '<img src="assets/img/ajax-loader-big.gif"> loading...</p>')
                }
            } else {
                if (typeof text != 'undefined')
                    $(this).append('<p class="text-muted loader">'+
                         '<img src="//narrative.kbase.us/narrative/static/kbase/images/ajax-loader.gif"> '+text+'</p>');
                else
                    $(this).append('<p class="text-muted loader">'+
                         '<img src="//narrative.kbase.us/narrative/static/kbase/images/ajax-loader.gif"> loading...</p>')
            }

            return this;
        }

        return this;
    }
})
}( jQuery ) );



(function( $, undefined ) {

$.KBWidget({
    name: "FbaModelComparisonWidget",     
    parent: "kbaseAuthenticatedWidget",
    version: "1.0.0",
	token: null,
	ws_name: null,
	fba_model1_id: null, 
	fba_model1: null,
	fba_model2_id: null,
	fba_model2: null,
	genome1_ref: null,
	genome2_ref: null,
	genome1_id: null,
	genome2_id: null,
	genome1_name: null,
	genome2_name: null,
	proteome_cmp: null,
	gene_translation: {},
    options: {
    	ws_name: null,
    	fba_model1_id: null, 
    	fba_model2_id: null,
    	proteome_cmp_id: null
    },

    wsUrl: "https://kbase.us/services/ws/",
    loadingImage: "static/kbase/images/ajax-loader.gif",

    init: function(options) {
        this._super(options);
        this.ws_name = options.ws_name;
        this.fba_model1_id = options.fba_model1_id;
        this.fba_model2_id = options.fba_model2_id;
        this.gene_translation = {};
        if (options.proteome_cmp) {
        	this.proteome_cmp = options.proteome_cmp;
        }	
        return this;
    },
    
    render: function() {
        var self = this;
        var container = this.$elem;
    	container.empty();
        if (!self.authToken()) {
            container.append("<div>[Error] You're not logged in</div>");
        	return;
        }

    	container.append("<div><img src=\""+self.loadingImage+"\">&nbsp;&nbsp;Loading models and comparison data...</div>");

    	var pref = this.uuid();
        var kbws = new Workspace(this.wsUrl, {'token': self.authToken()});
        var get_object_input = [{ref: self.ws_name + "/" + self.fba_model1_id},{ref: self.ws_name + "/" + self.fba_model2_id}];
        if (self.proteome_cmp) {
        	get_object_input.push({ref: self.ws_name + "/" + self.proteome_cmp});
        }
        kbws.get_objects(get_object_input, function(data) {
        	self.fba_model1 = data[0].data;
        	self.fba_model2 = data[1].data;
        	prepare_model(self.fba_model1);
        	prepare_model(self.fba_model2);
        	self.genome1_ref = self.fba_model1.genome_ref;
        	self.genome2_ref = self.fba_model2.genome_ref;
        	if (data[2]) {
        		var ftrs = data[2].data.proteome1names;
        		for (var i=0; i< ftrs.length; i++) { 
        			var hits = data[2].data.data1[i];
        			for (var j=0; j < hits.length; j++) {
        				//if (hits[j][2] == 100) {
        					if (self.gene_translation[ftrs[i]] === undefined) {
        						self.gene_translation[ftrs[i]] = [];
        					}
        					self.gene_translation[ftrs[i]].push(data[2].data.proteome2names[hits[j][0]]);
        				//}
        			}
        		}
        		ftrs = data[2].data.proteome2names;
        		for (var i=0; i< ftrs.length; i++) { 
        			var hits = data[2].data.data2[i];
        			for (var j=0; j < hits.length; j++) {
        				//if (hits[j][2] == 100) {
        					if (self.gene_translation[ftrs[i]] === undefined) {
        						self.gene_translation[ftrs[i]] = [];
        					}
        					self.gene_translation[ftrs[i]].push(data[2].data.proteome1names[hits[j][0]]);
        				//}
        			}
        		}
        	}		
        	kbws.get_object_subset([
        		{ref: self.genome1_ref, included: ["scientific_name"]}, 
				{ref: self.genome2_ref, included: ["scientific_name"]}
			], function(data) {
				self.genome1_id = data[0].info[1];
				self.genome2_id = data[1].info[1];
				self.genome1_name = data[0].data.scientific_name;
				self.genome2_name = data[1].data.scientific_name;
				dataIsReady();
			}, function(data) {
				if (!error)
					container.empty();
				error = true;
				container.append('<p>[Error] ' + data.error.message + '</p>');
			});
        }, function(data) {
        	if (!error)
        		container.empty();
        	error = true;
    		container.append('<p>[Error] ' + data.error.message + '</p>');
        });
        
        var prepare_model = function(model) {
        	model.cpdhash = {};
        	model.rxnhash = {};
        	model.cmphash = {};
			for (var i=0; i< model.modelcompartments.length; i++) {
        		var cmp = model.modelcompartments[i];
        		model.cmphash[cmp.id] = cmp;
        	}
        	for (var i=0; i< model.modelcompounds.length; i++) {
        		var cpd = model.modelcompounds[i];
        		cpd.cmpkbid = cpd.modelcompartment_ref.split("/").pop();
        		cpd.cpdkbid = cpd.compound_ref.split("/").pop();
        		if (cpd.name === undefined) {
        			cpd.name = cpd.id;
        		}
        		cpd.name = cpd.name.replace(/_[a-zA-z]\d+$/, '');
        		model.cpdhash[cpd.id] = cpd;
        		if (cpd.cpdkbid != "cpd00000") {
        			model.cpdhash[cpd.cpdkbid+"_"+cpd.cmpkbid] = cpd;
        		}
        	}
        	for (var i=0; i< model.modelreactions.length; i++) {
        		var rxn = model.modelreactions[i];
        		rxn.rxnkbid = rxn.reaction_ref.split("/").pop();
        		rxn.cmpkbid = rxn.modelcompartment_ref.split("/").pop();
        		rxn.dispid = rxn.id.replace(/_[a-zA-z]\d+$/, '')+"["+rxn.cmpkbid+"]";
        		rxn.name = rxn.name.replace(/_[a-zA-z]\d+$/, '');
        		if (rxn.name == "CustomReaction") {
        			rxn.name = rxn.id.replace(/_[a-zA-z]\d+$/, '');
        		}
        		model.rxnhash[rxn.id] = rxn;
        		if (rxn.rxnkbid != "rxn00000") {
        			model.rxnhash[rxn.rxnkbid+"_"+rxn.cmpkbid] = rxn;
        			if (rxn.rxnkbid+"_"+rxn.cmpkbid != rxn.id) {
        				rxn.dispid += "<br>("+rxn.rxnkbid+")";
        			}
        		}
        		var reactants = "";
        		var products = "";
        		var sign = "<=>";
        		if (rxn.direction == ">") {
					sign = "=>";
				} else if (rxn.direction == "<") {
					sign = "<=";
				}
        		for (var j=0; j< rxn.modelReactionReagents.length; j++) {
        			var rgt = rxn.modelReactionReagents[j];
        			rgt.cpdkbid = rgt.modelcompound_ref.split("/").pop();
        			if (rgt.coefficient < 0) {
						if (reactants.length > 0) {
							reactants += " + ";
						}
						if (rgt.coefficient != -1) {
							var abscoef = Math.round(-1*100*rgt.coefficient)/100;
							reactants += "("+abscoef+") ";
						}
						reactants += model.cpdhash[rgt.cpdkbid].name+"["+model.cpdhash[rgt.cpdkbid].cmpkbid+"]";
					} else {
						if (products.length > 0) {
							products += " + ";
						}
						if (rgt.coefficient != 1) {
							var abscoef = Math.round(100*rgt.coefficient)/100;
							products += "("+abscoef+") ";
						}
						products += model.cpdhash[rgt.cpdkbid].name+"["+model.cpdhash[rgt.cpdkbid].cmpkbid+"]";
					}
        		}
        		rxn.ftrhash = {};
        		for (var j=0; j< rxn.modelReactionProteins.length; j++) {
        			var prot = rxn.modelReactionProteins[j];
        			for (var k=0; k< prot.modelReactionProteinSubunits.length; k++) {
        				var subunit = prot.modelReactionProteinSubunits[k];
        				for (var m=0; m< subunit.feature_refs.length; m++) {
        					rxn.ftrhash[subunit.feature_refs[m].split("/").pop()] = 1;
        				}
        			}
        		}
        		rxn.dispfeatures = "";
        		for (var gene in rxn.ftrhash) {
        			if (rxn.dispfeatures.length > 0) {
        				rxn.dispfeatures += "<br>";
        			}
        			rxn.dispfeatures += gene;
        		}
        		rxn.equation = reactants+" "+sign+" "+products;
        	}
        }
        
        var compare_models = function() {
        	model1 = self.fba_model1;
        	model2 = self.fba_model2;
        	self.overlap_rxns = [];
        	self.exact_matches = 0;
        	model1.unique_rxn = [];
        	for (var i=0; i< model1.modelreactions.length; i++) {
        		var rxn = model1.modelreactions[i];
        		if (rxn.rxnkbid == "rxn00000") {
        			if (model2.rxnhash[rxn.id] === undefined) {
        				model1.unique_rxn.push(rxn);
        			} else {
        				var rxn2 = model2.rxnhash[rxn.id];
						var model1ftrs = "";
						var exact = 1;
						for (var gene in rxn.ftrhash) {
							if (model1ftrs.length > 0) {
								model1ftrs += "<br>";
							}
							if (self.gene_translation[gene]) {
								var transftrs = self.gene_translation[gene];
								var found = 0;
								for (var n=0; n < transftrs.length; n++) {
									if (rxn2.ftrhash[transftrs[n]]) {
										model1ftrs += gene;
										found = 1;
										break;					
									}
								}
								if (found == 0) {
									model1ftrs += '<font color="red">' + gene + '</font>';
									exact = 0;
								}
							} else if (rxn2.ftrhash[gene] === undefined) {
								model1ftrs += '<font color="red">' + gene + '</font>';
								exact = 0;
							} else {
								model1ftrs += gene;
							}
						}
						var model2ftrs = "";
						for (var gene in rxn2.ftrhash) {
							if (model2ftrs.length > 0) {
								model2ftrs += "<br>";
							}
							if (self.gene_translation[gene]) {
								var transftrs = self.gene_translation[gene];
								var found = 0;
								for (var n=0; n < transftrs.length; n++) {
									if (rxn.ftrhash[transftrs[n]]) {
										model2ftrs += gene;
										found = 1;
										break;					
									}
								}
								if (found == 0) {
									model2ftrs += '<font color="red">' + gene + '</font>';
									exact = 0;
								}
							} else if (rxn.ftrhash[gene] === undefined) {
								model2ftrs += '<font color="red">' + gene + '</font>';
								exact = 0;
							} else {
								model2ftrs += gene;
							}
						}
						if (exact == 1) {
							self.exact_matches++;
						}
						self.overlap_rxns.push({
							'model1rxn': rxn,
							'model2rxn': rxn2,
							'canonical':0,
							'exact': exact,
							'model1features': model1ftrs,
							'model2features': model2ftrs
						});
        			}
        		} else if (model2.rxnhash[rxn.rxnkbid+"_"+rxn.cmpkbid] === undefined) {
        			model1.unique_rxn.push(rxn);
        		} else {
        			var rxn2 = model2.rxnhash[rxn.rxnkbid+"_"+rxn.cmpkbid];
        			var model1ftrs = "";
        			var exact = 1;
        			for (var gene in rxn.ftrhash) {
        				if (model1ftrs.length > 0) {
        					model1ftrs += "<br>";
        				}
        				if (self.gene_translation[gene]) {
        					var transftrs = self.gene_translation[gene];
        					var found = 0;
        					for (var n=0; n < transftrs.length; n++) {
        						if (rxn2.ftrhash[transftrs[n]]) {
        							model1ftrs += gene;
        							found = 1;
        							break;					
        						}
        					}
        					if (found == 0) {
        						model1ftrs += '<font color="red">' + gene + '</font>';
        						exact = 0;
        					}
        				} else if (rxn2.ftrhash[gene] === undefined) {
        					model1ftrs += '<font color="red">' + gene + '</font>';
        					exact = 0;
        				} else {
        					model1ftrs += gene;
        				}
        			}
        			var model2ftrs = "";
        			for (var gene in rxn2.ftrhash) {
        				if (model2ftrs.length > 0) {
        					model2ftrs += "<br>";
        				}
        				if (self.gene_translation[gene]) {
        					var transftrs = self.gene_translation[gene];
        					var found = 0;
        					for (var n=0; n < transftrs.length; n++) {
        						if (rxn.ftrhash[transftrs[n]]) {
        							model2ftrs += gene;
        							found = 1;
        							break;					
        						}
        					}
        					if (found == 0) {
        						model2ftrs += '<font color="red">' + gene + '</font>';
        						exact = 0;
        					}
        				} else if (rxn.ftrhash[gene] === undefined) {
        					model2ftrs += '<font color="red">' + gene + '</font>';
        					exact = 0;
        				} else {
        					model2ftrs += gene;
        				}
        			}
        			if (exact == 1) {
        				self.exact_matches++;
        			}
        			self.overlap_rxns.push({
        				'model1rxn': rxn,
        				'model2rxn': rxn2,
        				'canonical':1,
        				'exact': exact,
        				'model1features': model1ftrs,
        				'model2features': model2ftrs
        			});
        		}
        	}
        	model2.unique_rxn = [];
        	for (var i=0; i< model2.modelreactions.length; i++) {
        		var rxn = model2.modelreactions[i];
        		if (rxn.rxnkbid == "rxn00000") {
        			if (model1.rxnhash[rxn.id] === undefined) {
        				model2.unique_rxn.push(rxn);
        			}
        		} else if (model1.rxnhash[rxn.rxnkbid+"_"+rxn.cmpkbid] === undefined) {
        			model2.unique_rxn.push(rxn);
        		}
        	}
        }
		
        var dataIsReady = function() {
        	compare_models();
            ///////////////////////////////////// Instantiating Tabs ////////////////////////////////////////////
			container.empty();
			var tabPane = $('<div id="'+self.pref+'tab-content">');
			container.append(tabPane);
			tabPane.kbaseTabs({canDelete : true, tabs : []});
            //////////////////////////////////////////// Statistics tab /////////////////////////////////////////////
        	var tabStats = $("<div/>");
			tabPane.kbaseTabs('addTab', {tab: 'Statistics', content: tabStats, canDelete : false, show: true});
			var tableStats = $('<table class="table table-striped table-bordered" '+
					'style="margin-left: auto; margin-right: auto;" id="'+self.pref+'modelcomp-stats"/>');
			tabStats.append(tableStats);
			tableStats.append('<tr><td><b>'+self.fba_model1_id+'</b> genome</td><td>'+self.genome1_id+'<br>('+self.genome1_name+')</td></tr>');
			tableStats.append('<tr><td><b>'+self.fba_model2_id+'</b> genome</td><td>'+self.genome2_id+'<br>('+self.genome2_name+')</td></tr>');
			tableStats.append('<tr><td>Reactions in <b>'+self.fba_model1_id+'</b></td><td>'+self.fba_model1.modelreactions.length+'</td></tr>');
			tableStats.append('<tr><td>Reactions in <b>'+self.fba_model2_id+'</b></td><td>'+self.fba_model2.modelreactions.length+'</td></tr>');
			tableStats.append('<tr><td>Common reactions</td><td>'+self.overlap_rxns.length+'</td></tr>');
			tableStats.append('<tr><td>Reactions with same features</td><td>'+self.exact_matches+'</td></tr>');
			tableStats.append('<tr><td>Unique reactions in <b>'+self.fba_model1_id+'</b></td><td>'+self.fba_model1.unique_rxn.length+'</td></tr>');
			tableStats.append('<tr><td>Unique reactions in <b>'+self.fba_model2_id+'</b></td><td>'+self.fba_model2.unique_rxn.length+'</td></tr>');        	
        	//////////////////////////////////////////// Common tab /////////////////////////////////////////////
        	var tabCommon = $("<div/>");
    		tabPane.kbaseTabs('addTab', {tab: 'Common reactions', content: tabCommon, canDelete : false, show: false});
        	var tableCommon = $('<table class="table table-striped table-bordered" '+
        			'style="margin-left: auto; margin-right: auto;" id="'+self.pref+'modelcomp-common"/>');
        	tabCommon.append(tableCommon);
			tableCommon.dataTable({
					"sPaginationType": "full_numbers",
					"iDisplayLength": 10,
					"aaData": self.overlap_rxns,
					"aaSorting": [[ 2, "desc" ], [0, "asc"]],
					"aoColumns": [
								  { "sTitle": "Reaction", 'mData': 'model1rxn.dispid'},
								  { "sTitle": "Equation&nbsp;&nbsp;&nbsp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;", 'mData': 'model1rxn.equation'},
								  { "sTitle": "<b>"+self.fba_model1_id+"</b> features", 'mData': 'model1features'},
								  { "sTitle": "<b>"+self.fba_model2_id+"</b> features", 'mData': 'model2features'},
								  { "sTitle": "Name", 'mData': 'model1rxn.name'},
								  { "sTitle": "Exact", 'mData': 'exact'},
					],
					"oLanguage": {
								"sEmptyTable": "No functions found!",
								"sSearch": "Search: "
					},
					'fnDrawCallback': events
			});
			tabCommon.append($('<table><tr><td>(*) color legend: sub-best bidirectional hits are marked<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;by <font color="blue">blue</font>, '+
            		'orphan features are marked by <font color="red">red</font>.</td></tr></table>'));
        	//////////////////////////////////////////// Model1 only tab /////////////////////////////////////////////
        	var tabModel1 = $("<div/>");
    		tabPane.kbaseTabs('addTab', {tab: self.fba_model1_id+" only", content: tabModel1, canDelete : false, show: false});
        	var tableModel1 = $('<table class="table table-striped table-bordered" '+
        			'style="margin-left: auto; margin-right: auto;" id="'+self.pref+'modelcomp-model1"/>');
        	tabModel1.append(tableModel1);
			tableModel1.dataTable({
					"sPaginationType": "full_numbers",
					"iDisplayLength": 10,
					"aaData": self.fba_model1.unique_rxn,
					"aaSorting": [[ 2, "desc" ], [0, "asc"]],
					"aoColumns": [
								  { "sTitle": "Reaction", 'mData': 'dispid'},
								  { "sTitle": "Equation&nbsp;&nbsp;&nbsp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;", 'mData': 'equation'},
								  { "sTitle": "<b>"+self.fba_model1_id+"</b> features", 'mData': 'dispfeatures'},
								  { "sTitle": "Name", 'mData': 'name'},
					],
					"oLanguage": {
								"sEmptyTable": "No functions found!",
								"sSearch": "Search: "
					},
					'fnDrawCallback': events
			});
        	//////////////////////////////////////////// Model2 only tab /////////////////////////////////////////////
        	var tabModel2 = $("<div/>");
    		tabPane.kbaseTabs('addTab', {tab: self.fba_model2_id+" only", content: tabModel2, canDelete : false, show: false});
        	var tableModel2 = $('<table class="table table-striped table-bordered" '+
        			'style="margin-left: auto; margin-right: auto;" id="'+self.pref+'modelcomp-model2"/>');
        	tabModel2.append(tableModel2);
			tableModel2.dataTable({
					"sPaginationType": "full_numbers",
					"iDisplayLength": 10,
					"aaData": self.fba_model2.unique_rxn,
					"aaSorting": [[ 2, "desc" ], [0, "asc"]],
					"aoColumns": [
								  { "sTitle": "Reaction", 'mData': 'dispid'},
								  { "sTitle": "Equation&nbsp;&nbsp;&nbsp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;", 'mData': 'equation'},
								  { "sTitle": "<b>"+self.fba_model2_id+"</b> features", 'mData': 'dispfeatures'},
								  { "sTitle": "Name", 'mData': 'name'},
					],
					"oLanguage": {
								"sEmptyTable": "No functions found!",
								"sSearch": "Search: "
					},
					'fnDrawCallback': events
			});
			///////////////////////////////////// Event handling for links ///////////////////////////////////////////
			function events() {
				// event for clicking on ortholog count
				$('.show-reaction'+self.pref).unbind('click');
				$('.show-reaction'+self.pref).click(function() {
					var id = $(this).data('id');
					if (tabPane.kbaseTabs('hasTab', id)) {
						tabPane.kbaseTabs('showTab', id);
						return;
					}			
					tabPane.kbaseTabs('addTab', {tab: id, content: "Coming soon!", canDelete : true, show: true});
				});
				$('.show-gene'+self.pref).unbind('click');
				$('.show-gene'+self.pref).click(function() {
					var id = $(this).data('id');
					if (tabPane.kbaseTabs('hasTab', id)) {
						tabPane.kbaseTabs('showTab', id);
						return;
					}
					tabPane.kbaseTabs('addTab', {tab: id, content: "Coming soon!", canDelete : true, show: true});
				});
			}
    	};
        return this;
    },

    loggedInCallback: function(event, auth) {
        this.token = auth.token;
        this.render();
        return this;
    },

    loggedOutCallback: function(event, auth) {
        this.token = null;
        this.render();
        return this;
    },

    uuid: function() {
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, 
            function(c) {
                var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);
                return v.toString(16);
            });
    }
})
}( jQuery ) );

function ContigBrowserPanel() {
	this.data = {
        name: "ContigBrowserPanel", 
        parent: "kbaseWidget",
        version: "1.0.0",
        options: {
            contig: null,
            centerFeature: null,
            onClickUrl: null,
            allowResize: true,

            svgWidth: 700,              // all numbers = pixels.
            svgHeight: 100,
            trackMargin: 5,
            trackThickness: 15,
            leftMargin: 5,
            topMargin: 20,
            arrowSize: 10,

            start: 1,                   // except these two - they're contig positions
            length: 10000,

            embedInCard: false,
            showButtons: true,
            cardContainer: null,
            onClickFunction: null,

            width: 550,
            token: null
        },

        //cdmiURL: "http://kbase.us/services/cdmi_api",
        //proteinInfoURL: "http://kbase.us/services/protein_info_service",
        workspaceURL: window.kbconfig.urls.workspace,
        tooltip: null,
        operonFeatures: [],
        $messagePane: null,

        init: function() {

            this.$messagePane = $("<div/>")
                                .addClass("kbwidget-message-pane")
                                .addClass("kbwidget-hide-message");
            this.$elem.append(this.$messagePane);

            //this.cdmiClient = new CDMI_API(this.cdmiURL);
            //this.entityClient = new CDMI_EntityAPI(this.cdmiURL);
            //this.proteinInfoClient = new ProteinInfo(this.proteinInfoURL);
            this.workspaceClient = new Workspace(this.workspaceURL, {'token': this.options.token});

            this.render();

            var self = this;
            if (this.options.showButtons) {
                this.$elem.KBaseContigBrowserButtons({ browser: self });
            }

            /*this.options.onClickFunction = function(svgElement, feature) {
                self.trigger("featureClick", { feature: feature, featureElement: svgElement} );
            };*/
            return this;
        },


        /**
         * 
         */
        render: function() {
            this.loading(false);

            // tooltip inspired from
            // https://gist.github.com/1016860
            this.tooltip = d3.select("body")
                             .append("div")
                             .classed("kbcb-tooltip", true);

            // Init the SVG container to be the right size.
            this.svg = d3.select(this.$elem[0])
                         .append("svg")
                         .attr("width", this.options.svgWidth)
                         .attr("height", this.options.svgHeight)
                         .classed("kbcb-widget", true);

            this.trackContainer = this.svg.append("g");

            this.xScale = d3.scale.linear()
                            .domain([this.options.start, this.options.start + this.options.length])
                            .range([0, this.options.svgWidth]);

            this.xAxis = d3.svg.axis()
                           .scale(this.xScale)
                           .orient("top")
                           .tickFormat(d3.format(",.0f"));

            this.axisSvg = this.svg.append("g")
                               .attr("class", "kbcb-axis")
                               .attr("transform", "translate(0, " + this.options.topMargin + ")")
                               .call(this.xAxis);

            var self = this;
            $(window).on("resize", function() {
                self.resize();
            });

            // Kickstart the whole thing
            if (this.options.centerFeature != null)
                this.setCenterFeature(this.options.centerFeature);

            this.setContig();

            return this;
        },

        /**
         * An internal class used to define and calculate which features belong on which tracks.
         * A 'track' in this case is a horizontal representation of features on a contig. If
         * two features overlap on the contig, then they belong on separate tracks.
         *
         * This is only used internally to shuffle the features and avoid visual overlapping.
         */
        track: function() {
            var that = {};

            that.regions = [];
            that.min = Infinity;
            that.max = -Infinity;
            that.numRegions = 0;

            that.addRegion = function(feature_location) {
                for (var i=0; i<feature_location.length; i++) {

                    var start = Number(feature_location[i][1]);
                    var length = Number(feature_location[i][3]);
                    var end = (feature_location[i][2] === "+" ? start + length - 1
                                                              : start - length + 1);
                    if (start > end) {
                        var x = end;
                        end = start;
                        start = x;
                    }

                    this.regions.push([start, end]);
                    if (start < this.min)
                        this.min = start;
                    if (end > this.max)
                        this.max = end;
                    this.numRegions++;
                }
            };

            that.hasOverlap = function(feature_location) {
                for (var i=0; i<feature_location.length; i++) {
                    var start = Number(feature_location[i][1]);
                    var length = Number(feature_location[i][3]);
                    var end = (feature_location[i][2] === "+" ? start + length - 1 :
                                                                start - length + 1);

                    // double check the orientation
                    if (start > end) {
                        var x = end;
                        end = start;
                        start = x;
                    }

                    /* cases:
                     * simple ones:
                     *  [start, end] [min]
                     *  [max] [start, end]
                     * less simple:
                     *  look over all regions
                     */
                    for (var ii=0; ii<this.regions.length; ii++) {
                        var region = this.regions[ii];
                        // region = [start,end] pair
                        if (! ( (start <= region[0] && end <= region[0]) ||
                                 start >= region[1] && end >= region[1]))
                            return true;

                        // if ((start >= region[0] && start <= region[1]) ||
                        //     (end >= region[0] && end <= region[1]) ||
                        //     (start <= region[0] && end >= region[1])) {
                        //     return true;
                        // }
                    }
                    
                }
                return false;
            };

            return that;
        },

        /**
         * Updates the internal representation of a contig to match what should be displayed.
         */
        setContig : function() {
        	var self = this;
            self.contigLength = self.options.contig.length;
            self.options.start = 0;
            if (self.options.length > self.contigLength)
            	self.options.length = self.contigLength;

            if (this.options.centerFeature) {
                this.setCenterFeature();
            }
            else {
                this.update();
            }
        },

        setCenterFeature : function(centerFeature) {
            // if we're getting a new center feature, make sure to update the operon features, too.
            if (centerFeature)
                this.options.centerFeature = centerFeature;

            var self = this;
            this.proteinInfoClient.fids_to_operons([this.options.centerFeature],
                // on success
                function(operonGenes) {
                    self.operonFeatures = operonGenes[self.options.centerFeature];
                    self.update();
                },
                // on error
                function(error) {
                    self.throwError(error);
                }
            );
        },

        setRange : function(start, length) {
            // set range and re-render
            this.options.start = start;
            this.options.length = length;
            this.update();
        },

        /*
         * Figures out which track each feature should be on, based on starting point and length.
         */
        processFeatures : function(features) {
            var tracks = [];
            tracks[0] = this.track(); //init with one track.

            // First, transform features into an array instead of an object.
            // eg., take it from {'fid' : <feature object>, 'fid' : <feature object> }
            // to [<feature object>, <feature object> ... ]

            var feature_arr = [];
            for (fid in features) {
                feature_arr.push(features[fid]);
            }

            features = feature_arr;

            // First, sort the features by their start location (first pass = features[fid].feature_location[0][1], later include strand)
            features.sort(function(a, b) {
                return a.feature_location[0][1] - b.feature_location[0][1];
            });


            // Foreach feature...
            for (var j=0; j<features.length; j++) {
                var feature = features[j];

                // Look for an open spot in each track, fill it in the first one we get to, and label that feature with the track.
                // var start = Number(feature.feature_location[0][1]);
                // var length = Number(feature.feature_location[0][3]);
                // var end;

                for (var i=0; i<tracks.length; i++) {
                    if (!(tracks[i].hasOverlap(feature.feature_location))) {
                        tracks[i].addRegion(feature.feature_location);
                        feature.track = i;
                        break;
                    }
                }
                // if our feature doesn't have a track yet, then they're all full in that region.
                // So make a new track and this feature to it!
                if (feature.track === undefined) {
                    var next = tracks.length;
                    tracks[next] = this.track();
                    tracks[next].addRegion(feature.feature_location);
                    feature.track = next;
                }

            }

            this.numTracks = tracks.length;
            return features;
        },

        update : function(useCenter) {

            // exposes 'this' to callbacks through closure.
            // otherwise 'this' refers to the state within the closure.
            // ... i think. This kinda tangle makes my head hurt.
            // Either way, this is the deepest chain of callbacks in here, so it should be okay.
            var self = this;

            var renderFromCenter = function(feature) {
                if (feature) {
                    feature = feature[self.options.centerFeature];
                    self.options.start = Math.max(0, Math.floor(parseInt(feature.feature_location[0][1]) + (parseInt(feature.feature_location[0][3])/2) - (self.options.length/2)));
                }
                else {
                    window.alert("Error: fid '" + self.options.centerFeature + "' not found! Continuing with original range...");
                }
                self.cdmiClient.region_to_fids([self.options.contig, self.options.start, '+', self.options.length], getFeatureData);
            };

            var getOperonData = function(features) {
                if(self.options.centerFeature) {
                    for (var j in features) {
                        for (var i in self.operonFeatures) {
                            if (features[j].feature_id === self.operonFeatures[i])
                                features[j].isInOperon = 1;
                        }
                    }
                }
                self.renderFromRange(features);
            };

            var getFeatureData = getOperonData;

            if (self.options.centerFeature && useCenter)
                self.cdmiClient.fids_to_feature_data([self.options.centerFeature], renderFromCenter);
            else
                self.region_to_fids([self.options.contig, self.options.start, '+', self.options.length], getFeatureData);
        },

        region_to_fids : function(input, callback) {
        	var minStop = input[1];
        	var maxStart = input[1] + input[3];
        	var features = [];
        	for (var genePos in this.options.contig.genes) {
        		var gene = this.options.contig.genes[genePos];
        		var start = gene.location[0][1];
        		var stop = start;
        		if (gene.location[0][2] === "-") {
        			stop = stop - gene.location[0][3];
        		} else {
        			stop = stop + gene.location[0][3];
        		}
        		//console.log('gene: start=' + start + ', stop=' + stop + ', maxStart=' + maxStart + ", minStop=" + minStop);
        		if (start < maxStart && stop > minStop) {
        			features.push({feature_id : gene.id, feature_location: gene.location, 
        				isInOperon: 0, feature_function: gene['function']});
        		}
        	}
        	callback(features);
        },
        
        adjustHeight : function() {
            var neededHeight = this.numTracks * 
                               (this.options.trackThickness + this.options.trackMargin) + 
                               this.options.topMargin + this.options.trackMargin;

            if (neededHeight > this.svg.attr("height")) {
                this.svg.attr("height", neededHeight);
            }
        },

        renderFromRange : function(features) {
            features = this.processFeatures(features);

            // expose 'this' to d3 anonymous functions through closure
            var self = this;

            if (this.options.allowResize)
                this.adjustHeight();

            var trackSet = this.trackContainer.selectAll("path")
                                              .data(features, function(d) { return d.feature_id; });

            trackSet.enter()
                    .append("path")
                         .classed("kbcb-feature", true)  // incl feature_type later (needs call to get_entity_Feature?)
                         .classed("kbcb-operon", function(d) { return self.isOperonFeature(d); })
                         .classed("kbcb-center", function(d) { return self.isCenterFeature(d); })
                         .attr("id", function(d) { return d.feature_id; })
                         .on("mouseover", 
                                function(d) { 
                                    d3.select(this).style("fill", d3.rgb(d3.select(this).style("fill")).darker()); 
                                    self.tooltip = self.tooltip.text(d.feature_id + ": " + d.feature_function);
                                    return self.tooltip.style("visibility", "visible"); 
                                }
                            )
                         .on("mouseout", 
                                function() { 
                                    d3.select(this).style("fill", d3.rgb(d3.select(this).style("fill")).brighter()); 
                                    return self.tooltip.style("visibility", "hidden"); 
                                }
                            )
                         .on("mousemove", 
                                function() { 
                                    return self.tooltip.style("top", (d3.event.pageY+15) + "px").style("left", (d3.event.pageX-10)+"px");
                                }
                            )
                         .on("click", 
                                function(d) { 
                                    if (self.options.onClickFunction) {
                                        self.options.onClickFunction(this, d);
                                    }
                                    else {
                                        self.highlight(this, d); 
                                    }
                                }
                            );

            trackSet.exit()
                    .remove();

            trackSet.attr("d", function(d) { return self.featurePath(d); });



            
            self.xScale = self.xScale
                              .domain([self.options.start, self.options.start + self.options.length]);
            
            

            self.xAxis = self.xAxis
                             .scale(self.xScale);
            
            self.axisSvg.call(self.xAxis);
            
            self.resize();
            this.loading(true);
        },

        featurePath : function(feature) {
            var path = "";

            var coords = [];

            // draw an arrow for each location.
            for (var i=0; i<feature.feature_location.length; i++) {
                var location = feature.feature_location[i];

                var left = this.calcXCoord(location);
                var top = this.calcYCoord(location, feature.track);
                var height = this.calcHeight(location);
                var width = this.calcWidth(location);

                coords.push([left, left+width]);

                if (location[2] === '+')
                    path += this.featurePathRight(left, top, height, width) + " ";
                else
                    path += this.featurePathLeft(left, top, height, width) + " ";
            }

            // if there's more than one path, connect the arrows with line segments
            if (feature.feature_location.length > 1) {
                // sort them
                coords.sort(function(a, b) {
                    return a[0] - b[0];
                });

                var mid = this.calcYCoord(feature.feature_location[0], feature.track) + 
                          this.calcHeight(feature.feature_location[0])/2;

                for (var i=0; i<coords.length-1; i++) {
                    path += "M" + coords[i][1] + " " + mid + " L" + coords[i+1][0] + " " + mid + " Z ";
                }
                // connect the dots
            }
            return path;
        },

        featurePathRight : function(left, top, height, width) {
            // top left
            var path = "M" + left + " " + top;

            if (width > this.options.arrowSize) {
                // line to arrow top-back
                path += " L" + (left+(width-this.options.arrowSize)) + " " + top +
                // line to arrow tip
                        " L" + (left+width) + " " + (top+height/2) +
                // line to arrow bottom-back
                        " L" + (left+(width-this.options.arrowSize)) + " " + (top+height) +
                // line to bottom-left edge
                        " L" + left + " " + (top+height) + " Z";
            }
            else {
                // line to arrow tip
                path += " L" + (left+width) + " " + (top+height/2) +
                // line to arrow bottom
                        " L" + left + " " + (top+height) + " Z";
            }
            return path;
        },

        featurePathLeft : function(left, top, height, width) {
            // top right
            var path = "M" + (left+width) + " " + top;

            if (width > this.options.arrowSize) {
                // line to arrow top-back
                path += " L" + (left+this.options.arrowSize) + " " + top +
                // line to arrow tip
                        " L" + left + " " + (top+height/2) +
                // line to arrow bottom-back
                        " L" + (left+this.options.arrowSize) + " " + (top+height) +
                // line to bottom-right edge
                        " L" + (left+width) + " " + (top+height) + " Z";
            }
            else {
                // line to arrow tip
                path += " L" + left + " " + (top+height/2) +
                // line to arrow bottom
                        " L" + (left+width) + " " + (top+height) + " Z";
            }
            return path;
        },

        calcXCoord : function(location) {
            var x = location[1];
            if (location[2] === "-")
                x = location[1] - location[3] + 1;

            return (x - this.options.start) / this.options.length * this.options.svgWidth; // + this.options.leftMargin;    
        },

        calcYCoord : function(location, track) {
            return this.options.topMargin + this.options.trackMargin + (this.options.trackMargin * track) + (this.options.trackThickness * track);
        },

        calcWidth : function(location) {
            return Math.floor((location[3]-1) / this.options.length * this.options.svgWidth);
        },

        calcHeight : function(location) {
            return this.options.trackThickness;
        },

        isCenterFeature : function(feature) {
            return feature.feature_id === this.options.centerFeature;
        },

        isOperonFeature : function(feature) {
            return feature.isInOperon;
        },

        calcFillColor : function(feature) {
            if (feature.feature_id === this.options.centerFeature)
                return "#00F";
            if (feature.isInOperon === 1)
                return "#0F0";
            return "#F00";
            // should return color based on feature type e.g. CDS vs. PEG vs. RNA vs. ...
        },

        highlight : function(element, feature) {
            // unhighlight others - only highlight one at a time.
            // if ours is highlighted, recenter on it.

            
            this.recenter(feature);
            return; // skip the rest for now.

            // if (d3.select(element).attr("id") === feature.feature_id &&
            //  d3.select(element).classed("highlight")) {
            //  this.recenter(feature);
            // }
            // else {
            //  d3.select(".highlight")
            //    .classed("highlight", false)
            //    .style("fill", function(d) { return calcFillColor(d); } );

            //  d3.select(element)
            //    .classed("highlight", true)
            //    .style("fill", "yellow");
            // }
        },

        recenter : function(feature) {
            centerFeature = feature.feature_id;
            if (this.options.onClickUrl)
                this.options.onClickUrl(feature.feature_id);
            else
                this.update(true);
        },      

        resize : function() {
            var newWidth = Math.min(this.$elem.parent().width(), this.options.svgWidth);
            this.svg.attr("width", newWidth);
        },

        moveLeftEnd : function() {
            this.options.start = 0;
            this.update();
        },

        moveLeftStep : function() {
            this.options.start = Math.max(0, this.options.start - Math.ceil(this.options.length/2));
            this.update();
        },

        zoomIn : function() {
            this.options.start = Math.min(this.contigLength-Math.ceil(this.options.length/2), this.options.start + Math.ceil(this.options.length/4));
            this.options.length = Math.max(1, Math.ceil(this.options.length/2));
            this.update();
        },

        zoomOut : function() {
            this.options.length = Math.min(this.contigLength, this.options.length*2);
            this.options.start = Math.max(0, this.options.start - Math.ceil(this.options.length/4));
            if (this.options.start + this.options.length > this.contigLength)
                this.options.start = this.contigLength - this.options.length;
            this.update();
        },

        moveRightStep : function() {
            this.options.start = Math.min(this.options.start + Math.ceil(this.options.length/2), this.contigLength - this.options.length);
            this.update();
        },

        /**
         * Moves the viewport to the right end (furthest downstream) of the contig, maintaining the 
         * current view window size.
         * @method
         */
        moveRightEnd : function() {
            this.options.start = this.contigLength - this.options.length;
            this.update();
        },

        loading: function(doneLoading) {
            /*if (doneLoading)
                this.hideMessage();
            else
                this.showMessage("<img src='" + this.options.loadingImage + "'/>");*/
        },

        showMessage: function(message) {
            var span = $("<span/>").append(message);

            this.$messagePane.append(span);
            this.$messagePane.removeClass("kbwidget-hide-message");
        },

        hideMessage: function() {
            this.$messagePane.addClass("kbwidget-hide-message");
            this.$messagePane.empty();
        },

        getData: function() {
            return {
                type: "Contig",
                id: this.options.contig,
                workspace: this.options.workspaceID,
                title: "Contig Browser"
            };
        }

    };

};
/**
 * Output widget for visualization of genome annotation.
 * @author Roman Sutormin <rsutormin@lbl.gov>
 * @public
 */

(function( $, undefined ) {
    $.KBWidget({
        name: "kbaseGenomeView",
        parent: "kbaseAuthenticatedWidget",
        version: "1.0.0",
        ws_id: null,
        ws_name: null,
        token: null,
        width: 1150,
        options: {
            ws_id: null,
            ws_name: null
        },
        loadingImage: "static/kbase/images/ajax-loader.gif",
        wsUrl: window.kbconfig.urls.workspace,
        timer: null,

        init: function(options) {
            this._super(options);

            this.ws_name = options.ws_name;
            this.ws_id = options.ws_id;
            if (options.ws && options.id) {
                  this.ws_id = options.id;
                  this.ws_name = options.ws;
            }
            return this;
        },
        
        render: function() {
            var self = this;
        	var pref = this.uuid();

            var container = this.$elem;
            if (self.token == null) {
            	container.empty();
            	container.append("<div>[Error] You're not logged in</div>");
            	return;
            }

            var kbws = new Workspace(self.wsUrl, {'token': self.token});
            
            var ready = function() {
            	container.empty();
            	container.append("<div><img src=\""+self.loadingImage+"\">&nbsp;&nbsp;loading genome data...</div>");

            	kbws.get_objects([{ref: self.ws_name +"/"+ self.ws_id}], function(data) {
            		container.empty();
            		var type = data[0].info[2];
            		if (type.indexOf('-') >= 0) {
            			type = type.substring(0, type.indexOf('-'));
            		}
            		var reqType = 'KBaseGenomes.Genome';
            		if (!(type === reqType)) {
            			container.append('<p>[Error] Object is of type "' + type + '" but expected type is "' + reqType + '"</p>');
            			return;
            		}
            		var gnm = data[0].data;
            		var tabPane = $('<div id="'+pref+'tab-content">');
            		container.append(tabPane);
            		tabPane.kbaseTabs({canDelete : true, tabs : []});
            		var tabNames = ['Overview', 'Contigs', 'Genes'];
            		var tabIds = ['overview', 'contigs', 'genes'];
            		for (var i=0; i<tabIds.length; i++) {
            			var tabDiv = $('<div id="'+pref+tabIds[i]+'"> ');
            			tabPane.kbaseTabs('addTab', {tab: tabNames[i], content: tabDiv, canDelete : false, show: (i == 0)});
            		}

            		////////////////////////////// Overview Tab //////////////////////////////
            		$('#'+pref+'overview').append('<table class="table table-striped table-bordered" \
            				style="margin-left: auto; margin-right: auto;" id="'+pref+'overview-table"/>');
            		var overviewLabels = ['KBase ID', 'Name', 'Domain', 'Genetic code', 'Source', "Source ID", "GC", "Taxonomy", "Size"];
            		var tax = gnm.taxonomy;
            		if (tax == null)
            			tax = '';
            		var overviewData = [gnm.id, '<a href="/functional-site/#/genomes/'+self.ws_name+'/'+self.ws_id+'" target="_blank">'+gnm.scientific_name+'</a>', 
            		                    gnm.domain, gnm.genetic_code, gnm.source, gnm.source_id, gnm.gc_content, tax, gnm.dna_size];
            		var overviewTable = $('#'+pref+'overview-table');
            		for (var i=0; i<overviewData.length; i++) {
            			if (overviewLabels[i] === 'Taxonomy') {
            				overviewTable.append('<tr><td>' + overviewLabels[i] + '</td> \
            						<td><textarea style="width:100%;" cols="2" rows="5" readonly>'+overviewData[i]+'</textarea></td></tr>');
            			} else {
            				overviewTable.append('<tr><td>'+overviewLabels[i]+'</td> \
            						<td>'+overviewData[i]+'</td></tr>');
            			}
            		}

            		////////////////////////////// Genes Tab //////////////////////////////
            		$('#'+pref+'genes').append('<table cellpadding="0" cellspacing="0" border="0" id="'+pref+'genes-table" \
            		class="table table-bordered table-striped" style="width: 100%; margin-left: 0px; margin-right: 0px;"/>');
            		var genesData = [];
            		var geneMap = {};
            		var contigMap = {};

            		if (gnm.contig_ids && gnm.contig_lengths && gnm.contig_ids.length == gnm.contig_lengths.length) {
            			for (var pos in gnm.contig_ids) {
            				var contigId = gnm.contig_ids[pos];
            				var contigLen = gnm.contig_lengths[pos];
            				contigMap[contigId] = {name: contigId, length: contigLen, genes: []};
            			}
            		}
            		
            		function geneEvents() {
            			$('.'+pref+'gene-click').unbind('click');
            			$('.'+pref+'gene-click').click(function() {
            				var geneId = [$(this).data('geneid')];
            				showGene(geneId);
            			});            
            		}

            		for (var genePos in gnm.features) {
            			var gene = gnm.features[genePos];
            			var geneId = gene.id;
            			var contigName = null;
            			var geneStart = null;
            			var geneDir = null;
            			var geneLen = null;
            			if (gene.location && gene.location.length > 0) {
            				contigName = gene.location[0][0];
            				geneStart = gene.location[0][1];
            				geneDir = gene.location[0][2];
            				geneLen = gene.location[0][3];
            			}
            			var geneType = gene.type;
            			var geneFunc = gene['function'];
            			if (!geneFunc)
            				geneFunc = '-';
            			genesData[genesData.length] = {id: '<a class="'+pref+'gene-click" data-geneid="'+geneId+'">'+geneId+'</a>', 
            					contig: contigName, start: geneStart, dir: geneDir, len: geneLen, type: geneType, func: geneFunc};
            			geneMap[geneId] = gene;
            			var contig = contigMap[contigName];
            			if (contigName != null && !contig) {
            				contig = {name: contigName, length: 0, genes: []};
            				contigMap[contigName] = contig;
            			}
            			if (contig) {
            				var geneStop = Number(geneStart);
            				if (geneDir == '+')
            					geneStop += Number(geneLen);
            				if (contig.length < geneStop) {
            					contig.length = geneStop;
            				}
            				contig.genes.push(gene);
            			}
            		}
            		var genesSettings = {
            				"sPaginationType": "full_numbers",
            				"iDisplayLength": 10,
            				"aaSorting": [[ 1, "asc" ], [2, "asc"]],
            				"aoColumns": [
            				              {sTitle: "Gene ID", mData: "id"}, 
            				              {sTitle: "Contig", mData: "contig"},
            				              {sTitle: "Start", mData: "start"},
            				              {sTitle: "Strand", mData: "dir"},
            				              {sTitle: "Length", mData: "len"},
            				              {sTitle: "Type", mData: "type"},
            				              {sTitle: "Function", mData: "func"}
            				              ],
            				              "aaData": [],
            				              "oLanguage": {
            				            	  "sSearch": "Search gene:",
            				            	  "sEmptyTable": "No genes found."
            				              },
            				              "fnDrawCallback": geneEvents
            		};
            		var genesTable = $('#'+pref+'genes-table').dataTable(genesSettings);
            		genesTable.fnAddData(genesData);

            		////////////////////////////// Contigs Tab //////////////////////////////
            		$('#'+pref+'contigs').append($('<div>').append('<table cellpadding="0" cellspacing="0" border="0" id="'+pref+'contigs-table" '+
            			'class="table table-bordered table-striped" style="width: 100%; margin-left: 0px; margin-right: 0px;"/>'));
            		$('#'+pref+'contigs').append($('<div style="margin: 14px 0px 0px 0px">').append($('<span style="font-size: 75%; color: #898989;">')
							.append('(only contigs containing features are shown)')));
            		var contigsData = [];

            		function contigEvents() {
            			$('.'+pref+'contig-click').unbind('click');
            			$('.'+pref+'contig-click').click(function() {
            				var contigId = [$(this).data('contigname')];
            				showContig(contigId);
            			});            
            		}

            		for (var key in contigMap) {
            			var contig = contigMap[key];
            			contigsData.push({name: '<a class="'+pref+'contig-click" data-contigname="'+contig.name+'">'+contig.name+'</a>', 
            				length: contig.length, genecount: contig.genes.length});

            		}
            		var contigsSettings = {
            				"sPaginationType": "full_numbers",
            				"iDisplayLength": 10,
            				"aaSorting": [],
            				"aoColumns": [
            				              {sTitle: "Contig name", mData: "name"},
            				              {sTitle: "Length", mData: "length"},
            				              {sTitle: "Genes", mData: "genecount"}
            				              ],
            				              "aaData": [],
            				              "oLanguage": {
            				            	  "sSearch": "Search contig:",
            				            	  "sEmptyTable": "No contigs found."
            				              },
            				              "fnDrawCallback": contigEvents
            		};
            		var contigsTable = $('#'+pref+'contigs-table').dataTable(contigsSettings);
            		contigsTable.fnAddData(contigsData);

            		////////////////////////////// New Tab //////////////////////////////
            		var lastElemTabNum = 0;

            		function openTabGetId(tabName) {
            			if (tabPane.kbaseTabs('hasTab', tabName))
            				return null;
            			lastElemTabNum++;
            			var tabId = '' + pref + 'elem' + lastElemTabNum;
            			var tabDiv = $('<div id="'+tabId+'"> ');
            			tabPane.kbaseTabs('addTab', {tab: tabName, content: tabDiv, canDelete : true, show: (i == 0), deleteCallback: function(name) {
            				tabPane.kbaseTabs('removeTab', name);
            			}});
            			return tabId;
            		}

            		function showGene(geneId) {
            			var tabId = openTabGetId(geneId);
            			if (tabId == null) {
            				tabPane.kbaseTabs('showTab', geneId);
            				return;
            			}
            			var gene = geneMap[geneId];
            			var contigName = null;
            			var geneStart = null;
            			var geneDir = null;
            			var geneLen = null;
            			if (gene.location && gene.location.length > 0) {
            				contigName = gene.location[0][0];
            				geneStart = gene.location[0][1];
            				geneDir = gene.location[0][2];
            				geneLen = gene.location[0][3];
            			}
            			var geneType = gene.type;
            			var geneFunc = gene['function'];
            			var geneAnn = '';
            			if (gene['annotations'])
            				geneAnn = gene['annotations'];
            			$('#'+tabId).append('<table class="table table-striped table-bordered" \
            					style="margin-left: auto; margin-right: auto;" id="'+tabId+'-table"/>');
            			var elemLabels = ['Gene ID', 'Contig name', 'Gene start', 'Strand', 'Gene length', "Gene type", "Function", "Annotations"];
            			var elemData = ['<a href="/functional-site/#/genes/'+self.ws_name+'/'+self.ws_id+'/'+geneId+'" target="_blank">'+geneId+'</a>', '<a class="'+tabId+'-click2" data-contigname="'+contigName+'">' + contigName + '</a>', geneStart, geneDir, geneLen, geneType, geneFunc, geneAnn];
            			var elemTable = $('#'+tabId+'-table');
            			for (var i=0; i<elemData.length; i++) {
            				if (elemLabels[i] === 'Function') {
            					elemTable.append('<tr><td>' + elemLabels[i] + '</td> \
            							<td><textarea style="width:100%;" cols="2" rows="3" readonly>'+elemData[i]+'</textarea></td></tr>');
            				} else if (elemLabels[i] === 'Annotations') {
            					elemTable.append('<tr><td>' + elemLabels[i] + '</td> \
            							<td><textarea style="width:100%;" cols="2" rows="3" readonly>'+elemData[i]+'</textarea></td></tr>');
            				} else {
            					elemTable.append('<tr><td>'+elemLabels[i]+'</td> \
            							<td>'+elemData[i]+'</td></tr>');
            				}
            			}
            			$('.'+tabId+'-click2').click(function() {
            				showContig($(this).data('contigname'));
            			});
            			tabPane.kbaseTabs('showTab', geneId);
            		}

            		function showContig(contigName) {
            			var tabId = openTabGetId(contigName);
            			if (tabId == null) {
            				tabPane.kbaseTabs('showTab', contigName);
            				return;
            			}
            			var contig = contigMap[contigName];
            			$('#'+tabId).append('<table class="table table-striped table-bordered" \
            					style="margin-left: auto; margin-right: auto;" id="'+tabId+'-table"/>');
            			var elemLabels = ['Contig name', 'Length', 'Gene count'];
            			var elemData = [contigName, contig.length, contig.genes.length];
            			var elemTable = $('#'+tabId+'-table');
            			for (var i=0; i<elemData.length; i++) {
            				elemTable.append('<tr><td>'+elemLabels[i]+'</td><td>'+elemData[i]+'</td></tr>');
            			}
            			var cgb = new ContigBrowserPanel();
            			cgb.data.options.contig = contig;
            			cgb.data.options.svgWidth = self.width - 28;
            			cgb.data.options.onClickFunction = function(svgElement, feature) {
            				showGene(feature.feature_id);
            			};
            			cgb.data.options.token = self.token;
            			cgb.data.$elem = $('<div style="width:100%; height: 200px;"/>');
            			cgb.data.$elem.show(function(){
            				cgb.data.update();
            			});
            			$('#'+tabId).append(cgb.data.$elem);
            			cgb.data.init();
            			tabPane.kbaseTabs('showTab', contigName);
            		}

            		function logObject(obj) {
            			var text = "";
            			for (var key in obj) {
            				var value = "" + obj[key];
            				if (value.indexOf("function ") == 0)
            					continue;
            				text += "" + key + "->" + value + " ";
            			}
            		}

            	}, function(data) {
            		container.empty();
            		container.append('<p>[Error] ' + data.error.message + '</p>');
            	});            	
            };
            ready();
            return this;
        },
        
        getData: function() {
        	return {
        		type: "NarrativeTempCard",
        		id: this.ws_name + "." + this.ws_id,
        		workspace: this.ws_name,
        		title: "Temp Widget"
        	};
        },

        loggedInCallback: function(event, auth) {
            this.token = auth.token;
            this.render();
            return this;
        },

        loggedOutCallback: function(event, auth) {
            this.token = null;
            this.render();
            return this;
        },
        
        uuid: function() {
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, 
                function(c) {
                    var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);
                    return v.toString(16);
                });
        }
    });
})( jQuery );

/**
 * Output widget for visualization of genome annotation.
 * @author Roman Sutormin <rsutormin@lbl.gov>
 * @public
 */

(function( $, undefined ) {
    $.KBWidget({
        name: "kbaseContigSetView",
        parent: "kbaseAuthenticatedWidget",
        version: "1.0.0",
        ws_id: null,
        ws_name: null,
        token: null,
        width: 1150,
        options: {
            ws_id: null,
            ws_name: null
        },
        loadingImage: "static/kbase/images/ajax-loader.gif",
        wsUrl: window.kbconfig.urls.workspace,
        timer: null,

        init: function(options) {
            this._super(options);

            this.ws_name = options.ws_name;
            this.ws_id = options.ws_id;
            if (options.ws && options.id) {
                  this.ws_id = options.id;
                  this.ws_name = options.ws;
            }
            return this;
        },
        
        render: function() {
            var self = this;
        	var pref = this.uuid();

            var container = this.$elem;
            if (self.token == null) {
            	container.empty();
            	container.append("<div>[Error] You're not logged in</div>");
            	return;
            }

            var kbws = new Workspace(self.wsUrl, {'token': self.token});
            
            var ready = function() {
            	container.empty();
            	container.append("<div><img src=\""+self.loadingImage+"\">&nbsp;&nbsp;loading genome data...</div>");

            	kbws.get_object_subset([{ref: self.ws_name +"/"+ self.ws_id, included: ['contigs/[*]/id', 'contigs/[*]/length', 'id', 'name', 'source', 'source_id', 'type']}], function(data) {
            		container.empty();
            		var cs = data[0].data;
            		console.log(cs);
            		var tabPane = $('<div id="'+pref+'tab-content">');
            		container.append(tabPane);
            		tabPane.kbaseTabs({canDelete : true, tabs : []});
            		var tabNames = ['Overview', 'Contigs'];
            		var tabIds = ['overview', 'contigs'];
            		for (var i=0; i<tabIds.length; i++) {
            			var tabDiv = $('<div id="'+pref+tabIds[i]+'"> ');
            			tabPane.kbaseTabs('addTab', {tab: tabNames[i], content: tabDiv, canDelete : false, show: (i == 0)});
            		}

            		////////////////////////////// Overview Tab //////////////////////////////
            		$('#'+pref+'overview').append('<table class="table table-striped table-bordered" \
            				style="margin-left: auto; margin-right: auto;" id="'+pref+'overview-table"/>');
            		var overviewLabels = ['KBase ID', 'Name', 'Object ID', 'Source', "Source ID", "Type"];
            		var overviewData = [cs.id, cs.name, self.ws_id, cs.source, cs.source_id, cs.type];
            		var overviewTable = $('#'+pref+'overview-table');
            		for (var i=0; i<overviewData.length; i++) {
            			overviewTable.append('<tr><td>'+overviewLabels[i]+'</td> \
            					<td>'+overviewData[i]+'</td></tr>');
            		}

            		////////////////////////////// Contigs Tab //////////////////////////////
            		$('#'+pref+'contigs').append('<table cellpadding="0" cellspacing="0" border="0" id="'+pref+'contigs-table" \
            		class="table table-bordered table-striped" style="width: 100%; margin-left: 0px; margin-right: 0px;"/>');
            		var contigsData = [];

            		for (var pos in cs.contigs) {
            			var contig = cs.contigs[pos];
            			contigsData.push({name: contig.id, length: contig.length});
            		}
            		var contigsSettings = {
            				"sPaginationType": "full_numbers",
            				"iDisplayLength": 10,
            				"aaSorting": [[ 1, "desc" ]],
            				"aoColumns": [
            				              {sTitle: "Contig name", mData: "name"},
            				              {sTitle: "Length", mData: "length"}
            				              ],
            				              "aaData": [],
            				              "oLanguage": {
            				            	  "sSearch": "Search contig:",
            				            	  "sEmptyTable": "No contigs found."
            				              }
            		};
            		var contigsTable = $('#'+pref+'contigs-table').dataTable(contigsSettings);
            		contigsTable.fnAddData(contigsData);

            	}, function(data) {
            		container.empty();
            		container.append('<p>[Error] ' + data.error.message + '</p>');
            	});            	
            };
            ready();
            return this;
        },
        
        getData: function() {
        	return {
        		type: "NarrativeTempCard",
        		id: this.ws_name + "." + this.ws_id,
        		workspace: this.ws_name,
        		title: "Temp Widget"
        	};
        },

        loggedInCallback: function(event, auth) {
            this.token = auth.token;
            this.render();
            return this;
        },

        loggedOutCallback: function(event, auth) {
            this.token = null;
            this.render();
            return this;
        },
        
        uuid: function() {
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, 
                function(c) {
                    var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);
                    return v.toString(16);
                });
        }
    });
})( jQuery );

/**
 * Output widget for visualization of comparison between proteomes of two bacterial genomes.
 * @author Roman Sutormin <rsutormin@lbl.gov>
 * @public
 */

(function( $, undefined ) {

$.KBWidget({
    name: "GenomeComparisonWidget",
    parent: "kbaseAuthenticatedWidget",
    version: "1.0.0",
	ws_name: null,
	ws_id: null,
    options: {
    	ws_name: null,
    	ws_id: null
    },

    wsUrl: window.kbconfig.urls.workspace,
    jobSrvUrl: window.kbconfig.urls.user_and_job_state,
    cmpImgUrl: window.kbconfig.urls.genomeCmp.replace('jsonrpc', 'image'),
    loadingImage: "static/kbase/images/ajax-loader.gif",
    timer: null,
    geneRows: 21,
    geneRowH: 21,
	pref: null,
    size: 500,
    imgI: 0,
    imgJ: 0,
    scale: null,
    stepPercent: 25,
    geneI: -1,
    dirI: 1,
    geneJ: -1,
    dirJ: 1,
    cmp: null,
    cmp_ref: null,
    selectHitsMessage: 'Move mouse over hits in map and select hit to visualize region around it',
    genome1wsName: null,
    genome1objName: null,
    genome2wsName: null,
    genome2objName: null,

    init: function(options) {
        this._super(options);
        this.ws_name = options.ws_name;
        this.ws_id = options.ws_id;
    	this.pref = this.uuid();
        return this;
    },
    
    render: function() {
        var self = this;
        var container = this.$elem;
    	container.empty();
        if (!self.authToken()) {
        	container.append("<div>[Error] You're not logged in</div>");
        	return;
        }

        var kbws = new Workspace(this.wsUrl, {'token': self.authToken()});
        //var jobSrv = new UserAndJobState(this.jobSrvUrl, {'token': self.authToken()});

        var dataIsReady = function() {
        	var cmp_ref = self.cmp_ref;
        	if (!cmp_ref)
        		cmp_ref = self.ws_name + "/" + self.ws_id;
            kbws.get_objects([{ref: cmp_ref}], function(data) {
            	self.cmp = data[0].data;
            	var info = data[0].info;
            	self.cmp_ref = info[6] + "/" + info[0] + "/" + info[4];
            	cmpIsLoaded();
        	}, function(data) {
            	var tdElem = $('#'+self.pref+'job');
				tdElem.html("Error accessing comparison object: " + data.error.message);
            });
        };
        var cmpIsLoaded = function() {
        	container.empty();
            container.append("<div><img src=\""+self.loadingImage+"\">&nbsp;&nbsp;loading comparison data...</div>");
        	kbws.get_object_subset([{ref: self.cmp.genome1ref, included: ["scientific_name"]},
        	                        {ref: self.cmp.genome2ref, included: ["scientific_name"]}], function(data) {
        		self.genome1wsName = data[0].info[7];
        		self.genome1objName = data[0].info[1];
            	var genome1id = data[0].data.scientific_name;
        		self.genome2wsName = data[1].info[7];
            	self.genome2objName = data[1].info[1];
            	var genome2id = data[1].data.scientific_name;
        		container.empty();
            	var table = $('<table/>')
            		.addClass('table table-bordered')
            		.css({'margin-left': 'auto', 'margin-right': 'auto'});
            	container.append(table);
            	var createTableRow = function(name, value) {
            		return "<tr><td>" + name + "</td><td>" + value + "</td></tr>";
            	};
            	var count1hits = 0;
    			for (var i in self.cmp.data1) {
    				if (self.cmp.data1[i].length > 0)
    					count1hits++;
    			}
            	var count2hits = 0;
    			for (var i in self.cmp.data2) {
    				if (self.cmp.data2[i].length > 0)
    					count2hits++;
    			}
            	table.append(createTableRow("Comparison object", self.ws_id));
            	table.append(createTableRow("Genome1 (x-axis)", '<a href="/functional-site/#/genomes/'+self.genome1wsName+'/'+self.genome1objName+'" target="_blank">' + genome1id + '</a>' +
            			" (" + self.cmp.proteome1names.length + " genes, " + count1hits + " have hits)"));
            	table.append(createTableRow("Genome2 (y-axis)", '<a href="/functional-site/#/genomes/'+self.genome2wsName+'/'+self.genome2objName+'" target="_blank">' + genome2id + '</a>' + 
            			" (" + self.cmp.proteome2names.length + " genes, " + count2hits + " have hits)"));
            	if (self.scale == null)
            		self.scale = self.size * 100 / Math.max(self.cmp.proteome1names.length, self.cmp.proteome2names.length);
            	var st = ' style="border: 0px; margin: 0px; padding: 0px;"';
            	var sr = ' style="border: 0px; margin: 0px; padding: 0px;"';
            	var sd = ' style="border: 0px; margin: 0px; padding: 1px;"';
            	var sb = ' style="width: 27px;"';
            	table.append('<tr><td>' + 
            			'<center>' +
            			'<button id="'+self.pref+'btn-zi">Zoom +</button>'+
            			'&nbsp;' + 
            			'<button id="'+self.pref+'btn-zo">Zoom -</button>'+
            			'<br><br><table'+st+'><tr'+sr+'><td'+sd+'>' + 
            			'<button id="'+self.pref+'btn-mul"'+sb+'>&#8598;</button>'+
            			'</td><td'+sd+'>' +
            			'<button id="'+self.pref+'btn-mu"'+sb+'>&#8593;</button>'+
            			'</td><td'+sd+'>' + 
            			'<button id="'+self.pref+'btn-mur"'+sb+'>&#8599;</button>'+
            			'</td></tr><tr'+sr+'><td'+sd+'>' +
            			'<button id="'+self.pref+'btn-ml"'+sb+'>&#8592;</button>'+
            			'</td><td'+sd+'/><td'+sd+'>' +
            			'<button id="'+self.pref+'btn-mr"'+sb+'>&#8594;</button>'+
            			'</td></tr><tr'+sr+'><td'+sd+'>' + 
            			'<button id="'+self.pref+'btn-mdl"'+sb+'>&#8601;</button>'+
            			'</td><td'+sd+'>' +
            			'<button id="'+self.pref+'btn-md"'+sb+'>&#8595;</button>'+
            			'</td><td'+sd+'>' + 
            			'<button id="'+self.pref+'btn-mdr"'+sb+'>&#8600;</button>'+
            			'</td></tr></table></center>' +
            			'</td><td><table'+st+'><tr'+sr+'>' +
            			'<td width="'+(self.size+100)+'"'+sd+'>'+
            			'<div style="position:relative">'+
            			'<img id="'+self.pref+'img" src=""/>'+
            			'<div id="'+self.pref+'rect" style="position:absolute; z-index: 2; border: 1px; border-style: solid; border-color: red; background-color: transparent; display:none; pointer-events:none;"/>'+
            			'</div>'+
            			'</td>'+
            			'<td width="300"'+sd+'><table id="'+self.pref+'genes"'+st+'><tr'+st+'><td'+st+'>'+self.selectHitsMessage+'</td></tr></table></td></tr></table></td></tr>');
            	self.refreshImage();
            	self.refreshGenes();
            	var zoom = function(mult) {
            		var xSize = Math.min(self.size, self.cmp.proteome1names.length * self.scale / 100);
            		var ySize = Math.min(self.size, self.cmp.proteome2names.length * self.scale / 100);
            		var centerI = self.imgI + xSize * 50 / self.scale;
            		var centerJ = self.imgJ + ySize * 50 / self.scale;
                    if (self.size * 100 / (self.scale * mult) > 1.1 * 
                    		Math.max(self.cmp.proteome1names.length, self.cmp.proteome2names.length)) {
                    	return;
                    }
            		self.scale *= mult;
            		self.imgI = centerI - self.size * 50 / self.scale;
            		self.imgJ = centerJ - self.size * 50 / self.scale;
            		self.refreshImage();
            	};
            	$('#'+self.pref+'btn-zi').click(function() {
            		zoom(1.5);
            	});
            	$('#'+self.pref+'btn-zo').click(function() {
            		zoom(1.0/1.5);
            	});
            	var move = function(yUp,xRt) {
            		self.imgJ += yUp * self.size * self.stepPercent / self.scale;
            		self.imgI += xRt * self.size * self.stepPercent / self.scale;
            		self.refreshImage();
            	};
            	$('#'+self.pref+'btn-mul').click(function() {
            		move(1,-1);
            	});
            	$('#'+self.pref+'btn-mu').click(function() {
            		move(1,0);
            	});
            	$('#'+self.pref+'btn-mur').click(function() {
            		move(1,1);
            	});
            	$('#'+self.pref+'btn-ml').click(function() {
            		move(0,-1);
            	});
            	$('#'+self.pref+'btn-mr').click(function() {
            		move(0,1);
            	});
            	$('#'+self.pref+'btn-mdl').click(function() {
            		move(-1,-1);
            	});
            	$('#'+self.pref+'btn-md').click(function() {
            		move(-1,0);
            	});
            	$('#'+self.pref+'btn-mdr').click(function() {
            		move(-1,1);
            	});
            	
            	var hitSearch = function(e) {
            		var scrX = e.pageX;
            		var scrY = e.pageY;
            		if ((!scrX) && (!scrY) && e.clientX && e.clientY) {
            			scrX = e.clientX + document.body.scrollLeft
            				+ document.documentElement.scrollLeft;
            			scrY = e.clientY + document.body.scrollTop
            				+ document.documentElement.scrollTop;
            		}
            		var parentOffset = $('#'+self.pref+'img').offset();
            		var relX = scrX - parentOffset.left - 35;
            		var relY = scrY - parentOffset.top;
            		var xSize = Math.min(self.size, self.cmp.proteome1names.length * self.scale / 100);
            		var ySize = Math.min(self.size, self.cmp.proteome2names.length * self.scale / 100);
            		var bestDist = -1;
            		var bestI = -1;
            		var bestJ = -1;
            		if (relX >= 0 && relX <= xSize && relY >= 0 && relY <= ySize) {
            			for (var i in self.cmp.data1) {
            				var x = (i - self.imgI) * self.scale / 100;
                    		if (x >= 0 && x < xSize && Math.abs(relX - x) <= 2) {
                    			//alert("x=" + x + ", i=" + i);
                				for (var tuplePos in self.cmp.data1[i]) {
                					var tuple = self.cmp.data1[i][tuplePos];
                					var j = tuple[0];
                    				var y = ySize + 1 - (j - self.imgJ) * self.scale / 100;
                            		if (y >= 0 && y < ySize && Math.abs(relY - y) <= 2) {
                            			var dist = Math.sqrt((relX - x) * (relX - x) + (relY - y) * (relY - y));
                            			if (bestDist < 0 || bestDist > dist) {
                            				bestDist = dist;
                            				bestI = i;
                            				bestJ = j;
                            			}
                            		}
                				}
                    		}
            			}
            		}
            		return {scrX: scrX, scrY: scrY, relX: relX, relY: relY, bestDist: bestDist, bestI: bestI, bestJ: bestJ};
            	};
            	            	
            	$('#'+self.pref+'img').hover(
            			function() {
            				$('#widget-tooltip').show();
            			},
            			function() {
            				$('#widget-tooltip').hide();
            			}
            	).mousemove(function(e) {
            		var hit = hitSearch(e);
    				var tip = $('#widget-tooltip');
            		if (Number(hit.bestDist) >= 0) {
            			var msg = 'X-axis: ' + self.cmp.proteome1names[Number(hit.bestI)] + 
            				', Y-axis: ' + self.cmp.proteome2names[Number(hit.bestJ)] +
            				'<br>click to see detailes...';
            			tip.html(msg);
            			tip.css({
            				'top': (Number(hit.scrY) + 10) + 'px',
            				'left': (Number(hit.scrX) + 10) + 'px'
            			});
            			tip.show();
            			return;
            		}
    				tip.hide();
        			tip.html('');
            	}).click(function(e) {
            		var hit = hitSearch(e);
            		if (Number(hit.bestDist) >= 0) {
            			self.geneI = Number(hit.bestI);
            			self.geneJ = Number(hit.bestJ);
            		} else {
            			self.geneI = -1;
            			self.geneJ = -1;
            		}
            		self.refreshGenes();
            	});
            }, function(data) {
            	var tdElem = $('#'+self.pref+'job');
				tdElem.html("Error accessing genome objects: " + data.error.message);
            });
        };
    	dataIsReady();
        return this;
    },

	refreshDetailedRect: function() {
        var self = this;
		var rect = $('#'+self.pref+'rect').append(rect);
		if (self.geneI < 0 || self.geneJ < 0) {
			rect.hide();
			return;
		}
		var parentOffset = $('#'+self.pref+'img').offset();
		var x = (self.geneI - self.imgI) * self.scale / 100;
		var y = (self.geneJ - self.imgJ) * self.scale / 100;
		if (x < 0 || x >= self.size || y < 0 || y >= self.size) {
			rect.hide();
			return;
		}
		var half = self.geneRows * self.scale / 200;
		if (half < 1)
			half = 1;
		var ySize = Math.min(self.size, self.cmp.proteome2names.length * self.scale / 100);
		var scrX = x + 35 - half - 1;  // + parentOffset.left 
		var scrY = ySize + 1 - y - half - 1;  // + parentOffset.top;
		rect.css({
			'top': Math.round(scrY) + 'px',
			'left': Math.round(scrX) + 'px',
			'width': (1 + half * 2) + 'px',
			'height': (1 + half * 2) + 'px'
		});
		rect.show();
	},

	refreshImage: function() {
        var self = this;
		var maxI = self.imgI + self.size * 100 / self.scale;
		if (maxI > self.cmp.proteome1names.length)
    		maxI = self.cmp.proteome1names.length;
		var maxJ = self.imgJ + self.size * 100 / self.scale;
		if (maxJ > self.cmp.proteome2names.length)
			maxJ = self.cmp.proteome2names.length;
		self.imgI = maxI - self.size * 100 / self.scale;
		self.imgJ = maxJ - self.size * 100 / self.scale;
		if (self.imgI < 0)
			self.imgI = 0;
		if (self.imgJ < 0)
			self.imgJ = 0;
		self.imgI = Math.round(self.imgI);
		self.imgJ = Math.round(self.imgJ);
		var img = self.cmpImgUrl + "?ws=" + self.ws_name + "&id=" + self.ws_id + "&x=" + self.imgI + 
				"&y=" + self.imgJ + "&w=" + self.size + "&sp=" + self.scale + "&token=" + encodeURIComponent(self.authToken());
		$('#'+self.pref+'img').attr('src', img);
		self.refreshDetailedRect();
	},

	refreshGenes: function() {
        var self = this;
		var tbl = $('#'+self.pref+'genes');
		tbl.empty();
    	var st = ' style="border: 0px; margin: 0px; padding: 0px;"';
		if (self.geneI < 0 || self.geneJ < 0) {
			self.refreshDetailedRect();
			tbl.append('<tr'+st+'><td'+st+'>' + self.selectHitsMessage + '</td></tr>');
			return;
		}
		var half = Math.floor(self.geneRows / 2);
		var rowHalf = Math.floor(self.geneRowH / 2);
		var svg = null;
		var arrowI = '&#8595;';
		var arrowJ = '&#8595;';
		if (self.dirI < 0)
			arrowI = '&#8593;';
		if (self.dirJ < 0)
			arrowJ = '&#8593;';
    	var sr = ' style="border: 0px; margin: 0px; padding: 0px;"';
    	var sd = ' style="border: 0px; margin: 0px; padding: 1px;"';
    	var sb = ' style="width: 27px;"';
		tbl.append('<tr'+sr+'>'+
				'<td rowspan="'+(self.geneRows+2)+'" width="10" style="border: 0px; margin: 0px; padding: 0px; text-align: center; vertical-align: middle;"><button id="'+self.pref+'btn-dirI"'+sb+'>'+arrowI+'</button></td>'+
				'<td style="border: 0px; margin: 0px; padding: 0px; text-align: center; vertical-align: middle;"><button id="'+self.pref+'btn-i-up"'+sb+'>&#8593;</button></td>'+
				'<td style="border: 0px; margin: 0px; padding: 0px; text-align: center; vertical-align: middle;"><button id="'+self.pref+'btn-both-up"'+sb+'>&#8593;&#8593;</button></td>'+
				'<td style="border: 0px; margin: 0px; padding: 0px; text-align: center; vertical-align: middle;"><button id="'+self.pref+'btn-j-up"'+sb+'>&#8593;</button></td>'+
				'<td rowspan="'+(self.geneRows+2)+'" width="10" style="border: 0px; margin: 0px; padding: 0px; text-align: center; vertical-align: middle;"><button id="'+self.pref+'btn-dirJ"'+sb+'>'+arrowJ+'</button></td>'+
				'</tr>');
		var svgLines = '';
		var svgLineEnds = []; // [{x1:...,y1:...,x2:...,y2:...,gene1:...,gene2:...,bit_score:...,percent_of_bbh:...}] 
		for (var rowPos = 0; rowPos < self.geneRows; rowPos++) {
			var i = self.geneI + (rowPos - half) * self.dirI;
			var j = self.geneJ + (rowPos - half) * self.dirJ;
			var labelI = "-";
			var labelJ = "-";
			if (i >= 0 && i < self.cmp.proteome1names.length)
				labelI = self.cmp.proteome1names[i];
			if (j >= 0 && j < self.cmp.proteome2names.length)
				labelJ = self.cmp.proteome2names[j];
			if (rowPos == half) {
				labelI = '<font color="red">' + labelI + '</font>';
				labelJ = '<font color="red">' + labelJ + '</font>';
			}
			var tdSt = ' style="border: 0px; margin: 0px; padding: 0px; font-size: 12px; height: '+self.geneRowH+'px; text-align: center; vertical-align: middle;"';
			var tds = '<td '+tdSt+'>' + '<a href="/functional-site/#/genes/'+self.genome1wsName+'/'+self.genome1objName+'/'+self.cmp.proteome1names[i]+'" target="_blank">' + labelI + '</a>' + '</td>';
			if (rowPos == 0)
				tds += '<td id="'+self.pref+'glinks" rowspan="'+self.geneRows+'" width="30"'+sr+'/>';
			tds += '<td '+tdSt+'>' + '<a href="/functional-site/#/genes/'+self.genome2wsName+'/'+self.genome2objName+'/'+self.cmp.proteome2names[j]+'" target="_blank">' + labelJ + '</a>' + '</td>';
			tbl.append('<tr'+sr+'>'+tds+'</tr>');
			var y1 = rowPos * (self.geneRowH + 0.2) + rowHalf;
			for (var tuplePos in self.cmp.data1[i]) {
				var tuple = self.cmp.data1[i][tuplePos];
				var hitJ = tuple[0];
				var hitPos = (hitJ - self.geneJ) * self.dirJ + half;
				if (hitPos >= 0 && hitPos < self.geneRows) {
					var y2 = hitPos * (self.geneRowH + 0.2) + rowHalf;
					var dash = '';
					if (tuple[2] < 100)
						dash = ' stroke-dasharray="5, 5"';
					svgLines += '<line x1="0" y1="'+y1+'" x2="30" y2="'+y2+'"'+dash+' style="stroke:rgb(0,0,0);stroke-width:1"/>';
					svgLineEnds.push({x1:0,y1:y1,x2:30,y2:y2,gene1:self.cmp.proteome1names[i],gene2:self.cmp.proteome2names[hitJ],bit_score:tuple[1],percent_of_bbh:tuple[2]});
				}
			}
		}
		tbl.append('<tr'+sr+'>'+
				'<td style="border: 0px; margin: 0px; padding: 0px; text-align: center; vertical-align: middle;"><button id="'+self.pref+'btn-i-dn"'+sb+'>&#8595;</button></td>'+
				'<td style="border: 0px; margin: 0px; padding: 0px; text-align: center; vertical-align: middle;"><button id="'+self.pref+'btn-both-dn"'+sb+'>&#8595;&#8595;</button></td>'+
				'<td style="border: 0px; margin: 0px; padding: 0px; text-align: center; vertical-align: middle;"><button id="'+self.pref+'btn-j-dn"'+sb+'>&#8595;</button></td>'+
				'</tr>');
		var svgTd = $('#'+self.pref+'glinks');
		var svgH = self.geneRows * self.geneRowH;
		svgTd.append('<svg width="30" height="'+svgH+'">'+svgLines+'</svg>');
		svgTd.hover(
    			function() {
    				$('#widget-tooltip').show();
    			},
    			function() {
    				$('#widget-tooltip').hide();
    			}
    	).mousemove(function(e) {
    		var scrX = e.pageX;
    		var scrY = e.pageY;
    		if ((!scrX) && (!scrY) && e.clientX && e.clientY) {
    			scrX = e.clientX + document.body.scrollLeft
    				+ document.documentElement.scrollLeft;
    			scrY = e.clientY + document.body.scrollTop
    				+ document.documentElement.scrollTop;
    		}
    		var parentOffset = svgTd.offset();
    		var x = scrX - parentOffset.left;
    		var y = scrY - parentOffset.top;
    		var minDist = -1;
    		var bestLine = null;
    		for (var n in svgLineEnds) {
    			var l = svgLineEnds[n];
    			// [{x1:...,y1:...,x2:...,y2:...,gene1:...,gene2:...,bit_score:...,percent_of_bbh:...}] 
    			var dist = Math.abs((l.y2-l.y1)*x-(l.x2-l.x1)*y+l.x2*l.y1-l.y2*l.x1) / 
    					Math.sqrt((l.y2-l.y1)*(l.y2-l.y1)+(l.x2-l.x1)*(l.x2-l.x1));
    			if ((minDist < 0) || (dist < minDist)) {
    				minDist = dist;
    				bestLine = l;
    			}
    		}
			var tip = $('#widget-tooltip');
			if (minDist && minDist <= 2) {
    			var msg = 'Gene1: ' + bestLine.gene1 + '<br>Gene2: ' + bestLine.gene2 + '<br>' + 
    					'Bit-score: ' + bestLine.bit_score + '<br>Percent of related BBH bit-score: ' + bestLine.percent_of_bbh + '%';
    			tip.html(msg);
    			tip.css({
    				'top': (Number(scrY) + 10) + 'px',
    				'left': (Number(scrX) + 10) + 'px'
    			});
    			tip.show();
    			return;
			}
			tip.hide();
			tip.html('');
    	});
    	$('#'+self.pref+'btn-dirI').click(function() {
    		self.dirI *= -1;
    		self.refreshGenes();
    	});
    	$('#'+self.pref+'btn-i-up').click(function() {
    		self.geneI -= self.dirI;
    		self.refreshGenes();
    	});
    	$('#'+self.pref+'btn-both-up').click(function() {
    		self.geneI -= self.dirI;
    		self.geneJ -= self.dirJ;
    		self.refreshGenes();
    	});
    	$('#'+self.pref+'btn-j-up').click(function() {
    		self.geneJ -= self.dirJ;
    		self.refreshGenes();
    	});
    	$('#'+self.pref+'btn-dirJ').click(function() {
    		self.dirJ *= -1;
    		self.refreshGenes();
    	});
    	$('#'+self.pref+'btn-i-dn').click(function() {
    		self.geneI += self.dirI;
    		self.refreshGenes();
    	});
    	$('#'+self.pref+'btn-both-dn').click(function() {
    		self.geneI += self.dirI;
    		self.geneJ += self.dirJ;
    		self.refreshGenes();
    	});
    	$('#'+self.pref+'btn-j-dn').click(function() {
    		self.geneJ += self.dirJ;
    		self.refreshGenes();
    	});
    	self.refreshDetailedRect();
	},

    loggedInCallback: function(event, auth) {
        //this.token = auth.token;
        this.render();
        return this;
    },

    loggedOutCallback: function(event, auth) {
        //this.token = null;
        this.render();
        return this;
    },

    getState: function() {
        var self = this;
    	if (self.scale == null)
    		self.scale = self.size * 100 / Math.max(self.cmp.proteome1names.length, self.cmp.proteome2names.length);
        var state = {
        		imgI: self.imgI,
        	    imgJ: self.imgJ,
        	    scale: self.scale,
        	    geneI: self.geneI,
        	    dirI: self.dirI,
        	    geneJ: self.geneJ,
        	    dirJ: self.dirJ,
        	    cmp_ref: self.cmp_ref
        };
        return state;
    },

    loadState: function(state) {
        if (!state)
            return;
        var self = this;
		self.imgI = state.imgI;
	    self.imgJ = state.imgJ;
	    self.scale = state.scale;
	    self.geneI = state.geneI;
	    self.dirI = state.dirI;
	    self.geneJ = state.geneJ;
	    self.dirJ = state.dirJ;
	    self.cmp_ref = state.cmp_ref;
    	if (!self.cmp) {
    		self.render();
    	} else {
        	if (self.scale == null)
        		self.scale = self.size * 100 / Math.max(self.cmp.proteome1names.length, self.cmp.proteome2names.length);
    		self.refreshImage();
    		self.refreshGenes();
    	}
    },
    
    uuid: function() {
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, 
            function(c) {
                var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);
                return v.toString(16);
            });
    }
})
}( jQuery ) );

(function( $, undefined ) {
    $.KBWidget({
        name: "kbaseGenomeComparisonViewer",
        parent: "kbaseAuthenticatedWidget",
        version: "1.0.0",
        id: null,
        ws: null,
        pref: null,
        width: 1150,
        options: {
            id: null,
            ws: null
        },
        wsUrl: "https://kbase.us/services/ws/",
        loadingImage: "static/kbase/images/ajax-loader.gif",

        init: function(options) {
            this._super(options);
            this.pref = this.genUUID();
            this.ws = options.ws;
            this.id = options.id;
            return this;
        },
        
        render: function() {
            var self = this;

            var container = this.$elem;
        	container.empty();
            if (!self.authToken()) {
            	container.append("<div>[Error] You're not logged in</div>");
            	return;
            }
        	container.append("<div><img src=\""+self.loadingImage+"\">&nbsp;&nbsp;loading genome comparison data...</div>");

            var kbws = new Workspace(self.wsUrl, {'token': self.authToken()});
            
            //var request = {auth: self.authToken(), workspace: self.ws_name, id: self.simulation_id, type: 'KBasePhenotypes.PhenotypeSimulationSet'};
            kbws.get_objects([{ref: self.ws +"/"+ self.id}], function(data) {
            	///////////////////////////////////// Data Preparation ////////////////////////////////////////////
            	var object = data[0].data;
            	var info = data[0].info;
            	var genomes = object.genomes;
            	var functions = object.functions;
            	var families = object.families;
            	///////////////////////////////////// Instantiating Tabs ////////////////////////////////////////////
            	container.empty();
            	var tabPane = $('<div id="'+self.pref+'tab-content">');
        		container.append(tabPane);
        		tabPane.kbaseTabs({canDelete : true, tabs : []});
    			///////////////////////////////////// Overview table ////////////////////////////////////////////    		
        		var tabOverview = $("<div/>");
    			tabPane.kbaseTabs('addTab', {tab: 'Overview', content: tabOverview, canDelete : false, show: true});
        		var tableOver = $('<table class="table table-striped table-bordered" '+
        				'style="margin-left: auto; margin-right: auto;" id="'+self.pref+'overview-table"/>');
        		tabOverview.append(tableOver);
        		tableOver.append('<tr><td>Genome comparison object</td><td>'+info[1]+'</td></tr>');
        		tableOver.append('<tr><td>Genome comparison workspace</td><td>'+info[7]+'</td></tr>');
        		tableOver.append('<tr><td>Core functions</td><td>'+object.core_functions+'</td></tr>');
        		tableOver.append('<tr><td>Core families</td><td>'+object.core_families+'</td></tr>');
        		if (object.protcomp_ref) {
        			tableOver.append('<tr><td>Protein Comparison</td><td>'+object.protcomp_ref+'</td></tr>');
        		} else {
        			tableOver.append('<tr><td>Protein Comparison</td><td>'+object.pangenome_ref+'</td></tr>');
        		}
        		tableOver.append('<tr><td>Owner</td><td>'+info[5]+'</td></tr>');
        		tableOver.append('<tr><td>Creation</td><td>'+info[3]+'</td></tr>');
        		///////////////////////////////////// Genomes table ////////////////////////////////////////////    		
        		var tabGenomes = $("<div/>");
    			tabPane.kbaseTabs('addTab', {tab: 'Genomes', content: tabGenomes, canDelete : false, show: false});
        		var tableGenomes = $('<table class="table table-striped table-bordered" '+
        				'style="margin-left: auto; margin-right: auto;" id="'+self.pref+'genome-table"/>');
        		tabGenomes.append(tableGenomes);
        		var headings = [
					"Genome","Legend"
				];
				for (var i in genomes) {
					headings.push("G"+i);
				}
				tableGenomes.append('<tr><th><b>'+headings.join('</b></th><th><b>')+'</b></th></tr>');
				for (var i in genomes) {
            		var genome = genomes[i];
            		var row = [
            			"<b>G"+i+"</b>-"+genome.name,"# of families:<br># of functions:"
            		];
            		for (var j in genomes) {
            			var compgenome = genomes[j];
            			if (genome.genome_similarity[compgenome.genome_ref]) {
            				row.push(genome.genome_similarity[compgenome.genome_ref][0]+'<br>'+genome.genome_similarity[compgenome.genome_ref][1]);
            			} else if (j == i) {
            				row.push(genome.families+'<br>'+genome.functions);
            			} else {
            				row.push('0<br>0');
            			}
            		}
            		tableGenomes.append('<tr><td>'+row.join('</td><td>')+'</td></tr>');
            	}
            	///////////////////////////////////// Functions table ////////////////////////////////////////////    		
        		var tabFunctions = $("<div/>");
    			tabPane.kbaseTabs('addTab', {tab: 'Functions', content: tabFunctions, canDelete : false, show: false});
        		var tableFunctions = $('<table class="table table-striped table-bordered" '+
        				'style="margin-left: auto; margin-right: auto;" id="'+self.pref+'function-table"/>');
        		tabFunctions.append(tableFunctions);
        		var func_data = [];
        		var tableSettings = {
        				"sPaginationType": "full_numbers",
        				"iDisplayLength": 10,
        				"aaData": func_data,
        				"aaSorting": [[ 2, "desc" ], [0, "asc"]],
        				"aoColumns": [
        				              { "sTitle": "Function", 'mData': 'id'},
        				              { "sTitle": "Subsystem", 'mData': 'subsystem'},
        				              { "sTitle": "Primary class", 'mData': 'primclass'},
        				              { "sTitle": "Secondary class", 'mData': 'subclass'},
        				              { "sTitle": "Totals", 'mData': 'totals'},
        				              { "sTitle": "Families", 'mData': 'families'},
        				              { "sTitle": "Family genes", 'mData': 'famgenes'},
        				              { "sTitle": "Family genomes", 'mData': 'famgenomes'},
        				],
        				"oLanguage": {
        				        	"sEmptyTable": "No functions found!",
        				        	"sSearch": "Search: "
        				},
        				'fnDrawCallback': events
        		}
				for (var i in families) {
            		var fam = families[i];
            		var gcount = 0;
            		for (var j in genomes) {
            			var compgenome = genomes[j];
            			if (fam.genome_features[compgenome.genome_ref]) {
            				var genes = fam.genome_features[compgenome.genome_ref];
            				for (var k in genes) {
            					gcount++;
            				}
            			}
            		}
            		fam.numgenes = gcount;
            	}
        		for (var i in functions) {
            		var func = functions[i];
    				func.subsystem = func.subsystem.replace(/_/g, ' ');
    				var funcdata = {
    					"id": '<a class="show-function'+self.pref+'" data-id="'+func.id+'">'+func.id+'</a>',
    					"subsystem": func.subsystem,
    					"primclass": func.primclass,
    					"subclass": func.subclass,
    				};
            		var funcindecies = {};
            		var funcgenomes = {};
            		var gcount = 0;
            		for (var j in genomes) {
            			var compgenome = genomes[j];
            			if (func.genome_features[compgenome.genome_ref]) {
            				var genomefams = {};
            				var genes = func.genome_features[compgenome.genome_ref];
            				for (var k in genes) {
            					gcount++;
            					gene = genes[k];
            					genomefams[gene[1]] = 1;
            					if (funcindecies[gene[1]] === undefined) {
            						funcindecies[gene[1]] = 0;
            					}
            					funcindecies[gene[1]]++;
            				}
            				for (var genfam in genomefams) {
            					if (funcgenomes[genfam] === undefined) {
            						funcgenomes[genfam] = 0;
            					}
            					funcgenomes[genfam]++;
            				}
            			}
            		}
            		func.numgenes = gcount;
            		var sortedfams = getSortedKeys(funcindecies);
            		funcdata.totals = "Families:&nbsp;"+sortedfams.length+"<br>Genes:&nbsp;"+gcount+"<br>Genomes:&nbsp;"+func.number_genomes;
            		funcdata.families = "";
            		funcdata.famgenes = "";
            		funcdata.famgenomes = "";
            		for (var j in sortedfams) {
            			if (funcdata.families.length > 0) {
            				funcdata.families += "<br>";
            				funcdata.famgenes += "<br>";
            				funcdata.famgenomes += "<br>";
            			}
            			if (sortedfams[j] === "null") {
            				funcdata.famgenes = 0;
            				funcdata.famgenomes = 0;
            				funcdata.families = "none";
            			} else {
            				funcdata.famgenes += funcindecies[sortedfams[j]]+"("+Math.round(100*funcindecies[sortedfams[j]]/families[sortedfams[j]].numgenes)+"%)";
            				funcdata.famgenomes += funcgenomes[sortedfams[j]]+"("+Math.round(100*funcgenomes[sortedfams[j]]/families[sortedfams[j]].number_genomes)+"%)";
            				funcdata.families += '<a class="show-family'+self.pref+'" data-id="'+families[sortedfams[j]].id+'">'+families[sortedfams[j]].id+'</a>';
            			}
            		}
            		tableSettings.aaData.push(funcdata);	
    			}
    			tableFunctions.dataTable(tableSettings);
        		///////////////////////////////////// Families table ////////////////////////////////////////////    		
        		var tabFamilies = $("<div/>");
    			if (self.options.withExport) {
        			tabFamilies.append("<p><b>Please choose homolog family and push 'Export' "+
        						"button on opened ortholog tab.</b></p><br>");
        		}
    			tabPane.kbaseTabs('addTab', {tab: 'Families', content: tabFamilies, canDelete : false, show: false});
        		var tableFamilies = $('<table class="table table-striped table-bordered" '+
        				'style="margin-left: auto; margin-right: auto;" id="'+self.pref+'genome-table"/>');
        		tabFamilies.append(tableFamilies);
        		var fam_data = [];
        		tableSettings = {
        				"sPaginationType": "full_numbers",
        				"iDisplayLength": 10,
        				"aaData": fam_data,
        				"aaSorting": [[ 2, "desc" ], [0, "asc"]],
        				"aoColumns": [
        				              { "sTitle": "Family", 'mData': 'id'},
        				              { "sTitle": "Totals", 'mData': 'totals'},
        				              { "sTitle": "Functions", 'mData': 'functions'},
        				              { "sTitle": "Subsystems", 'mData': 'subsystem'},
        				              { "sTitle": "Primary classes", 'mData': 'primclass'},
        				              { "sTitle": "Secondary classes", 'mData': 'subclass'},
        				              { "sTitle": "Function genes", 'mData': 'funcgenes'},
        				              { "sTitle": "Function genomes", 'mData': 'funcgenomes'},
        				],
        				"oLanguage": {
        				        	"sEmptyTable": "No families found!",
        				        	"sSearch": "Search: "
        				},
        				'fnDrawCallback': events
        		}
        		for (var i in families) {
            		var fam = families[i];
    				var famdata = {
    					"id": '<a class="show-family'+self.pref+'" data-id="'+fam.id+'">'+fam.id+'</a>'
    				};
            		var famindecies = {};
            		var famgenomes = {};
            		var gcount = 0;
            		for (var j in genomes) {
            			var compgenome = genomes[j];
            			if (fam.genome_features[compgenome.genome_ref]) {
            				var genomefams = {};
            				var genes = fam.genome_features[compgenome.genome_ref];
            				for (var k in genes) {
            					gcount++;
            					gene = genes[k];
            					var array = gene[1];
            					for (var m in array) {
            						if (famindecies[array[m]] === undefined) {
            							famindecies[array[m]] = 0;
            						}
            						genomefams[array[m]] = 1;
            						famindecies[array[m]]++;
            					}
            				}
            				for (var genfam in genomefams) {
            					if (famgenomes[genfam] === undefined) {
            						famgenomes[genfam] = 0;
            					}
            					famgenomes[genfam]++;
            				}
            			}
            		}
            		var sortedfuncs = getSortedKeys(famindecies);
            		famdata.totals = "Genes:&nbsp;"+gcount+"<br>Functions:&nbsp;"+sortedfuncs.length+"<br>Genomes:&nbsp;"+fam.number_genomes;
            		famdata.functions = "";
            		famdata.subsystem = "";
            		famdata.primclass = "";
            		famdata.subclass = "";
            		famdata.funcgenes = "";
            		famdata.funcgenomes = "";
            		var count = 1;
            		for (var j in sortedfuncs) {
            			if (famdata.functions.length > 0) {
            				famdata.functions += "<br>";
            				famdata.subsystem += "<br>";
            				famdata.primclass += "<br>";
            				famdata.subclass += "<br>";
            				famdata.funcgenes += "<br>";
            				famdata.funcgenomes += "<br>";
            			}
            			if (sortedfuncs[j] === "null") {
            				famdata.funcgenes += 0;
							famdata.funcgenomes += 0;
							famdata.functions += "none";
							famdata.subsystem += "none";
							famdata.primclass += "none";
							famdata.subclass += "none";
            			} else {
							famdata.funcgenes += count+": "+famindecies[sortedfuncs[j]]+"("+Math.round(100*famindecies[sortedfuncs[j]]/functions[sortedfuncs[j]].numgenes)+"%)";
							famdata.funcgenomes += count+": "+famgenomes[sortedfuncs[j]]+"("+Math.round(100*famgenomes[sortedfuncs[j]]/functions[sortedfuncs[j]].number_genomes)+"%)";
							famdata.functions += count+": "+'<a class="show-function'+self.pref+'" data-id="'+functions[sortedfuncs[j]].id+'">'+functions[sortedfuncs[j]].id+'</a>';
							famdata.subsystem += count+": "+functions[sortedfuncs[j]].subsystem;
							famdata.primclass += count+": "+functions[sortedfuncs[j]].primclass;
							famdata.subclass += count+": "+functions[sortedfuncs[j]].subclass;
						}
						count++;
            		}
            		tableSettings.aaData.push(famdata);	
    			}
    			tableFamilies.dataTable(tableSettings);
				///////////////////////////////////// Event handling for links ///////////////////////////////////////////
        		function events() {
        			// event for clicking on ortholog count
        			$('.show-family'+self.pref).unbind('click');
        			$('.show-family'+self.pref).click(function() {
        				var id = $(this).data('id');
            			if (tabPane.kbaseTabs('hasTab', id)) {
            				tabPane.kbaseTabs('showTab', id);
            				return;
            			}
            			var fam;
        				for (var i in families) {
        					if (families[i].id == id) {
        						fam = families[i];
        					}
        				}
        				var tabContent = $("<div/>");
        				var tableFamGen = $('<table class="table table-striped table-bordered" '+
								'style="margin-left: auto; margin-right: auto;" id="'+self.pref+id+'-table"/>');
						tabContent.append(tableFamGen);
						var headings = [
							"Genome","Genes","Score","Functions","Subsystems","Primary class","Secondary class"
						];
						tableFamGen.append('<tr><th><b>'+headings.join('</b></th><th><b>')+'</b></th></tr>');
						for (var i in genomes) {
							var genome = genomes[i];
							var genes = "";
							var scores = "";
							var funcs = "";
							var sss = "";
							var primclass = "";
							var subclass = "";
							if (fam.genome_features[genome.genome_ref] === undefined) {
								genes = "none";
								scores = "none";
								funcs = "none";
								sss = "none";
								primclass = "none";
								subclass = "none";
							} else {
								var genearray = fam.genome_features[genome.genome_ref];
								var count = 1;
								for (var k in genearray) {
									if (k > 0) {
										genes += "<br>";
										scores += "<br>";
									}
									genes += count+":"+genearray[0];
									scores += count+":"+genearray[2];
									var array = genearray[1];
									for (var m in array) {
										if (m > 0 || k > 0) {
											funcs += "<br>";
											sss += "<br>";
											primclass += "<br>";
											subclass += "<br>";
										}
										funcs += count+":"+functions[array[m]].id;
										sss += count+":"+functions[array[m]].subsystem;
										primclass += count+":"+functions[array[m]].primclass;
										subclass += count+":"+functions[array[m]].subclass;
									}
									count++;
								}
							}
							var row = [
								genome.name,genes,scores,funcs,sss,primclass,subclass
							];
							tableFamGen.append('<tr><td>'+row.join('</td><td>')+'</td></tr>');
						}					
        				tabPane.kbaseTabs('addTab', {tab: id, content: tabContent, canDelete : true, show: true});
        			});
        			$('.show-function'+self.pref).unbind('click');
        			$('.show-function'+self.pref).click(function() {
        				var id = $(this).data('id');
            			if (tabPane.kbaseTabs('hasTab', id)) {
            				tabPane.kbaseTabs('showTab', id);
            				return;
            			}
            			var func;
        				for (var i in functions) {
        					if (functions[i].id == id) {
        						func = functions[i];
        					}
        				}
            			var tabContent = $("<div/>");
        				var tableFuncGen = $('<table class="table table-striped table-bordered" '+
								'style="margin-left: auto; margin-right: auto;" id="'+self.pref+id+'-table"/>');
						tabContent.append(tableFuncGen);
						var headings = [
							"Genome","Genes","Scores","Families"
						];
						tableFuncGen.append('<tr><th><b>'+headings.join('</b></th><th><b>')+'</b></th></tr>');
						for (var i in genomes) {
							var genome = genomes[i];
							var genes = "";
							var scores = "";
							var functions = "";
							var sss = "";
							var primclass = "";
							var subclass = "";
							if (func.genome_features[genome.genome_ref] === undefined) {
								genes = "none";
								scores = "none";
								fams = "none";
							} else {
								var genearray = func.genome_features[genome.genome_ref];
								for (var k in genearray) {
									if (k > 0) {
										genes += "<br>";
										scores += "<br>";
										fams += "<br>";
									}
									genes += genearray[0];
									scores += genearray[2];
									fams += families[genearray[1]].id;
								}
							}
							var row = [
								genome.name,genes,fams,scores
							];
							tableFuncGen.append('<tr><td>'+row.join('</td><td>')+'</td></tr>');
						}
        				tabPane.kbaseTabs('addTab', {tab: id, content: tabContent, canDelete : true, show: true});
        			});
        		}
        		function getSortedKeys(obj) {
    				var keys = []; for(var key in obj) keys.push(key);
    				return keys.sort(function(a,b){return obj[b]-obj[a]});
				}
            }, function(data) {
            	container.empty();
                container.append('<p>[Error] ' + data.error.message + '</p>');
                return;
            });            	
            return this;
        },

        loggedInCallback: function(event, auth) {
            //this.token = auth.token;
            this.render();
            return this;
        },

        loggedOutCallback: function(event, auth) {
            //this.token = null;
            this.render();
            return this;
        },
        
        genUUID: function() {
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
                var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);
                return v.toString(16);
            });
        }

    });
})( jQuery );

/**
 * Output widget for visualization of tree object (species trees and gene trees).
 * Roman Sutormin <rsutormin@lbl.gov>
 * @public
 */

(function($, undefined) {
    $.KBWidget({
        name: 'kbaseTree',
        parent: 'kbaseAuthenticatedWidget',
        version: '0.0.1',
        options: {
            treeID: null,
            workspaceID: null,
            treeObjVer: null,
            kbCache: null,
            workspaceURL: "https://kbase.us/services/ws/",  //"http://dev04.berkeley.kbase.us:7058",
            loadingImage: "static/kbase/images/ajax-loader.gif",
            ujsServiceURL: "https://kbase.us/services/userandjobstate/",
            height: null,
        },

        pref: null,
        timer: null,
        loadingImage: "static/kbase/images/ajax-loader.gif",
        token: null,

        init: function(options) {
            this._super(options);
            this.pref = this.uuid();

            this.$messagePane = $("<div/>").addClass("kbwidget-message-pane kbwidget-hide-message");
            this.$elem.append(this.$messagePane);

            if (options.workspaceids && options.workspaceids.length > 0) {
                id = options.workspaceids[0].split('/');
                this.options.treeID = id[1];
                this.options.workspaceID = id[0];
            }

            if (!this.options.treeID) {
                this.renderError("No tree to render!");
            } else if (!this.options.workspaceID) {
                this.renderError("No workspace given!");
            } else if (!this.options.kbCache && !this.authToken()) {
                this.renderError("No cache given, and not logged in!");
            } else {
            	this.token = this.authToken();

                this.render();
            }

            return this;
        },

        render: function() {
        	this.wsClient = new Workspace(this.options.workspaceURL, {token: this.token});
            this.loading(false);
            this.loadTree();
        },
        
        loadTree: function() {
            var prom;
            var objId = this.buildObjectIdentity(this.options.workspaceID, this.options.treeID, this.options.treeObjVer, null);
            if (this.options.kbCache)
                prom = this.options.kbCache.req('ws', 'get_objects', [objId]);
            else
                prom = this.wsClient.get_objects([objId]);

            var self = this;
            
            $.when(prom).done($.proxy(function(objArr) {
                self.$elem.empty();

                var canvasDivId = "knhx-canvas-div-" + self.pref;
                self.canvasId = "knhx-canvas-" + self.pref;
                self.$canvas = $('<div id="'+canvasDivId+'">')
                               .append($('<canvas id="' + self.canvasId + '">'));
                
                if (self.options.height) {
                    self.$canvas.css({'max-height':self.options.height, 'overflow':'scroll'});
                }
                self.$elem.append(self.$canvas);

                watchForWidgetMaxWidthCorrection(canvasDivId);

                var tree = objArr[0].data;

                var refToInfoMap = {};
                var objIdentityList = [];
                if (tree.ws_refs) {
                	for (var key in tree.ws_refs) {
                		objIdentityList.push({ref: tree.ws_refs[key]['g'][0]});
                	}
                }
                if (objIdentityList.length > 0) {
                	$.when(self.wsClient.get_object_info(objIdentityList)).done(function(data) {
                		for (var i in data) {
                			var objInfo = data[i];
                			refToInfoMap[objIdentityList[i].ref] = objInfo;
                		}
                	}).fail(function(err) {
                		console.log("Error getting genomes info:");
                		console.log(err);
                	});
                }
                new EasyTree(self.canvasId, tree.tree, tree.default_node_labels, function(node) {
                	if ((!tree.ws_refs) || (!tree.ws_refs[node.id])) {
                		var node_name = tree.default_node_labels[node.id];
                		if (node_name.indexOf('/') > 0) {  // Gene label
                    		var url = "/functional-site/#/genes/" + self.options.workspaceID + "/" + node_name;
                            window.open(url, '_blank');
                		}
                		return;
                	}
                	var ref = tree.ws_refs[node.id]['g'][0];
                	var objInfo = refToInfoMap[ref];
                	if (objInfo) {
                		var url = "/functional-site/#/genomes/" + objInfo[7] + "/" + objInfo[1];
                        window.open(url, '_blank');
                	}
                }, function(node) {
                	if (node.id && node.id.indexOf("user") == 0)
                		return "#0000ff";
            		return null;
                });
                self.loading(true);
            }, this));
            $.when(prom).fail($.proxy(function(error) { this.renderError(error); }, this));
        },

        renderError: function(error) {
            errString = "Sorry, an unknown error occurred";
            if (typeof error === "string")
                errString = error;
            else if (error.error && error.error.message)
                errString = error.error.message;
            
            var $errorDiv = $("<div>")
                            .addClass("alert alert-danger")
                            .append("<b>Error:</b>")
                            .append("<br>" + errString);
            this.$elem.empty();
            this.$elem.append($errorDiv);
        },

        getData: function() {
            return {
                type: 'Tree',
                id: this.options.treeID,
                workspace: this.options.workspaceID,
                title: 'Tree'
            };
        },

        buildObjectIdentity: function(workspaceID, objectID, objectVer, wsRef) {
            var obj = {};
            if (wsRef) {
            	obj['ref'] = wsRef;
            } else {
            	if (/^\d+$/.exec(workspaceID))
            		obj['wsid'] = workspaceID;
            	else
            		obj['workspace'] = workspaceID;

            	// same for the id
            	if (/^\d+$/.exec(objectID))
            		obj['objid'] = objectID;
            	else
            		obj['name'] = objectID;
            	
            	if (objectVer)
            		obj['ver'] = objectVer;
            }
            return obj;
        },

        loading: function(doneLoading) {
            if (doneLoading)
                this.hideMessage();
            else
                this.showMessage("<img src='" + this.options.loadingImage + "'/>");
        },

        showMessage: function(message) {
            var span = $("<span/>").append(message);

            this.$messagePane.append(span);
            this.$messagePane.show();
        },

        hideMessage: function() {
            this.$messagePane.hide();
            this.$messagePane.empty();
        },

        uuid: function() {
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, 
                function(c) {
                    var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);
                    return v.toString(16);
                });
        },

        loggedInCallback: function(event, auth) {
        	if (this.token == null) {
        		this.token = auth.token;
        		this.render();
        	}
            return this;
        },

        loggedOutCallback: function(event, auth) {
            this.render();
            return this;
        }

    });
})( jQuery );
(function( $, undefined ) {
    $.KBWidget({
        name: "kbaseSimulationSet",
        parent: "kbaseWidget",
        version: "1.0.0",
        options: {
            color: "black",
        },

        init: function(options) {
            this._super(options);
            var self = this;

            var container = this.$elem;
            var ws = options.ws;
            var name = options.name;

            console.log('ws/name', ws, name)

            container.loading();
            var p = kb.ws.get_objects([{workspace: ws, name: name}]);
            $.when(p).done(function(data){
                var ref = data[0].data.phenotypeset_ref.split("/");
                var np = kb.ws.get_objects([{wsid: ref[0], objid: ref[1]}]);
                $.when(np).done(function(pdata){
                    container.rmLoading();
                    data[0].data.phenoset = pdata[0].data
                    buildTable(data);
                }).fail(function(e){
                    container.rmLoading();
                    container.append('<div class="alert alert-danger">'+
                        e.error.message+'</div>')
                });
            }).fail(function(e){
                container.rmLoading();
                container.append('<div class="alert alert-danger">'+
                    e.error.message+'</div>')
            });                    



            var container = this.$elem;

            function buildTable(data) {
                var simu = data[0].data
                var simuTable = $('<table class="table table-bordered table-striped" style="width: 100%;">');
                var tabs = container.kbTabs({tabs: [
                    {name: 'Overview', active: true},
                    {name: 'Simulation Results', content: simuTable}]
                })

                var keys = [
                {key: 'wsid'},
                {key: 'ws'},
                {key: 'cp'},
                {key: 'cn'},
                {key: 'fp'},
                {key: 'fn'},
                {key: 'ac'},
                {key: 'sn'},
                {key: 'sp'},
                {key: 'owner'},
                {key: 'date'}
                ];
                
                var cp = 0;
                var cn = 0;
                var fp = 0;
                var fn = 0;
                for (var count in simu.phenotypeSimulations) {
                    var sim = simu.phenotypeSimulations[count];
                    if (sim.phenoclass == 'CP') {
                        cp = cp+1;
                    }
                    if (sim.phenoclass == 'CN') {
                        cn = cn+1;
                    }
                    if (sim.phenoclass == 'FP') {
                        fp = fp+1;
                    }
                    if (sim.phenoclass == 'FN') {
                        fn = fn+1;
                    }
                    sim.media = simu.phenoset.phenotypes[count].media_ref;
                    sim.geneko = "";
                    for (var y in simu.phenoset.phenotypes[count].geneko_refs) {
                        sim.geneko.concat(simu.phenoset.phenotypes[count].geneko_refs[y].split("/").pop(),";");
                    }
                    sim.compounds = "";
                    for (var y in simu.phenoset.phenotypes[count].additionalcompound_refs) {
                        sim.compounds.concat(simu.phenoset.phenotypes[count].additionalcompound_refs[y].split("/").pop(),";");
                    }                   
                }
                var ac = (cp+cn)/(cp+cn+fp+fn);
                var sn = (cp)/(cp+fn);
                var sp = (cn)/(cn+fp);
                
                var simudata = {
                    wsid: data[0].info[1],
                    ws: data[0].info[7],
                    cp: cp,
                    cn: cn,
                    fp: fp,
                    fn: fn,
                    ac: ac,
                    sn: sn,
                    sp: sp,                   
                    owner: data[0].info[5],
                    date: data[0].info[3],
                };

                var labels = ['Name','Workspace','Correct positives','Correct negatives','False positives','False negatives','Accuracy','Sensitivty','Specificity','Owner','Creation date'];
                var table = kb.ui.objTable('overview-table',simudata,keys,labels);
                tabs.tabContent('Overview').append(table)

                var tableSettings = {
                   "sPaginationType": "bootstrap",
                   "iDisplayLength": 10,
                   "aaData": simu.phenotypeSimulations,
                   "aaSorting": [[ 3, "desc" ]],
                   "aoColumns": [
                   { "sTitle": "Base media", 'mData': function(d) {
                       return d.media;
                   }},
                   { "sTitle": "Additional Compounds", 'mData': function(d) {
                       return d.compounds;
                   }},
                   { "sTitle": "Gene KO", 'mData': function(d) {
                       return d.geneko;
                   }},
                   { "sTitle": "Class", 'mData': function(d) {
                       return d.phenoclass;
                   }},
                   { "sTitle": "Simulated Growth", 'mData': function(d) {
                       return d.simulatedGrowth
                   }},
                   { "sTitle": "Simulated Growth Fraction", 'mData': function(d) {
                       return d.simulatedGrowthFraction
                   }},
                   ],                         
               }

               simuTable.dataTable(tableSettings);
           }

           return this;

       }


   });
})( jQuery );
/**
 * Ouput widget to display a pangenome object.
 * @author Chris Henry <chrisshenry@gmail.com>, Roman Sutormin <rsutormin@lbl.gov>
 * @public
 */

(function( $, undefined ) {
    $.KBWidget({
        name: "kbasePanGenome",
        parent: "kbaseAuthenticatedWidget",
        version: "1.0.0",
        options: {
        	ws: null,
        	name: null,
            loadingImage: "static/kbase/images/ajax-loader.gif",
            withExport: false
        },

        pref: null,
        wsUrl: "https://kbase.us/services/ws/",  //"http://dev04.berkeley.kbase.us:7058",
        token: null,
        kbws: null,
        geneIndex: {},   // {genome_ref -> {feature_id -> feature_index}}
        genomeNames: {}, // {genome_ref -> genome_name}
        genomeRefs: {},  // {genome_ref -> workspace/genome_object_name}
        loaded: false,
        	
        init: function(options) {
            this._super(options);
            this.pref = this.genUUID();
            this.token = this.authToken();
            this.geneIndex = {};
            this.genomeNames = {};
            this.genomeRefs = {};
        	var container = this.$elem;
        	container.empty();
        	container.append("<div><img src=\""+this.options.loadingImage+"\">&nbsp;&nbsp;loading pan-genome data...</div>");
            this.render();
            return this;
        },

        render: function() {
        	var self = this;
        	var ws = this.options.ws;
        	var name = this.options.name;            

        	var container = this.$elem;

        	if (!this.token) {
            	container.empty();
        		container.append("<div>[Error] You're not logged in</div>");
        		return;
        	}

        	this.kbws = new Workspace(self.wsUrl, {'token': self.token});

        	var prom = this.kbws.get_objects([{workspace:ws, name: name}])
        	$.when(prom).done(function(data) {
        		if (self.loaded)
        			return;
        		var data = data[0].data;
        		self.cacheGeneFunctions(data.genome_refs, function() {
        			buildTable(data);
        		});
        	}).fail(function(e){
        		container.empty();
        		container.append('<div class="alert alert-danger">'+
        				e.error.message+'</div>');
        	});

        	function buildTable(data) {
        		//console.log(data);

        		self.loaded = true;
        		container.empty();
        		var tabPane = $('<div id="'+self.pref+'tab-content">');
        		container.append(tabPane);
        		tabPane.kbaseTabs({canDelete : true, tabs : []});

        		var showOverview = true;
        		if (self.options.withExport)
        			showOverview = false;
        		///////////////////////////////////// Statistics ////////////////////////////////////////////
        		var tabStat = $("<div/>");
    			tabPane.kbaseTabs('addTab', {tab: 'Overview', content: tabStat, canDelete : false, show: showOverview});
        		var tableOver = $('<table class="table table-striped table-bordered" '+
        				'style="margin-left: auto; margin-right: auto;" id="'+self.pref+'overview-table"/>');
        		tabStat.append(tableOver);
        		tableOver.append('<tr><td>Pan-genome object ID</td><td>'+self.options.name+'</td></tr>');
        		
        		var genomeStat = {};  // genome_ref -> [ortholog_count,{ortholog_id -> count_of_genes_from_genome},genes_covered_by_homolog_fams, orphan_genes(1-member_orthologs)]
        		var orthologStat = {};  // ortholog_id -> {genome_ref -> gene_count(>0)}
        		var genesInHomFams = {};  // genome_ref/feature_id -> 0/1(depending_on_homology)
        		var totalGenesInOrth = 0;
        		var totalOrthologs = 0;
        		var totalHomFamilies = 0;
        		var totalOrphanGenes = 0;
        		for (var i in data.orthologs) {
        			var orth = data.orthologs[i];
        			totalOrthologs++;
        			var orth_id = orth.id;
        			var orth_size = orth.orthologs.length;
        			if (orth_size >= 2)
        				totalHomFamilies++;
        			if (!orthologStat[orth_id])
        				orthologStat[orth_id] = [orth_size, {}];
        			for (var j in orth.orthologs) {
        				var gene = orth.orthologs[j];
                		var genomeRef = gene[2];
                		if (!genomeStat[genomeRef])
                			genomeStat[genomeRef] = [0, {}, 0, 0];
                		if (!genomeStat[genomeRef][1][orth_id]) {
                			genomeStat[genomeRef][1][orth_id] = 0;
                			if (orth_size > 1) {
                				genomeStat[genomeRef][0]++;
                			} else {
                				genomeStat[genomeRef][3]++;                				
                			}
                		}
                		genomeStat[genomeRef][1][orth_id]++;
                		if (!orthologStat[orth_id][1][genomeRef]) 
                			orthologStat[orth_id][1][genomeRef] = 0;
                		orthologStat[orth_id][1][genomeRef]++;
                		var geneKey = genomeRef + "/" + gene[0];
                		if (!genesInHomFams[geneKey]) {
                			if (orth_size > 1) {
                				genesInHomFams[geneKey] = 1;
                				totalGenesInOrth++;
                				genomeStat[genomeRef][2]++;
                			} else {
                				genesInHomFams[geneKey] = 0;
                				totalOrphanGenes++;
                			}
                		}
        			}
        		}
        		var totalGenomes = 0;
        		var genomeOrder = [];  // [[genome_ref, genome_name, genome_num]]
        		for (var genomeRef in self.geneIndex) {
        			totalGenomes++;
        			genomeOrder.push([genomeRef, self.genomeNames[genomeRef], 0]);
        		}
        		genomeOrder.sort(function(a, b) {
                    if (a[1] < b[1]) return -1;
                    if (a[1] > b[1]) return 1;
                    return 0;
                });
        		for (var i in genomeOrder) {
        			genomeOrder[i][2] = parseInt('' + i) + 1;
        		}
        		tableOver.append('<tr><td>Total # of genomes</td><td><b>'+totalGenomes+'</b></td></tr>');
        		tableOver.append('<tr><td>Total # of proteins</td><td><b>'+(totalGenesInOrth+totalOrphanGenes)+'</b> '+
        				'proteins, <b>'+totalGenesInOrth+'</b> are in homolog families, <b>'+totalOrphanGenes+'</b> '+
        				'are in singleton families</td></tr>');
        		tableOver.append('<tr><td>Total # of families</td><td><b>'+totalOrthologs+'</b> families, <b>'+
        				totalHomFamilies+'</b> homolog families, <b>'+(totalOrthologs-totalHomFamilies)+'</b> '+
        				'singleton families</td></tr>');        		
        		for (var genomePos in genomeOrder) {
        			var genomeRef = genomeOrder[genomePos][0];
        			var genomeName = self.genomeNames[genomeRef];
        			var orthCount = 0;
    				var genesInOrth = 0;
    				var genesInSingle = 0;
        			if (genomeStat[genomeRef]) {
        				var stat = genomeStat[genomeRef];
        				orthCount = stat[0];
        				genesInOrth = stat[2];
        				genesInSingle = stat[3];
        			}
        			var genesAll = 0;
        			for (var i in self.geneIndex[genomeRef])
        				genesAll++;
            		tableOver.append('<tr><td>'+genomeName+'</td><td><b>'+(genesInOrth+genesInSingle)+'</b> proteins, <b>'+
            				genesInOrth+'</b> proteins are in <b>'+orthCount+'</b> homolog families, <b>'+
            				genesInSingle+'</b> proteins are in singleton families</td></tr>');
        		}
        		
        		///////////////////////////////////// Shared orthologs ////////////////////////////////////////////
        		var tabShared = $("<div/>");
    			tabPane.kbaseTabs('addTab', {tab: 'Shared homolog families', content: tabShared, canDelete : false, show: false});
        		var tableShared = $('<table class="table table-striped table-bordered" '+
        				'style="margin-left: auto; margin-right: auto;" id="'+self.pref+'shared-table"/>');
        		tabShared.append(tableShared);
        		var header = "";
        		for (var genomePos in genomeOrder) {
            		var genomeNum = genomeOrder[genomePos][2];
        			header += '<td width="40"><center><b>G' + genomeNum + '</b></center></td>';
        		}
        		tableShared.append('<tr>'+header+'<td/></tr>');
        		for (var genomePos in genomeOrder) {
        			var genomeRef = genomeOrder[genomePos][0];
            		var row = "";
            		for (var genomePos2 in genomeOrder) {
            			var genomeRef2 = genomeOrder[genomePos2][0];
            			var count = 0;
            			for (var orth_id in orthologStat) {
            				if (orthologStat[orth_id][0] <= 1)
            					continue;
            				if (orthologStat[orth_id][1][genomeRef] && orthologStat[orth_id][1][genomeRef2])
            					count++;
            			}
            			var color = genomeRef === genomeRef2 ? "#d2691e" : "black";
            			row += '<td width="40"><font color="' + color + '">' + count + '</font></td>';
            		}
            		var genomeNum = genomeOrder[genomePos][2];
            		tableShared.append('<tr>'+row+'<td><b>G'+genomeNum+'</b> - '+genomeOrder[genomePos][1]+'</td></tr>');
        		}

        		///////////////////////////////////// Orthologs /////////////////////////////////////////////
        		var tableOrth = $('<table cellpadding="0" cellspacing="0" border="0" class="table table-bordered ' +
        				'table-striped" style="width: 100%; margin-left: 0px; margin-right: 0px;">');
        		var tabOrth = $("<div/>");
        		if (self.options.withExport) {
        			tabOrth.append("<p><b>Please choose homolog family and push 'Export' "+
        						"button on opened ortholog tab.</b></p><br>");
        		}
        		tabOrth.append(tableOrth);

    			tabPane.kbaseTabs('addTab', {tab: 'Protein families', content: tabOrth, canDelete : false, show: !showOverview});

    			var orth_data = [];
    			for (var i in data.orthologs) {
    				var orth = data.orthologs[i];
    				var id_text = '<a class="show-orthologs_'+self.pref+'" data-id="'+orth.id+'">'+orth.id+'</a>';
    				var genome_count = 0;
    				for (var genomeRef in orthologStat[orth.id][1]) {
    					genome_count++;
    				}
    				orth_data.push({func: orth['function'], id: id_text, len: orth.orthologs.length, genomes: genome_count});
    			}
    			
        		var tableSettings = {
        				"sPaginationType": "full_numbers",
        				"iDisplayLength": 10,
        				"aaData": orth_data,
        				"aaSorting": [[ 2, "desc" ], [0, "asc"]],
        				"aoColumns": [
        				              { "sTitle": "Function", 'mData': 'func'},
        				              { "sTitle": "ID", 'mData': 'id'},
        				              { "sTitle": "Protein Count", 'mData': 'len'},
        				              { "sTitle": "Genome Count", 'mData': 'genomes'}
        				              ],
        				              "oLanguage": {
        				            	  "sEmptyTable": "No objects in workspace",
        				            	  "sSearch": "Search: "
        				              },
        				              'fnDrawCallback': events
        		}


        		// create the table
        		tableOrth.dataTable(tableSettings);

        		function events() {
        			// event for clicking on ortholog count
        			$('.show-orthologs_'+self.pref).unbind('click');
        			$('.show-orthologs_'+self.pref).click(function() {
        				var id = $(this).data('id');
            			if (tabPane.kbaseTabs('hasTab', id)) {
            				tabPane.kbaseTabs('showTab', id);
            				return;
            			}
        				var ortholog = getOrthologInfo(id);
        				var tabContent = self.buildOrthoTable(id, ortholog);
        				tabPane.kbaseTabs('addTab', {tab: id, content: tabContent, canDelete : true, show: true});
        			})
        		}

        		// work in progress
        		function getOrthologInfo(id) {
        			//console.log(data)
        			for (var i in data.orthologs) {
        				if (data.orthologs[i].id == id) {
        					//console.log('match');
        					var ort_list = data.orthologs[i];
        					//console.log(ort_list);
        					return ort_list;
        				}
        			}
        		}
        	}

        	return this;
        },

        cacheGeneFunctions: function(genomeRefs, callback) {
        	var self = this;
        	var req = [];
        	for (var i in genomeRefs) {
        		req.push({ref: genomeRefs[i], included: ["scientific_name", "features/[*]/id"]});
        	}
        	var prom = this.kbws.get_object_subset(req);
        	$.when(prom).done(function(data) {
        		for (var genomePos in genomeRefs) {
        			var ref = genomeRefs[genomePos];
        			self.genomeNames[ref] = data[genomePos].data.scientific_name;
        			self.genomeRefs[ref] = data[genomePos].info[7] + "/" + data[genomePos].info[1];
        			var geneIdToIndex = {};
        			for (var genePos in data[genomePos].data.features) {
        				var gene = data[genomePos].data.features[genePos];
        				geneIdToIndex[gene.id] = genePos;
        			}
        			self.geneIndex[ref] = geneIdToIndex;
        		}
        		callback();
        	}).fail(function(e){
        		//console.log("Error caching genes: " + e.error.message);
        		container.empty();
        		container.append('<div class="alert alert-danger">'+
        				e.error.message+'</div>');
        	});
        },

        buildOrthoTable: function(orth_id, ortholog) {
        	var self = this;
        	var tab = $("<div><img src=\""+this.options.loadingImage+"\">&nbsp;&nbsp;loading gene data...</div>");
        	var req = [];
        	for (var i in ortholog.orthologs) {
        		var genomeRef = ortholog.orthologs[i][2];
        		var featureId = ortholog.orthologs[i][0];
        		var featurePos = self.geneIndex[genomeRef][featureId];
        		req.push({ref: genomeRef, included: ["features/" + featurePos]});
        	}
        	var prom = this.kbws.get_object_subset(req);
        	$.when(prom).done(function(data) {
        		var genes = [];
        		for (var i in data) {
        			var feature = data[i].data.features[0];
        			var genomeRef = req[i].ref;
        			feature["genome_ref"] = genomeRef;
        			var ref = self.genomeRefs[genomeRef];
        			var genome = self.genomeNames[genomeRef];
        			var id = feature.id;
        			var func = feature['function'];
        			if (!func)
        				func = '-';
        			var seq = feature.protein_translation;
        			var len = seq ? seq.length : 'no translation';
        			genes.push({ref: ref, genome: genome, id: id, func: func, len: len, original: feature});
        		}
        		self.buildOrthoTableLoaded(orth_id, genes, tab);
        	}).fail(function(e){
        		console.log("Error caching genes: " + e.error.message);
        	});
        	return tab;
        },

        buildOrthoTableLoaded: function(orth_id, genes, tab) {
        	var pref2 = this.genUUID();
        	var self = this;
        	tab.empty();
    		var table = $('<table cellpadding="0" cellspacing="0" border="0" class="table table-bordered ' +
    				'table-striped" style="width: 100%; margin-left: 0px; margin-right: 0px;">');
    		if (self.options.withExport) {
    			tab.append('<p><b>Name of feature set object:</b>&nbsp;'+
    					'<input type="text" id="input_'+pref2+'" '+
    					'value="'+self.options.name+'.'+orth_id+'.featureset" style="width: 350px;"/>'+
    					'&nbsp;<button id="btn_'+pref2+'">Export</button><br>'+
    					'<font size="-1">(only features with protein translations will be exported)</font></p><br>'
    			);
    		}
    		tab.append(table);
        	var tableSettings = {
        			"sPaginationType": "full_numbers",
        			"iDisplayLength": 10,
        			"aaData": genes,
        			"aaSorting": [[0, "asc"], [ 1, "asc" ]],
        			"aoColumns": [
        			              { "sTitle": "Genome name", 'mData': function(d) {
        			            	  return '<a class="show-genomes_'+pref2+'" data-id="'+d.ref+'">'+
        			            	  '<span style="white-space: nowrap;">'+d.genome+'</span></a>'
        			              }},
        			              { "sTitle": "Feature ID", 'mData': function(d) {
        			            	  return '<a class="show-genes_'+pref2+'" data-id="'+d.ref+"/"+d.id+'">'+d.id+'</a>'
        			              }},
        			              { "sTitle": "Function", 'mData': 'func'},
        			              { "sTitle": "Protein sequence length", 'mData': 'len'},
        			              ],
        			              "oLanguage": {
        			            	  "sEmptyTable": "No objects in workspace",
        			            	  "sSearch": "Search: "
        			              },
        			              'fnDrawCallback': events2
        	}

        	// create the table
        	table.dataTable(tableSettings);
    		if (self.options.withExport) {
    			$('#btn_'+pref2).click(function (e) {
    				var target_obj_name = $("#input_"+pref2).val();
    				if (target_obj_name.length == 0) {
    					alert("Error: feature set object name shouldn't be empty");
    					return;
    				}
    				self.exportFeatureSet(orth_id, target_obj_name, genes);
    			});
    		}        	
        	function events2() {
        		$('.show-genomes_'+pref2).unbind('click');
        		$('.show-genomes_'+pref2).click(function() {
        			var id = $(this).data('id');
            		var url = "/functional-site/#/genomes/" + id;
                    window.open(url, '_blank');
        		})
        		$('.show-genes_'+pref2).unbind('click');
        		$('.show-genes_'+pref2).click(function() {
        			var id = $(this).data('id');
            		var url = "/functional-site/#/genes/" + id;
                    window.open(url, '_blank');
        		})
        	}
        },

        exportFeatureSet: function(orth_id, target_obj_name, genes) {
        	var self = this;
        	var elements = {};
        	var size = 0;
        	for (var i in genes) {
        		var gene = genes[i];
        		if (gene.original.protein_translation) {
        			elements["" + i] = {data: gene.original};
        			size++;
        		}
        	}
        	var featureSet = {description: 'Feature set exported from pan-genome "' + 
        			this.options.name + '", otholog "' + orth_id + '"', elements: elements};
        	this.kbws.save_objects({workspace: this.options.ws, objects: 
        		[{type: "KBaseSearch.FeatureSet", name: target_obj_name, data: featureSet}]}, 
        		function(data) {
        			self.trigger('updateData.Narrative');
        			self.showInfo("Feature set object containing " + size + " genes " +
        					"was successfuly exported");
        		},
        		function(err) {
        			alert("Error: " + err.error.message);
        		}
        	);
        },
        
        getData: function() {
        	return {title:"Pan-genome orthologs",id:this.options.name, workspace:this.options.ws};
        },

        loggedInCallback: function(event, auth) {
        	this.token = auth.token;
        	this.render();
        	return this;
        },

        loggedOutCallback: function(event, auth) {
        	this.token = null;
        	this.render();
        	return this;
        },
        
        genUUID: function() {
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
                var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);
                return v.toString(16);
            });
        },
        
        showInfo: function(message) {
        	$('<div/>').kbasePrompt({title : 'Information', body : message}).openPrompt();
        }
    });

})( jQuery );
/**
 * Output widget for visualization of Multiple Sequence Alignment.
 * @author Roman Sutormin <rsutormin@lbl.gov>
 * @public
 */

(function($, undefined) {
    $.KBWidget({
        name: 'kbaseMSA',
        parent: 'kbaseAuthenticatedWidget',
        version: '0.0.1',
        options: {
            msaID: null,
            workspaceID: null,
            kbCache: null,
            workspaceURL: "https://kbase.us/services/ws/",  //"http://dev04.berkeley.kbase.us:7058",
            loadingImage: "static/kbase/images/ajax-loader.gif",
            ujsServiceURL: "https://kbase.us/services/userandjobstate/",
            height: null,
        },

        pref: null,
        timer: null,
        loadingImage: "static/kbase/images/ajax-loader.gif",
        token: null,
        aminoAcidColors: {
        	//// Pos.charged ////////
        	"K": "#ff8f8f",
        	"R": "#ff8f8f",
        	//// Polar //////////////
        	"S": "#6fff6f",
        	"T": "#6fff6f",
        	"Q": "#6fff6f",
        	"N": "#6fff6f",
        	//// Hydrophobic ////////
        	"L": "#9fcfff",
        	"V": "#9fcfff",
        	"I": "#9fcfff",
        	"A": "#9fcfff",
        	"F": "#9fcfff",
        	"W": "#9fcfff",
        	"M": "#9fcfff",
        	//// Negative ///////////
        	"C": "#ffcfef",
        	//// Negative ///////////
        	"E": "#ff8fff",
        	"D": "#ff8fff",
        	//// Small //////////////
        	"G": "orange",
        	"P": "yellow",
        	//////////////////
        	"H": "#9fffff",
        	"Y": "#9fffff"
        },

        init: function(options) {
            this._super(options);
            this.pref = this.uuid();

            this.$messagePane = $("<div/>").addClass("kbwidget-message-pane kbwidget-hide-message");
            this.$elem.append(this.$messagePane);

            if (!this.options.msaID) {
                this.renderError("No MSA to render!");
            } else if (!this.options.workspaceID) {
                this.renderError("No workspace given!");
            } else if (!this.options.kbCache && !this.authToken()) {
                this.renderError("No cache given, and not logged in!");
            } else {
            	this.token = this.authToken();

                this.render();
            }

            return this;
        },

        render: function() {
        	this.wsClient = new Workspace(this.options.workspaceURL, {token: this.token});
            this.loading(false);
            this.loadMSA();
        },
        
        loadMSA: function() {
            var prom;
            var objId = this.buildObjectIdentity(this.options.workspaceID, this.options.msaID, null, null);
            if (this.options.kbCache)
                prom = this.options.kbCache.req('ws', 'get_objects', [objId]);
            else
                prom = this.wsClient.get_objects([objId]);

            var self = this;
            
            $.when(prom).done($.proxy(function(objArr) {
                self.$elem.empty();
                self.$elem.append(''+
                '<table class="table table-striped table-bordered" style="margin-left: auto; margin-right: auto;">'+
				'<tr><td width="40%">Multiple Sequence Alignment object ID</td><td>'+self.options.msaID+'</td></tr></table>');
                //self.$elem.append("<p>Multiple Sequence Alignment object ID:&nbsp;<b>" + self.options.msaID + "</b></p><br>");
                var canvasId = "canvas-" + self.pref;
                var canvasDivId = "canvas-div-" + self.pref;
                var canvasDiv = $('<div id="' + canvasDivId + '" style="border:1px solid #d3d3d3;">').append($('<canvas id="' + canvasId + '">'));
                canvasDiv.css({'max-height':400, 'max-width':1080, 'overflow':'scroll'});
                self.$elem.append(canvasDiv);
                watchForWidgetMaxWidthCorrection(canvasDivId);
                var canvas = document.getElementById(canvasId);
                
                var aln = objArr[0].data.alignment;
                var size = 0;
                var len = null;
                var max_lbl_w = 0;
                for (var key in aln) {
                	size++;
                	var lbl_w = self.drawLine(canvas, key, 0, true);
                	if (max_lbl_w < lbl_w)
                		max_lbl_w = lbl_w;
                	len = aln[key].length;
                }
                
                canvas.width = max_lbl_w + (2 + len) * 8;
            	canvas.height = size * 12 + 2;
                var line = 0;
                for (var key in aln) {
                	self.drawLine(canvas, key, line, false);
                	var seq = aln[key];
                	for (var i = 0; i < seq.length; i++) {
                		var smb = seq.substring(i, i + 1);
                		self.drawSymbol(canvas, smb, self.getColor(smb), max_lbl_w, 2 + i, line);
                	}
                	line++;
                }
                self.loading(true);
            }, this));
            $.when(prom).fail($.proxy(function(error) { this.renderError(error); }, this));
        },

        drawSymbol: function(canvas, smb, color, xshift, xpos, ypos) {
            var text = smb;
            var ctx = canvas.getContext("2d");
            var fontH = 10;
            var fontW = 7;
            var font = fontH + "pt courier-new";
            CanvasTextFunctions.enable(ctx);
            ctx.strokeStyle = "#000000";
            ctx.fillStyle = color;
            var smbW = ctx.measureText(font, fontH, text);
            var x = xshift + xpos * (fontW + 1);
            var y = ypos * (fontH + 2);
            //var h = fontsize;
            ctx.fillRect(x - 1, y + 1, fontW + 1, fontH + 2);
            ctx.drawText(font, fontH, x + (fontW - smbW) / 2, y + fontH * 1.1, text);
        },

        drawLine: function(canvas, text, ypos, dryMode) {
            var ctx = canvas.getContext("2d");
            var fontH = 10;
            var font = fontH + "pt courier-new";
            CanvasTextFunctions.enable(ctx);
            ctx.strokeStyle = "#000000";
            var lineW = ctx.measureText(font, fontH, text);
            var y = ypos * (fontH + 2);
            if (!dryMode)
            	ctx.drawText(font, fontH, 0, y + fontH * 1.1, text);
            return lineW;
        },

        getColor: function(smb) {
        	var ret = this.aminoAcidColors[smb];
        	if (!ret)
        		ret = "#ffffff";
        	return ret;
        },
        
        renderError: function(error) {
            errString = "Sorry, an unknown error occurred";
            if (typeof error === "string")
                errString = error;
            else if (error.error && error.error.message)
                errString = error.error.message;
            
            var $errorDiv = $("<div>")
                            .addClass("alert alert-danger")
                            .append("<b>Error:</b>")
                            .append("<br>" + errString);
            this.$elem.empty();
            this.$elem.append($errorDiv);
        },

        getData: function() {
            return {
                type: 'MSA',
                id: this.options.msaID,
                workspace: this.options.workspaceID,
                title: 'Multiple sequence alignment'
            };
        },

        buildObjectIdentity: function(workspaceID, objectID, objectVer, wsRef) {
            var obj = {};
            if (wsRef) {
            	obj['ref'] = wsRef;
            } else {
            	if (/^\d+$/.exec(workspaceID))
            		obj['wsid'] = workspaceID;
            	else
            		obj['workspace'] = workspaceID;

            	// same for the id
            	if (/^\d+$/.exec(objectID))
            		obj['objid'] = objectID;
            	else
            		obj['name'] = objectID;
            	
            	if (objectVer)
            		obj['ver'] = objectVer;
            }
            return obj;
        },

        loading: function(doneLoading) {
            if (doneLoading)
                this.hideMessage();
            else
                this.showMessage("<img src='" + this.options.loadingImage + "'/>");
        },

        showMessage: function(message) {
            var span = $("<span/>").append(message);

            this.$messagePane.append(span);
            this.$messagePane.show();
        },

        hideMessage: function() {
            this.$messagePane.hide();
            this.$messagePane.empty();
        },

        uuid: function() {
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, 
                function(c) {
                    var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);
                    return v.toString(16);
                });
        },

        loggedInCallback: function(event, auth) {
        	if (this.token == null) {
        		this.token = auth.token;
        		this.render();
        	}
            return this;
        },

        loggedOutCallback: function(event, auth) {
            this.render();
            return this;
        }

    });
})( jQuery );
/**
 * KBase widget to display table and boxplot of BIOM data
 */
(function($, undefined) {
    $.KBWidget({
        name: 'AbundanceDataView',
        parent: "kbaseAuthenticatedWidget",
        version: '1.0.0',
        token: null,
        options: {
	        id: null,
	        ws: null,
	        name: 0
        },
	    ws_url: window.kbconfig.urls.workspace,
	    loading_image: "static/kbase/images/ajax-loader.gif",
        
	    init: function(options) {
            this._super(options);
            return this;
        },
	
        render: function() {
	        var self = this;
	        var pref = this.uuidv4();

	        var container = this.$elem;
	        container.empty();
            if (self.token == null) {
                container.append("<div>[Error] You're not logged in</div>");
                return;
            }
            container.append("<div><img src=\""+self.loading_image+"\">&nbsp;&nbsp;loading data...</div>");

	        var kbws = new Workspace(self.ws_url, {'token': self.token});
	        kbws.get_objects([{ref: self.options.ws+"/"+self.options.id}], function(data) {
	            container.empty();
		        // parse data
		        if (data.length == 0) {
		            var msg = "[Error] Object "+self.options.id+" does not exist in workspace "+self.options.ws;
		            container.append('<div><p>'+msg+'>/p></div>');
		        } else {
		            var biom = data[0]['data'];
		            var matrix = [];
		            var colnum = biom['columns'].length;
		            var rownum = biom['rows'].length;
		            var tdata = [];
		            // get matrix
		            if (biom['matrix_type'] == 'sparse') {
			            matrix = self.sparse2dense(biom['data'], biom['shape'][0], biom['shape'][1]);
		            } else {
			            matrix = biom['data'];
		            }
		            // get column names
		            // build graph data
		            var divdata = new Array(colnum);
		            var colors = GooglePalette(colnum);
		            var clength = colnum + 1;
		            var cnames = new Array(clength)
		            cnames[0] = "Annotation";
		            for (var c = 0; c < colnum; c++) {
		                if (self.options.name == 0) {
			                cnames[c+1] = biom['columns'][c]['id'];
			                divdata[c] = {'name': biom['columns'][c]['id'], 'data': [], 'fill': colors[c]};
		                } else {
		                    cnames[c+1] = biom['columns'][c]['name'];
		                    divdata[c] = {'name': biom['columns'][c]['name'], 'data': [], 'fill': colors[c]};
		                }
		            }
		            // add values
		            var tdata = new Array(rownum);
		            for (var r = 0; r < rownum; r++) {
			            tdata[r] = new Array(clength);
			            tdata[r][0] = biom['rows'][r]['id'];
			            for (var c = 0; c < colnum; c++) {
			                var value = matrix[r][c];
			                if (! value) {
				                value = "0";
			                }
			                tdata[r][c+1] = value;
			                divdata[c]['data'].push(matrix[r][c]);
			            }
		            }
		            // set tabs
		            var tlen = 0;
	    		    if (window.hasOwnProperty('rendererTable') && rendererTable.length) {
				        tlen = rendererTable.length;
			        }
			        var glen = 0;
                    if (window.hasOwnProperty('rendererGraph') && rendererGraph.length) {
                        glen = rendererGraph.length;
                    }
		            var tabs = "<ul class='nav nav-tabs'>"+
		                       "<li class='active'><a data-toggle='tab' href='#outputGraph"+glen+"'>BoxPlots</a></li>"+
		                       "<li><a data-toggle='tab' href='#outputTable"+tlen+"'>Abundance Table</a></li></ul>";
		            var divs = "<div class='tab-content'>"+
		                       "<div class='tab-pane active' id='outputGraph"+glen+"' style='width: 95%;'></div>"+
		                       "<div class='tab-pane' id='outputTable"+tlen+"' style='width: 95%;'></div></div>";
		            container.append(tabs+divs);
			        // TABLE
	   		        var tableTest = standaloneTable.create({index: tlen});
	  		        tableTest.settings.target = document.getElementById("outputTable"+tlen);
	    		    tableTest.settings.data = { header: cnames, data: tdata };
			        tableTest.settings.filter = { 0: { type: "text" } };
			        var mw = [ 120 ];
			        for (var i=1; i<cnames.length; i++) {
				        mw.push(130);
			        }
			        tableTest.settings.minwidths = mw;
			        tableTest.render(tlen);
			        // DEVIATION PLOT
                    var devTest = standaloneGraph.create({index: glen});
			        devTest.settings.target = document.getElementById("outputGraph"+glen);
                    devTest.settings.data = divdata;
                    devTest.settings.show_legend = false;
                    devTest.settings.height = 400;
                    devTest.settings.chartArea = [ 0.1, 0.1, 0.95, 0.8 ];
                    devTest.settings.type = "deviation";
                    devTest.render(glen);
		        }
	        }, function(data) {
		        container.empty();
		        var main = $('<div>');
		        main.append($('<p>')
		            .css({'padding': '10px 20px'})
		            .text('[Error] '+data.error.message));
		        container.append(main);
	        });
	        return self;
        },

        loggedInCallback: function(event, auth) {
            this.token = auth.token;
            this.render();
            return this;
        },

        loggedOutCallback: function(event, auth) {
            this.token = null;
            this.render();
            return this;
        },

	    sparse2dense: function(sparse, rmax, cmax) {
	        var dense = new Array(rmax);
	        for (var i = 0; i < rmax; i++) {
		        dense[i] = Array.apply(null, new Array(cmax)).map(Number.prototype.valueOf, 0);
	        }
	        // 0 values are undefined
	        for (var i = 0; i < sparse.length; i++) {
		        dense[ sparse[i][0] ][ sparse[i][1] ] = sparse[i][2];
	        }
	        return dense;
	    },

	    uuidv4: function(a,b) {
	        for (b=a=''; a++<36; b+=a*51&52?(a^15?8^Math.random()*(a^20?16:4):4).toString(16):'-');
	        return b;
	    }
    });
})(jQuery);

/**
 * KBase widget to display table of BIOM data
 */
(function($, undefined) {
    $.KBWidget({
            name: 'AbundanceDataTable',
            version: '1.0.0',
            options: {
	            id: null,
	            ws: null,
	            auth: null,
	            name: 0
        },
	    ws_url: window.kbconfig.urls.workspace,
	    loading_image: "static/kbase/images/ajax-loader.gif",
        
	    init: function(options) {
            this._super(options);
            return this.render();
        },
	
        render: function() {
	        var self = this;
	        var pref = this.uuidv4();
	        var container = this.$elem;
	        var kbws = new Workspace(self.ws_url, {'token': self.options.auth});
            
	        container.empty();
	        container.append("<div><img src=\""+self.loading_image+"\">&nbsp;&nbsp;loading data...</div>");

	        kbws.get_objects([{ref: self.options.ws+"/"+self.options.id}], function(data) {
	            container.empty();
		        // parse data
		        if (data.length == 0) {
		            var msg = "[Error] Object "+self.options.id+" does not exist in workspace "+self.options.ws;
		            container.append('<div><p>'+msg+'>/p></div>');
		        } else {
		            var biom = data[0]['data'];
		            var matrix = [];
		            var tdata = [];
		            // get matrix
		            if (biom['matrix_type'] == 'sparse') {
			            matrix = self.sparse2dense(biom['data'], biom['shape'][0], biom['shape'][1]);
		            } else {
			            matrix = biom['data'];
		            }
		            // get column names
		            var clength = biom['columns'].length + 1;
		            var cnames = new Array(clength)
		            cnames[0] = "Annotation";
		            for (var c = 0; c < biom['columns'].length; c++) {
		                if (self.options.name == 0) {
			                cnames[c+1] = biom['columns'][c]['id'];
		                } else {
		                    cnames[c+1] = biom['columns'][c]['name'];
		                }
		            }
		            // add values
		            var tdata = new Array(matrix.length);
		            for (var r = 0; r < matrix.length; r++) {
			            tdata[r] = new Array(clength);
			            tdata[r][0] = biom['rows'][r]['id'];
			            for (var c = 0; c < matrix[r].length; c++) {
			                var value = matrix[r][c];
			                if (! value) {
				                value = "0";
			                }
			                tdata[r][c+1] = value
			            }
		            }
			        // TABLE
                    var tlen = 0;
	    		    if (window.hasOwnProperty('rendererTable') && rendererTable.length) {
				        tlen = rendererTable.length;
			        }
	   		        container.append("<div id='outputTable"+tlen+"' style='width: 95%;'></div>");
	   		        var tableTest = standaloneTable.create({index: tlen});
	  		        tableTest.settings.target = document.getElementById("outputTable"+tlen);
	    		    tableTest.settings.data = { header: cnames, data: tdata };
			        tableTest.settings.filter = { 0: { type: "text" } };
			        var mw = [ 120 ];
			        for (var i=1; i<cnames.length; i++) {
				        mw.push(130);
			        }
			        tableTest.settings.minwidths = mw;
			        tableTest.render(tlen);
		        }
	        }, function(data) {
		        container.empty();
		        var main = $('<div>');
		        main.append($('<p>')
		            .css({'padding': '10px 20px'})
		            .text('[Error] '+data.error.message));
		        container.append(main);
	        });
	        return self;
        },

	    sparse2dense: function(sparse, rmax, cmax) {
	        var dense = new Array(rmax);
	        for (var i = 0; i < rmax; i++) {
		        dense[i] = Array.apply(null, new Array(cmax)).map(Number.prototype.valueOf, 0);
	        }
	        // 0 values are undefined
	        for (var i = 0; i < sparse.length; i++) {
		        dense[ sparse[i][0] ][ sparse[i][1] ] = sparse[i][2];
	        }
	        return dense;
	    },

	    uuidv4: function(a,b) {
	        for (b=a=''; a++<36; b+=a*51&52?(a^15?8^Math.random()*(a^20?16:4):4).toString(16):'-');
	        return b;
	    }
    });
})(jQuery);

/**
 * KBase widget to display table of BIOM data
 */
(function($, undefined) {
    $.KBWidget({
        name: 'AbundanceDataBoxplot',
        version: '1.0.0',
        options: {
	        id: null,
	        ws: null,
	        auth: null,
	        name: 0
        },
	    ws_url: window.kbconfig.urls.workspace,
	    loading_image: "static/kbase/images/ajax-loader.gif",
        
	    init: function(options) {
            this._super(options);
            return this.render();
        },
	
        render: function() {
	        var self = this;
	        var pref = this.uuidv4();
	        var container = this.$elem;
	        var kbws = new Workspace(self.ws_url, {'token': self.options.auth});
            
	        container.empty();
	        container.append("<div><img src=\""+self.loading_image+"\">&nbsp;&nbsp;loading data...</div>");

	        kbws.get_objects([{ref: self.options.ws+"/"+self.options.id}], function(data) {
	            container.empty();
		        // parse data
		        if (data.length == 0) {
		            var msg = "[Error] Object "+self.options.id+" does not exist in workspace "+self.options.ws;
		            container.append('<div><p>'+msg+'>/p></div>');
		        } else {
		            var biom = data[0]['data'];
		            var matrix = [];
		            var colnum = biom['columns'].length;
		            var rownum = biom['rows'].length;
		            // get matrix
		            if (biom['matrix_type'] == 'sparse') {
			            matrix = self.sparse2dense(biom['data'], biom['shape'][0], biom['shape'][1]);
		            } else {
			            matrix = biom['data'];
		            }
		            // build data
		            var divdata = new Array(colnum);
		            var colors = GooglePalette(colnum);
		            // names
		            for (var c = 0; c < colnum; c++) {
		                if (self.options.name == 0) {
		                    divdata[c] = {'name': biom['columns'][c]['id'], 'data': [], 'fill': colors[c]};
	                    } else {
	                        divdata[c] = {'name': biom['columns'][c]['name'], 'data': [], 'fill': colors[c]};
	                    }
	                }
		            // values
		            for (var r = 0; r < rownum; r++) {
		                for (var c = 0; c < colnum; c++) {
		                    divdata[c]['data'].push(matrix[r][c]);
	                    }
	                }
                    // DEVIATION PLOT
			        var glen = 0;
                    if (window.hasOwnProperty('rendererGraph') && rendererGraph.length) {
                        glen = rendererGraph.length;
                    }
			        container.append("<div id='outputGraph"+glen+"' style='width: 95%;'></div>");
                    var devTest = standaloneGraph.create({index: glen});
                    devTest.settings.target = document.getElementById("outputGraph"+glen);
                    devTest.settings.data = divdata;
                    devTest.settings.show_legend = false;
                    devTest.settings.height = 400;
                    devTest.settings.type = "deviation";
                    devTest.settings.chartArea = [ 0.1, 0.1, 0.95, 0.8 ];
                    devTest.render(glen);
		        }
	        }, function(data) {
		        container.empty();
		        var main = $('<div>');
		        main.append($('<p>')
		            .css({'padding': '10px 20px'})
		            .text('[Error] '+data.error.message));
		        container.append(main);
	        });
	        return self;
        },

	    sparse2dense: function(sparse, rmax, cmax) {
	        var dense = new Array(rmax);
	        for (var i = 0; i < rmax; i++) {
		        dense[i] = Array.apply(null, new Array(cmax)).map(Number.prototype.valueOf, 0);
	        }
	        // 0 values are undefined
	        for (var i = 0; i < sparse.length; i++) {
		        dense[ sparse[i][0] ][ sparse[i][1] ] = sparse[i][2];
	        }
	        return dense;
	    },

	    uuidv4: function(a,b) {
	        for (b=a=''; a++<36; b+=a*51&52?(a^15?8^Math.random()*(a^20?16:4):4).toString(16):'-');
	        return b;
	    }
    });
})(jQuery);

/**
 * KBase widget to display table of BIOM data
 */
(function($, undefined) {
    $.KBWidget({
            name: 'AbundanceDataHeatmap',
            parent: "kbaseAuthenticatedWidget",
            version: '1.0.0',
            token: null,
            options: {
	            id: null,
	            ws: null,
	            rows: 0
        },
	    ws_url: window.kbconfig.urls.workspace,
	    loading_image: "static/kbase/images/ajax-loader.gif",
        
	    init: function(options) {
            this._super(options);
            return this;
        },
	
        render: function() {
	        var self = this;
	        var pref = this.uuidv4();
	        
	        var container = this.$elem;
	        container.empty();
            if (self.token == null) {
                container.append("<div>[Error] You're not logged in</div>");
                return;
            }
            container.append("<div><img src=\""+self.loading_image+"\">&nbsp;&nbsp;loading data...</div>");

	        var kbws = new Workspace(self.ws_url, {'token': self.token});
	        kbws.get_objects([{ref: self.options.ws+"/"+self.options.id}], function(data) {
	            container.empty();
		        // parse data
		        if (data.length == 0) {
		            var msg = "[Error] Object "+self.options.id+" does not exist in workspace "+self.options.ws;
		            container.append('<div><p>'+msg+'>/p></div>');
		        } else {
		            var heatdata = data[0]['data'];
		            console.log(heatdata);
			        // HEATMAP
                    var hlen = 0;
                    if (window.hasOwnProperty('rendererHeatmap') && rendererHeatmap.length) {
                        hlen = rendererHeatmap.length;
                    }
                    container.append("<div id='outputHeatmap"+hlen+"' style='width: 95%;'></div>");
                    var heatTest = standaloneHeatmap.create({index: hlen});
                    heatTest.settings.target = document.getElementById("outputHeatmap"+hlen);
                    heatTest.settings.data = heatdata;
                    heatTest.render(hlen);
		        }
	        }, function(data) {
		        container.empty();
		        var main = $('<div>');
		        main.append($('<p>')
		            .css({'padding': '10px 20px'})
		            .text('[Error] '+data.error.message));
		        container.append(main);
	        });
	        return self;
        },
        
        loggedInCallback: function(event, auth) {
            this.token = auth.token;
            this.render();
            return this;
        },

        loggedOutCallback: function(event, auth) {
            this.token = null;
            this.render();
            return this;
        },

	    uuidv4: function(a,b) {
	        for (b=a=''; a++<36; b+=a*51&52?(a^15?8^Math.random()*(a^20?16:4):4).toString(16):'-');
	        return b;
	    }
    });
})(jQuery);

/**
 * KBase widget to display table of BIOM data
 */
(function($, undefined) {
    $.KBWidget({
            name: 'AbundanceDataPcoa',
            parent: "kbaseAuthenticatedWidget",
            version: '1.0.0',
            token: null,
            options: {
	            id: null,
	            ws: null,
	            x_axis: "1",
	            y_axis: "2"
        },
	    ws_url: window.kbconfig.urls.workspace,
	    loading_image: "static/kbase/images/ajax-loader.gif",
        
	    init: function(options) {
            this._super(options);
            return this;
        },
	
        render: function() {
	        var self = this;
	        var pref = this.uuidv4();
	        
	        var container = this.$elem;
	        container.empty();
            if (self.token == null) {
                container.append("<div>[Error] You're not logged in</div>");
                return;
            }
            container.append("<div><img src=\""+self.loading_image+"\">&nbsp;&nbsp;loading data...</div>");

	        var kbws = new Workspace(self.ws_url, {'token': self.token});
	        kbws.get_objects([{ref: self.options.ws+"/"+self.options.id}], function(data) {
	            container.empty();
		        // parse data
		        if (data.length == 0) {
		            var msg = "[Error] Object "+self.options.id+" does not exist in workspace "+self.options.ws;
		            container.append('<div><p>'+msg+'>/p></div>');
		        } else {
		            var pcoa = data[0]['data'];
		            var plen = pcoa['data'].length;
                    var x_pos = parseInt(self.options.x_axis, 10) - 1;
                    var y_pos = parseInt(self.options.y_axis, 10) - 1;
                    if ((x_pos < 0) || (x_pos > (plen-1)) || (y_pos < 0) || (y_pos > (plen-1))) {
                        x_pos = 0;
                        y_pos = 1;
                    }
		            // do grouping
		            var groups = {};
		            var x_all = new Array(plen);
		            var y_all = new Array(plen);
		            for (var i = 0; i < plen; i++) {
		                // group is id if no group given
		                var data = {
		                    'id': pcoa['data'][i]['id'],
		                    'x': pcoa['data'][i]['pco'][x_pos],
		                    'y': pcoa['data'][i]['pco'][y_pos]
		                }
		                x_all[i] = pcoa['data'][i]['pco'][x_pos];
		                y_all[i] = pcoa['data'][i]['pco'][y_pos];
		                if (pcoa['data'][i]['group'] == "") {
		                    groups[pcoa['data'][i]['id']] = [ data ];
		                } else {
		                    if (groups.hasOwnProperty(pcoa['data'][i]['group'])) {
		                        groups[pcoa['data'][i]['group']].push(data);
		                    } else {
		                        groups[pcoa['data'][i]['group']] = [ data ];
		                    }
		                }
	                }
	                // build series and points
	                var colors = GooglePalette(groups.length);
	                var plotdata = {
	                    'series': [],
	                    'points': []
	                };
	                var num = 0;
	                for (var group in groups) {
	                    var coords = [];
	                    for (var i = 0; i < groups[group].length; i++) {
	                        coords.push({'x': groups[group][i]['x'], 'y': groups[group][i]['y']});
                        }
                        plotdata['series'].push({'name': group, 'color': colors[num], 'shape': 'circle', 'filled': 1});
                        plotdata['points'].push(coords);
                        num += 1;
	                }
			        // PLOT
			        var x_min = Math.min.apply(null, x_all);
			        var x_max = Math.max.apply(null, x_all);
			        var y_min = Math.min.apply(null, y_all);
			        var y_max = Math.max.apply(null, y_all);
                    var plen = 0;
                    if (window.hasOwnProperty('rendererPlot') && rendererPlot.length) {
                        plen = rendererPlot.length;
                    }
                    container.append("<div id='outputPlot"+plen+"' style='width: 95%;'></div>");
                    var plotTest = standalonePlot.create({index: plen});
                    plotTest.settings.target = document.getElementById("outputPlot"+plen);
                    plotTest.settings.data = plotdata;
                    plotTest.settings.x_min = x_min - Math.abs((x_max - x_min) * 0.1);
                    plotTest.settings.x_max = x_max + Math.abs((x_max - x_min) * 0.1);
                    plotTest.settings.y_min = y_min - Math.abs((y_max - y_min) * 0.1);
                    plotTest.settings.y_max = y_max + Math.abs((y_max - y_min) * 0.1);
			        plotTest.settings.connected = false;
			        plotTest.settings.show_dots = true;
			        plotTest.settings.show_legend = true;
                    plotTest.render(plen);
		        }
	        }, function(data) {
		        container.empty();
		        var main = $('<div>');
		        main.append($('<p>')
		            .css({'padding': '10px 20px'})
		            .text('[Error] '+data.error.message));
		        container.append(main);
	        });
	        return self;
        },
        
        loggedInCallback: function(event, auth) {
            this.token = auth.token;
            this.render();
            return this;
        },

        loggedOutCallback: function(event, auth) {
            this.token = null;
            this.render();
            return this;
        },

	    uuidv4: function(a,b) {
	        for (b=a=''; a++<36; b+=a*51&52?(a^15?8^Math.random()*(a^20?16:4):4).toString(16):'-');
	        return b;
	    }
    });
})(jQuery);

/**
 * KBase widget to display table of BIOM data
 */
(function($, undefined) {
    $.KBWidget({
            name: 'RankAbundancePlot',
            version: '1.0.0',
            options: {
	            id: null,
	            ws: null,
	            auth: null,
	            name: 0,
	            top: "10",
	            order: "average"
        },
	    ws_url: window.kbconfig.urls.workspace,
	    loading_image: "static/kbase/images/ajax-loader.gif",
        
	    init: function(options) {
            this._super(options);
            return this.render();
        },
	
        render: function() {
	        var self = this;
	        var pref = this.uuidv4();
	        var container = this.$elem;
	        var kbws = new Workspace(self.ws_url, {'token': self.options.auth});
            
	        container.empty();
	        container.append("<div><img src=\""+self.loading_image+"\">&nbsp;&nbsp;loading data...</div>");

	        kbws.get_objects([{ref: self.options.ws+"/"+self.options.id}], function(data) {
	            container.empty();
		        // parse data
		        if (data.length == 0) {
		            var msg = "[Error] Object "+self.options.id+" does not exist in workspace "+self.options.ws;
		            container.append('<div><p>'+msg+'>/p></div>');
		        } else {
		            var biom = data[0]['data'];
		            var matrix = [];
		            var colnum = biom['columns'].length;
		            var rownum = biom['rows'].length;
		            var rdata  = new Array(rownum);
		            // get matrix
		            if (biom['matrix_type'] == 'sparse') {
			            matrix = self.sparse2dense(biom['data'], biom['shape'][0], biom['shape'][1]);
		            } else {
			            matrix = biom['data'];
		            }
		            // get row data / stats
		            for (var r = 0; r < rownum; r++) {
		                var rowtemp = [ biom['rows'][r]['id'], 0, 0, 0 ]; // name, sum, average, max
                        for (var i = 0; i < colnum; i++) {
                            rowtemp[1] += matrix[r][i];
                            rowtemp.push(matrix[r][i])
                        }
                        rowtemp[2] = rowtemp[1] / colnum;
                        rowtemp[3] = Math.max.apply(null, matrix[r]);
		                rdata[r] = rowtemp;
	                }
	                var bardebug = new Array(10);
	                for (var i = 0; i < 10; i++) {
	                    bardebug[i] = rdata[i];
                    }
		            // sort by a metagenome or by sum / average / max
		            if (self.options.order == 'sum') {
		                rdata.sort(function(a,b) { return b[1] - a[1]; });
		            } else if (self.options.order == 'average') {
		                rdata.sort(function(a,b) { return b[2] - a[2]; });
	                } else if (self.options.order == 'max') {
	                    rdata.sort(function(a,b) { return b[3] - a[3]; });
                    } else {
                        var order_pos = 4;
		                if (isPositiveInteger(self.options.order)) {
		                    order_pos = parseInt(self.options.order, 10) + 3;
		                }
		                if ((order_pos - 1) > rdata.length) {
		                    order_pos = 4;
		                }
		                rdata.sort(function(a,b) { return b[order_pos] - a[order_pos]; });
                    }
		            // build data
		            var count = parseInt(self.options.top, 10);
		            var colors = GooglePalette(colnum);
		            var bardata = new Array(colnum);
		            var barlabels = new Array(count);
		            // names
		            for (var c = 0; c < colnum; c++) {
		                if (self.options.name == 0) {
		                    bardata[c] = {'name': biom['columns'][c]['id'], 'data': [], 'fill': colors[c]};
	                    } else {
	                        bardata[c] = {'name': biom['columns'][c]['name'], 'data': [], 'fill': colors[c]};
	                    }
	                }
		            // values
		            for (var r = 0; r < count; r++) {
		                barlabels[r] = rdata[r][0];
		                for (var c = 0; c < colnum; c++) {
		                    bardata[c]['data'].push(rdata[r][c+4]);
	                    }
	                }
			        // BARCHART
			        var glen = 0;
                    if (window.hasOwnProperty('rendererGraph') && rendererGraph.length) {
                        glen = rendererGraph.length;
                    }
			        container.append("<div id='outputGraph"+glen+"' style='width: 95%;'></div>");
			        var barTest = standaloneGraph.create({index: glen});
			        barTest.settings.target = document.getElementById("outputGraph"+glen);
			        barTest.settings.data = bardata;
			        barTest.settings.show_legend = true;
			        barTest.settings.x_labels = barlabels;
			        barTest.settings.x_labels_rotation = '340';
			        barTest.settings.height = 500;
			        barTest.settings.type = 'column';
			        barTest.render(glen);
		        }
	        }, function(data) {
		        container.empty();
		        var main = $('<div>');
		        main.append($('<p>')
		            .css({'padding': '10px 20px'})
		            .text('[Error] '+data.error.message));
		        container.append(main);
	        });
	        return self;
        },

	    sparse2dense: function(sparse, rmax, cmax) {
	        var dense = new Array(rmax);
	        for (var i = 0; i < rmax; i++) {
		        dense[i] = Array.apply(null, new Array(cmax)).map(Number.prototype.valueOf, 0);
	        }
	        // 0 values are undefined
	        for (var i = 0; i < sparse.length; i++) {
		        dense[ sparse[i][0] ][ sparse[i][1] ] = sparse[i][2];
	        }
	        return dense;
	    },
	    
	    isPositiveInteger: function(str) {
            return /^[1-9]\d*$/.test(str);
        },

	    uuidv4: function(a,b) {
	        for (b=a=''; a++<36; b+=a*51&52?(a^15?8^Math.random()*(a^20?16:4):4).toString(16):'-');
	        return b;
	    }
    });
})(jQuery);

/**
 * KBase widget to display a Metagenome
 */
(function($, undefined) {
    $.KBWidget({
        name: 'MetagenomeView',
        parent: "kbaseAuthenticatedWidget",
        version: '1.0.0',
        token: null,
        options: {
	        id: null,
	        ws: null
        },
	    ws_url: window.kbconfig.urls.workspace,
	    loading_image: "static/kbase/images/ajax-loader.gif",
        
	    init: function(options) {
            this._super(options);
            return this;
        },
	
        render: function() {
	        var self = this;

	        var container = this.$elem;
	        container.empty();
            if (self.token == null) {
                container.append("<div>[Error] You're not logged in</div>");
                return;
            }
            container.append("<div><img src=\""+self.loading_image+"\">&nbsp;&nbsp;loading data...</div>");

	        var kbws = new Workspace(self.ws_url, {'token': self.token});
	        kbws.get_objects([{ref: self.options.ws+"/"+self.options.id}], function(data) {
	            container.empty();
		        // parse data
		        if (data.length == 0) {
		            var msg = "[Error] Object "+self.options.id+" does not exist in workspace "+self.options.ws;
		            container.append('<div><p>'+msg+'>/p></div>');
		        } else {
				// parse data		            
				var d = data[0]['data'];

				// get base numbers
        			var stats  = d.statistics.sequence_stats;
        			var is_rna = (d.sequence_type == 'Amplicon') ? 1 : 0;
        			var raw_seqs    = ('sequence_count_raw' in stats) ? parseFloat(stats.sequence_count_raw) : 0;
        			var qc_rna_seqs = ('sequence_count_preprocessed_rna' in stats) ? parseFloat(stats.sequence_count_preprocessed_rna) : 0;
        			var qc_seqs     = ('sequence_count_preprocessed' in stats) ? parseFloat(stats.sequence_count_preprocessed) : 0;
        			var rna_sims    = ('sequence_count_sims_rna' in stats) ? parseFloat(stats.sequence_count_sims_rna) : 0;
        			var r_clusts    = ('cluster_count_processed_rna' in stats) ? parseFloat(stats.cluster_count_processed_rna) : 0;
        			var r_clust_seq = ('clustered_sequence_count_processed_rna' in stats) ? parseFloat(stats.clustered_sequence_count_processed_rna) : 0;
        			var ann_reads   = ('read_count_annotated' in stats) ? parseFloat(stats.read_count_annotated) : 0;
        			var aa_reads    = ('read_count_processed_aa' in stats) ? parseFloat(stats.read_count_processed_aa) : 0;
        
				// first round math
        			var qc_fail_seqs  = raw_seqs - qc_seqs;
        			var ann_rna_reads = rna_sims ? (rna_sims - r_clusts) + r_clust_seq : 0;
        			var ann_aa_reads  = (ann_reads && (ann_reads > ann_rna_reads)) ? ann_reads - ann_rna_reads : 0;
        			var unkn_aa_reads = aa_reads - ann_aa_reads;
        			var unknown_all   = raw_seqs - (qc_fail_seqs + unkn_aa_reads + ann_aa_reads + ann_rna_reads);
        			if (raw_seqs < (qc_fail_seqs + ann_rna_reads)) {
            				var diff = (qc_fail_seqs + ann_rna_reads) - raw_seqs;
            				unknown_all = (diff > unknown_all) ? 0 : unknown_all - diff;
        			}

        			// fuzzy math
        			if (is_rna) {
            				qc_fail_seqs  = raw_seqs - qc_rna_seqs;
            				unkn_aa_reads = 0;
            				ann_aa_reads  = 0;
            				unknown_all   = raw_seqs - (qc_fail_seqs + ann_rna_reads);
        			} else {
            				if (unknown_all < 0) { unknown_all = 0; }
            				if (raw_seqs < (qc_fail_seqs + unknown_all + unkn_aa_reads + ann_aa_reads + ann_rna_reads)) {
      	        				var diff = (qc_fail_seqs + unknown_all + unkn_aa_reads + ann_aa_reads + ann_rna_reads) - raw_seqs;
      	        				unknown_all = (diff > unknown_all) ? 0 : unknown_all - diff;
            				}
            				if ((unknown_all == 0) && (raw_seqs < (qc_fail_seqs + unkn_aa_reads + ann_aa_reads + ann_rna_reads))) {
      	        				var diff = (qc_fail_seqs + unkn_aa_reads + ann_aa_reads + ann_rna_reads) - raw_seqs;
      	        				unkn_aa_reads = (diff > unkn_aa_reads) ? 0 : unkn_aa_reads - diff;
            				}

            				if ((unknown_all == 0) && (unkn_aa_reads == 0) && (raw_seqs < (qc_fail_seqs + ann_aa_reads + ann_rna_reads))) {
      	        				var diff = (qc_fail_seqs + ann_aa_reads + ann_rna_reads) - raw_seqs;
      	        				ann_rna_reads = (diff > ann_rna_reads) ? 0 : ann_rna_reads - diff;
            				}
        			}

				var html = "<h3>Metagenome Data Sheet for "+d.id+"</h3>";
				html += '<table>';
				html += '<tr><td style="padding-right: 25px;"><b>Metagenome Name</b></td><td>'+d.name+'</td></tr>';
                                html += '<tr><td style="padding-right: 25px;"><b>PI</b></td><td>'+d.metadata.project.data.PI_firstname+' '+d.metadata.project.data.PI_lastname+'</td></tr>';
                                html += '<tr><td style="padding-right: 25px;"><b>Organization</b></td><td>'+d.metadata.project.data.PI_organization+'</td></tr>';
                                html += '<tr><td style="padding-right: 25px;"><b>Visibility</b></td><td>'+d["status"]+'</td></tr>';
				html += '</table>';
				html += '<h3>Metagenome Summary</h3>';
				html += '<p>The dataset '+d.name+' was uploaded on '+d.created+' and contains '+d.statistics.sequence_stats.sequence_count_raw+' sequences totaling '+d.statistics.sequence_stats.bp_count_raw+' basepairs with an average length of '+d.statistics.sequence_stats.average_length_raw+' bps.</p>';

				var is_rna = (d.sequence_type == 'Amplicon') ? 1 : 0;
				var total  = parseInt(stats['sequence_count_raw']);
        			var ptext  = " Of the remainder, "+ann_aa_reads+" sequences ("+(ann_aa_reads / total * 100).toFixed(2)+"%) contain predicted proteins with known functions and "+unkn_aa_reads+" sequences ("+(unkn_aa_reads / total * 100).toFixed(2)+"%) contain predicted proteins with unknown function.";
        			var ftext  = " "+unknown_all+" sequences ("+(unknown_all / total * 100).toFixed(2)+"%) have no rRNA genes"+(is_rna ? '.' : " or predicted proteins");
				html += '<p>'+qc_fail_seqs+' sequences ('+(qc_fail_seqs / total * 100).toFixed(2)+'%) failed to pass the QC pipeline. Of the sequences that passed QC, '+ann_rna_reads+' sequences ('+(ann_rna_reads / total * 100).toFixed(2)+'%) containe ribosomal RNA genes.'+(is_rna ? '' : ptext)+ftext+'</p>';

				html += '<h3>Project Information</h3>';
				html += '<p>This metagenome is part of the project '+d.metadata.project.data.project_name+'</p>';
				if (d.metadata.project.data.project_description) {
                    html += '<p>'+d.metadata.project.data.project_description+'</p>';
                }
				html += '<h3>Metadata</h3>';
				html += '<table class="table table-condensed table-striped" style="width: 95%;">';
				html += '<tr><th colspan=2>MIxS</th></tr>';
				for (var i in d.mixs) {
					if (d.mixs.hasOwnProperty(i)) {
                                                var x = i.replace(/_/g, " ");
						html += '<tr><td><b>'+x+'</b></td><td>'+d.mixs[i]+'</td></tr>';
					}
				}
				html += '<tr><th colspan=2>Project</th></tr>';
				for (var i in d.metadata.project.data) {
                                        if (d.metadata.project.data.hasOwnProperty(i)) {
						if (i == 'description') { continue; }
                                                var x = i.replace(/_/g, " ");
                                                html += '<tr><td><b>'+x+'</b></td><td>'+d.metadata.project.data[i]+'</td></tr>';
                                        }
                                }
                                html += '<tr><th colspan=2>Library</th></tr>';
                                for (var i in d.metadata.library.data) {
                                        if (d.metadata.library.data.hasOwnProperty(i)) {
                                                var x = i.replace(/_/g, " ");
                                                html += '<tr><td><b>'+x+'</b></td><td>'+d.metadata.library.data[i]+'</td></tr>';
                                        }
                                }
                                html += '<tr><th colspan=2>Sample</th></tr>';
                                for (var i in d.metadata.sample.data) {
                                        if (d.metadata.sample.data.hasOwnProperty(i)) {
                                                var x = i.replace(/_/g, " ");
                                                html += '<tr><td><b>'+x+'</b></td><td>'+d.metadata.sample.data[i]+'</td></tr>';
                                        }
                                }
                                html += '<tr><th colspan=2>Environmental Package</th></tr>';
                                for (var i in d.metadata.env_package.data) {
                                        if (d.metadata.env_package.data.hasOwnProperty(i)) {
						var x = i.replace(/_/g, " ");
                                                html += '<tr><td><b>'+x+'</b></td><td>'+d.metadata.env_package.data[i]+'</td></tr>';
                                        }
                                }
				html += '</table>';

		            	container.append(html);
		        }
	        }, function(data) {
		        container.empty();
		        var main = $('<div>');
		        main.append($('<p>')
		            .css({'padding': '10px 20px'})
		            .text('[Error] '+data.error.message));
		        container.append(main);
	        });
	        return self;
        },

        loggedInCallback: function(event, auth) {
            this.token = auth.token;
            this.render();
            return this;
        },

        loggedOutCallback: function(event, auth) {
            this.token = null;
            this.render();
            return this;
        }
    });
})(jQuery);

/**
 * KBase widget to display a Metagenome Collection
 */
(function($, undefined) {
    $.KBWidget({
        name: 'CollectionView',
        parent: "kbaseAuthenticatedWidget",
        version: '1.0.0',
        token: null,
        options: {
	        id: null,
	        ws: null
        },
	    ws_url: window.kbconfig.urls.workspace,
	    loading_image: "static/kbase/images/ajax-loader.gif",
        
	    init: function(options) {
            this._super(options);
            return this;
        },
	
        render: function() {
	        var self = this;

	        var container = this.$elem;
	        container.empty();
            if (self.token == null) {
                container.append("<div>[Error] You're not logged in</div>");
                return;
            }
            container.append("<div><img src=\""+self.loading_image+"\">&nbsp;&nbsp;loading data...</div>");

	        var kbws = new Workspace(self.ws_url, {'token': self.token});
	        kbws.get_objects([{ref: self.options.ws+"/"+self.options.id}], function(data) {
	            container.empty();
		        // parse data
		        if (data.length == 0) {
		            var msg = "[Error] Object "+self.options.id+" does not exist in workspace "+self.options.ws;
		            container.append('<div><p>'+msg+'>/p></div>');
		        } else {
			        // parse data		            
			        var d = data[0]['data'];
			        var idList = [];
			        for (var i=0; i<d.members.length; i++) {
				        idList.push({ ref: d.members[i].URL });
			        }
                
                    if (idList.length > 0) {
			            kbws.get_objects(idList, function(resData) {
                            var tdata = [];
                            for (var i=0; i<resData.length; i++) {
                                tdata.push([
                                    resData[i].data.id,
                                    resData[i].data.name,
                                    resData[i].data.mixs.project_name,
                                    resData[i].data.mixs.PI_lastname,
                                    resData[i].data.mixs.biome,
                                    resData[i].data.mixs.sequence_type,
                                    resData[i].data.mixs.seq_method,
                                    resData[i].data["status"],
                                    resData[i].data.created
                                ]);
                            }
                        
				            var tlen = 0;
                            if (window.hasOwnProperty('rendererTable') && rendererTable.length) {
                                tlen = rendererTable.length;
                            }
				        
				            var html = '<h3>Metagenome Collection '+d.name+'</h3><div id="collectionTable'+tlen+'" style="width: 95%;"></div>';
		            	    container.append(html);

				            var tableCollection = standaloneTable.create({index: tlen});
                            tableCollection.settings.target = document.getElementById("collectionTable"+tlen);
                            tableCollection.settings.data = { header: ["ID", "name", "Project", "PI", "biome", "sequence type", "sequencing method", "status", "created"], data: tdata };
                            tableCollection.render(tlen);
			            });
		            } else {
		                container.empty();
    		            var main = $('<div>');
    		            main.append($('<p>')
    		                .css({'padding': '10px 20px'})
    		                .text('[Error] collection is empty'));
    		                container.append(main);
		            }
	            }
	        }, function(data) {
		        container.empty();
		        var main = $('<div>');
		        main.append($('<p>')
		            .css({'padding': '10px 20px'})
		            .text('[Error] '+data.error.message));
		        container.append(main);
	        });
	        return self;
        },

        loggedInCallback: function(event, auth) {
            this.token = auth.token;
            this.render();
            return this;
        },

        loggedOutCallback: function(event, auth) {
            this.token = null;
            this.render();
            return this;
        }
    });
})(jQuery);

/**
 * KBase widget to display table and boxplot of BIOM data
 */
(function($, undefined) {
    $.KBWidget({
        name: 'AnnotationSetTable',
        parent: "kbaseAuthenticatedWidget",
        version: '1.0.0',
        token: null,
        options: {
	        id: null,
	        ws: null
        },
	    ws_url: window.kbconfig.urls.workspace,
	    loading_image: "static/kbase/images/ajax-loader.gif",
        
	    init: function(options) {
            this._super(options);
            return this;
        },
	
        render: function() {
	        var self = this;
	        var container = this.$elem;
	        container.empty();
            if (self.token == null) {
                container.append("<div>[Error] You're not logged in</div>");
                return;
            }
            container.append("<div><img src=\""+self.loading_image+"\">&nbsp;&nbsp;loading data...</div>");

	        var kbws = new Workspace(self.ws_url, {'token': self.token});
	        kbws.get_objects([{ref: self.options.ws+"/"+self.options.id}], function(data) {
	            container.empty();
		        // parse data
		        if (data.length == 0) {
		            var msg = "[Error] Object "+self.options.id+" does not exist in workspace "+self.options.ws;
		            container.append('<div><p>'+msg+'>/p></div>');
		        } else {
		            var otus = data[0]['data']['otus'];
		            var cnames = ['features', 'functional role', 'abundance', 'avg e-value', 'otu']
		            var tdata  = [];
		            
		            for (var o = 0; o < otus.length; o++) {
		                funcs = otus[o]['functions']
		                for (var f = 0; f < funcs.length; f++) {
		                    tdata.push([
		                        funcs[f]['reference_genes'].join("<br>"),
		                        funcs[f]['functional_role'],
		                        funcs[f]['abundance'],
		                        funcs[f]['confidence'],
                                otus[o]['name']
		                    ]);
	                    }
	                }
	                
	                var tlen = 0;
	    		    if (window.hasOwnProperty('rendererTable') && rendererTable.length) {
				        tlen = rendererTable.length;
			        }
            	    container.append('<div id="annotationTable'+tlen+'" style="width: 95%;"></div>');
			        
			        var tableAnn = standaloneTable.create({index: tlen});
	  		        tableAnn.settings.target = document.getElementById("annotationTable"+tlen);
	    		    tableAnn.settings.data = { header: cnames, data: tdata };
			        tableAnn.settings.filter = { 1: { type: "text" } };
			        var mw = [ 120 ];
			        for (var i=1; i<cnames.length; i++) {
				        mw.push(130);
			        }
			        tableAnn.settings.minwidths = mw;
			        tableAnn.render(tlen);
		        }
	        }, function(data) {
		        container.empty();
		        var main = $('<div>');
		        main.append($('<p>')
		            .css({'padding': '10px 20px'})
		            .text('[Error] '+data.error.message));
		        container.append(main);
	        });
	        return self;
        },

        loggedInCallback: function(event, auth) {
            this.token = auth.token;
            this.render();
            return this;
        },

        loggedOutCallback: function(event, auth) {
            this.token = null;
            this.render();
            return this;
        }
    });
})(jQuery);

/**
 * Output widget to vizualize DomainAnnotation object.
 * Pavel Novichkov <psnovichkov@lbl.gov>
 * @public
 */


(function($, undefined) {
    $.KBWidget({
        name: 'kbaseDomainAnnotation',
        parent: 'kbaseAuthenticatedWidget',
        version: '1.0.1',
        options: {
            domainAnnotationID: null,
            workspaceID: null,
            domainAnnotationVer: null,
            kbCache: null,
            workspaceURL: "https://kbase.us/services/ws/",  //"http://dev04.berkeley.kbase.us:7058",
            loadingImage: "static/kbase/images/ajax-loader.gif",
            height: null,
        },

        // Data for vizualization
        domainAnnotationData: null,
        genomeRef: null,
        genomeId: null,
        genomeName: null,
        domainModelSetRef: null,
        domainModelSetName: null,
        domainAccession2Description: {},
        annotatedGenesCount: 0,
        annotatedDomainsCount: 0,


        init: function(options) {
            this._super(options);


            // TEMPORARY
            if(this.options.domainAnnotationID == null){
                this.options.domainAnnotationID = 12;
                this.options.workspaceID = 2959;
                this.options.domainAnnotationVer = 8;
            }

            // Create a message pain
            this.$messagePane = $("<div/>").addClass("kbwidget-message-pane kbwidget-hide-message");
            this.$elem.append(this.$messagePane);

            return this;
        },

        loggedInCallback: function(event, auth) {

            // Cretae a new workspace client
            this.ws = new Workspace(this.options.workspaceURL, auth);
           
            // Let's go...
            this.render();           
           
            return this;
        },
        loggedOutCallback: function(event, auth) {
            this.ws = null;
            this.isLoggedIn = false;
            return this;
        },

  
        render: function(){

            var self = this;
            self.pref = this.uuid();
            self.loading(true);

            var container = this.$elem;
            var kbws = this.ws;


            //self.options.workspaceID + "/" + self.options.domainAnnotationID;
            //kbws.get_objects([{ref: domainAnnotationRef}], function(data) {

            var domainAnnotationRef = self.buildObjectIdentity(this.options.workspaceID, this.options.domainAnnotationID, this.options.domainAnnotationVer);
            kbws.get_objects([domainAnnotationRef], function(data) {

                self.domainAnnotationData = data[0].data;
                self.genomeRef = self.domainAnnotationData.genome_ref;
                self.domainModelSetRef = self.domainAnnotationData.used_dms_ref;


                // Job to get properties of AnnotationDomain object: name and id of the annotated genome
                var jobGetDomainAnnotationProperties = kbws.get_object_subset(
                    [
                        { 'ref':self.genomeRef, 'included':['/id'] },
                        { 'ref':self.genomeRef, 'included':['/scientific_name'] }
                    ], 
                    function(data){
                        self.genomeId = data[0].data.id;
                        self.genomeName = data[1].data.scientific_name;
                    }, 
                    function(error){
                        self.clientError(error);
                    }                    
                );

                var jobGetDomainModelSet =  kbws.get_objects(
                    [{ref: self.domainModelSetRef}], 
                    function(data) {
                        self.domainSetName = data[0].data.set_name;
                        self.domainAccession2Description = data[0].data.domain_accession_to_description;
                    },
                    function(error){
                        self.clientError(error);
                    }
                );

                // Launch jobs and vizualize data once they are done
                $.when.apply($, [jobGetDomainAnnotationProperties, jobGetDomainModelSet]).done( function(){
                    self.loading(false);
                    self.prepareVizData();

                    ///////////////////////////////////// Instantiating Tabs ////////////////////////////////////////////
                    container.empty();
                    var tabPane = $('<div id="'+self.pref+'tab-content">');
                    container.append(tabPane);
                    tabPane.kbaseTabs({canDelete : true, tabs : []});                    

                    ///////////////////////////////////// Overview table ////////////////////////////////////////////           
                    var tabOverview = $("<div/>");
                    tabPane.kbaseTabs('addTab', {tab: 'Overview', content: tabOverview, canDelete : false, show: true});
                    var tableOver = $('<table class="table table-striped table-bordered" '+
                        'style="width: 100%; margin-left: 0px; margin-right: 0px;" id="'+self.pref+'overview-table"/>');
                    tabOverview.append(tableOver);
                    tableOver
                        .append( self.makeRow( 
                            'Annotated genome', 
                            $('<span />').append(self.genomeName).css('font-style', 'italic') ) )
                        .append( self.makeRow( 
                            'Domain models set', 
                            self.domainSetName ) )
                        .append( self.makeRow( 
                            'Annotated genes', 
                            self.annotatedGenesCount ) )
                        .append( self.makeRow( 
                            'Annotated domains', 
                            self.annotatedDomainsCount) );

                    ///////////////////////////////////// Domains table ////////////////////////////////////////////          
                    var tabDomains = $("<div/>");
                    tabPane.kbaseTabs('addTab', {tab: 'Domains', content: tabDomains, canDelete : false, show: false});
                    var tableDomains = $('<table class="table table-striped table-bordered" '+
                        'style="width: 100%; margin-left: 0px; margin-right: 0px;" id="'+self.pref+'domain-table"/>');
                    tabDomains.append(tableDomains);
                    var domainTableSettings = {
                        "sPaginationType": "full_numbers",
                        "iDisplayLength": 10,
                        "aaData": [],
                        "aaSorting": [[ 2, "asc" ], [0, "asc"]],
                        "aoColumns": [
                                      { "sTitle": "Domain", 'mData': 'id'},
                                      { "sTitle": "Description", 'mData': 'description'},
                                      { "sTitle": "#Genes", 'mData': 'geneCount'},
                                      { "sTitle": "Genes", 'mData': 'geneRefs'},
                        ],
                        "oLanguage": {
                                    "sEmptyTable": "No domains found!",
                                    "sSearch": "Search: "
                        },
                        'fnDrawCallback': events
                    };

                    var domainsTableData = [];
                    var domains = self.domains;
                    for(var domainId in domains){
                        var domain = domains[domainId];

                        // Build concatenated list of gene references
                        var geneRefs = "";
                        for(var i = 0; i < domain.genes.length; i++){
                            gene = domain.genes[i];
                            if( i > 0 ) {
                                geneRefs += '<br />';
                            }                            
                            geneRefs += '<a class="show-gene' + self.pref  + '"'
                                + ' data-id="' + gene['geneId'] + '"'
                                + ' data-contigId="' + gene['contigId']  + '"'
                                + ' data-geneIndex="' + gene['geneIndex']  + '"'
                                + '>' + gene['geneId'] + '</a>';
                        }
 
                        // add table data row            
                        domainsTableData.push(
                            {
                                //id: '<a class="' + self.pref + 'gene-click" data-domainid="' + domainId + '">' + domainId + '</a>', 
                                id: domainId, 
                                description: domain.description,
                                geneCount: domain.genes.length,
                                geneRefs: geneRefs
                            }
                        );
                    };
                    domainTableSettings.aaData = domainsTableData;
                    tableDomains.dataTable(domainTableSettings);


                    ///////////////////////////////////// Events ////////////////////////////////////////////          

                    function events() {
                        $('.show-gene'+self.pref).unbind('click');
                        $('.show-gene'+self.pref).click(function() {
                            var id = $(this).attr('data-id');
                            var contigId = $(this).attr('data-contigId');
                            var geneIndex = $(this).attr('data-geneIndex');

                            if (tabPane.kbaseTabs('hasTab', id)) {
                                tabPane.kbaseTabs('showTab', id);
                                return;
                            }

                            ////////////////////////////// Build Gene Domains table //////////////////////////////
                            var tabContent = $("<div/>");


                            var tableGeneDomains = $('<table class="table table-striped table-bordered" '+
                                'style="width: 100%; margin-left: 0px; margin-right: 0px;" id="' + self.pref + id + '-table"/>');
                            tabContent.append(tableGeneDomains);
                            var geneDomainTableSettings = {
                                "sPaginationType": "full_numbers",
                                "iDisplayLength": 10,
                                "aaData": [],
                                "aaSorting": [[ 3, "asc" ], [5, "desc"]],
                                "aoColumns": [
                                    {sTitle: "Domain", mData: "domainId"},
                                    {sTitle: "Description", mData: "domainDescription", sWidth:"30%"},
                                    {sTitle: "Location", mData: "image"},
                                    {sTitle: "Start", mData: "domainStart"},
                                    {sTitle: "End", mData: "domainEnd"},
                                    {sTitle: "eValue", mData: "eValue"},
                                ],
                                "oLanguage": {
                                    "sEmptyTable": "No domains found!",
                                    "sSearch": "Search: "
                                }
                            };
                            var geneDomainsTableData = [];

                            var gene = self.domainAnnotationData.data[contigId][geneIndex];
                            var geneId = gene[0];
                            var geneStart = gene[1];
                            var geneEnd = gene[2];
                            var domainsInfo = gene[4];


                            for(var domainId in domainsInfo){
                                var domainsArray = domainsInfo[domainId];
                                for(var i = 0 ; i < domainsArray.length; i++){
                                    var domainStart = domainsArray[i][0];
                                    var domainEnd = domainsArray[i][1];
                                    var eValue = domainsArray[i][2];

                                    var geneLength = (geneEnd - geneStart + 1)/3;
                                    var domainImgWidth = (domainEnd - domainStart)*100/geneLength;
                                    var domainImgleftShift = (domainStart)*100/geneLength;

                                    geneDomainsTableData.push({
                                        'contigId' : contigId,
                                        'geneId' : geneId,
                                        'geneStart' : geneStart,
                                        'geneEnd' : geneEnd,
                                        'domainId' : domainId,
                                        'domainDescription' : self.domainAccession2Description[domainId],
                                        'domainStart': domainStart, 
                                        'domainEnd' : domainEnd, 
                                        'eValue' : eValue,
                                        'image' : 
                                                '<div style="widht: 100%; height:100%; vertical-align: middle; margin-top: 1em; margin-bottom: 1em;">'
                                                + '<div style="position:relative; border: 1px solid gray; width:100%; height:2px;">' 
                                                + '<div style="position:relative; left: ' + domainImgleftShift +'%;' 
                                                + ' width:' + domainImgWidth + '%;'
                                                + ' top: -5px; height:10px; background-color:red;"/></div>'
                                                + '</div>'
                                    });
                                }
                            }                            
                            geneDomainTableSettings.aaData = geneDomainsTableData;
                            tableGeneDomains.dataTable(geneDomainTableSettings);
                            tabPane.kbaseTabs('addTab', {tab: id, content: tabContent, canDelete : true, show: true});
                        });
                    };
                });                
            });
        },
       
        prepareVizData: function(){
            var self = this;

            var dad = self.domainAnnotationData;

            var domains = {};
            var domainsCount = 0;
            var genesCount = 0;

            for(var contigId in dad.data){

                var genesArray = dad.data[contigId];
                for(var i = 0 ; i < genesArray.length; i++){
                    var geneId = genesArray[i][0];
//                    var geneStart = genesArray[i][1];
//                    var geneEnd = genesArray[i][2];
                    var domainsInfo = genesArray[i][4];
                    if( $.isEmptyObject(domainsInfo)) continue;

                    // If we have somthing in domainsIno, then the gene was anntoated
                    genesCount ++;
                    for(var domainId in domainsInfo){
                        var domainData = domains[domainId];
                        if(typeof domainData === 'undefined'){
                            domainData = {
                                id: domainId,
                                description: self.domainAccession2Description[domainId],
                                genes: []
                            };
                            domains[domainId] = domainData;
                            domainsCount++;
                        }

                        domainData.genes.push(
                            {
                                geneId: geneId,
                                contigId: contigId, 
                                geneIndex: i
                            }
                        );
                    }
                }
                self.domains = domains;
                self.annotatedDomainsCount = domainsCount; 
                self.annotatedGenesCount = genesCount;
            }
        },

        makeRow: function(name, value) {
            var $row = $("<tr/>")
                       .append($("<th />").css('width','20%').append(name))
                       .append($("<td />").append(value));
            return $row;
        },

        getData: function() {
            return {
                type: 'DomainAnnotation',
                id: this.options.domainAnnotationID,
                workspace: this.options.workspaceID,
                title: 'Domain Annotation'
            };
        },

        loading: function(isLoading) {
            if (isLoading)
                this.showMessage("<img src='" + this.options.loadingImage + "'/>");
            else
                this.hideMessage();                
        },

        showMessage: function(message) {
            var span = $("<span/>").append(message);

            this.$messagePane.append(span);
            this.$messagePane.show();
        },

        hideMessage: function() {
            this.$messagePane.hide();
            this.$messagePane.empty();
        },
        uuid: function() {
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, 
                function(c) {
                    var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);
                    return v.toString(16);
                });
        },
        buildObjectIdentity: function(workspaceID, objectID, objectVer, wsRef) {
            var obj = {};
            if (wsRef) {
                obj['ref'] = wsRef;
            } else {
                if (/^\d+$/.exec(workspaceID))
                    obj['wsid'] = workspaceID;
                else
                    obj['workspace'] = workspaceID;

                // same for the id
                if (/^\d+$/.exec(objectID))
                    obj['objid'] = objectID;
                else
                    obj['name'] = objectID;
                
                if (objectVer)
                    obj['ver'] = objectVer;
            }
            return obj;
        },        
        clientError: function(error){
            this.loading(false);
            this.showMessage(error.error.error);
        }        

    });
})( jQuery );
/**
 * Output widget for creation/visualization/modification of set of genomes.
 * @author Bill Riehl <wjriehl@lbl.gov>, Roman Sutormin <rsutormin@lbl.gov>
 * @public
 */

(function( $, undefined ) {
    $.KBWidget({
        name: "kbaseGenomeSetBuilder",
        parent: "kbaseAuthenticatedWidget",
        version: "1.0.0",
        options: {
        	loadExisting: null,
        	wsName: null,
        	genomeSetName: null,
            loadingImage: "../images/ajax-loader.gif",
        },

        useSelect2: true,
        IGNORE_VERSION: true,
        pref: null,
        wsUrl: "https://kbase.us/services/ws/",  //"http://dev04.berkeley.kbase.us:7058",
        genomeList: null,
        	
        init: function(options) {
            this._super(options);
            this.pref = this.genUUID();
            this.render();
            return this;
        },

        render: function() {
        	if (this.options.loadExisting == 1) {
        		if (!this.authToken()) {
        			this.$elem.empty();
        			this.$elem.append("<div>[Error] You're not logged in</div>");
                	return;
        		}
                var kbws = new Workspace(this.wsUrl, {'token': this.authToken()});
        		var prom = kbws.get_objects([{workspace:this.options.wsName, name: this.options.genomeSetName}]);
        		var self = this;
        		$.when(prom).done(function(data) {
                	var data = data[0].data;
                	var state = { descr: data.description };
                	var obj_refs = [];
                	for (var key in data.elements)
                		obj_refs.push({ref: data.elements[key]['ref']});
                	$.when(kbws.get_object_info(obj_refs)).then(function(refinfo) {
                		var refhash = {};
                        for (var i=0; i<refinfo.length; i++) {
                            var item = refinfo[i];
                            refhash[obj_refs[i].ref] = item[7]+"/"+item[1];
                        }
                		var count = 0;
                		for (var key in data.elements) {
                			state[key] = refhash[data.elements[key]['ref']].split('/')[1];
                		}
                		self.renderState(state);
                	}).fail(function(e){
                		self.$elem.append('<div class="alert alert-danger">'+
                                e.error.message+'</div>')
            		});
            	}).fail(function(e){
                	self.$elem.append('<div class="alert alert-danger">'+
                                e.error.message+'</div>')
            	});
        	} else {
        		this.renderState({});
        	}
        },
                
        renderState: function(state) {
        	this.$elem.empty();
        	var cellStyle = "border:none; vertical-align:middle;";
            var inputDiv = "<div class='kb-cell-params'>" +
            		"<b>Target genome set object name:</b> " + this.options.genomeSetName + "<br>" +
            		"<font size='-1'>(genome fields may be left blank if they are not needed)</font><br>"+
            		"<table id='gnms" + this.pref + "' class='table'>" +
        			"<tr style='" + cellStyle + "'>" + 
            		"<td style='" + cellStyle + "'><b>Genome set description</b></td>" +
            		"<td style='" + cellStyle + " width: 80%;'>" +
            			"<input class='form-control' style='width: 100%' id='descr"+this.pref+"' name='descr' value='' type='text'/>" +
            		"</td>" +
            		"<td style='" + cellStyle + "'></td>" +
            		"</tr>" +
            		"</table>";
            inputDiv += "You can <button id='add"+this.pref+"'>Add</button> more genomes " +
            		"and finally <button id='save"+this.pref+"'>Save</button> genome set object." +
            		"</div>";
            this.$elem.append(inputDiv);
            var self = this;
            $('#add'+this.pref).click(function(e) {
            	self.addParam("");
            	self.refresh();
            });
            $('#save'+this.pref).click(function(e) {
            	self.saveIntoWs();
            });
            if (this.size(state) == 0) {
            	this.addParam("");
            } else {
            	for (var key in state)
            		if (state.hasOwnProperty(key) && key.indexOf("param") == 0)
            			this.addParam(state[key]);
            }
            if (state.hasOwnProperty("descr")) {
                $(this.$elem).find("[name^=descr]").filter(":input").each(function(key, field) {
                    var $field = $(field);
                    if ($field.is("input") && $field.attr("type") === "text") {
                        $field.val(state["descr"]);
                    }
                });
            }
            this.refresh();
        },

        saveIntoWs: function() {
        	var self = this;
            var kbws = new Workspace(this.wsUrl, {'token': this.authToken()});
            var elems = {};
            var state = this.getState();
        	for (var key in state)
        		if (state.hasOwnProperty(key) && key.indexOf("param") == 0 && state[key].length > 0)
        			elems[key] = {ref: this.options.wsName + "/" + state[key]};
			var gset = {
					description: state['descr'],
					elements: elems
			};
			kbws.save_objects({workspace: this.options.wsName, objects: [{type: 'KBaseSearch.GenomeSet', 
				name: this.options.genomeSetName, data: gset}]}, function(data) {
        			self.trigger('updateData.Narrative');
					self.showInfo('Genome set object <b>' + self.options.genomeSetName + '</b> '+
							'was stored into workspace <b>' + self.options.wsName + '</b>');
				}, function(data) {
					alert('Error: ' + data.error.message);
				});
        },
        
        addParam: function(genomeObjectName) {
        	var self = this;
        	var paramPos = this.size(this.getState());
        	var pid = "param" + paramPos;
        	var cellStyle = "border:none; vertical-align:middle;";
        	$('#gnms'+this.pref).append("" +
        			"<tr style='" + cellStyle + "'>" + 
                		"<td style='" + cellStyle + "'><b>Genome " + (paramPos + 1) + "</b></td>" +
                		"<td style='" + cellStyle + " width: 80%;'>" +
                			"<input class='form-control' style='width: 100%' name='"+pid+"' " +
                					"id='inp_"+pid+"_"+this.pref+"' value='"+genomeObjectName+"' type='text'/>" +
                			
                		"</td>" +
                		"<td style='"+cellStyle+"'><center>"+
                			"<button id='btn_"+pid+'_'+this.pref+"' class='form-control' style='max-width:40px;'>"+
                				"<span class='glyphicon glyphicon-trash'/></button></center>"+
                		"</td>" +
                	"</tr>");
        	$('#btn_' + pid + '_' + this.pref).click(function(e) {
        		$('#inp_' + pid + '_' + self.pref).val('');
            });
        },
        
        size: function(obj) {
        	var size = 0;
        	for (var key in obj)
        		if (obj.hasOwnProperty(key) && key.indexOf("param") == 0) 
        			size++;
        	return size;
        },
        
        /**
         * Returns an object representing the state of this widget.
         * In this particular case, it is a list of key-value pairs, like this:
         * { 
         *   'param0' : 'parameter value',
         *   'param1' : 'parameter value'
         * }
         * with one key/value for each parameter in the defined method.
         */
        getState: function() {
            var state = {};

            $(this.$elem).find("[name^=param]").filter(":input").each(function(key, field) {
                state[field.name] = field.value;
            });

            $(this.$elem).find("[name^=descr]").filter(":input").each(function(key, field) {
                state[field.name] = field.value;
            });

            return state;
        },

        /**
         * Adjusts the current set of parameters based on the given state.
         * Doesn't really do a whole lot of type checking yet, but it's assumed that
         * a state will be loaded from an object generated by getState.
         */
        loadState: function(state) {
            if (!state)
                return;
            this.renderState(state);
        },

        /**
         * Refreshes the input fields for this widget. I.e. if any of them reference workspace
         * information, those fields get refreshed without altering any other inputs.
         */
        refresh: function() {
        	var type = "KBaseGenomes.Genome";
            var lookupTypes = [type];
            var size = this.size(this.getState());
            var self = this;
            if (this.genomeList && this.genomeList.length > 0) {
            	this.refreshInputs();
            } else {
            	this.trigger('dataLoadedQuery.Narrative', [lookupTypes, this.IGNORE_VERSION, $.proxy(
            			function(objects) {
            				var objList = [];
            				/*
            				 * New sorting - by date, then alphabetically within dates.
            				 */
            				if (objects[type] && objects[type].length > 0) {
            					objList = objects[type];
            					objList.sort(function(a, b) {
            						if (a[3] > b[3]) return -1;
            						if (a[3] < b[3]) return 1;
            						if (a[1] < b[1]) return -1;
            						if (a[1] > b[1]) return 1;
            						return 0;
            					});
            				}
            				self.genomeList = objList;
            				self.refreshInputs();
            			},
            			this
            	)]);
            }
        },

        refreshInputs: function() {
        	var type = "KBaseGenomes.Genome";
        	var lookupTypes = [type];
        	var size = this.size(this.getState());
        	var objList = this.genomeList;
        	for (var i=0; i<size; i++) {
        		var pid = 'param' + i;
        		var $input = $($(this.$elem).find("[name=" + pid + "]"));
        		var datalistID = $input.attr('list');
        		if (objList.length == 0 && datalistID) {
        			$(this.$elem.find("#" + datalistID)).remove();
        			$input.removeAttr('list');
        			$input.val("");
        		}
        		else if (objList.length > 0) {
        			var $datalist;
        			if (!datalistID) {
        				datalistID = this.genUUID();
        				$input.attr('list', datalistID);
        				$datalist = $('<datalist>')
        				.attr('id', datalistID);
        				$input.after($datalist);
        			}
        			else {
        				$datalist = $(this.$elem.find("#" + datalistID));
        			}
        			$datalist.empty();
        			for (var j=0; j<objList.length; j++) {
        				$datalist.append($('<option>')
        						.attr('value', objList[j][1])
        						.append(objList[j][1]));
        			}
        		}
        	}
        },

        genUUID: function() {
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
                var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);
                return v.toString(16);
            });
        },

        loggedInCallback: function(event, auth) {
            this.render();
            return this;
        },

        loggedOutCallback: function(event, auth) {
            this.render();
            return this;
        },
        
        showInfo: function(message) {
        	$('<div/>').kbasePrompt({title : 'Information', body : message}).openPrompt();
        }
    });

})( jQuery );

/*
  Table Renderer

  Displays a browsable, filterable table with clickable cells / rows.

  Options

  target (HTML Container Element)
      Element to render the table in.

  width (INT)
      Width of the table.

  height (INT)
      Height of the table.

  rows_per_page (INT)
      The maximum number of table rows to be displayed at a time. Default is 10.

  sortcol (INT)
      Zero based index of the row the table should be sorted by. Default is 0.

  sorted (BOOLEAN)
      Enables / disabled initial sorting of the table by the sortcol. Default is false.
  
  offset (INT)
      Initial first row to display. Default is 0.

  invisible_columns (HASH)
      Hash of column indices pointing at 1. Columns in this hash are not displayed.

  disable_sort (HASH)
      Hash of column indices pointing at 1. Columns in this hash can not be sorted.

  sorttype (HASH)
      Hash of column indices pointing at a sorttype. A sorttype can be either string or number.

  filter_autodetect (BOOLEAN)
      If set to false will try to detect which filter type is most appropriate for each column. Default is false.

  filter_autodetect_select_max (INT)
      Maximum number of distinct entries in a column that will still autodetec the column filter as a select box. Default is 10.

  editable (HASH of BOOLEAN)
      The key of the hash is the column index. If set to true, clicking a cell in this column will display an input field allowing to change the content of the cell.

  sort_autodetect (BOOLEAN)
      If set to true will try to detect which sorttype is appropriate for each column. Default is false.

  filter (HASH)
      Hash of column indices pointing at filter objects. A filter object has the properties
        searchword - the current entry in the search field
        case_sensitive - boolean to turn on / off case sensitivity in filtering
        operator - list of operators available in this filter
        active_operator - selected operator
        type - text or select

  hide_options (BOOLEAN)
      Turns display of the options button on and off. Default is false (the option button is visible).

  onclick (FUNCTION)
      The function to be called when the table is clicked. This function will be passed the parameters (as an ordered list)
        clicked_row - array of contents of the cells of the clicked row
        clicked_cell - content of the clicked cell
        clicked_row_index - zero based index of the clicked row
        clicked_cell_index - zero based index of the clicked cell

  edit_callback (FUNCTION)
      The function to be called when a cell is edited. This function is passed the table data. It is organised as a list of hashes with each column name pointing at the value of the cell.

  synchronous (BOOLEAN)
      This is true by default. If set to false, the table expects its data to be set, filtered and browsed externally. It will issue a callback to the navigation callback function on any of those events, expecting an external data update.

  navigation_callback (FUNCTION)
      The function to be called when a navigation / filter action is issued and the table is in asynchronous state (synchronous set to false). It will be passed either a string ("previous", "next", "first", "last") or an object that can contain one of the following structures:
        sort: { sort: $fieldname, dir: [ "asc" | "desc" ] }
        query: [ { searchword: $filter_value, field: $column_name_to_search, comparison: $comparison_operator }, ... ]
        goto: $row_index
        limit: $number_of_rows_per_page
    
*/
(function () {
    var root = this;
    var standaloneTable = root.standaloneTable = {
	about: {
	    name: "table",
	    title: "Table",
            author: "Tobias Paczian",
            version: "1.0",
            requires: [],
            defaults: {
		'width': null,
		'height': null,
		'rows_per_page': 10,
		'sortcol': 0,
		'sorted': false,
		'offset': 0,
		'invisible_columns' : {},
		'disable_sort': {},
		'sortdir': 'asc',
		'sorttype': {},
		'filter_autodetect': false,
		'filter_autodetect_select_max': 10,
		'sort_autodetect': false,
		'filter': {},
		'hide_options': false,
		'filter_changed': false,
		'editable': {},
		'edit_callback': null,
		'navigation_callback': null,
		'navigation_url': null,
		'target': 'table_space',
		'synchronous': true,
		'query_type': 'infix',
		'asynch_column_mapping': null
	    },
	  options: [
	      { general:
		[
		    { name: 'editable', type: 'bool', description: "can cell data be edited?",
		      title: "editable" },
		    { name: 'filter_autodetect', type: 'bool', description: "should all columns have an auto detected filter?",
		      title: "filter autodetection" },
		]
	      },
	      { layout:
		[
		    { name: 'width', type: 'int', description: "width of the table in pixel", title: "width" },
		    { name: 'height', type: 'int', description: "height of the table in pixel", title: "height" },
		    { name: 'rows_per_page', type: 'int', description: "number of rows diplayed per page", title: "rows per page" },
		]
	      }
	  ]
      },

	create: function (params) {
	    var renderer = this;
	    if (! window.hasOwnProperty('rendererTable')) {
		window.rendererTable = [];
	    }
	    var instance = { settings: {},
			     index: params.index };
	    jQuery.extend(true, instance, renderer);
	    jQuery.extend(true, instance.settings, renderer.about.defaults, params);
	    window.rendererTable.push(instance);

	    return instance;
	},

	importDataFromDiv: function (index, id) {
	    var renderer = rendererTable[index];
	    renderer.settings.data = JSON.parse(document.getElementById(id).innerHTML);
	},

	exampleData: function () {
	    return {
		data: [ ["a1", "b1", "c1"],
			["a3", "b2", "c2"],
			["a4", "b3", "c3"],
			["a2", "b4", "c4"],
			["a1", "b1", "c1"],
			["a3", "b2", "c2"],
			["a4", "b3", "c3"],
			["a2", "b4", "c4"],
			["a1", "b1", "c1"],
			["a3", "b2", "c2"],
			["a4", "b3", "c3"],
			["a2", "b4", "c4"],
			["a1", "b3", "c1"],
			["a3", "b2", "c2"],
			["a4", "b3", "c3"],
			["a2", "b4", "c4"],
			["a5", "b5", "c5"] ],
		header: ["column A", "column B", "column C"]
	    };
        },
	update_visible_columns: function (index) {
	    var renderer = rendererTable[index];

	    var t = document.getElementById('table_colsel_table_'+index);
	    var r = t.firstChild.childNodes;
	    var inv = {};
	    for (var i=0;i<r.length;i++) {
		if (! r[i].firstChild.firstChild.checked) {
		    inv[i] = 1;
		}
	    }
	    renderer.settings.invisible_columns = inv;
	    renderer.render(index);
	},
	render: function (index) {
	    var renderer = rendererTable[index];
	    
	    renderer.settings.target.innerHTML = "";
	    if (renderer.settings.synchronous == false) {
		renderer.settings.target.innerHTML = '<div style="position: absolute; width: 100%; height: 100%; opacity: 0.7; background-color: white; display: none;"></div>';
	    }
	    
	    // check if we have a header, otherwise interpret the first line as the header
	    if (renderer.settings.data.length) {
		renderer.settings.data = { header: renderer.settings.data[0], data: renderer.settings.data };
		renderer.settings.data.data.shift();
	    }
	    
	    // if a header has already been initialized, don't touch it again
	    var header;
	    if (renderer.settings.header) {
		header = renderer.settings.header;
	    } else {
		header = renderer.settings.data.header;
		if (!renderer.settings.data.header) {
		    header = renderer.settings.data.data.shift();
		}
		renderer.settings.header = header;
		renderer.settings.data.header = null;
	    }
	    
	    // check if we have already parsed the data
	    var tdata = [];
	    if (renderer.settings.tdata) {
		tdata = renderer.settings.tdata;
	    } else {
		
		// the data has not been parsed, do it now
		for (var i=0;i<renderer.settings.data.data.length; i++) {
		    tdata[tdata.length] = {};
		    for (var h=0;h<renderer.settings.data.data[i].length;h++) {
			tdata[tdata.length - 1][header[h]] = renderer.settings.data.data[i][h] || "";
		    }
		}
		renderer.settings.tdata = tdata;
		renderer.settings.data.data = null;
	    }
	    
	    // if we are to auto determine sort functions, do so
	    if (renderer.settings.sort_autodetect) {
		for (var i=0; i<header.length; i++) {
		    if (!renderer.settings.sorttype[i]) {
			if (! tdata[0] || typeof(tdata[0][header[i]].replace) != 'function') {
			    renderer.settings.sorttype[i] = "number";
			} else {
			    var testval = tdata[0][header[i]].replace(/<(.|\n)*?>/g, "");
			    if (isNaN(parseFloat(testval))) {
				renderer.settings.sorttype[i] = "string";
			    } else {
				renderer.settings.sorttype[i] = "number";
			    }
			}
		    }
		}
	    }
	    
	    // create filter elements
	    var filter = renderer.settings.filter;
	    var filter_present = false;
	    for (var i in filter) {
		if (filter.hasOwnProperty(i)) {
		    if (filter[i].hasOwnProperty('searchword') && filter[i].searchword.length > 0) {
			filter_present = true;
			break;
		    }
		}
	    }

	    // check for data filtering
	    if (filter_present && renderer.settings.synchronous) {
		var newdata = [];
		if (renderer.settings.filter_changed) {
		    renderer.settings.offset = 0;
		    for (var i in filter) {
			var re;
			if (filter[i].case_sensitive) {
			    re = new RegExp(filter[i].searchword);
			} else {
			    re = new RegExp(filter[i].searchword, "i");
			}
			filter[i].re = re;
			if (typeof(filter[i].searchword) != "undefined" && filter[i].searchword.length > 0 &&filter[i].operator && filter[i].operator[filter[i].active_operator] == "><") {
			    filter[i].minmax = filter[i].searchword.split(",");
			    if (filter[i].minmax.length != 2) {
				alert("'"+filter[i].searchword + "' is not a valid inclusive range.\nRanges must be noted as the minimum\nand the maximum range, separated by ','\ni.e. '-2.1, 5.2'");
				filter[i].searchword = "";
			    }
			}
		    }
		    var htmlFilter = new RegExp("<.+?>", "ig");
		    for (var h=0; h<tdata.length; h++) {
			var pass = 1;
			for (var i in filter) {
			    var word = tdata[h][header[i]] + "";
			    if (! filter[i].keepHTML) {
				word = word.replace(htmlFilter, "");
			    }
			    if (typeof(filter[i].searchword) != "undefined" && filter[i].searchword.length > 0) {
				if (filter[i].operator) {
				    switch (filter[i].operator[filter[i].active_operator]) {
				    case "=":
					if (word != filter[i].searchword) {
					    pass = 0;
					}
					break;
				    case ">":
					if (parseFloat(word) <= parseFloat(filter[i].searchword)) {
					    pass = 0;
					}
					break;
				    case "<":
					if (parseFloat(word) >= parseFloat(filter[i].searchword)) {
					    pass = 0;
					}
					break;				      
				    case "><":
					if (parseFloat(word) > parseFloat(filter[i].minmax[1]) || parseFloat(word) < parseFloat(filter[i].minmax[0])) {
					    pass = 0;
					}
					break;
				    }
				} else {
				    if (! word.match(filter[i].re)) {
					pass = 0;
				    }
				}
				if (pass == 0) {
				    break;
				}
			    }
			}
			if (pass) {
			    newdata.push(tdata[h]);
			}
		    }
		} else {
		    newdata = renderer.settings.filtered_data;
		}
		renderer.settings.filter_changed = false;
		renderer.settings.filtered_data = newdata;
		tdata = newdata;
	    }
	    
	    // initialize the options
	    var offset = renderer.settings.offset;
	    var rows = (renderer.settings.rows_per_page < 0) ? tdata.length : renderer.settings.rows_per_page;
	    var sortcol = renderer.settings.sortcol;
	    var sortdir = renderer.settings.sortdir;
	    var sorttype = renderer.settings.sorttype;
	    var target = renderer.settings.target;
	    	    
	    // check width and height
	    var defined_width = "";
	    if (renderer.settings.width) {
		defined_width = "width: " + renderer.settings.width + "px; ";
	    }
	    var defined_height = "";
	    if (renderer.settings.height) {
		defined_height = "height: " + renderer.settings.height + "px; ";
	    }
	    
	    // create the actual table header
	    var table_element = document.createElement("table");
	    table_element.setAttribute("class", "table table-striped table-bordered table-condensed");
	    table_element.setAttribute("style", "margin-bottom: 2px; margin-top: 7px;");
	    var thead = document.createElement("thead");
	    var tr = document.createElement("tr");
	    tr.setAttribute('style', 'height: 30px; border-top: 1px solid lightgray;');
	    for (var i=0;i<header.length;i++) {
		
		// check if this column is visible
		if (! renderer.settings.invisible_columns[i]) {
		    
		    // create sorting elements
		    var asc = document.createElement("i");
		    asc.setAttribute("class", "fa fa-chevron-down");
		    asc.setAttribute("title", "sort ascending");
		    var desc = document.createElement("i");
		    desc.setAttribute("class", "fa fa-chevron-up");
		    desc.setAttribute("title", "sort descending");
		    if (i == sortcol) {
			if (sortdir=='asc') {
			    asc.setAttribute("class", "fa fa-chevron-circle-down");
			    asc.setAttribute("title", "current sorting: ascending");
			    asc.setAttribute("style", "padding-left: 1px");
			    desc.setAttribute("style", "cursor: pointer;");
			    desc.i = i;
			    desc.index = index;
			    desc.onclick = function () {
				var index = this.index;
				var renderer = rendererTable[index];
				renderer.settings.sortcol = this.i;
				renderer.settings.sortdir = 'desc';
				if (typeof renderer.settings.navigation_callback == "function") {
				    renderer.settings.navigation_callback({'sort': renderer.settings.header[this.i] , 'dir': 'desc'}, index);
				} else {
				    renderer.settings.sorted = false;
				    renderer.render(index);
				}
			    }
			} else {
			    desc.setAttribute("class", "fa fa-chevron-circle-up");
			    desc.setAttribute("title", "current sorting: descending");
			    desc.setAttribute("style", "padding-left: 1px");
			    asc.setAttribute("style", "cursor: pointer;");
			    asc.i = i;
			    asc.index = index;
			    asc.onclick = function () {
				var index = this.index;
				var renderer = rendererTable[index];
				renderer.settings.sortcol = this.i;
				renderer.settings.sortdir = 'asc';
				if (typeof renderer.settings.navigation_callback == "function") {
				    renderer.settings.navigation_callback({'sort': renderer.settings.header[this.i] , 'dir': 'asc'}, index);
				} else {
				    renderer.settings.sorted = false;
				    renderer.render(index);
				}
			    }
			}
		    } else {
			asc.setAttribute("style", "cursor: pointer;");
			asc.i = i;
			asc.index = index;
			asc.onclick = function () {
			    var index = this.index;
			    var renderer = rendererTable[index];
			    renderer.settings.sortcol = this.i;
			    renderer.settings.sortdir = 'asc';
			    if (typeof renderer.settings.navigation_callback == "function") {
				renderer.settings.navigation_callback({'sort': renderer.settings.header[this.i] , 'dir': 'asc'}, index);
			    } else {
				renderer.settings.sorted = false;
				renderer.render(index);
			    }
			}
			desc.setAttribute("style", "cursor: pointer;");
			desc.i = i;
			desc.index = index;
			desc.onclick = function () {
			    var index = this.index;
			    var renderer = rendererTable[index];
			    renderer.settings.sortcol = this.i;
			    renderer.settings.sortdir = 'desc';
			    if (typeof renderer.settings.navigation_callback == "function") {
				renderer.settings.navigation_callback({'sort': renderer.settings.header[this.i] , 'dir': 'desc'}, index);
			    } else {
				renderer.settings.sorted = false;
				renderer.render(index);
			    }
			}
		    }
		    
		    // check for filter autodetection
		    if (renderer.settings.filter_autodetect) {
			if (! renderer.settings.filter[i]) {
			    renderer.settings.filter[i] = { type: "text" };
			    if (renderer.settings.sorttype[i] == "number") {
				renderer.settings.filter[i].operator = [ "=", "<", ">", "><" ];
				renderer.settings.filter[i].active_operator = 0;
			    }
			    var selopts = [];
			    var numopts = 0;
			    for (var h=0;h<tdata.length;h++) {				  
				if (! selopts[tdata[h][header[i]]]) {
				    numopts++;
				}
				selopts[tdata[h][header[i]]] = 1;
			    }
			    if (numopts <= renderer.settings.filter_autodetect_select_max) {
				renderer.settings.filter[i].type = "select";
			    }
			}
		    }
		    
		    // create filter element
		    if (renderer.settings.filter[i]) {
			if (! renderer.settings.filter[i].searchword) {
			    renderer.settings.filter[i].searchword = "";
			}
			var filter_elem;
			if (renderer.settings.filter[i].type == "text") {
			    
			    var filter_text  = document.createElement("input");
			    filter_text.setAttribute('type', 'text');
			    filter_text.value = filter[i].searchword;
			    filter_text.setAttribute("style", "margin-bottom: 0px; margin-top: 2px; height: 16px; width: 100px; display: none; position: absolute; z-index: 100;");
			    filter_text.i = i;
			    filter_text.index = index;
			    filter_text.onkeypress = function (e) {
				var index = this.index;
				var renderer = rendererTable[index];
				e = e || window.event;
				if (e.keyCode == 13) {
				    renderer.settings.filter[this.i].searchword = this.value;
				    if (typeof renderer.settings.navigation_callback == "function") {
					var query = [];
					for (var x in renderer.settings.filter) {
					    if (renderer.settings.filter.hasOwnProperty(x) && renderer.settings.filter[x].hasOwnProperty('searchword')) {
						if (renderer.settings.filter[x].searchword.length > 0) {
						    query.push( { "searchword": renderer.settings.filter[x].searchword, "field": renderer.settings.header[x], "comparison": renderer.settings.filter[x].operator || "=" } );
						}
					    }
					}
					renderer.settings.navigation_callback( { "query": query }, index );
				    } else {
					renderer.settings.filter_changed = true;
					renderer.render(index);
				    }
				}
			    };
			    
			    if (renderer.settings.filter[i].operator) {
				filter_elem = document.createElement("div");
				filter_elem.setAttribute("style", "float: left; margin-bottom: 0px; display: none; position: absolute; margin-top: 2px; height: 16px; z-index: 100;");
				filter_elem.className = "input-prepend";
				var operator_span = document.createElement("span");
				operator_span.setAttribute("style", "cursor: pointer; height: 16px;");
				operator_span.i = i;
				operator_span.index = index;
				operator_span.onclick = function () {
				    var index = this.index;
				    var renderer = rendererTable[index];
				    for (var x=0; x< this.childNodes.length; x++) {
					if (this.childNodes[x].style.display == "") {
					    this.childNodes[x].style.display = "none";
					    if (x == this.childNodes.length - 1) {
						this.childNodes[0].style.display = "";
						renderer.settings.filter[this.i].active_operator = 0;
					    } else {
						this.childNodes[x + 1].style.display = "";
						x++;
						renderer.settings.filter[this.i].active_operator = x;
					    }
					}
				    }
				}
				operator_span.className = "add-on";
				for (var h=0; h<renderer.settings.filter[i].operator.length; h++) {
				    var operator = document.createElement("span");
				    operator.innerHTML = renderer.settings.filter[i].operator[h];
				    if (h==renderer.settings.filter[i].active_operator) {
					operator.setAttribute("style", "font-weight: bold; height: 16px;");
				    } else {
					operator.setAttribute("style", "display: none; font-weight: bold; height: 16px;");
				    }
				    operator.setAttribute("title", "click to switch filter operator");
				    operator_span.appendChild(operator);
				}
				filter_text.setAttribute("style", "position: relative; left: -3px; width: 80px; height: 16px;");
				filter_elem.appendChild(operator_span);
				filter_elem.appendChild(filter_text);
			    } else {
				filter_elem = filter_text;
			    }
			    
			} else if (renderer.settings.filter[i].type == "select") {
			    filter_elem = document.createElement("select");
			    filter_elem.setAttribute("style", "position: absolute; height: 26px; margin-bottom: 0px; margin-top: 2px; z-index: 100; display: none;");
			    filter_elem.add(new Option("-show all-", ""), null);
			    var selopts = [];
			    for (var h=0;h<tdata.length;h++) {
				if (tdata[h][header[i]].length) {
				    selopts[tdata[h][header[i]]] = 1;
				}
			    }
			    for (var h in selopts) {
				if (typeof selopts[h] != "function") {
				    if (h == renderer.settings.filter[i].searchword) {
					filter_elem.add(new Option(h,h, true), null);
				    } else {
					filter_elem.add(new Option(h,h), null);
				    }
				}
			    }
			    filter_elem.i = i;
			    filter_elem.index = index;
			    filter_elem.onchange = function () {
				var index = this.index;
				var renderer = rendererTable[index];
				renderer.settings.filter[this.i].searchword = this.options[this.selectedIndex].value;
				renderer.settings.filter_changed = true;
				renderer.render(index);
			    }
			    if (filter_elem.options.length == 1) {
				filter_elem = document.createElement('span');
			    }
			}  else if (renderer.settings.filter[i].type == "premade-select") {
			    filter_elem = document.createElement("select");
			    filter_elem.setAttribute("style", "position: absolute; height: 26px; margin-bottom: 0px; margin-top: 2px; z-index: 100; display: none;");
			    for (var ind=0; ind<renderer.settings.filter[i].options.length; ind++) {
				if (renderer.settings.filter[i].options[ind].value == renderer.settings.filter[i].searchword) {
				    filter_elem.add(new Option(renderer.settings.filter[i].options[ind].text, renderer.settings.filter[i].options[ind].value, true), null);
				} else {
				    filter_elem.add(new Option(renderer.settings.filter[i].options[ind].text, renderer.settings.filter[i].options[ind].value), null);
				}
			    }
			    filter_elem.i = i;
			    filter_elem.index = index;
			    filter_elem.onchange = function () {
				var index = this.index;
				var renderer = rendererTable[index];
				renderer.settings.filter[this.i].searchword = this.options[this.selectedIndex].value;
				if (typeof renderer.settings.navigation_callback == "function") {
				    var query = [];
				    for (var x in renderer.settings.filter) {
					if (renderer.settings.filter.hasOwnProperty(x) && renderer.settings.filter[x].hasOwnProperty('searchword')) {
					    if (renderer.settings.filter[x].searchword.length > 0) {
						query.push( { "searchword": renderer.settings.filter[x].searchword, "field": renderer.settings.header[x], "comparison": renderer.settings.filter[x].operator || "=" } );
					    }
					}
				    }
				    renderer.settings.navigation_callback( { "query": query }, index );
				} else {
				    renderer.settings.filter_changed = true;
				    renderer.render(index);
				}
			    }
			    if (filter_elem.options.length == 1) {
				filter_elem = document.createElement('span');
			    }
			}
		    }
		    
		    // build header cell
		    var caret = document.createElement("table");
		    caret.setAttribute("style", "float: right; margin: 0px; border: none;");
		    var caret_tr1 = document.createElement("tr");
		    caret_tr1.setAttribute("style", "border: none;");
		    var caret_td1 = document.createElement("td");
		    caret_td1.setAttribute("style", "padding: 0px 2px; line-height: 0px; border: none;");
		    var caret_tr2 = document.createElement("tr");
		    caret_tr2.setAttribute("style", "border: none;");
		    var caret_td2 = document.createElement("td");
		    caret_td2.setAttribute("style", "padding: 0px 2px; line-height: 0px; border: none;");
		    caret_td1.appendChild(desc);
		    caret_td2.appendChild(asc);
		    caret_tr1.appendChild(caret_td1);
		    caret_tr2.appendChild(caret_td2);
		    caret.appendChild(caret_tr1);
		    caret.appendChild(caret_tr2);
		    var th = document.createElement("th");
		    var mw = 1;
		    if (renderer.settings.minwidths && renderer.settings.minwidths[i]) {
			mw = renderer.settings.minwidths[i];
		    }
		    th.setAttribute("style", "padding: 0px; padding-left: 4px; min-width: "+mw+"px;");
		    var th_div = document.createElement("div");
		    th_div.setAttribute("style", "float: left; position: relative; height: 25px;");
		    th_div.innerHTML = header[i];
		    th.appendChild(th_div);
		    if (! renderer.settings.disable_sort[i]) {
			th.appendChild(caret);
			th_div.style.top = "4px";
		    }
		    if (filter[i]) {
			var filter_icon = document.createElement("i");
			filter_icon.className = "fa fa-search";
			var is_active = "";
			if (filter[i].searchword) {
			    is_active = " border: 1px solid blue;";
			    filter_icon.setAttribute("title", "filtered for: '"+filter[i].searchword+"'");
			}
			var pos = "3";
			if (! renderer.settings.disable_sort[i]) {
			    pos = "7";
			}
			filter_icon.setAttribute("style", "float: right; position: relative; top: "+pos+"px; cursor: pointer; right: 2px;"+is_active);
			filter_icon.onclick = function () {
			    if (this.nextSibling.style.display == "") {
				this.nextSibling.style.display = "none";
				this.parentNode.firstChild.style.display = "";
			    } else {
				this.nextSibling.style.display = "";
				this.parentNode.firstChild.style.display = "none";
			    }
			}			  
			th.appendChild(filter_icon);
			th.appendChild(filter_elem);
		    }
		    tr.appendChild(th);
		}
	    }
	    thead.appendChild(tr);
	    table_element.appendChild(thead);
	    var tinner_elem = document.createElement("tbody");
	    
	    // check if the data is sorted, otherwise sort now
	    var disp;
	    if (renderer.settings.sorted) {
		disp = tdata;
	    } else {
		disp = tdata.sort(function (a,b) {		      
		    if (sortdir == 'desc') {
			var c = a; a=b; b=c;
		    }
		    if (sorttype[sortcol]) {
			switch (sorttype[sortcol]) {
			case "number":
			    if (typeof(a[header[sortcol]].replace) != 'function') {
				if (a[header[sortcol]]==b[header[sortcol]]) return 0;
				if (a[header[sortcol]]<b[header[sortcol]]) return -1;
			    } else {
				if (parseFloat(a[header[sortcol]].replace(/<(.|\n)*?>/g, ""))==parseFloat(b[header[sortcol]].replace(/<(.|\n)*?>/g, ""))) return 0;
				if (parseFloat(a[header[sortcol]].replace(/<(.|\n)*?>/g, ""))<parseFloat(b[header[sortcol]].replace(/<(.|\n)*?>/g, ""))) return -1;
			    }
			    return 1;
			    break;
			case "string":
			    if (a[header[sortcol]].replace(/<(.|\n)*?>/g, "")==b[header[sortcol]].replace(/<(.|\n)*?>/g, "")) return 0;
			    if (a[header[sortcol]].replace(/<(.|\n)*?>/g, "")<b[header[sortcol]].replace(/<(.|\n)*?>/g, "")) return -1;
			    return 1;
			    break;
			}
		    } else {
			if (typeof(a[header[sortcol]].replace) != 'function') {
			    if (a[header[sortcol]]==b[header[sortcol]]) return 0;
			    if (a[header[sortcol]]<b[header[sortcol]]) return -1;
			    return 1;
			} else {
			    if (a[header[sortcol]].replace(/<(.|\n)*?>/g, "")==b[header[sortcol]].replace(/<(.|\n)*?>/g, "")) return 0;
			    if (a[header[sortcol]].replace(/<(.|\n)*?>/g, "")<b[header[sortcol]].replace(/<(.|\n)*?>/g, "")) return -1;
			    return 1;
			}
		    }
		});
		renderer.settings.sorted = true;
	    }
	    
	    // select the part of the data that will be displayed
	    if (renderer.settings.synchronous) {
		disp = disp.slice(offset, offset+rows);
	    }
	    
	    // create the table rows
	    for (var i=0;i<disp.length;i++) {
		var tinner_row = document.createElement("tr");
		for (var h=0; h<header.length; h++) {
		    if (! renderer.settings.invisible_columns[h]) {
			var tinner_cell = document.createElement("td");
			tinner_cell.innerHTML = disp[i][header[h]];
			if (renderer.settings.editable[h]) {
			    tinner_cell.index = index;
			    tinner_cell.addEventListener('click', function(e) {
				var index = this.index;
				e = e || window.event;
				var ot = e.originalTarget || e.srcElement;
				var clicked_row_index;
				var clicked_cell_index;
				for (var x=0;x<ot.parentNode.children.length;x++) {
				    if (ot.parentNode.children[x] == ot) {
					clicked_cell_index = x;
				    }				      
				}
				for (var y=0;y<ot.parentNode.parentNode.children.length;y++) {
				    if (ot.parentNode.parentNode.children[y] == ot.parentNode) {
					clicked_row_index = y + offset;
					break;
				    }
				}
				
				var edit = document.createElement('input');
				edit.setAttribute('type', 'text');
				edit.setAttribute('value', renderer.settings.tdata[clicked_row_index][header[clicked_cell_index]]);
				edit.index = index;
				edit.addEventListener('keypress', function(e) {
				    var index = this.index;
				    var renderer = rendererTable[index];
				    e = e || window.event;
				    if (e.keyCode == 13) {
					renderer.settings.tdata[clicked_row_index][header[clicked_cell_index]] = edit.value;
					if (renderer.settings.edit_callback && typeof(renderer.settings.edit_callback) == 'function') {
					    renderer.settings.edit_callback.call(renderer.settings.tdata);
					}
					renderer.render(index);
				    }
				});
				edit.index = index;
				edit.addEventListener('blur', function() {
				    var index = this.index;
				    var renderer = rendererTable[index];
				    renderer.render(index);
				});
				ot.innerHTML = "";
				ot.appendChild(edit);
				edit.focus();
				if (typeof edit.selectionStart == "number") {
				    edit.selectionStart = 0;
				    edit.selectionEnd = edit.value.length;
				} else if (typeof document.selection != "undefined") {
				    document.selection.createRange().text = edit.value;
				}
			    });
			}
			tinner_row.appendChild(tinner_cell);
		    }
		}
		tinner_elem.appendChild(tinner_row);
	    }
	    
	    // render the table
	    table_element.appendChild(tinner_elem);
	    
	    // create the navigation
	    // first, previous
	    var prev_td = document.createElement("td");
	    prev_td.setAttribute("style", "text-align: left; width: 45px; border: none;");
	    prev_td.innerHTML = "&nbsp;";
	    if (offset > 0) {
		var first = document.createElement("i");
		first.setAttribute("class", "fa fa-fast-backward");
		first.setAttribute("title", "first");
		first.setAttribute("style", "cursor: pointer;");
		first.index = index;
		first.onclick = typeof renderer.settings.navigation_callback == "function" ? function () { var index = this.index; var renderer = rendererTable[index]; renderer.settings.navigation_callback('first', index); } : function () {
		    var index = this.index;
		    var renderer = rendererTable[index];
		    renderer.settings.offset = 0;
		    renderer.render(index);
		}
		var prev = document.createElement("i");
		prev.setAttribute("class", "fa fa-backward");
		prev.setAttribute("title", "previous");
		prev.setAttribute("style", "cursor: pointer; margin-left: 5px;");
		prev.index = index;
		prev.onclick = typeof renderer.settings.navigation_callback == "function" ? function () { var index = this.index; var renderer = rendererTable[index]; renderer.settings.navigation_callback('previous', index); } : function () {
		    var index = this.index;
		    var renderer = rendererTable[index];
		    renderer.settings.offset -= rows;
		    if (renderer.settings.offset < 0) {
			renderer.settings.offset = 0;
		    }
		    renderer.render(index);
		}
		prev_td.appendChild(first);
		prev_td.appendChild(prev);
	    }
	    
	    // next, last
	    var next_td = document.createElement("td");
	    next_td.setAttribute("style", "text-align: right; width: 45px; border: none;");
	    next_td.innerHTML = "&nbsp;";
	    if (offset + rows < (renderer.settings.numrows || tdata.length)) {
		var last = document.createElement("i");
		last.setAttribute("class", "fa fa-fast-forward");
		last.setAttribute("title", "last");
		last.setAttribute("style", "cursor: pointer;");
		last.index = index;
		last.onclick = typeof renderer.settings.navigation_callback == "function" ? function () { var index = this.index; var renderer = rendererTable[index]; renderer.settings.navigation_callback('last', index); } : function () {
		    var index = this.index;
		    var renderer = rendererTable[index];
		    renderer.settings.offset = tdata.length - rows;
		    if (renderer.settings.offset < 0) {
			renderer.settings.offset = 0;
		    }
		    renderer.render(index);
		}
		var next = document.createElement("i");
		next.setAttribute("class", "fa fa-forward");
		next.setAttribute("title", "next");
		next.setAttribute("style", "cursor: pointer; margin-right: 5px;");
		next.index = index;
		next.onclick = typeof renderer.settings.navigation_callback == "function" ? function () { var index = this.index; var renderer = rendererTable[index]; renderer.settings.navigation_callback('next', index); } : function () {
		    var index = this.index;
		    var renderer = rendererTable[index];
		    renderer.settings.offset += rows;
		    if (renderer.settings.offset > tdata.length - 1) {
			renderer.settings.offset = tdata.length - rows;
			if (renderer.settings.offset < 0) {
			    renderer.settings.offset = 0;
			}
		    }
		    renderer.render(index);
		}
		next_td.appendChild(next);
		next_td.appendChild(last);
	    }
	    
	    // display of window offset
	    var showing = document.createElement("td");
	    showing.setAttribute("style", "text-align: center; border: none;");	  
	    showing.innerHTML = "showing rows "+ ((renderer.settings.offset || offset) + 1) +"-"+(disp.length + (renderer.settings.offset || offset))+" of "+(renderer.settings.numrows || tdata.length);
	    
	    // create the table to host navigation
	    var bottom_table = document.createElement("table");
	    bottom_table.setAttribute("style", "width: 100%; border: none;");
	    var bottom_row = document.createElement("tr");
	    bottom_row.setAttribute("style", "border: none;");
	    bottom_row.appendChild(prev_td);
	    bottom_row.appendChild(showing);
	    bottom_row.appendChild(next_td);
	    bottom_table.appendChild(bottom_row);
	    
	    // goto
	    var goto_label = document.createElement("span");
	    goto_label.innerHTML = "goto row ";
	    var goto_text = document.createElement("input");
	    goto_text.setAttribute("value", offset + 1);
	    goto_text.setAttribute("type", "text");
	    goto_text.setAttribute("style", "width: 30px; border: 1px solid lightgray; border-radius: 3px;");
	    goto_text.index = index;
	    goto_text.onkeypress = function (e) {
		var index = this.index;
		var renderer = rendererTable[index];
		e = e || window.event;
		if (e.keyCode == 13) {
		    if (typeof renderer.settings.navigation_callback == "function") {
			renderer.settings.navigation_callback({'goto': parseInt(this.value) - 1 }, index);
		    } else {
			renderer.settings.offset = parseInt(this.value) - 1;
			if (renderer.settings.offset < 0) {
			    renderer.settings.offset = 0;
			}
			if (renderer.settings.offset > rows) {
			    renderer.settings.offset = rows;
			}
			renderer.render(index);
		    }
		}
	    };
	    
	    // clear filter button
	    var clear_btn = document.createElement("input");
	    clear_btn.setAttribute("type", "button");
	    clear_btn.setAttribute("class", "btn btn-xs btn-default");
	    clear_btn.setAttribute("value", "clear all filters");
	    clear_btn.style.marginLeft = "10px";
	    clear_btn.index = index;
	    clear_btn.onclick = function () {
		var index = this.index;
		var renderer = rendererTable[index];
		renderer.settings.filter_changed = true;
		for (var i in renderer.settings.filter) {
		    renderer.settings.filter[i].searchword = "";
		}
		if (typeof renderer.settings.navigation_callback == "function") {
		    renderer.settings.navigation_callback({"goto": 0, "query": renderer.settings.default_query || null, "sort": renderer.settings.default_sort || null }, index);
	        } else {
		    renderer.settings.sorted = false;
		    renderer.render(index);
	        }
	    };
	    
	    // rows per page
	    var perpage = document.createElement("input");
	    perpage.setAttribute("type", "text");
	    perpage.setAttribute("value", rows);
	    perpage.setAttribute("style", "width: 30px; border: 1px solid lightgray; border-radius: 3px;");
	    perpage.index = index;
	    perpage.onkeypress = function (e) {
		var index = this.index;
		var renderer = rendererTable[index];
		e = e || window.event;
		if (e.keyCode == 13) {
		    if (typeof renderer.settings.navigation_callback == "function") {
			renderer.settings.navigation_callback({'limit': parseInt(this.value) }, index);
		    } else {
			renderer.settings.offset = 0;
			renderer.settings.rows_per_page = parseInt(this.value);
			renderer.render(index);
		    }
		}
	    };
	    var ppspan1 = document.createElement("span");
	    ppspan1.innerHTML = " show ";
	    var ppspan2 = document.createElement("span");
	    ppspan2.innerHTML = " rows at a time";
	    
	    // handle onclick event
	    if (renderer.settings.onclick) {
		table_element.index = index;
		table_element.onclick = function (e) {
		    var index = this.index;
		    var renderer = rendererTable[index];
		    e = e || window.event;
		    var ot = e.originalTarget || e.srcElement;
		    if (ot.nodeName == "TD") {
			var clicked_row = [];
			var clicked_row_index;
			var clicked_cell_index;
			for (var x=0;x<ot.parentNode.children.length;x++) {
			    if (ot.parentNode.children[x] == ot) {
				clicked_cell_index = x;
			    }
			    clicked_row.push(ot.parentNode.children[x].innerHTML);
			}
			for (var y=0;y<ot.parentNode.parentNode.children.length;y++) {
			    if (ot.parentNode.parentNode.children[y] == ot.parentNode) {
				clicked_row_index = y + offset;
				break;
			    }
			}
			var clicked_cell = ot.innerHTML;
			renderer.settings.onclick(clicked_row, clicked_cell, clicked_row_index, clicked_cell_index);
		    }
		};
	    }
	    
	    var col_sel_span = document.createElement("span");
	    var col_sel_btn = document.createElement("input");
	    col_sel_btn.setAttribute("class", "btn btn-xs btn-default");
	    col_sel_btn.setAttribute("type", "button");
	    col_sel_btn.setAttribute("value", "select columns");
	    var col_sel = document.createElement("div");
	    col_sel.setAttribute('style', "position: absolute; left: 528px; min-width: 150px; border: 1px solid #BBB; background-color: white; z-index: 99000; display: none; box-shadow: 4px 4px 4px #666; padding: 2px;");
	    col_sel_btn.addEventListener("click", function () {
		
		if (col_sel.style.display == "none") {
		    col_sel.style.display = "";
		} else {
		    col_sel.style.display = "none";
		}
	    });
	    var colsel_html = "<input type='button' class='btn btn-xs btn-default' style='float: right;' value='OK' onclick='rendererTable["+index+"].update_visible_columns("+index+");'><table id='table_colsel_table_"+index+"' style='border: none;'>";
	    for (var ii=0;ii<renderer.settings.header.length;ii++) {
		var checked = " checked";
		if (renderer.settings.invisible_columns[ii]) {
		    checked = "";
		}
		colsel_html += "<tr style='border: none;'><td style='border: none;'><input style='margin-right: 5px;' type='checkbox'"+checked+"></td><td style='border: none;'>"+renderer.settings.header[ii]+"</td></tr>";
	    }
	    colsel_html += "</table>";
	    col_sel.innerHTML = colsel_html;
	    col_sel_span.appendChild(col_sel_btn);
	    col_sel_span.appendChild(col_sel);
	    
	    var options_icon = document.createElement("div");
	    options_icon.innerHTML = "<i class='fa fa-cog'></i>";
	    options_icon.title ='table options, click to show';
	    options_icon.className = "btn btn-xs btn-default";
	    options_icon.setAttribute("style", "cursor: pointer;");
	    options_icon.onclick = function () {
		this.nextSibling.style.display = "";
		this.style.display = "none";
	    }
	    var options_span = document.createElement("div");
	    options_span.setAttribute('style', "display: none;");
	    options_span.innerHTML = "<div title='close options' onclick='this.parentNode.previousSibling.style.display=\"\";this.parentNode.style.display=\"none\";' style='cursor: pointer; margin-right: 5px;' class='btn btn-xs btn-default'><i class='fa fa-times'></div>";
	    
	    // append navigation to target element
	    if (renderer.settings.hide_options == false) {
		target.appendChild(options_icon);
		target.appendChild(options_span);
		options_span.appendChild(goto_label);
		options_span.appendChild(goto_text);
		options_span.appendChild(clear_btn);
		options_span.appendChild(ppspan1);
		options_span.appendChild(perpage);
		options_span.appendChild(ppspan2);
		options_span.appendChild(col_sel_span);
	    }
	    target.appendChild(table_element);
	    target.appendChild(bottom_table);	  
	    
	    return renderer;
	}
    }
}).call(this);

/*
  Graph Renderer

  Displays a graph of pie / bar charts with an optional legend.

  Options

  type (STRING)
      Defines the display type of the graph, can be one of
        pie
        column
        stackedColumn
        row
        stackedRow
        line
	stackedArea
      Default is column.

  title (STRING)
      Title string written at the top of the graph
  
  title_color (CSS Color Value)
      Color of the title text. Default is black.

  title_settings (SVG settings object)
      SVG settings for the title.

  x_title (STRING)
      Title written below the x-axis.

  y_title (STRING)
      Title written to the left of the y-axis.

  x_title_color (CSS Color Value)
      Color of the x-axis title string. Default is black.

  y_title_color (CSS Color Value)
      Color of the y-axis title string. Default is black.

  x_labels (ARRAY of STRING)
      List of the labels at the ticks of the x-axis.

  x_labels_rotation (STRING)
      A string representing the number of degrees to rotate the labels on the x-axis. Default is 0.

  y_labels (ARRAY of STRING)
      List of the labels at the ticks of the y-axis. If no list is passed will use the y-valus.

  x_tick_interval (INT)
      Determines how many ticks are actually drawn on the x-axis. Default is 0.

  y_tick_interval (INT)
      Determines how many ticks are actually drawn on the y-axis. Default is 30.
  
  x_labeled_tick_interval (INT)
      Determines which ticks on the x-axis get labels. Default is 1.

  y_labeled_tick_interval (INT)
      The number of y-axis ticks that get labels. Default is 5.

  default_line_color (CSS Color Value)
      Determines the color of lines if not specified for an individual line. Default is black.

  default_line_width (INT)
      Number of pixels lines should be wide if not specified for an individual line. Default is 1.

  show_legend (BOOLEAN)
      Turns the display of the legend on / off. Default ist true.

  legend_position (STRING)
      Can be one of
        left
        right
        top
        bottom

  chartArea (ARRAY of FLOAT)
     The values passed correspond to the left, top, width and height of the chart area respectively. The position is relative to the top left corner of the containing div. Values less than 1 are interpreted as fractions. Values greater than 1 are interpreted as absolute pixel values. Note that the labels are drawn to the left and bottom of these margins.

  legendArea (ARRAY of FLOAT)
      If this parameter is set, the legend_position parameter will not be used. Instead pass an array of floats. The values correspond to the left, top, width and height of the legend area respectively. The position is relative to the top left corner of the containing div. Values less than 1 are interpreted as fractions. Values greater than 1 are interpreted as absolute pixel values.
  
  width (INT)
      The width of the graph in pixel (including legend).
  
  height (INT)
      The height of the graph in pixel (including legend).

  data (ARRAY of OBJECT)
      List of data series. Each series has a name and a data attribute. The data attribute is a list of y-values for the series.

  onclick (FUNCTION)
      The passed function will be called when a bar / pie slice is clicked. It will receive an object with the attributes
        series - the name of the series this bar belongs to
        value  - the value of the bar
        label  - the label of the bar
        item   - the svg element that was clicked
        index  - the zero based index of this bar within its series
        series_index - the zero based index of this series

  normalize_stacked_area (boolean)
      If set to false the stacked area chart will not normalize the values
*/
(function () {
    var root = this;
    var standaloneGraph = root.standaloneGraph = {
	about: {
	    name: "graph",
	    title: "Graph",
            author: "Tobias Paczian",
            version: "1.0",
            defaults: {
		'type': 'column', // [ column, stackedColumn, row, stackedRow, line, pie, stackedArea, deviation ]
		'title': '',
		'title_color': 'black',
		'title_settings': { fontSize: '15px' },
		'x_title': '',
		'y_title': '',
		'y2_title': '',
		'x_title_color': 'black',
		'y_title_color': 'black',
		'y2_title_color': 'black',
		'x_labels': [],
		'x_labels_rotation': null,
		'y_labels': [],
		'y_scale': 'linear',
		'y2_labels': [],
		'y2_scale': 'linear',
		'x_tick_interval': 0,
		'y_tick_interval': 30,
		'y2_tick_interval': 30,
		'x_labeled_tick_interval': 1,
		'y_labeled_tick_interval': 5,
		'y2_labeled_tick_interval': 5,
		'default_line_color': 'black',
		'default_line_width': 1,
		'show_legend': false,
		'legend_position': 'right',
		'show_grid': false,
		'short_axis_labels': false,
		'normalize_stacked_area': true,
		'width': 800,
		'height': 400
	    },
	    options: [
		{ general:
		  [
		      { name: 'type', type: 'select', description: "type of the graph", title: "type", options: [
			  { value: "column", selected: true },
			  { value: "stackedColumn", label: "stacked column" },
			  { value: "row" },
			  { value: "stackedRow", label: "stacked row" },
			  { value: "line" },
			  { value: "pie" },
			  { value: "stackedArea", label: "stacked area" },
			  { value: "deviation", label: "deviation" } ] },
		      { name: 'default_line_color', type: 'color', description: "default color of the data lines of the graph", title: "default line color" },
		      { name: 'default_line_width', type: 'int', description: "default width of the data lines of the graph in pixel", title: "default line width" },
		      { name: 'show_grid', type: 'select', description: "sets whether grid is displayed or not", title: "show grid", options: [
			  { value: 0, selected: true, label: "no" },
			  { value: 1, label: "yes" } ] }    
		  ]
		},
		{ text:
		  [
		      { name: 'title', type: 'text', description: "title string of the graph", title: "title" },
		      { name: 'title_color', type: 'color', description: "color of the title string of the graph", title: "title color" },
		      { name: 'x_title', type: 'text', description: "title of the x-axis of the graph", title: "x title" },
		      { name: 'y_title', type: 'text', description: "title of the y-axis of the graph", title: "y title" },
		      { name: 'x_title_color', type: 'color', description: "color of the title of the x-axis of the graph", title: "x title color" },
		      { name: 'y_title_color', type: 'color', description: "color of the title of the y-axis of the graph", title: "y title color" },
		      { name: 'x_labels_rotation', type: 'int', description: "rotation in degrees of the x-axis labels", title: "x label rotation" }
		  ]
		},
		{ layout:
		  [
		      { name: 'width', type: 'int', description: "width of the graph in pixel", title: "width" },
		      { name: 'height', type: 'int', description: "height of the graph in pixel", title: "height" },
		      { name: 'show_legend', type: 'select', description: "sets whether the legend is displayed or not",
			title: "show legend", options: [
			    { value: 0, selected: true, label: "no" },
			    { value: 1, label: "yes" } ] },
		      { name: 'legend_position', 
			type: 'select',
			description: "position of the legend",
			title: "legend position",
			options: [ { value: "left", selected: true },
				   { value: "right" },
				   { value: "top" },
				   { value: "bottom" } ] }
		  ]
		},
		{ axes:
		  [
		      { name: 'y_scale', type: 'select', description: "type of the scale of the y-axis",
			title: "y scale", options: [
			    { value: "linear", selected: true },
			    { value: "log" } ] },
		      { name: 'x_tick_interval', type: 'int',
			description: "pixel distance of the minor tickmarks on the x-axis", title: "minor x ticks" },
		      { name: 'y_tick_interval', type: 'int',
			description: "pixel distance of the minor tickmarks on the y-axis", title: "minor y ticks" },
		      { name: 'x_labeled_tick_interval', type: 'int',
			description: "pixel distance of the major tickmarks on the x-axis", title: "major x ticks" },
		      { name: 'y_labeled_tick_interval', type: 'int',
			description: "pixel distance of the major tickmarks on the y-axis", title: "major y ticks" },
		      { name: 'short_axis_labels', type: 'select',
			description: "sets whether the axis labels should be shortened or not", title: "short axis labels", options: [
			    { value: 0, selected: true, label: "no" },
			    { value: 1, label: "yes" } ] },
		  ]
		}
	    ]
	},
	exampleData: function () {
	    return [ { "name": 'IE', "data": [95, 91, 78, 66] },
		     { "name": 'Netscape', "data": [3, 12, 18, 18] },
		     { "name": 'Firefox', "data": [0, 4, 8, 9] },
		     { "name": 'Chrome', "data": [0, 8, 18, 22] },
		     { "name": 'Gecko', "data": [1, 2, 3, 33] } ];
        },

	create: function (params) {
	    var renderer = this;
	    if (! window.hasOwnProperty('rendererGraph')) {
		window.rendererGraph = [];
	    }
	    var instance = { settings: {},
			     index: params.index };
	    jQuery.extend(true, instance, renderer);
	    jQuery.extend(true, instance.settings, renderer.about.defaults, params);
	    window.rendererGraph.push(instance);

	    return instance;
	},

	render: function (index) {
	    var renderer = rendererGraph[index];

	    // get the target div
	    var target = renderer.settings.target;
	    var index = renderer.index;
	    target.innerHTML = "<div id='graph_div"+index+"'></div>";
	    target.firstChild.setAttribute('style', "width: "+ renderer.settings.width+"px; height: "+renderer.settings.height+"px;");
	    jQuery('#graph_div'+index).svg();

	    var cmax = 0;
	    if (renderer.settings.type == 'deviation' && ! renderer.settings.data[0].data.hasOwnProperty('upper')) {
		renderer.calculateData(renderer.settings.data, index);
		cmax = renderer.cmax;
	    }

	    rendererGraph[index].drawImage(jQuery('#graph_div'+index).svg('get'), cmax, index);
	    
	    return renderer;
	},

	niceNum: function (range, round) {
            var exponent = Math.floor(Math.log10(range)); /** exponent of range */
            var fraction = range / Math.pow(10, exponent); /** fractional part of range */
            var niceFraction; /** nice, rounded fraction */
	    
            if (round) {
		if (fraction < 1.5) {
                    niceFraction = 1;
		} else if (fraction < 3) {
                    niceFraction = 2;
		} else if (fraction < 7) {
                    niceFraction = 5;
		} else {
                    niceFraction = 10;
		}
            } else {
		if (fraction <= 1) {
                    niceFraction = 1;
		} else if (fraction <= 2) {
                    niceFraction = 2;
		} else if (fraction <= 5) {
                    niceFraction = 5;
		} else {
                    niceFraction = 10;
		}
            }
	    
            return niceFraction * Math.pow(10, exponent);
	},
	
	/* get a nice scale, min, max and tick interval */
	niceScale: function (params) {
 	    var minPoint = params.min;
	    var maxPoint = params.max;
	    var maxTicks = params.ticks || 10;
	    var range = rendererGraph[0].niceNum(maxPoint - minPoint, false);
	    var tickSpacing = rendererGraph[0].niceNum(range / (maxTicks - 1), true);
	    var niceMin = Math.floor(minPoint / tickSpacing) * tickSpacing;;
	    var niceMax = Math.ceil(maxPoint / tickSpacing) * tickSpacing;
	    
	    return { min: niceMin, max: niceMax, space: tickSpacing };
	},

	hover: function (title, value, event, e) {
	    var id = e.currentTarget.ownerSVGElement.ownerSVGElement.parentNode.id;
	    var index = id.substr(9);
	    var renderer = rendererGraph[index];
	    var svg = jQuery('#'+id).svg('get');
	    if (title) {
		jQuery(this, svg.root()).attr('fill-opacity', .8);
		jQuery(this, svg.root()).attr('title', title+": "+value);
	    } else {
		jQuery(this, svg.root()).attr('fill-opacity', 1);
	    }
	    if (event == 'click') {
		var num = parseInt(this.parentElement.className.baseVal.substr(this.parentElement.className.baseVal.search(/\d+/)));
		svg.graph.options({ explode: [ num ], explodeDist: 15 });

		if (typeof(renderer.settings.onclick) == "function") {
		    var label = "";
		    var i;
		    for (i=0;i<this.parentElement.children.length;i++) {
			if (this.parentElement.children[i] === this) {
			    if (this.getAttribute('r')) {
				i--;
			    }
			    label = svg.graph.xAxis.labels().labels[i];
			    break;
			}
		    }
		    renderer.settings.onclick({rendererIndex: index, series: title, value: value, label: label, item: this, index: i, series_index: num, svg: svg });
		}
	    }
	},
	drawImage: function (svg, cmax, index) {
	    var renderer = rendererGraph[index];
	    var chartAreas = [ [ 0.1, 0.1, 0.95, 0.9 ],   // no legend
			       [ 0.2, 0.1, 0.95, 0.9 ],   // legend left
			       [ 0.1, 0.1, 0.75, 0.9 ],   // legend right
			       [ 0.1, 0.25, 0.9, 0.9 ],   // legend top
			       [ 0.1, 0.1, 0.9, 0.8  ] ]; // legend bottom

	    var legendAreas = [ [ 0.0, 0.0, 0.0, 0.0     ],   // no legend
				[ 0.005, 0.1, 0.125, 0.5 ],   // left
				[ 0.8, 0.1, 0.97, 0.5    ],   // right
				[ 0.2, 0.1, 0.8, 0.2     ],   // top
				[ 0.2, 0.9, 0.8, 0.995   ] ]; // bottom

	    var fills = [ 'url(#fadeBlue)', 'url(#fadeRed)', 'url(#fadeGreen)', 'url(#fadeYellow)', 'url(#fadeLightblue)', 'url(#fadePurple)' ];
	    
	    var colors = [ '#0044CC', // blue
			   '#BD362F', // red
			   '#51A351', // green
			   '#F89406', // yellow
			   '#2F96B4', // lightblue
			   '#bd2fa6'  // purple 
			 ];
	    
	    var defs = svg.defs();
	    var max = 0;
	    var y2max = 0;
	    for (i=0; i<renderer.settings.data.length; i++) {
		for (h=0; h<renderer.settings.data[i].data.length; h++) {
		    if (renderer.settings.data[i].settings && renderer.settings.data[i].settings.isY2) {
			if (parseFloat(renderer.settings.data[i].data[h]) > y2max) {
			    y2max = parseFloat(renderer.settings.data[i].data[h]);
			}
		    } else { 
			if (parseFloat(renderer.settings.data[i].data[h]) > max) {
			    max = parseFloat(renderer.settings.data[i].data[h]);
			}
		    }
		}
	    }
	    max = cmax || max;
	    
	    svg.linearGradient(defs, 'fadeRed', [[0, '#EE5F5B'], [1, '#BD362F']]); 
	    svg.linearGradient(defs, 'fadeBlue', [[0, '#0088CC'], [1, '#0044CC']]); 
	    svg.linearGradient(defs, 'fadeGreen', [[0, '#62C462'], [1, '#51A351']]);
	    svg.linearGradient(defs, 'fadeYellow', [[0, '#FBB450'], [1, '#F89406']]);
	    svg.linearGradient(defs, 'fadeLightblue', [[0, '#5BC0DE'], [1, '#2F96B4']]);
	    svg.linearGradient(defs, 'fadePurple', [[0, '#ee5be0'], [1, '#bd2fa6']]);

	    svg.graph.shortAxisLabels = renderer.settings.short_axis_labels;
	    svg.graph.normalizeStackedArea = renderer.settings.normalize_stacked_area;

	    svg.graph.noDraw().title(renderer.settings.title, renderer.settings.title_color, renderer.settings.title_settings);
	    svg.graph.noDraw().format('white', renderer.settings.show_grid ? 'gray' : 'white' );
	    if (renderer.settings.show_grid) {
		svg.graph.noDraw().gridlines({stroke: 'gray', strokeDashArray: '2,2'}, 'gray');
	    }

	    for (i=0;i<renderer.settings.data.length;i++) {
		svg.graph.noDraw().addSeries( renderer.settings.data[i].name, renderer.settings.data[i].data, null, renderer.settings.data[i].lineColor || 'white', renderer.settings.data[i].lineWidth || renderer.settings.default_line_width, renderer.settings.data[i].settings ? renderer.settings.data[i].settings : {});
	    }
	    
	    svg.graph.xAxis.title(renderer.settings.x_title, renderer.settings.x_title_color).
		ticks(renderer.settings.x_labeled_tick_interval, renderer.settings.x_tick_interval).
		scale(0, 3);
	    if (renderer.settings.x_labels.length) {
		svg.graph.xAxis.labelRotation = renderer.settings.x_labels_rotation;
		svg.graph.xAxis.labels(renderer.settings.x_labels);
	    }
	    var sy = rendererGraph[0].niceScale({min: 0, max: max, ticks: renderer.settings.y_labeled_tick_interval });
	    svg.graph.yAxis.
		title(renderer.settings.y_title, renderer.settings.y_title_color).
		ticks(sy.max / renderer.settings.y_labeled_tick_interval, sy.max / renderer.settings.y_tick_interval, null, null, renderer.settings.y_scale).
		scale(0,max,renderer.settings.y_scale);

	    if (renderer.settings.hasY2) {
		svg.graph.y2Axis.
		    title(renderer.settings.y2_title || "", renderer.settings.y2_title_color).
		    ticks(parseInt(y2max / renderer.settings.y2_labeled_tick_interval), parseInt(y2max / renderer.settings.y2_tick_interval), null, null, renderer.settings.y_scale).
		    scale(0,y2max,renderer.settings.y2_scale);
		if (renderer.settings.y2_labels.length) {
		    svg.graph.y2Axis.labels(renderer.settings.y2_labels); 
		}
	    } else {
		svg.graph.y2Axis = null;
	    }
	    
	    if (renderer.settings.y_labels.length) {
		svg.graph.yAxis.labels(renderer.settings.y_labels); 
	    }
	    svg.graph.legend.settings({fill: 'white', stroke: 'white'}); 
	    
	    var chartType = renderer.settings.type;
	    var chartLegend = 0;
	    if (renderer.settings.show_legend) {
		switch (renderer.settings.legend_position) {
		case 'left': chartLegend = 1; 
		    break;
		case 'right': chartLegend = 2;
		    break;
		case 'top': chartLegend = 3;
		    break;
		case 'bottom': chartLegend = 4;
		    break;
		};
	    }
	    var chartOptions = { barWidth: renderer.settings.barWidth || 25 };
	    	    
	    svg.graph.status(rendererGraph[index].hover);

	    svg.graph.noDraw(). 
		legend.show(renderer.settings.show_legend).area(renderer.settings.legendArea ? renderer.settings.legendArea : legendAreas[chartLegend]).end();
	    for (i=0; i< renderer.settings.data.length; i++) {
		svg.graph.noDraw().series(i).format(renderer.settings.data[i].fill || fills[i]).end();
	    }
	    svg.graph.noDraw().area(renderer.settings.chartArea ? renderer.settings.chartArea : chartAreas[chartLegend]).
		type(chartType, chartOptions).redraw();
	},
	calculateData: function (data, index) {
	    var renderer = rendererGraph[index];
	    var fivenumbers = [];
	    var min = data[0].data[0];
	    var max = data[0].data[0];
	    
	    for (var i=0;i<data.length;i++) {
		data[i].data = data[i].data.sort(function (a, b) {
		    return a - b;
		});
		if (data[i].data[0] < min) {
		    min = data[i].data[0];
		}
		if (data[i].data[data[i].data.length - 1] > max) {
		    max = data[i].data[data[i].data.length - 1];
		}
		fivenumbers[i] = [];
		fivenumbers[i]['min'] = data[i].data[0];
		fivenumbers[i]['max'] = data[i].data[data[i].data.length - 1];
		var boxarray = [];
		if (data[i].data.length % 2 == 1) {
		    var med = parseInt(data[i].data.length / 2);
		    fivenumbers[i]['median'] = data[i].data[med];
		    if ((med + 1) % 2 == 1) {
			fivenumbers[i]['lower'] = data[i].data[parseInt((med + 1) / 2)];
			fivenumbers[i]['upper'] = data[i].data[med + parseInt((med + 1) / 2)];
		    } else {
			fivenumbers[i]['lower'] = ((data[i].data[(med + 1) / 2]) + (data[i].data[((med + 1) / 2) + 1])) / 2;
			fivenumbers[i]['upper'] = ((data[i].data[med + ((med + 1) / 2) - 1]) + (data[i].data[med + ((med + 1) / 2)])) / 2;
		    }
		} else {
		    var medup = data[i].data.length / 2;
		    var medlow = (data[i].data.length / 2) - 1;
		    fivenumbers[i]['median'] = (data[i].data[medlow] + data[i].data[medup]) / 2;
		    if (medup % 2 == 1) {
			fivenumbers[i]['lower'] = data[i].data[medlow / 2];
			fivenumbers[i]['upper'] = data[i].data[medup + (medlow / 2)];
		    } else {
			fivenumbers[i]['lower'] = (data[i].data[(medup / 2) - 1] + data[i].data[medup / 2]) / 2;
			fivenumbers[i]['upper'] = (data[i].data[medup + (medup / 2) - 1] + data[i].data[medup + (medup / 2)]) / 2;
		    }
		}
	    }

	    for (var i=0; i<data.length; i++) {
		renderer.settings.data[i].data = [ fivenumbers[i] ];
	    }
	    renderer.cmax = max;
	}
    }
}).call(this);

/*
  Plot Renderer

  Displays a two dimensional plot.

  Options

  title (STRING)
      Title string written at the top of the plot
  
  title_color (CSS Color Value)
      Color of the title text. Default is black.

  default_line_color (CSS Color Value)
      Determines the color of lines if not specified for an individual line. Default is black.

  default_line_width (INT)
      Number of pixels lines should be wide if not specified for an individual line. Default is 1.
  
  width (INT)
      The width of the graph in pixel (including legend).
  
  height (INT)
      The height of the graph in pixel (including legend).

  show_dots (BOOLEAN)
      display circles at the data points (for connected mode only)

  connected (BOOLEAN)
      connect the dots. This will disable the shape attribute of the series.

  data (OBJECT)
      series (OBJECT)
        name (STRING) - name of the series
	color (CSS Color value) - color of the series
	shape [ 'cicrle', 'triangle', 'square' ] - shape of the points (connected==false only)
      points (ARRAY of OBJECT)
        x (FLOAT) - x coordinate
	y (FLOAT) - y coordinate

  show_legend (BOOLEAN)
      Turns the display of the legend on / off. Default ist true.

  legend_position (STRING)
      Can be one of
        left
        right
        top
        bottom

  chartArea (ARRAY of FLOAT)
     The values passed correspond to the left, top, width and height of the chart area respectively. The position is relative to the top left corner of the containing div. Values less than 1 are interpreted as fractions. Values greater than 1 are interpreted as absolute pixel values. Note that the labels are drawn to the left and bottom of these margins.

  legendArea (ARRAY of FLOAT)
      If this parameter is set, the legend_position parameter will not be used. Instead pass an array of floats. The values correspond to the left, top, width and height of the legend area respectively. The position is relative to the top left corner of the containing div. Values less than 1 are interpreted as fractions. Values greater than 1 are interpreted as absolute pixel values.

  x_min (FLOAT)
      minimum x value

  y_min (FLOAT)
      minimum y value

  x_max (FLOAT)
      maximim x value

  y_max (FLOAT)
      maximum y value

  x_title (STRING)
      title of the x axis

  y_title (STRING)
      title of the y axis

  x_scale (STRING)
      can be either 'linear' or 'log', default is linear.

  y_scale (STRING)
      can be either 'linear' or 'log', default is linear

  x_titleOffset (INT)
      pixels offset of the x axis title, default is 35.

  y_titleOffset (INT)
      pixels offset of the y axis title, default is 45.

  titleOffset (INT)
      pixels offset of the plot title

  drag_select (FUNCTION)
      function to be called for drag select. This function will get passed an array of the selected points.
  
*/
(function () {
    var root = this;
    var standalonePlot = root.standalonePlot = {
	about: {
	    name: "plot",
	    title: "Plot",
            author: "Tobias Paczian",
            version: "1.0",
            defaults: {
		'title': '',
		'title_color': 'black',
		'default_line_color': 'black',
		'default_line_width': 1,
		'show_legend': true,
		'legend_position': 'right',
		'series': [],
		'connected': true,
		'show_dots': true,
		'width': 800,
		'height': 400,
		'x_min': undefined,
		'x_max': undefined,
		'y_min': undefined,
		'y_max': undefined,
		'x_scale': 'linear',
		'y_scale': 'linear',
		'x_title': '',
		'y_title': '',
		'x_titleOffset': 35,
		'y_titleOffset': 45,
		'titleOffset': 0,
		'drag_select': null,
		'data': undefined },
	    options: [
		{ general:
		  [
		      { name: 'default_line_color', type: 'color', description: "default color of the data lines of the plot",
			title: "default line color" },
		      { name: 'default_line_width', type: 'int', description: "default width of the data lines of the plot in pixel",
			title: "default line width" },
		      { name: 'connected', type: 'bool', description: "sets whether the data points are connected or not",
			title: "connected", defaultTrue: true },
		      { name: 'show_dots', type: 'bool', description: "sets whether the data points are displayed or not",
			title: "show dots", defaultTrue: true },
		  ]
		},
		{ text:
		  [
		      { name: 'title', type: 'text', description: "title string of the plot", title: "title" },
		      { name: 'title_color', type: 'color', description: "color of the title string of the plot", title: "title color" },
		      { name: 'x_title', type: 'text', description: "title of the x-axis of the plot", title: "x title" },
		      { name: 'y_title', type: 'text', description: "title of the y-axis of the plot", title: "y title" },
		      { name: 'x_titleOffset', type: 'int', description: "title offset from the x-axis", title: "x title offset" },
		      { name: 'y_titleOffset', type: 'int', description: "title offset from the y-axis", title: "y title offset" },
		      { name: 'titleOffset', type: 'int', description: "title offset from the top", title: "title offset" },
		  ]
		},
		{ layout:
		  [
		      { name: 'show_legend', type: 'bool', description: "sets whether the legend is displayed or not",
			title: "show legend", defaultTrue: true },
		      { name: 'width', type: 'int', description: "width of the plot in pixel", title: "width" },
		      { name: 'height', type: 'int', description: "height of the plot in pixel", title: "height" },
		      { name: 'legend_position', type: 'select',
			description: "position of the legend",
			title: "legend position",
			options: [ { value: "left", selected: true },
				   { value: "right" },
				   { value: "top" },
				   { value: "bottom" } ] }
		  ]
		},
		{ axes:
		  [
		      { name: 'x_min', type: 'int', description: "minimum value of the x-axis", title: "x min" },
		      { name: 'x_max', type: 'int', description: "maximum value of the x-axis", title: "x max" },
		      { name: 'y_min', type: 'int', description: "minimum value of the y-axis", title: "y min" },
		      { name: 'y_max', type: 'int', description: "maximum value of the y-axis", title: "y max" },
		      
		      { name: 'y_scale', type: 'select', description: "type of the scale of the y-axis",
			title: "y scale", options: [
			    { value: "linear", selected: true },
			    { value: "log" } ] },
		      { name: 'x_scale', type: 'select', description: "type of the scale of the x-axis",
			title: "x scale", options: [
			    { value: "linear", selected: true },
			    { value: "log" } ] }
		  ]
		}
	    ]
	},
	exampleData: function () {
	    return { series: [ { name: "cool", color: 'blue', shape: 'circle' },
			       { name: "uncool", color: 'red', shape: 'square' },
			       { name: "semi-cool", color: 'orange', shape: 'triangle' } ],
		     points: [ [ { x: 0.5,  y: 7 },
				 { x: 0.15,  y: 5  },
				 { x: 0.5, y: 15  } ],
			       [ { x: 0,  y: 0 },
				 { x: 0.25,  y: 35  },
				 { x: 0.35, y: 90  } ],
			       [ { x: 0.8,  y: 80 },
				 { x: 0.49,  y: 50  },
				 { x: 0.15, y: 10  } ]
			     ] };
        },

	create: function (params) {
	    var renderer = this;
	    if (! window.hasOwnProperty('rendererPlot')) {
		window.rendererPlot = [];
	    }
	    var instance = { settings: {},
			     index: params.index };
	    jQuery.extend(true, instance, renderer);
	    jQuery.extend(true, instance.settings, renderer.about.defaults, params);
	    window.rendererPlot.push(instance);

	    return instance;
	},
	
	render: function (index) {
	    var renderer = rendererPlot[index];
	    
	    // get the target div
	    var target = renderer.settings.target;
	    target.innerHTML = "<div id='plot_div"+index+"'></div>";
	    target.firstChild.setAttribute('style', "width: "+ renderer.settings.width+"px; height: "+renderer.settings.height+"px;");
	    jQuery('#plot_div'+index).svg().bind('dragstart', function(event) { event.preventDefault(); });
	    rendererPlot[index].svg = jQuery('#plot_div'+index).svg('get');
	    rendererPlot[index].drawImage(rendererPlot[index].svg, index);

	    if (renderer.settings.drag_select && typeof(renderer.settings.drag_select) == 'function') {
		var svg = document.getElementById('plot_div'+index).firstChild;
		trackMarquee(svg, renderer.settings.drag_select);
	    }

	    return renderer;
	},

	niceNum: function (range, round) {
            var exponent = Math.floor(Math.log10(range)); /** exponent of range */
            var fraction = range / Math.pow(10, exponent); /** fractional part of range */
            var niceFraction; /** nice, rounded fraction */
	    
            if (round) {
		if (fraction < 1.5) {
                    niceFraction = 1;
		} else if (fraction < 3) {
                    niceFraction = 2;
		} else if (fraction < 7) {
                    niceFraction = 5;
		} else {
                    niceFraction = 10;
		}
            } else {
		if (fraction <= 1) {
                    niceFraction = 1;
		} else if (fraction <= 2) {
                    niceFraction = 2;
		} else if (fraction <= 5) {
                    niceFraction = 5;
		} else {
                    niceFraction = 10;
		}
            }
	    
            return niceFraction * Math.pow(10, exponent);
	},
	
	/* get a nice scale, min, max and tick interval */
	niceScale: function (params) {
 	    var minPoint = params.min;
	    var maxPoint = params.max;
	    var maxTicks = params.ticks || 10;
	    var range = rendererPlot[0].niceNum(maxPoint - minPoint, false);
	    var tickSpacing = rendererPlot[0].niceNum(range / (maxTicks - 1), true);
	    var niceMin = Math.floor(minPoint / tickSpacing) * tickSpacing;;
	    var niceMax = Math.ceil(maxPoint / tickSpacing) * tickSpacing;
	    
	    return { min: niceMin, max: niceMax, space: tickSpacing };
	},
	
	drawImage: function (svg, index) {
	    var renderer = rendererPlot[index];
	    
	    var chartAreas  = [ [ 0.1, 0.1, 0.95, 0.9 ],
				[ 0.2, 0.1, 0.95, 0.9 ],
				[ 0.1, 0.1, 0.8, 0.9 ],
				[ 0.1, 0.25, 0.9, 0.9 ],
				[ 0.1, 0.1, 0.9, 0.8 ] ]; 
	    var legendAreas = [ [ 0.0, 0.0, 0.0, 0.0 ],
				[ 0.005, 0.1, 0.125, 0.5 ],
				[ 0.85, 0.1, 0.97, 0.5 ],
				[ 0.2, 0.1, 0.8, 0.2 ],
				[ 0.2, 0.9, 0.8, 0.995 ] ]; 
	    
	    var colors = [ '#BD362F', // red
			   '#0044CC', // blue
			   '#51A351', // green
			   '#F89406', // yellow
			   '#2F96B4', // lightblue
			   '#bd2fa6'  // purple 
			 ];

	    if (renderer.settings.x_min === undefined) {
		var x_min = undefined;
		var x_max = undefined;
		var y_min = undefined;
		var y_max = undefined;
		for (var i=0; i<renderer.settings.data.points.length; i++) {
		    for (var h=0; h<renderer.settings.data.points[i].length; h++) {
			if (x_min === undefined || renderer.settings.data.points[i][h].x < x_min) x_min = renderer.settings.data.points[i][h].x;
			if (x_max === undefined || renderer.settings.data.points[i][h].x > x_max) x_max = renderer.settings.data.points[i][h].x;
			if (y_min === undefined || renderer.settings.data.points[i][h].y < y_min) y_min = renderer.settings.data.points[i][h].y;
			if (y_max === undefined || renderer.settings.data.points[i][h].y > y_max) y_max = renderer.settings.data.points[i][h].y;
		    }
		}
		var sx = rendererPlot[0].niceScale({min: x_min, max: x_max});
		renderer.settings.x_min = sx.min;
		renderer.settings.x_max = sx.max;
		var sy = rendererPlot[0].niceScale({min: y_min, max: y_max});
		renderer.settings.y_min = sy.min;
		renderer.settings.y_max = sy.max;
	    }
	    
	    svg.plot.noDraw().title(renderer.settings.title, renderer.settings.titleOffset, renderer.settings.title_color, renderer.settings.title_settings);
	    for (i=0;i<renderer.settings.data.length;i++) {
		var d = renderer.settings.data[i];
	    }
	    
	    svg.plot.plotPoints = renderer.settings.data.points;
	    svg.plot.connected = renderer.settings.connected;
	    svg.plot.showDots = renderer.settings.show_dots;
	    svg.plot.series = renderer.settings.data.series;

	    svg.plot.noDraw().format('white', 'gray').gridlines({stroke: 'gray', strokeDashArray: '2,2'}, 'gray'); 
	    svg.plot.xAxis.scale(renderer.settings.x_min, renderer.settings.x_max, renderer.settings.x_scale).ticks(parseFloat((renderer.settings.x_max - renderer.settings.x_min) / 10), parseFloat((renderer.settings.x_max - renderer.settings.x_min) / 5), 8, 'sw', renderer.settings.x_scale).title(renderer.settings.x_title, renderer.settings.x_titleOffset); 
	    svg.plot.yAxis.scale(renderer.settings.y_min, renderer.settings.y_max, renderer.settings.y_scale).ticks(parseFloat((renderer.settings.y_max - renderer.settings.y_min) / 10), parseFloat((renderer.settings.y_max - renderer.settings.y_min) / 5), 8, 'sw', renderer.settings.y_scale).title(renderer.settings.y_title, renderer.settings.y_titleOffset);
	    svg.plot.legend.settings({fill: 'white', stroke: 'gray'});
	    
	    var plotLegend = 0;
	    if (renderer.settings.show_legend) {
		switch (renderer.settings.legend_position) {
		case 'left': plotLegend = 1; 
		    break;
		case 'right': plotLegend = 2;
		    break;
		case 'top': plotLegend = 3;
		    break;
		case 'bottom': plotLegend = 4;
		    break;
		default: plotLegend = 1;
		    break;
		}
	    }
	    svg.plot.noDraw(). 
		legend.show(plotLegend).area(renderer.settings.legendArea ? renderer.settings.legendArea : legendAreas[plotLegend]).end().
		area(renderer.settings.chartArea ? renderer.settings.chartArea : chartAreas[plotLegend]).redraw();
	}
     }
}).call(this);

/*
  Heatmap Renderer

  Displays a heatmap.

  Options
  
  width (int)
     Number of pixels the resulting image is wide. Default is 700

  height (int)
     Number of pixels the resulting image is high. This will be adjusted to at least rows * min_cell_height + legend and tree heights. Default is 600.

  tree_height (int)
     Number of pixels the dendogram tree for the columns is high. Default is 50.

  tree_width (int)
     Number of pixels the dendogram tree for the rows is wide. Default is 50.

  legend_height (int)
     Number of pixels for the column names. Default is 250.

  legend_width (int)
     Number of pixels for the row names. Default is 250.

  row_text_size (int)
     Number of pixels of the row text font size. Default is 15.

  col_text_size (int)
     Number of pixels of the column text font size. Default is 15.

  min_cell_height (int)
     Minimum number of pixels a row is high. This may cause the defined height of the resulting image to be overwritten. Default is 19.

  selectedRows (array of boolean)
     Returns an array that has a value of true for all row indices that are currently selected.

  data (object)
     columns (array of string)
        names of the columns
     rows (array of string)
        names of the rows
     colindex (array of int)
        1 based indices of the original column order. This converts the original order (columns) into the one ordered by distance.
     rowindex (array of int)
        1 based indices of the original row order. This converts the original order (rows) into the one ordered by distance.
     coldend (array of array of float)
        distance matrix for the columns
     rowdend (array of array of float)
        distance matrix for the rows
     data (array of array of float)
        normalized value matrix
*/
(function () {
    var root = this;
    var standaloneHeatmap = root.standaloneHeatmap = {
	about: {
	    name: "heatmap",
	    title: "Heatmap",
            author: "Tobias Paczian",
            version: "1.0",
            requires: [ "jquery.svg.js" ],
            defaults: {
		'width': 200,
		'height': 200,
		'tree_height': 50,
		'tree_width': 50,
		'legend_height': 80,
		'legend_width': 100,
		'row_text_size': 15,
		'col_text_size': 15,
		'min_cell_height': 19,
		'selectedRows': [],
		'selectedColumns': [],
		'cells': [] },
	    options: [
		{
		    text: [
			{ name: 'row_text_size', type: 'int', description: "font size of the row text in pixel", title: "row font size" },
			{ name: 'col_text_size', type: 'int', description: "font size of the column text in pixel", title: "column font size" },
			{ name: 'min_cell_height', type: 'int', description: "minimum height of a cell", title: "minimum cell height" }
		    ]
		},		
		{
		    layout: [ 
			{ name: 'height', type: 'int', description: "height of the plot", title: "height" },
			{ name: 'width', type: 'int', description: "width of the plot", title: "width" },
			{ name: 'tree_height', type: 'int', description: "height of the dendogram", title: "dendogram height" },
			{ name: 'tree_width', type: 'int', description: "width of the dendogram", title: "dendogram width" },
			{ name: 'legend_height', type: 'int', description: "height of the legend", title: "legend height" },
			{ name: 'legend_width', type: 'int', description: "width of the legend", title: "legend width" }
		    ]
		}
	    ]
	},
	exampleData: function () {
	    return { columns: ["4441619.3", "4441656.4", "4441620.3"], rows: ["Eukaryota", "unassigned", "Bacteria","Archaea"], data: [[0.338159580408187, 0.717179237742824, 0.514052821211353],[0.238159580408187, 0.317179237742824, 0.114052821211353],[0.553202346761363, 0.614080873307415, 0.555096325148052],[0.996159994861707, 0.940468112695288, 1]] };
        },

	create: function (params) {
	    var renderer = this;
	    if (! window.hasOwnProperty('rendererHeatmap')) {
		window.rendererHeatmap = [];
	    }
	    var instance = { settings: {},
			     index: params.index };
	    jQuery.extend(true, instance, renderer);
	    jQuery.extend(true, instance.settings, renderer.about.defaults, params);
	    window.rendererHeatmap.push(instance);

	    return instance;
	},

	render: function (index) {
	    var renderer = rendererHeatmap[index];

	    var min_height = (renderer.settings.data.rows.length * renderer.settings.min_cell_height) + renderer.settings.tree_height + renderer.settings.legend_height;
	    if (renderer.settings.height < min_height) {
		renderer.settings.height = min_height;
	    }
	    var min_width = (renderer.settings.data.columns.length * renderer.settings.min_cell_height) + renderer.settings.tree_width + renderer.settings.legend_width;
	    if (renderer.settings.width < min_width) {
		renderer.settings.width = min_width;
	    }

	    // get the target div
	    var target = renderer.settings.target;
	    target.innerHTML = "<div id='heatmap_div"+index+"'></div>";
	    target.firstChild.setAttribute('style', "width: "+ renderer.settings.width+"px; height: "+renderer.settings.height+"px;");
	    jQuery('#heatmap_div'+index).svg();
	    rendererHeatmap[index].drawImage(jQuery('#heatmap_div'+index).svg('get'), renderer.index);
	    
	    return renderer;
	},

	drawImage: function (svg, index) {
	    var renderer = rendererHeatmap[index];

	    // initialize shortcut variables
	    var numrows = renderer.settings.data.rows.length;
	    var numcols = renderer.settings.data.columns.length;
	    var boxwidth = parseInt((renderer.settings.width - renderer.settings.legend_width - renderer.settings.tree_width - 5) / numcols);
	    renderer.settings.boxwidth = boxwidth;
	    var boxheight = parseInt((renderer.settings.height - renderer.settings.legend_height - renderer.settings.tree_height - 5) / numrows);
	    renderer.settings.boxheight = boxheight;
	    var displaywidth = parseInt(renderer.settings.width - renderer.settings.legend_width - renderer.settings.tree_width - 5);
	    var displayheight = parseInt(renderer.settings.height - renderer.settings.legend_height - renderer.settings.tree_height - 5);

	    var x = 0;
	    var y = 0;
	    var rx = 0;
	    var ry = 0;
	    var width = 0;
	    var height = 0;
	    var settings = {fill: 'red', strokeWidth: 1, stroke: 'black'};
	    if (renderer.settings.data.hasOwnProperty('coldend') && renderer.settings.data.hasOwnProperty('colindex')) {
	        renderer.settings.data.colcluster = renderer.settings.data.coldend;
	    } else {
	        var col_result = renderer.cluster(renderer.transpose(renderer.settings.data.data));
	        renderer.settings.data.colcluster = col_result[0];
	        renderer.settings.data.colindex = col_result[1];
	    }
        if (renderer.settings.data.hasOwnProperty('rowdend') && renderer.settings.data.hasOwnProperty('rowindex')) {
            renderer.settings.data.rowcluster = renderer.settings.data.rowdend;
        } else {
	        var row_result = renderer.cluster(renderer.settings.data.data);
	        renderer.settings.data.rowcluster = row_result[0];
	        renderer.settings.data.rowindex = row_result[1];
        }
	    renderer.drawDendogram(svg, index, 0);
	    renderer.drawDendogram(svg, index, 1);

	    // draw the heatmap
	    for (var i=0;i<renderer.settings.data.data.length;i++) {
		// draw row text
		var textx = renderer.settings.tree_width + displaywidth + 5;
		var texty = renderer.settings.tree_height + renderer.settings.legend_height + (boxheight * (i+1) - parseInt((boxheight - renderer.settings.row_text_size) / 2)) - 2;
		var fontColor = "black";
		if (renderer.settings.selectedRows[i]) {
		    fontColor = "blue";
		}

		svg.text(null, textx, texty, ''+renderer.settings.data.rows[renderer.settings.data.rowindex[i]-1], { fill: fontColor, fontSize: renderer.settings.row_text_size+"px", onclick: "rendererHeatmap["+index+"].toggleSelected("+i+", "+index+", 0);", cursor: "pointer" });

		renderer.settings.cells.push([]);

		// draw cells
		for (var h=0;h<renderer.settings.data.data[i].length;h++) {
		    // draw column text
		    if (i==0) {
			var ctextx = renderer.settings.tree_width + (boxwidth * h) + (parseInt((boxwidth - renderer.settings.col_text_size) / 2)) + 12;
			var ctexty = renderer.settings.legend_height - 5;
			fontColor = "black";
			if (renderer.settings.selectedColumns[h]) {
			    fontColor = "blue";
			}
			svg.text(null, ctextx, ctexty, renderer.settings.data.columns[renderer.settings.data.colindex[h]-1], { fill: fontColor, fontSize: renderer.settings.col_text_size+"px", transform: "rotate(-90, "+ctextx+", "+ctexty+")", onclick: "rendererHeatmap["+index+"].toggleSelected("+h+", "+index+", 1);", cursor: "pointer" });
			
		    }

		    // calculate box margins
		    x = h * boxwidth + renderer.settings.tree_width;
		    width = boxwidth;
		    y = i * boxheight + renderer.settings.tree_height + renderer.settings.legend_height;
		    height = boxheight;

		    // calculate box color
		    var color = "black";
		    var adjusted_value = (renderer.settings.data.data[renderer.settings.data.rowindex[i]-1][renderer.settings.data.colindex[h]-1] * 2) - 1;
		    var cval = parseInt(255 * Math.abs(adjusted_value));
		    if (adjusted_value < 0) {
			color = "rgb("+cval+",0,0)";
		    } else {
			color = "rgb(0,"+cval+",0)";
		    }
		    settings.fill = color;
		    if (typeof renderer.settings.cellClicked == "function") {
			settings.onclick = "rendererHeatmap["+index+"].cellClick("+i+", "+h+", "+adjusted_value+", this, "+index+");";
		    }
		    if (typeof renderer.settings.cellHovered == "function") {
			settings.onmouseover = "rendererHeatmap["+index+"].cellHover(1, "+i+", "+h+", "+adjusted_value+", this, "+index+");";
			settings.onmouseout = "rendererHeatmap["+index+"].cellHover(0, "+i+", "+h+", "+adjusted_value+", this, "+index+");";
		    }

		    // draw the box
		    renderer.settings.cells[i][h] = svg.rect(null, x, y, width, height, rx, ry, settings);		    
		}
	    }
	},

	drawDendogram: function (svg, index, rotation) {
	    var renderer = rendererHeatmap[index];

	    var height = rotation ? renderer.settings.tree_width : renderer.settings.tree_height;
	    var data = rotation ? renderer.settings.data.rowcluster : renderer.settings.data.colcluster;
	    var cell_w = rotation ? renderer.settings.boxheight : renderer.settings.boxwidth;
	    var xshift = rotation ? renderer.settings.tree_height : renderer.settings.tree_width;
	    var yshift = renderer.settings.legend_height + renderer.settings.tree_height;
	    var interval = parseInt(height / data.depth);
	    var path = "";
	    if (rotation) {
		xshift++;
		for (var i=0;i<data.depth;i++) {
		    var curr_shift = 0 + yshift;
		    for (var h=0;h<data[i].length;h++) {
			var cluster = data[i][h];
			path += "M"+xshift+","+parseInt(curr_shift + ((cell_w * cluster.a) / 2))+"l-"+parseInt(interval)+",0";
			if (cluster.hasOwnProperty('b')) {
			    path += "l0,"+parseInt((cell_w * (cluster.a / 2)) + (cell_w * (cluster.b / 2)))+"l"+parseInt(interval)+",0";
			}
			curr_shift += cluster.b ? (cluster.a + cluster.b) * cell_w : cluster.a * cell_w;
		    }
		    xshift -= interval;
		}
	    } else {
		for (var i=0;i<data.depth;i++) {
		    var curr_shift = 0 + xshift;
		    for (var h=0;h<data[i].length;h++) {
			var cluster = data[i][h];
			path += "M"+parseInt(curr_shift + ((cell_w * cluster.a) / 2))+","+yshift+"l0,-"+parseInt(interval);
			if (cluster.hasOwnProperty('b')) {
			    path += "l"+parseInt((cell_w * (cluster.a / 2)) + (cell_w * (cluster.b / 2)))+",0l0,"+parseInt(interval);
			}
			curr_shift += cluster.b ? (cluster.a + cluster.b) * cell_w : cluster.a * cell_w;
		    }
		    yshift -= interval;
		}
	    }
	    svg.path(null, path, {fill:"none", stroke: "black" });
	},
	
	toggleSelected: function (row, index, dir) {
	    var renderer = rendererHeatmap[index];

	    if (dir) {
		if (typeof renderer.settings.colClicked == "function") {
		    renderer.settings.colClicked({ col: row, rendererIndex: index, label: renderer.settings.data.cols[renderer.settings.data.colindex[row]-1] });
		} else {
		    if (renderer.settings.selectedColumns[row]) {
			renderer.settings.selectedColumns[row] = 0;
		    } else {
			renderer.settings.selectedColumns[row] = 1;
		    }
		}
	    } else {
		if (typeof renderer.settings.rowClicked == "function") {
		    renderer.settings.rowClicked({ row: row, rendererIndex: index, label: renderer.settings.data.rows[renderer.settings.data.rowindex[row]-1] });
		} else {
		    if (renderer.settings.selectedRows[row]) {
			renderer.settings.selectedRows[row] = 0;
		    } else {
			renderer.settings.selectedRows[row] = 1;
		    }
		}
	    }

	    renderer.render();
	},

	cellClick: function (row, col, value, cell, index) {
	    var renderer = rendererHeatmap[index];
	    if (typeof renderer.settings.cellClicked == "function") {
		renderer.settings.cellClicked({row: row, col: col, value: value, cell: cell});
	    }
	},

	cellHover: function (over, row, col, value, cell, index) {
	    var renderer = rendererHeatmap[index];
	    if (typeof renderer.settings.cellHovered == "function") {
		renderer.settings.cellHovered({over: over, row: row, col: col, value: value, cell: cell});
	    }
	},

	normalize: function (data, min, max) {
	    var normdata = [];
	    min = min ? min : 0;
	    max = max ? max : 1;
	    for (var i=0;i<data.length;i++) {
		var dmin = data[i][0];
		var dmax = data[i][0];
		for (var h=0; h<data[i].length; h++) {
		    if (data[i][h] < dmin) {
			dmin = data[i][h];
		    }
		    if (data[i][h] > dmax) {
			dmax = data[i][h];
		    }
		}
		normdata[i] = [];
		for (var h=0;h<data[i][h].length;h++) {
		    normdata[i][h] = min + (x - dmin) * (dmax - min) / (dmax - dmin);
		}
	    }

	    return normdata;
	},

	clustsort: function (a, b) {
	    return a.amin - b.amin;
	},

	distance: function (data) {
	    var distances = {};
	    for (var i=0;i<data.length;i++) {
		distances[i] = {};
	    }
	    for (var i=0;i<data.length;i++) {
	    	for (var h=0;h<data.length;h++) {
	    	    if (i>=h) {
	    		continue;
	    	    }
	    	    var dist = 0;
	    	    for (var j=0;j<data[i].data[0].length;j++) {
	    		dist += Math.pow(data[i].data[0][j] - data[h].data[0][j], 2);
	    	    }
	    	    distances[i][h] = Math.pow(dist, 0.5);
	    	}
	    }	    
	    return distances;
	},

	transpose: function (data) {
	    var result = [];
	    for (var i=0;i<data.length;i++) {
		for (var h=0;h<data[i].length;h++) {
		    if (i==0) {
			result.push( [] );
		    }
		    result[h][i] = data[i][h];
		}
	    }
	    return result;
	},

	cluster: function (data) {
	    var num_avail = data.length;
	    var avail = {};
	    var clusters = [];
	    for (var i=0;i<data.length;i++) {
		clusters.push( { points: [ i ], data: [ data[i] ], basepoints: [ i ], level: [ 0 ] } );
		avail[i] = true;
	    }

	    // get the initial distances between all nodes
	    var distances = rendererHeatmap[0].distance(clusters);

	    // calculate clusters
	    var min;
	    var coords;
	    while (num_avail > 1) {
		var found = false;
	    	for (var i in distances) {
	    	    if (distances.hasOwnProperty(i)) {
	    		for (var h in distances[i]) {
	    		    if (distances[i].hasOwnProperty(h) && avail[i] && avail[h]) {
	    			min = distances[i][h];
	    			coords = [ i, h ];
				found = true;
	    			break;
	    		    }
	    		}
			if (found) {
	    		    break;
			}
	    	    }
	    	}
	    	for (var i in distances) {
	    	    if (distances.hasOwnProperty(i)) {
	    		for (var h in distances[i]) {
	    		    if (distances[i].hasOwnProperty(h)) {
	    			if (avail[i] && avail[h] && distances[i][h]<min) {
	    			    coords = [ i, h ];
				    min  = distances[i][h];
	    			}
	    		    }
	    		}
	    	    }
	    	}
	    	avail[coords[0]] = false;
	    	avail[coords[1]] = false;
	    	num_avail--;
	    	avail[clusters.length] = true;
		
		var sumpa = 0;
		var sumpb = 0
		for (var h=0;h<2;h++) {
		    for (var i=0;i<clusters[coords[h]].data.length;i++) {
			if (h==0) {
			    sumpa += clusters[coords[h]].data[i];
			} else {
			    sumpb += clusters[coords[h]].data[i];
			}
	    	    }
		}
		var pdata = [];
		var bpoints = [];
	    	for (var h=0;h<2;h++) {
		    var j = h;
		    if (sumpa > sumpb) {
			if (h==0) { j = 1; } else { j = 0; }
		    }
		    for (var i=0;i<clusters[coords[j]].data.length;i++) {
	    		pdata.push(clusters[coords[j]].data[i]);
	    	    }
		    for (var i=0;i<clusters[coords[j]].basepoints.length;i++) {
			bpoints.push(clusters[coords[j]].basepoints[i]);
		    }
	    	}
		var coord_a = coords[0];
		var coord_b = coords[1];
		if (sumpa > sumpb) {
		    var triangle = coord_a;
		    coord_a = coord_b;
		    coord_b = triangle;
		}
		coord_a = parseInt(coord_a);
		coord_b = parseInt(coord_b);

	    	clusters.push({ points: [ coord_a, coord_b ], data: pdata, basepoints: bpoints, level: [ Math.max.apply(null, clusters[coord_a].level) + 1, Math.max.apply(null, clusters[coord_b].level) + 1 ] });

	    	var row_a = [];
	    	for (var h=0;h<2;h++) {
	    	    for (var i=0;i<clusters[coords[h]].data.length;i++) {
	    		for (var j=0; j<clusters[coords[h]].data[i].length; j++) {
	    		    if (h==0 && i==0) {
	    			row_a[j] = 0;
	    		    }
	    		    row_a[j] += clusters[coords[h]].data[i][j];
	    		}
	    	    }
	    	}
	    	for (var i=0; i<row_a.length; i++) {
	    	    row_a[i] = row_a[i] / (clusters[coord_a].data.length + clusters[coord_b].data.length);
	    	}
	    	var index = clusters.length - 1;
		distances[index] = {};
	    	for (var h=0; h<index; h++) {
	    	    var row_b = [];
	    	    for (var i=0;i<clusters[h].data.length;i++) {
	    		for (var j=0; j<clusters[h].data[i].length; j++) {
	    		    if (i==0) {
	    			row_b[j] = 0;
	    		    }
	    		    row_b[j] += clusters[h].data[i][j];
	    		}
	    	    }
	    	    for (var i=0; i<row_b.length; i++) {
	    		row_b[i] = row_b[i] / clusters[h].data.length;
	    	    }
	    	    var dist = 0;
	    	    for (var i=0;i<row_a.length;i++) {
	    		dist += Math.pow(row_a[i] - row_b[i], 2);
	    	    }
	    	    distances[h][index] = Math.pow(dist, 0.5);
	    	}
	    }

	    // record the row order after clustering
	    var rowindex = [];
	    var cind = clusters.length - 1;
	    for (var i=0;i<clusters[cind].basepoints.length; i++) {
		rowindex.push(clusters[cind].basepoints[i] + 1);
	    }

	    // record the reverse row order for lookup
	    var roworder = {};
	    for (var i=0;i<rowindex.length;i++) {
		roworder[rowindex[i]] = i;
	    }

	    // get the depth
	    var depth = 0;
	    for (var i=0; i<clusters.length; i++) {
		if (clusters[i].level[0] && clusters[i].level[0] > depth) {
		    depth = clusters[i].level[0];
		}
		if (clusters[i].level[1] && clusters[i].level[1] > depth) {
		    depth = clusters[i].level[1];
		}
	    }

	    // format the cluster data for visualization
	    var clusterdata = { "depth": depth };
	    for (var i=0;i<clusterdata.depth;i++) {
		clusterdata[i] = [];
	    }
	    for (var i=data.length; i<clusters.length; i++) {

		// get the level this cluster is at
		var level = Math.max.apply(null, clusters[i].level) - 1;
		
		clusterdata[level].push({a: clusters[clusters[i].points[0]].data.length, b:clusters[clusters[i].points[1]].data.length, amin: roworder[Math.min.apply(null, clusters[clusters[i].points[0]].basepoints) + 1] });
		
		// draw single lines until we reach the next root
		if (clusters[i].level[0] != clusters[i].level[1]) {
		    var n = 0;
		    if (clusters[i].level[1] < clusters[i].level[0]) {
			n = 1;
		    }
		    for (var h=0;h<Math.abs(clusters[i].level[0] - clusters[i].level[1]);h++) {
			clusterdata[level - (h+1)].push({ a: clusters[clusters[i].points[n]].data.length, amin: roworder[Math.min.apply(null, clusters[clusters[i].points[n]].basepoints) + 1] });
		    }
		}
	    }

	    // sort the clusterdata
	    for (var i in clusterdata) {
	    	if (clusterdata.hasOwnProperty(i) && ! isNaN(i)) {
	    	    clusterdata[i].sort(rendererHeatmap[0].clustsort);
	    	}
	    }
	    
	    if (data.length < 20) {
		window.clustersx = clusters;
		window.clusterdatax = clusterdata;
	    }

	    return [clusterdata, rowindex];
	}
     }
}).call(this);

/**
 * A class to parse color values
 * @author Stoyan Stefanov <sstoo@gmail.com>
 * @link   http://www.phpied.com/rgb-color-parser-in-javascript/
 * @license Use it if you like it
 */

// for bps: A, T, C, G, N, X, total
function bpColors()
{
    return ["#109618","#dc3912","#3366cc","#ff9900","#8a4117","#000000","#990099"];
}

// return array of colors, length is inputed number (base_colors repeats)
function GooglePalette(num)
{
    var base_colors = [
	"#3366cc",
	"#dc3912",
	"#ff9900",
	"#109618",
	"#990099",
	"#0099c6",
	"#dd4477",
	"#66aa00",
	"#b82e2e",
	"#316395",
	"#994499",
	"#22aa99",
	"#aaaa11",
	"#6633cc",
	"#e67300",
	"#8b0707",
	"#651067",
	"#329262",
	"#5574a6",
	"#3b3eac",
	"#b77322",
	"#16d620",
	"#b91383",
	"#f4359e",
	"#9c5935",
	"#a9c413",
	"#2a778d",
	"#668d1c",
	"#bea413",
	"#0c5922",
	"#743411"
    ];

    if ( (! num) || (num == 0) ) {
	return base_colors;
    }

    var num_colors = [];
    for (var i=0; i<num; i++) {
	var c_index = i % base_colors.length;
	num_colors.push( base_colors[c_index] );
    }
    return num_colors;
}

function RGBColor(color_string)
{
    this.ok = false;

    // strip any leading #
    if (color_string.charAt(0) == '#') { // remove # if any
        color_string = color_string.substr(1,6);
    }

    color_string = color_string.replace(/ /g,'');
    color_string = color_string.toLowerCase();

    // before getting into regexps, try simple matches
    // and overwrite the input
    var simple_colors = {
        aliceblue: 'f0f8ff',
        antiquewhite: 'faebd7',
        aqua: '00ffff',
        aquamarine: '7fffd4',
        azure: 'f0ffff',
        beige: 'f5f5dc',
        bisque: 'ffe4c4',
        black: '000000',
        blanchedalmond: 'ffebcd',
        blue: '0000ff',
        blueviolet: '8a2be2',
        brown: 'a52a2a',
        burlywood: 'deb887',
        cadetblue: '5f9ea0',
        chartreuse: '7fff00',
        chocolate: 'd2691e',
        coral: 'ff7f50',
        cornflowerblue: '6495ed',
        cornsilk: 'fff8dc',
        crimson: 'dc143c',
        cyan: '00ffff',
        darkblue: '00008b',
        darkcyan: '008b8b',
        darkgoldenrod: 'b8860b',
        darkgray: 'a9a9a9',
        darkgreen: '006400',
        darkkhaki: 'bdb76b',
        darkmagenta: '8b008b',
        darkolivegreen: '556b2f',
        darkorange: 'ff8c00',
        darkorchid: '9932cc',
        darkred: '8b0000',
        darksalmon: 'e9967a',
        darkseagreen: '8fbc8f',
        darkslateblue: '483d8b',
        darkslategray: '2f4f4f',
        darkturquoise: '00ced1',
        darkviolet: '9400d3',
        deeppink: 'ff1493',
        deepskyblue: '00bfff',
        dimgray: '696969',
        dodgerblue: '1e90ff',
        feldspar: 'd19275',
        firebrick: 'b22222',
        floralwhite: 'fffaf0',
        forestgreen: '228b22',
        fuchsia: 'ff00ff',
        gainsboro: 'dcdcdc',
        ghostwhite: 'f8f8ff',
        gold: 'ffd700',
        goldenrod: 'daa520',
        gray: '808080',
        green: '008000',
        greenyellow: 'adff2f',
        honeydew: 'f0fff0',
        hotpink: 'ff69b4',
        indianred : 'cd5c5c',
        indigo : '4b0082',
        ivory: 'fffff0',
        khaki: 'f0e68c',
        lavender: 'e6e6fa',
        lavenderblush: 'fff0f5',
        lawngreen: '7cfc00',
        lemonchiffon: 'fffacd',
        lightblue: 'add8e6',
        lightcoral: 'f08080',
        lightcyan: 'e0ffff',
        lightgoldenrodyellow: 'fafad2',
        lightgrey: 'd3d3d3',
        lightgreen: '90ee90',
        lightpink: 'ffb6c1',
        lightsalmon: 'ffa07a',
        lightseagreen: '20b2aa',
        lightskyblue: '87cefa',
        lightslateblue: '8470ff',
        lightslategray: '778899',
        lightsteelblue: 'b0c4de',
        lightyellow: 'ffffe0',
        lime: '00ff00',
        limegreen: '32cd32',
        linen: 'faf0e6',
        magenta: 'ff00ff',
        maroon: '800000',
        mediumaquamarine: '66cdaa',
        mediumblue: '0000cd',
        mediumorchid: 'ba55d3',
        mediumpurple: '9370d8',
        mediumseagreen: '3cb371',
        mediumslateblue: '7b68ee',
        mediumspringgreen: '00fa9a',
        mediumturquoise: '48d1cc',
        mediumvioletred: 'c71585',
        midnightblue: '191970',
        mintcream: 'f5fffa',
        mistyrose: 'ffe4e1',
        moccasin: 'ffe4b5',
        navajowhite: 'ffdead',
        navy: '000080',
        oldlace: 'fdf5e6',
        olive: '808000',
        olivedrab: '6b8e23',
        orange: 'ffa500',
        orangered: 'ff4500',
        orchid: 'da70d6',
        palegoldenrod: 'eee8aa',
        palegreen: '98fb98',
        paleturquoise: 'afeeee',
        palevioletred: 'd87093',
        papayawhip: 'ffefd5',
        peachpuff: 'ffdab9',
        peru: 'cd853f',
        pink: 'ffc0cb',
        plum: 'dda0dd',
        powderblue: 'b0e0e6',
        purple: '800080',
        red: 'ff0000',
        rosybrown: 'bc8f8f',
        royalblue: '4169e1',
        saddlebrown: '8b4513',
        salmon: 'fa8072',
        sandybrown: 'f4a460',
        seagreen: '2e8b57',
        seashell: 'fff5ee',
        sienna: 'a0522d',
        silver: 'c0c0c0',
        skyblue: '87ceeb',
        slateblue: '6a5acd',
        slategray: '708090',
        snow: 'fffafa',
        springgreen: '00ff7f',
        steelblue: '4682b4',
        tan: 'd2b48c',
        teal: '008080',
        thistle: 'd8bfd8',
        tomato: 'ff6347',
        turquoise: '40e0d0',
        violet: 'ee82ee',
        violetred: 'd02090',
        wheat: 'f5deb3',
        white: 'ffffff',
        whitesmoke: 'f5f5f5',
        yellow: 'ffff00',
        yellowgreen: '9acd32'
    };
    for (var key in simple_colors) {
        if (color_string == key) {
            color_string = simple_colors[key];
        }
    }
    // emd of simple type-in colors

    // array of color definition objects
    var color_defs = [
        {
            re: /^rgb\((\d{1,3}),\s*(\d{1,3}),\s*(\d{1,3})\)$/,
            example: ['rgb(123, 234, 45)', 'rgb(255,234,245)'],
            process: function (bits){
                return [
                    parseInt(bits[1]),
                    parseInt(bits[2]),
                    parseInt(bits[3])
                ];
            }
        },
        {
            re: /^(\w{2})(\w{2})(\w{2})$/,
            example: ['#00ff00', '336699'],
            process: function (bits){
                return [
                    parseInt(bits[1], 16),
                    parseInt(bits[2], 16),
                    parseInt(bits[3], 16)
                ];
            }
        },
        {
            re: /^(\w{1})(\w{1})(\w{1})$/,
            example: ['#fb0', 'f0f'],
            process: function (bits){
                return [
                    parseInt(bits[1] + bits[1], 16),
                    parseInt(bits[2] + bits[2], 16),
                    parseInt(bits[3] + bits[3], 16)
                ];
            }
        }
    ];

    // search through the definitions to find a match
    for (var i = 0; i < color_defs.length; i++) {
        var re = color_defs[i].re;
        var processor = color_defs[i].process;
        var bits = re.exec(color_string);
        if (bits) {
            channels = processor(bits);
            this.r = channels[0];
            this.g = channels[1];
            this.b = channels[2];
            this.ok = true;
        }

    }

    // validate/cleanup values
    this.r = (this.r < 0 || isNaN(this.r)) ? 0 : ((this.r > 255) ? 255 : this.r);
    this.g = (this.g < 0 || isNaN(this.g)) ? 0 : ((this.g > 255) ? 255 : this.g);
    this.b = (this.b < 0 || isNaN(this.b)) ? 0 : ((this.b > 255) ? 255 : this.b);

    // some getters
    this.toRGB = function () {
        return 'rgb(' + this.r + ', ' + this.g + ', ' + this.b + ')';
    }
    this.toHex = function () {
        var r = this.r.toString(16);
        var g = this.g.toString(16);
        var b = this.b.toString(16);
        if (r.length == 1) r = '0' + r;
        if (g.length == 1) g = '0' + g;
        if (b.length == 1) b = '0' + b;
        return '#' + r + g + b;
    }

    // help
    this.getHelpXML = function () {

        var examples = new Array();
        // add regexps
        for (var i = 0; i < color_defs.length; i++) {
            var example = color_defs[i].example;
            for (var j = 0; j < example.length; j++) {
                examples[examples.length] = example[j];
            }
        }
        // add type-in colors
        for (var sc in simple_colors) {
            examples[examples.length] = sc;
        }

        var xml = document.createElement('ul');
        xml.setAttribute('id', 'rgbcolor-examples');
        for (var i = 0; i < examples.length; i++) {
            try {
                var list_item = document.createElement('li');
                var list_color = new RGBColor(examples[i]);
                var example_div = document.createElement('div');
                example_div.style.cssText =
                        'margin: 3px; '
                        + 'border: 1px solid black; '
                        + 'background:' + list_color.toHex() + '; '
                        + 'color:' + list_color.toHex()
                ;
                example_div.appendChild(document.createTextNode('test'));
                var list_item_value = document.createTextNode(
                    ' ' + examples[i] + ' -> ' + list_color.toRGB() + ' -> ' + list_color.toHex()
                );
                list_item.appendChild(example_div);
                list_item.appendChild(list_item_value);
                xml.appendChild(list_item);

            } catch(e){}
        }
        return xml;

    }

}

/*
 * Pop-it menu- Dynamic Drive (www.dynamicdrive.com). This notice MUST
 * stay intact for legal use Visit http://www.dynamicdrive.com/ for full
 * source code.
 */

document.write('<style type="text/css"><!-- \
	#popdiv { \
	  position: absolute; \
	  background-color: #fcfcfc; \
	  border: 1px solid #CCC; \
	  z-index: 10000; \
	  visibility: hidden; \
	  font-size: 12px;\
	} \
	table {\
	  font-size: 12px;\
	} \
--></style>');


var listenEvent = function(o, e, f) {
	if (o.addEventListener) o.addEventListener(e, f, false);
	else o.attachEvent('on'+e, f);
}

var popmenu = new function() {
	var ie = document.all && !window.opera;
	var timeout, pmo = null, timeBeg;
	var w3c_contains = function(a, b) { // Determines if 1 element in contained in another- by Brainjar.com	
		while (b.parentNode)
			if ((b = b.parentNode) == a)
				return true;
		return false;
	};
	this.createMenu = function() {
		pmo = document.createElement("div");
		pmo.setAttribute("id", "popdiv");
		pmo.onmouseover = popmenu.clear;
		listenEvent(pmo, 'mouseout', popmenu.autoHide);
		document.body.appendChild(pmo);
	}
	this.clear = function() { if (timeout) clearTimeout(timeout); };
	this.hide = function() { if (pmo) pmo.style.visibility = "hidden"; };
	this.delayedHide = function() { timeout = setTimeout("popmenu.hide()", 500); };
	this.clickHide = function(e) {
		if (timeBeg && (new Date().getTime()) - timeBeg > 500 && pmo
			&& (e.pageX < pmo.offsetLeft || e.pageX > pmo.offsetLeft + pmo.offsetWidth
				|| e.pageY < pmo.offsetTop || e.pageY > pmo.offsetTop + pmo.offsetHeight))
			popmenu.hide(e);
	};
	this.autoHide = function(e) {
		if (ie && !pmo.contains(e.toElement)) popmenu.hide();
		else if (e.currentTarget != e.relatedTarget && !w3c_contains(e.currentTarget, e.relatedTarget))
			popmenu.hide();
	};
	this.show = function(e, which, optWidth) {
		var ieo = (document.compatMode && document.compatMode.indexOf("CSS")!=-1)?
			document.documentElement : document.body;
		this.clear();
		if (pmo == null) this.createMenu();
		pmo.innerHTML = which;
		pmo.style.width = (typeof optWidth != "undefined")? optWidth : "150px";
		eventX = ie? event.clientX : e.clientX;
		eventY = ie? event.clientY : e.clientY;
		// Find out how close the mouse is to the corner of the window
		var rightedge = ie? ieo.clientWidth - eventX : window.innerWidth - eventX;
		var bottomedge = ie? ieo.clientHeight - eventY : window.innerHeight - eventY;
		// if the horizontal distance isn't enough to accomodate the width of the context menu
		if (rightedge < pmo.offsetWidth) // then move the horizontal position of the menu to the left by it's width
			pmo.style.left = (ie? ieo.scrollLeft : window.pageXOffset) + eventX - pmo.offsetWidth + "px";
		else // then position the horizontal position of the menu where the mouse was clicked
			pmo.style.left = (ie? ieo.scrollLeft : window.pageXOffset) + eventX + "px";
		//same concept with the vertical position
		if (bottomedge < pmo.offsetHeight)
			pmo.style.top = (ie? ieo.scrollTop : window.pageYOffset) + eventY - pmo.offsetHeight + "px";
		else pmo.style.top = (ie? ieo.scrollTop : window.pageYOffset) + eventY + "px";
		pmo.style.visibility = "visible";
		timeBeg = new Date().getTime();
	}
}

listenEvent(window, 'click', popmenu.clickHide);

// Copyright 2006 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
document.createElement("canvas").getContext||(function(){var s=Math,j=s.round,F=s.sin,G=s.cos,V=s.abs,W=s.sqrt,k=10,v=k/2;function X(){return this.context_||(this.context_=new H(this))}var L=Array.prototype.slice;function Y(b,a){var c=L.call(arguments,2);return function(){return b.apply(a,c.concat(L.call(arguments)))}}var M={init:function(b){if(/MSIE/.test(navigator.userAgent)&&!window.opera){var a=b||document;a.createElement("canvas");a.attachEvent("onreadystatechange",Y(this.init_,this,a))}},init_:function(b){b.namespaces.g_vml_||
b.namespaces.add("g_vml_","urn:schemas-microsoft-com:vml","#default#VML");b.namespaces.g_o_||b.namespaces.add("g_o_","urn:schemas-microsoft-com:office:office","#default#VML");if(!b.styleSheets.ex_canvas_){var a=b.createStyleSheet();a.owningElement.id="ex_canvas_";a.cssText="canvas{display:inline-block;overflow:hidden;text-align:left;width:300px;height:150px}g_vml_\\:*{behavior:url(#default#VML)}g_o_\\:*{behavior:url(#default#VML)}"}var c=b.getElementsByTagName("canvas"),d=0;for(;d<c.length;d++)this.initElement(c[d])},
initElement:function(b){if(!b.getContext){b.getContext=X;b.innerHTML="";b.attachEvent("onpropertychange",Z);b.attachEvent("onresize",$);var a=b.attributes;if(a.width&&a.width.specified)b.style.width=a.width.nodeValue+"px";else b.width=b.clientWidth;if(a.height&&a.height.specified)b.style.height=a.height.nodeValue+"px";else b.height=b.clientHeight}return b}};function Z(b){var a=b.srcElement;switch(b.propertyName){case "width":a.style.width=a.attributes.width.nodeValue+"px";a.getContext().clearRect();
break;case "height":a.style.height=a.attributes.height.nodeValue+"px";a.getContext().clearRect();break}}function $(b){var a=b.srcElement;if(a.firstChild){a.firstChild.style.width=a.clientWidth+"px";a.firstChild.style.height=a.clientHeight+"px"}}M.init();var N=[],B=0;for(;B<16;B++){var C=0;for(;C<16;C++)N[B*16+C]=B.toString(16)+C.toString(16)}function I(){return[[1,0,0],[0,1,0],[0,0,1]]}function y(b,a){var c=I(),d=0;for(;d<3;d++){var f=0;for(;f<3;f++){var h=0,g=0;for(;g<3;g++)h+=b[d][g]*a[g][f];c[d][f]=
h}}return c}function O(b,a){a.fillStyle=b.fillStyle;a.lineCap=b.lineCap;a.lineJoin=b.lineJoin;a.lineWidth=b.lineWidth;a.miterLimit=b.miterLimit;a.shadowBlur=b.shadowBlur;a.shadowColor=b.shadowColor;a.shadowOffsetX=b.shadowOffsetX;a.shadowOffsetY=b.shadowOffsetY;a.strokeStyle=b.strokeStyle;a.globalAlpha=b.globalAlpha;a.arcScaleX_=b.arcScaleX_;a.arcScaleY_=b.arcScaleY_;a.lineScale_=b.lineScale_}function P(b){var a,c=1;b=String(b);if(b.substring(0,3)=="rgb"){var d=b.indexOf("(",3),f=b.indexOf(")",d+
1),h=b.substring(d+1,f).split(",");a="#";var g=0;for(;g<3;g++)a+=N[Number(h[g])];if(h.length==4&&b.substr(3,1)=="a")c=h[3]}else a=b;return{color:a,alpha:c}}function aa(b){switch(b){case "butt":return"flat";case "round":return"round";case "square":default:return"square"}}function H(b){this.m_=I();this.mStack_=[];this.aStack_=[];this.currentPath_=[];this.fillStyle=this.strokeStyle="#000";this.lineWidth=1;this.lineJoin="miter";this.lineCap="butt";this.miterLimit=k*1;this.globalAlpha=1;this.canvas=b;
var a=b.ownerDocument.createElement("div");a.style.width=b.clientWidth+"px";a.style.height=b.clientHeight+"px";a.style.overflow="hidden";a.style.position="absolute";b.appendChild(a);this.element_=a;this.lineScale_=this.arcScaleY_=this.arcScaleX_=1}var i=H.prototype;i.clearRect=function(){this.element_.innerHTML=""};i.beginPath=function(){this.currentPath_=[]};i.moveTo=function(b,a){var c=this.getCoords_(b,a);this.currentPath_.push({type:"moveTo",x:c.x,y:c.y});this.currentX_=c.x;this.currentY_=c.y};
i.lineTo=function(b,a){var c=this.getCoords_(b,a);this.currentPath_.push({type:"lineTo",x:c.x,y:c.y});this.currentX_=c.x;this.currentY_=c.y};i.bezierCurveTo=function(b,a,c,d,f,h){var g=this.getCoords_(f,h),l=this.getCoords_(b,a),e=this.getCoords_(c,d);Q(this,l,e,g)};function Q(b,a,c,d){b.currentPath_.push({type:"bezierCurveTo",cp1x:a.x,cp1y:a.y,cp2x:c.x,cp2y:c.y,x:d.x,y:d.y});b.currentX_=d.x;b.currentY_=d.y}i.quadraticCurveTo=function(b,a,c,d){var f=this.getCoords_(b,a),h=this.getCoords_(c,d),g={x:this.currentX_+
0.6666666666666666*(f.x-this.currentX_),y:this.currentY_+0.6666666666666666*(f.y-this.currentY_)};Q(this,g,{x:g.x+(h.x-this.currentX_)/3,y:g.y+(h.y-this.currentY_)/3},h)};i.arc=function(b,a,c,d,f,h){c*=k;var g=h?"at":"wa",l=b+G(d)*c-v,e=a+F(d)*c-v,m=b+G(f)*c-v,r=a+F(f)*c-v;if(l==m&&!h)l+=0.125;var n=this.getCoords_(b,a),o=this.getCoords_(l,e),q=this.getCoords_(m,r);this.currentPath_.push({type:g,x:n.x,y:n.y,radius:c,xStart:o.x,yStart:o.y,xEnd:q.x,yEnd:q.y})};i.rect=function(b,a,c,d){this.moveTo(b,
a);this.lineTo(b+c,a);this.lineTo(b+c,a+d);this.lineTo(b,a+d);this.closePath()};i.strokeRect=function(b,a,c,d){var f=this.currentPath_;this.beginPath();this.moveTo(b,a);this.lineTo(b+c,a);this.lineTo(b+c,a+d);this.lineTo(b,a+d);this.closePath();this.stroke();this.currentPath_=f};i.fillRect=function(b,a,c,d){var f=this.currentPath_;this.beginPath();this.moveTo(b,a);this.lineTo(b+c,a);this.lineTo(b+c,a+d);this.lineTo(b,a+d);this.closePath();this.fill();this.currentPath_=f};i.createLinearGradient=function(b,
a,c,d){var f=new D("gradient");f.x0_=b;f.y0_=a;f.x1_=c;f.y1_=d;return f};i.createRadialGradient=function(b,a,c,d,f,h){var g=new D("gradientradial");g.x0_=b;g.y0_=a;g.r0_=c;g.x1_=d;g.y1_=f;g.r1_=h;return g};i.drawImage=function(b){var a,c,d,f,h,g,l,e,m=b.runtimeStyle.width,r=b.runtimeStyle.height;b.runtimeStyle.width="auto";b.runtimeStyle.height="auto";var n=b.width,o=b.height;b.runtimeStyle.width=m;b.runtimeStyle.height=r;if(arguments.length==3){a=arguments[1];c=arguments[2];h=g=0;l=d=n;e=f=o}else if(arguments.length==
5){a=arguments[1];c=arguments[2];d=arguments[3];f=arguments[4];h=g=0;l=n;e=o}else if(arguments.length==9){h=arguments[1];g=arguments[2];l=arguments[3];e=arguments[4];a=arguments[5];c=arguments[6];d=arguments[7];f=arguments[8]}else throw Error("Invalid number of arguments");var q=this.getCoords_(a,c),t=[];t.push(" <g_vml_:group",' coordsize="',k*10,",",k*10,'"',' coordorigin="0,0"',' style="width:',10,"px;height:",10,"px;position:absolute;");if(this.m_[0][0]!=1||this.m_[0][1]){var E=[];E.push("M11=",
this.m_[0][0],",","M12=",this.m_[1][0],",","M21=",this.m_[0][1],",","M22=",this.m_[1][1],",","Dx=",j(q.x/k),",","Dy=",j(q.y/k),"");var p=q,z=this.getCoords_(a+d,c),w=this.getCoords_(a,c+f),x=this.getCoords_(a+d,c+f);p.x=s.max(p.x,z.x,w.x,x.x);p.y=s.max(p.y,z.y,w.y,x.y);t.push("padding:0 ",j(p.x/k),"px ",j(p.y/k),"px 0;filter:progid:DXImageTransform.Microsoft.Matrix(",E.join(""),", sizingmethod='clip');")}else t.push("top:",j(q.y/k),"px;left:",j(q.x/k),"px;");t.push(' ">','<g_vml_:image src="',b.src,
'"',' style="width:',k*d,"px;"," height:",k*f,'px;"',' cropleft="',h/n,'"',' croptop="',g/o,'"',' cropright="',(n-h-l)/n,'"',' cropbottom="',(o-g-e)/o,'"'," />","</g_vml_:group>");this.element_.insertAdjacentHTML("BeforeEnd",t.join(""))};i.stroke=function(b){var a=[],c=P(b?this.fillStyle:this.strokeStyle),d=c.color,f=c.alpha*this.globalAlpha;a.push("<g_vml_:shape",' filled="',!!b,'"',' style="position:absolute;width:',10,"px;height:",10,'px;"',' coordorigin="0 0" coordsize="',k*10," ",k*10,'"',' stroked="',
!b,'"',' path="');var h={x:null,y:null},g={x:null,y:null},l=0;for(;l<this.currentPath_.length;l++){var e=this.currentPath_[l];switch(e.type){case "moveTo":a.push(" m ",j(e.x),",",j(e.y));break;case "lineTo":a.push(" l ",j(e.x),",",j(e.y));break;case "close":a.push(" x ");e=null;break;case "bezierCurveTo":a.push(" c ",j(e.cp1x),",",j(e.cp1y),",",j(e.cp2x),",",j(e.cp2y),",",j(e.x),",",j(e.y));break;case "at":case "wa":a.push(" ",e.type," ",j(e.x-this.arcScaleX_*e.radius),",",j(e.y-this.arcScaleY_*e.radius),
" ",j(e.x+this.arcScaleX_*e.radius),",",j(e.y+this.arcScaleY_*e.radius)," ",j(e.xStart),",",j(e.yStart)," ",j(e.xEnd),",",j(e.yEnd));break}if(e){if(h.x==null||e.x<h.x)h.x=e.x;if(g.x==null||e.x>g.x)g.x=e.x;if(h.y==null||e.y<h.y)h.y=e.y;if(g.y==null||e.y>g.y)g.y=e.y}}a.push(' ">');if(b)if(typeof this.fillStyle=="object"){var m=this.fillStyle,r=0,n={x:0,y:0},o=0,q=1;if(m.type_=="gradient"){var t=m.x1_/this.arcScaleX_,E=m.y1_/this.arcScaleY_,p=this.getCoords_(m.x0_/this.arcScaleX_,m.y0_/this.arcScaleY_),
z=this.getCoords_(t,E);r=Math.atan2(z.x-p.x,z.y-p.y)*180/Math.PI;if(r<0)r+=360;if(r<1.0E-6)r=0}else{var p=this.getCoords_(m.x0_,m.y0_),w=g.x-h.x,x=g.y-h.y;n={x:(p.x-h.x)/w,y:(p.y-h.y)/x};w/=this.arcScaleX_*k;x/=this.arcScaleY_*k;var R=s.max(w,x);o=2*m.r0_/R;q=2*m.r1_/R-o}var u=m.colors_;u.sort(function(ba,ca){return ba.offset-ca.offset});var J=u.length,da=u[0].color,ea=u[J-1].color,fa=u[0].alpha*this.globalAlpha,ga=u[J-1].alpha*this.globalAlpha,S=[],l=0;for(;l<J;l++){var T=u[l];S.push(T.offset*q+
o+" "+T.color)}a.push('<g_vml_:fill type="',m.type_,'"',' method="none" focus="100%"',' color="',da,'"',' color2="',ea,'"',' colors="',S.join(","),'"',' opacity="',ga,'"',' g_o_:opacity2="',fa,'"',' angle="',r,'"',' focusposition="',n.x,",",n.y,'" />')}else a.push('<g_vml_:fill color="',d,'" opacity="',f,'" />');else{var K=this.lineScale_*this.lineWidth;if(K<1)f*=K;a.push("<g_vml_:stroke",' opacity="',f,'"',' joinstyle="',this.lineJoin,'"',' miterlimit="',this.miterLimit,'"',' endcap="',aa(this.lineCap),
'"',' weight="',K,'px"',' color="',d,'" />')}a.push("</g_vml_:shape>");this.element_.insertAdjacentHTML("beforeEnd",a.join(""))};i.fill=function(){this.stroke(true)};i.closePath=function(){this.currentPath_.push({type:"close"})};i.getCoords_=function(b,a){var c=this.m_;return{x:k*(b*c[0][0]+a*c[1][0]+c[2][0])-v,y:k*(b*c[0][1]+a*c[1][1]+c[2][1])-v}};i.save=function(){var b={};O(this,b);this.aStack_.push(b);this.mStack_.push(this.m_);this.m_=y(I(),this.m_)};i.restore=function(){O(this.aStack_.pop(),
this);this.m_=this.mStack_.pop()};function ha(b){var a=0;for(;a<3;a++){var c=0;for(;c<2;c++)if(!isFinite(b[a][c])||isNaN(b[a][c]))return false}return true}function A(b,a,c){if(!!ha(a)){b.m_=a;if(c)b.lineScale_=W(V(a[0][0]*a[1][1]-a[0][1]*a[1][0]))}}i.translate=function(b,a){A(this,y([[1,0,0],[0,1,0],[b,a,1]],this.m_),false)};i.rotate=function(b){var a=G(b),c=F(b);A(this,y([[a,c,0],[-c,a,0],[0,0,1]],this.m_),false)};i.scale=function(b,a){this.arcScaleX_*=b;this.arcScaleY_*=a;A(this,y([[b,0,0],[0,a,
0],[0,0,1]],this.m_),true)};i.transform=function(b,a,c,d,f,h){A(this,y([[b,a,0],[c,d,0],[f,h,1]],this.m_),true)};i.setTransform=function(b,a,c,d,f,h){A(this,[[b,a,0],[c,d,0],[f,h,1]],true)};i.clip=function(){};i.arcTo=function(){};i.createPattern=function(){return new U};function D(b){this.type_=b;this.r1_=this.y1_=this.x1_=this.r0_=this.y0_=this.x0_=0;this.colors_=[]}D.prototype.addColorStop=function(b,a){a=P(a);this.colors_.push({offset:b,color:a.color,alpha:a.alpha})};function U(){}G_vmlCanvasManager=
M;CanvasRenderingContext2D=H;CanvasGradient=D;CanvasPattern=U})();

//
// This code is released to the public domain by Jim Studt, 2007.
// He may keep some sort of up to date copy at http://www.federated.com/~jim/canvastext/
//
var CanvasTextFunctions = { };

CanvasTextFunctions.letters = {
	' ': { width: 16, points: [] },
	'!': { width: 10, points: [[5,21],[5,7],[-1,-1],[5,2],[4,1],[5,0],[6,1],[5,2]] },
	'"': { width: 16, points: [[4,21],[4,14],[-1,-1],[12,21],[12,14]] },
	'#': { width: 21, points: [[11,25],[4,-7],[-1,-1],[17,25],[10,-7],[-1,-1],[4,12],[18,12],[-1,-1],[3,6],[17,6]] },
	'$': { width: 20, points: [[8,25],[8,-4],[-1,-1],[12,25],[12,-4],[-1,-1],[17,18],[15,20],[12,21],[8,21],[5,20],[3,18],[3,16],[4,14],[5,13],[7,12],[13,10],[15,9],[16,8],[17,6],[17,3],[15,1],[12,0],[8,0],[5,1],[3,3]] },
	'%': { width: 24, points: [[21,21],[3,0],[-1,-1],[8,21],[10,19],[10,17],[9,15],[7,14],[5,14],[3,16],[3,18],[4,20],[6,21],[8,21],[10,20],[13,19],[16,19],[19,20],[21,21],[-1,-1],[17,7],[15,6],[14,4],[14,2],[16,0],[18,0],[20,1],[21,3],[21,5],[19,7],[17,7]] },
	'&': { width: 26, points: [[23,12],[23,13],[22,14],[21,14],[20,13],[19,11],[17,6],[15,3],[13,1],[11,0],[7,0],[5,1],[4,2],[3,4],[3,6],[4,8],[5,9],[12,13],[13,14],[14,16],[14,18],[13,20],[11,21],[9,20],[8,18],[8,16],[9,13],[11,10],[16,3],[18,1],[20,0],[22,0],[23,1],[23,2]] },
	'\'': { width: 10, points: [[5,19],[4,20],[5,21],[6,20],[6,18],[5,16],[4,15]] },
	'(': { width: 14, points: [[11,25],[9,23],[7,20],[5,16],[4,11],[4,7],[5,2],[7,-2],[9,-5],[11,-7]] },
	')': { width: 14, points: [[3,25],[5,23],[7,20],[9,16],[10,11],[10,7],[9,2],[7,-2],[5,-5],[3,-7]] },
	'*': { width: 16, points: [[8,21],[8,9],[-1,-1],[3,18],[13,12],[-1,-1],[13,18],[3,12]] },
	'+': { width: 26, points: [[13,18],[13,0],[-1,-1],[4,9],[22,9]] },
	',': { width: 10, points: [[6,1],[5,0],[4,1],[5,2],[6,1],[6,-1],[5,-3],[4,-4]] },
	'-': { width: 26, points: [[4,9],[22,9]] },
	'.': { width: 10, points: [[5,2],[4,1],[5,0],[6,1],[5,2]] },
	'/': { width: 22, points: [[20,25],[2,-7]] },
	'0': { width: 20, points: [[9,21],[6,20],[4,17],[3,12],[3,9],[4,4],[6,1],[9,0],[11,0],[14,1],[16,4],[17,9],[17,12],[16,17],[14,20],[11,21],[9,21]] },
	'1': { width: 20, points: [[6,17],[8,18],[11,21],[11,0]] },
	'2': { width: 20, points: [[4,16],[4,17],[5,19],[6,20],[8,21],[12,21],[14,20],[15,19],[16,17],[16,15],[15,13],[13,10],[3,0],[17,0]] },
	'3': { width: 20, points: [[5,21],[16,21],[10,13],[13,13],[15,12],[16,11],[17,8],[17,6],[16,3],[14,1],[11,0],[8,0],[5,1],[4,2],[3,4]] },
	'4': { width: 20, points: [[13,21],[3,7],[18,7],[-1,-1],[13,21],[13,0]] },
	'5': { width: 20, points: [[15,21],[5,21],[4,12],[5,13],[8,14],[11,14],[14,13],[16,11],[17,8],[17,6],[16,3],[14,1],[11,0],[8,0],[5,1],[4,2],[3,4]] },
	'6': { width: 20, points: [[16,18],[15,20],[12,21],[10,21],[7,20],[5,17],[4,12],[4,7],[5,3],[7,1],[10,0],[11,0],[14,1],[16,3],[17,6],[17,7],[16,10],[14,12],[11,13],[10,13],[7,12],[5,10],[4,7]] },
	'7': { width: 20, points: [[17,21],[7,0],[-1,-1],[3,21],[17,21]] },
	'8': { width: 20, points: [[8,21],[5,20],[4,18],[4,16],[5,14],[7,13],[11,12],[14,11],[16,9],[17,7],[17,4],[16,2],[15,1],[12,0],[8,0],[5,1],[4,2],[3,4],[3,7],[4,9],[6,11],[9,12],[13,13],[15,14],[16,16],[16,18],[15,20],[12,21],[8,21]] },
	'9': { width: 20, points: [[16,14],[15,11],[13,9],[10,8],[9,8],[6,9],[4,11],[3,14],[3,15],[4,18],[6,20],[9,21],[10,21],[13,20],[15,18],[16,14],[16,9],[15,4],[13,1],[10,0],[8,0],[5,1],[4,3]] },
	':': { width: 10, points: [[5,14],[4,13],[5,12],[6,13],[5,14],[-1,-1],[5,2],[4,1],[5,0],[6,1],[5,2]] },
	',': { width: 10, points: [[5,14],[4,13],[5,12],[6,13],[5,14],[-1,-1],[6,1],[5,0],[4,1],[5,2],[6,1],[6,-1],[5,-3],[4,-4]] },
	'<': { width: 24, points: [[20,18],[4,9],[20,0]] },
	'=': { width: 26, points: [[4,12],[22,12],[-1,-1],[4,6],[22,6]] },
	'>': { width: 24, points: [[4,18],[20,9],[4,0]] },
	'?': { width: 18, points: [[3,16],[3,17],[4,19],[5,20],[7,21],[11,21],[13,20],[14,19],[15,17],[15,15],[14,13],[13,12],[9,10],[9,7],[-1,-1],[9,2],[8,1],[9,0],[10,1],[9,2]] },
	'@': { width: 27, points: [[18,13],[17,15],[15,16],[12,16],[10,15],[9,14],[8,11],[8,8],[9,6],[11,5],[14,5],[16,6],[17,8],[-1,-1],[12,16],[10,14],[9,11],[9,8],[10,6],[11,5],[-1,-1],[18,16],[17,8],[17,6],[19,5],[21,5],[23,7],[24,10],[24,12],[23,15],[22,17],[20,19],[18,20],[15,21],[12,21],[9,20],[7,19],[5,17],[4,15],[3,12],[3,9],[4,6],[5,4],[7,2],[9,1],[12,0],[15,0],[18,1],[20,2],[21,3],[-1,-1],[19,16],[18,8],[18,6],[19,5]] },
	'A': { width: 18, points: [[9,21],[1,0],[-1,-1],[9,21],[17,0],[-1,-1],[4,7],[14,7]] },
	'B': { width: 21, points: [[4,21],[4,0],[-1,-1],[4,21],[13,21],[16,20],[17,19],[18,17],[18,15],[17,13],[16,12],[13,11],[-1,-1],[4,11],[13,11],[16,10],[17,9],[18,7],[18,4],[17,2],[16,1],[13,0],[4,0]] },
	'C': { width: 21, points: [[18,16],[17,18],[15,20],[13,21],[9,21],[7,20],[5,18],[4,16],[3,13],[3,8],[4,5],[5,3],[7,1],[9,0],[13,0],[15,1],[17,3],[18,5]] },
	'D': { width: 21, points: [[4,21],[4,0],[-1,-1],[4,21],[11,21],[14,20],[16,18],[17,16],[18,13],[18,8],[17,5],[16,3],[14,1],[11,0],[4,0]] },
	'E': { width: 19, points: [[4,21],[4,0],[-1,-1],[4,21],[17,21],[-1,-1],[4,11],[12,11],[-1,-1],[4,0],[17,0]] },
	'F': { width: 18, points: [[4,21],[4,0],[-1,-1],[4,21],[17,21],[-1,-1],[4,11],[12,11]] },
	'G': { width: 21, points: [[18,16],[17,18],[15,20],[13,21],[9,21],[7,20],[5,18],[4,16],[3,13],[3,8],[4,5],[5,3],[7,1],[9,0],[13,0],[15,1],[17,3],[18,5],[18,8],[-1,-1],[13,8],[18,8]] },
	'H': { width: 22, points: [[4,21],[4,0],[-1,-1],[18,21],[18,0],[-1,-1],[4,11],[18,11]] },
	'I': { width: 8, points: [[4,21],[4,0]] },
	'J': { width: 16, points: [[12,21],[12,5],[11,2],[10,1],[8,0],[6,0],[4,1],[3,2],[2,5],[2,7]] },
	'K': { width: 21, points: [[4,21],[4,0],[-1,-1],[18,21],[4,7],[-1,-1],[9,12],[18,0]] },
	'L': { width: 17, points: [[4,21],[4,0],[-1,-1],[4,0],[16,0]] },
	'M': { width: 24, points: [[4,21],[4,0],[-1,-1],[4,21],[12,0],[-1,-1],[20,21],[12,0],[-1,-1],[20,21],[20,0]] },
	'N': { width: 22, points: [[4,21],[4,0],[-1,-1],[4,21],[18,0],[-1,-1],[18,21],[18,0]] },
	'O': { width: 22, points: [[9,21],[7,20],[5,18],[4,16],[3,13],[3,8],[4,5],[5,3],[7,1],[9,0],[13,0],[15,1],[17,3],[18,5],[19,8],[19,13],[18,16],[17,18],[15,20],[13,21],[9,21]] },
	'P': { width: 21, points: [[4,21],[4,0],[-1,-1],[4,21],[13,21],[16,20],[17,19],[18,17],[18,14],[17,12],[16,11],[13,10],[4,10]] },
	'Q': { width: 22, points: [[9,21],[7,20],[5,18],[4,16],[3,13],[3,8],[4,5],[5,3],[7,1],[9,0],[13,0],[15,1],[17,3],[18,5],[19,8],[19,13],[18,16],[17,18],[15,20],[13,21],[9,21],[-1,-1],[12,4],[18,-2]] },
	'R': { width: 21, points: [[4,21],[4,0],[-1,-1],[4,21],[13,21],[16,20],[17,19],[18,17],[18,15],[17,13],[16,12],[13,11],[4,11],[-1,-1],[11,11],[18,0]] },
	'S': { width: 20, points: [[17,18],[15,20],[12,21],[8,21],[5,20],[3,18],[3,16],[4,14],[5,13],[7,12],[13,10],[15,9],[16,8],[17,6],[17,3],[15,1],[12,0],[8,0],[5,1],[3,3]] },
	'T': { width: 16, points: [[8,21],[8,0],[-1,-1],[1,21],[15,21]] },
	'U': { width: 22, points: [[4,21],[4,6],[5,3],[7,1],[10,0],[12,0],[15,1],[17,3],[18,6],[18,21]] },
	'V': { width: 18, points: [[1,21],[9,0],[-1,-1],[17,21],[9,0]] },
	'W': { width: 24, points: [[2,21],[7,0],[-1,-1],[12,21],[7,0],[-1,-1],[12,21],[17,0],[-1,-1],[22,21],[17,0]] },
	'X': { width: 20, points: [[3,21],[17,0],[-1,-1],[17,21],[3,0]] },
	'Y': { width: 18, points: [[1,21],[9,11],[9,0],[-1,-1],[17,21],[9,11]] },
	'Z': { width: 20, points: [[17,21],[3,0],[-1,-1],[3,21],[17,21],[-1,-1],[3,0],[17,0]] },
	'[': { width: 14, points: [[4,25],[4,-7],[-1,-1],[5,25],[5,-7],[-1,-1],[4,25],[11,25],[-1,-1],[4,-7],[11,-7]] },
	'\\': { width: 14, points: [[0,21],[14,-3]] },
	']': { width: 14, points: [[9,25],[9,-7],[-1,-1],[10,25],[10,-7],[-1,-1],[3,25],[10,25],[-1,-1],[3,-7],[10,-7]] },
	'^': { width: 16, points: [[6,15],[8,18],[10,15],[-1,-1],[3,12],[8,17],[13,12],[-1,-1],[8,17],[8,0]] },
	'_': { width: 16, points: [[0,-2],[16,-2]] },
	'`': { width: 10, points: [[6,21],[5,20],[4,18],[4,16],[5,15],[6,16],[5,17]] },
	'a': { width: 19, points: [[15,14],[15,0],[-1,-1],[15,11],[13,13],[11,14],[8,14],[6,13],[4,11],[3,8],[3,6],[4,3],[6,1],[8,0],[11,0],[13,1],[15,3]] },
	'b': { width: 19, points: [[4,21],[4,0],[-1,-1],[4,11],[6,13],[8,14],[11,14],[13,13],[15,11],[16,8],[16,6],[15,3],[13,1],[11,0],[8,0],[6,1],[4,3]] },
'c': { width: 18, points: [[15,11],[13,13],[11,14],[8,14],[6,13],[4,11],[3,8],[3,6],[4,3],[6,1],[8,0],[11,0],[13,1],[15,3]] },
	'd': { width: 19, points: [[15,21],[15,0],[-1,-1],[15,11],[13,13],[11,14],[8,14],[6,13],[4,11],[3,8],[3,6],[4,3],[6,1],[8,0],[11,0],[13,1],[15,3]] },
	'e': { width: 18, points: [[3,8],[15,8],[15,10],[14,12],[13,13],[11,14],[8,14],[6,13],[4,11],[3,8],[3,6],[4,3],[6,1],[8,0],[11,0],[13,1],[15,3]] },
	'f': { width: 12, points: [[10,21],[8,21],[6,20],[5,17],[5,0],[-1,-1],[2,14],[9,14]] },
	'g': { width: 19, points: [[15,14],[15,-2],[14,-5],[13,-6],[11,-7],[8,-7],[6,-6],[-1,-1],[15,11],[13,13],[11,14],[8,14],[6,13],[4,11],[3,8],[3,6],[4,3],[6,1],[8,0],[11,0],[13,1],[15,3]] },
	'h': { width: 19, points: [[4,21],[4,0],[-1,-1],[4,10],[7,13],[9,14],[12,14],[14,13],[15,10],[15,0]] },
	'i': { width: 8, points: [[3,21],[4,20],[5,21],[4,22],[3,21],[-1,-1],[4,14],[4,0]] },
	'j': { width: 10, points: [[5,21],[6,20],[7,21],[6,22],[5,21],[-1,-1],[6,14],[6,-3],[5,-6],[3,-7],[1,-7]] },
	'k': { width: 17, points: [[4,21],[4,0],[-1,-1],[14,14],[4,4],[-1,-1],[8,8],[15,0]] },
	'l': { width: 8, points: [[4,21],[4,0]] },
	'm': { width: 30, points: [[4,14],[4,0],[-1,-1],[4,10],[7,13],[9,14],[12,14],[14,13],[15,10],[15,0],[-1,-1],[15,10],[18,13],[20,14],[23,14],[25,13],[26,10],[26,0]] },
	'n': { width: 19, points: [[4,14],[4,0],[-1,-1],[4,10],[7,13],[9,14],[12,14],[14,13],[15,10],[15,0]] },
	'o': { width: 19, points: [[8,14],[6,13],[4,11],[3,8],[3,6],[4,3],[6,1],[8,0],[11,0],[13,1],[15,3],[16,6],[16,8],[15,11],[13,13],[11,14],[8,14]] },
	'p': { width: 19, points: [[4,14],[4,-7],[-1,-1],[4,11],[6,13],[8,14],[11,14],[13,13],[15,11],[16,8],[16,6],[15,3],[13,1],[11,0],[8,0],[6,1],[4,3]] },
	'q': { width: 19, points: [[15,14],[15,-7],[-1,-1],[15,11],[13,13],[11,14],[8,14],[6,13],[4,11],[3,8],[3,6],[4,3],[6,1],[8,0],[11,0],[13,1],[15,3]] },
	'r': { width: 13, points: [[4,14],[4,0],[-1,-1],[4,8],[5,11],[7,13],[9,14],[12,14]] },
	's': { width: 17, points: [[14,11],[13,13],[10,14],[7,14],[4,13],[3,11],[4,9],[6,8],[11,7],[13,6],[14,4],[14,3],[13,1],[10,0],[7,0],[4,1],[3,3]] },
	't': { width: 12, points: [[5,21],[5,4],[6,1],[8,0],[10,0],[-1,-1],[2,14],[9,14]] },
	'u': { width: 19, points: [[4,14],[4,4],[5,1],[7,0],[10,0],[12,1],[15,4],[-1,-1],[15,14],[15,0]] },
	'v': { width: 16, points: [[2,14],[8,0],[-1,-1],[14,14],[8,0]] },
	'w': { width: 22, points: [[3,14],[7,0],[-1,-1],[11,14],[7,0],[-1,-1],[11,14],[15,0],[-1,-1],[19,14],[15,0]] },
	'x': { width: 17, points: [[3,14],[14,0],[-1,-1],[14,14],[3,0]] },
	'y': { width: 16, points: [[2,14],[8,0],[-1,-1],[14,14],[8,0],[6,-4],[4,-6],[2,-7],[1,-7]] },
	'z': { width: 17, points: [[14,14],[3,0],[-1,-1],[3,14],[14,14],[-1,-1],[3,0],[14,0]] },
	'{': { width: 14, points: [[9,25],[7,24],[6,23],[5,21],[5,19],[6,17],[7,16],[8,14],[8,12],[6,10],[-1,-1],[7,24],[6,22],[6,20],[7,18],[8,17],[9,15],[9,13],[8,11],[4,9],[8,7],[9,5],[9,3],[8,1],[7,0],[6,-2],[6,-4],[7,-6],[-1,-1],[6,8],[8,6],[8,4],[7,2],[6,1],[5,-1],[5,-3],[6,-5],[7,-6],[9,-7]] },
	'|': { width: 8, points: [[4,25],[4,-7]] },
	'}': { width: 14, points: [[5,25],[7,24],[8,23],[9,21],[9,19],[8,17],[7,16],[6,14],[6,12],[8,10],[-1,-1],[7,24],[8,22],[8,20],[7,18],[6,17],[5,15],[5,13],[6,11],[10,9],[6,7],[5,5],[5,3],[6,1],[7,0],[8,-2],[8,-4],[7,-6],[-1,-1],[8,8],[6,6],[6,4],[7,2],[8,1],[9,-1],[9,-3],[8,-5],[7,-6],[5,-7]] },
	'~': { width: 24, points: [[3,6],[3,8],[4,11],[6,12],[8,12],[10,11],[14,8],[16,7],[18,7],[20,8],[21,10],[-1,-1],[3,8],[4,10],[6,11],[8,11],[10,10],[14,7],[16,6],[18,6],[20,7],[21,10],[21,12]] }
};

CanvasTextFunctions.lineCap = 'butt';

CanvasTextFunctions.letter = function(ch)
{
	return CanvasTextFunctions.letters[ch];
}

CanvasTextFunctions.ascent = function(font, size)
{
	return size;
}

CanvasTextFunctions.descent = function(font, size)
{
	return 7.0*size/25.0;
}

CanvasTextFunctions.measure = function(font, size, str)
{
	var total = 0;
	var len = str.length;

	for ( i = 0; i < len; i++) {
		var c = CanvasTextFunctions.letter( str.charAt(i));
		if ( c) total += c.width * size / 25.0;
	}
	return total;
}

CanvasTextFunctions.draw = function(ctx, font, size, x, y, str)
{
	var total = 0;
	var len = str.length;
	var mag = size / 25.0;

	ctx.save();
	ctx.lineCap = CanvasTextFunctions.lineCap;
	ctx.lineWidth = 2.0 * mag;
	
	for ( i = 0; i < len; i++) {
		var c = CanvasTextFunctions.letter( str.charAt(i));
		if ( !c) continue;

		ctx.beginPath();

		var penUp = 1;
		var needStroke = 0;
		for ( j = 0; j < c.points.length; j++) {
			var a = c.points[j];
			if ( a[0] == -1 && a[1] == -1) {
				penUp = 1;
				continue;
			}
			if ( penUp) {
				ctx.moveTo( x + a[0]*mag, y - a[1]*mag);
				penUp = false;
			} else {
				ctx.lineTo( x + a[0]*mag, y - a[1]*mag);
			}
		}
		ctx.stroke();
		x += c.width*mag;
	}
	ctx.restore();
	return total;
}

CanvasTextFunctions.enable = function( ctx)
{
	ctx.drawText = function(font,size,x,y,text) { return CanvasTextFunctions.draw( ctx, font,size,x,y,text); };
	ctx.measureText = function(font,size,text) { return CanvasTextFunctions.measure( font,size,text); };
	ctx.fontAscent = function(font,size) { return CanvasTextFunctions.ascent(font,size); }
	ctx.fontDescent = function(font,size) { return CanvasTextFunctions.descent(font,size); }

	ctx.drawTextRight = function(font,size,x,y,text) { 
		var w = CanvasTextFunctions.measure(font,size,text);
		return CanvasTextFunctions.draw( ctx, font,size,x-w,y,text); 
	};
	ctx.drawTextCenter = function(font,size,x,y,text) { 
		var w = CanvasTextFunctions.measure(font,size,text);
		return CanvasTextFunctions.draw( ctx, font,size,x-w/2,y,text); 
	};
}


/* The MIT License

   Copyright (c) 2008 Genome Research Ltd (GRL).
                 2010 Broad Institute

   Permission is hereby granted, free of charge, to any person obtaining
   a copy of this software and associated documentation files (the
   "Software"), to deal in the Software without restriction, including
   without limitation the rights to use, copy, modify, merge, publish,
   distribute, sublicense, and/or sell copies of the Software, and to
   permit persons to whom the Software is furnished to do so, subject to
   the following conditions:

   The above copyright notice and this permission notice shall be
   included in all copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
   EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
   MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
   NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
   BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
   ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
   CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   SOFTWARE.
*/

// Author: Heng Li <lh3@sanger.ac.uk>
// Modified/adapted by: Neal Conrad <nconrad@mcs.anl.gov>

/*
  A phylogenetic tree is parsed into the following Java-like structure:

  class Node {
    Node parent;  // pointer to the parent node; null if root
    Node[] child; // array of pointers to child nodes
    String name;  // name of the current node
    double d;     // distance to the parent node
    bool hl;      // if the node needs to be highlighted
    bool hidden;  // if the node and all its desendants are collapsed
  };

  class Tree {
    Node[] node;  // list of nodes in the finishing order (the leftmost leaf is the first and the root the last)
    int error;    // errors in parsing: 0x1=missing left parenthesis; 0x2=missing right; 0x4=unpaired brackets
    int n_tips;   // number of tips/leaves in the tree
  };

  The minimal code for plotting/editing a tree in the Newick format is:

<head><!--[if IE]><script src="excanvas.js"></script><![endif]-->
<script language="JavaScript" src="knhx.js"></script></head>
<body onLoad="knhx_init('canvas', 'nhx');">
<textarea id="nhx" rows="20" cols="120" style="font:11px monospace"></textarea>
<canvas id="canvas" width="800" height="100" style="border:1px solid"></canvas>
</body>

*/

/********************************************
 ****** The New Hampshire format parser *****
 ********************************************/

function kn_new_node() { // private method
    return {parent:null, child:[], name:"", meta:"", d:-1.0, hl:false, hidden:false};
}

function kn_add_node(str, l, tree, x) // private method
{
    var r, beg, end = 0, z;
    z = kn_new_node();
    for (i = l, beg = l; i < str.length && str.charAt(i) != ',' && str.charAt(i) != ')'; ++i) {
        var c = str.charAt(i);
        if (c == '[') {
            var meta_beg = i;
            if (end == 0) end = i;
            do ++i; while (i < str.length && str.charAt(i) != ']');
            if (i == str.length) {
                tree.error |= 4;
                break;
            }
            z.meta = str.substr(meta_beg, i - meta_beg + 1);
        } else if (c == ':') {
            if (end == 0) end = i;
            for (var j = ++i; i < str.length; ++i) {
                var cc = str.charAt(i);
                if ((cc < '0' || cc > '9') && cc != 'e' && cc != 'E' && cc != '+' && cc != '-' && cc != '.')
                    break;
            }
            z.d = parseFloat(str.substr(j, i - j));
            --i;
        } else if (c < '!' && c > '~' && end == 0) end = i;
    }
    if (end == 0) end = i;
    if (end > beg) z.name = str.substr(beg, end - beg);
    tree.node.push(z);
    return i;
}

/* Parse a string in the New Hampshire format and return a pointer to the tree. */
function kn_parse(str)
{
    var stack = new Array();
    var tree = new Object();
    tree.error = tree.n_tips = 0;
    tree.node = new Array();
    for (var l = 0; l < str.length;) {
        while (l < str.length && (str.charAt(l) < '!' || str.charAt(l) > '~')) ++l;
        if (l == str.length) break;
        var c = str.charAt(l);
        if (c == ',') ++l;
        else if (c == '(') {
            stack.push(-1); ++l;
        } else if (c == ')') {
            var x, m, i;
            x = tree.node.length;
            for (i = stack.length - 1; i >= 0; --i)
                if (stack[i] < 0) break;
            if (i < 0) {
                tree.error |= 1; break;
            }
            m = stack.length - 1 - i;
            l = kn_add_node(str, l + 1, tree, m);
            for (i = stack.length - 1, m = m - 1; m >= 0; --m, --i) {
                tree.node[x].child[m] = tree.node[stack[i]];
                tree.node[stack[i]].parent = tree.node[x];
            }
            stack.length = i;
            stack.push(x);
        } else {
            ++tree.n_tips;
            stack.push(tree.node.length);
            l = kn_add_node(str, l, tree, 0);
        }
    }
    if (stack.length > 1) tree.error |= 2;
    tree.root = tree.node[tree.node.length - 1];
    return tree;
}

/*********************************
 ***** Output a tree in text *****
 *********************************/

/* convert a tree to the New Hampshire string */
function kn_write_nh(tree)
{
    // calculate the depth of each node
    tree.node[tree.node.length-1].depth = 0;
    for (var i = tree.node.length - 2; i >= 0; --i) {
        var p = tree.node[i];
        p.depth = p.parent.depth + 1;
    }
    // generate the string
    var str = '';
    var cur_depth = 0, is_first = 1;
    for (var i = 0; i < tree.node.length; ++i) {
        var p = tree.node[i];
        var n_bra = p.depth - cur_depth;
        if (n_bra > 0) {
            if (is_first) is_first = 0;
            else str += ",\n";
            for (var j = 0; j < n_bra; ++j) str += "(";
        } else if (n_bra < 0) str += "\n)";
        else str += ",\n";
        if (p.name) str += String(p.name);
        if (p.d >= 0.0) str += ":" + p.d;
        if (p.meta) str += p.meta;
        cur_depth = p.depth;
    }
    str += "\n";
    return str;
}

/* print the tree topology (for debugging only) */
function kn_check_tree(tree)
{
    document.write("<table border=1><tr><th>name<th>id<th>dist<th>x<th>y</tr>");
    for (var i = 0; i < tree.node.length; ++i) {
        var p = tree.node[i];
        document.write("<tr>" + "<td>" + p.name + "<td>" + i + "<td>" + p.d
                       + "<td>" + p.x + "<td>" + p.y + "</tr>");
    }
    document.write("</table>");
}

/**********************************************
 ****** Functions for manipulating a tree *****
 **********************************************/

/* Expand the tree into an array in the finishing order */
function kn_expand_node(root)
{
    var node, stack;
    node = new Array();
    stack = new Array();
    stack.push({p:root, i:0});
    for (;;) {
        while (stack[stack.length-1].i != stack[stack.length-1].p.child.length && !stack[stack.length-1].p.hidden) {
            var q = stack[stack.length-1];
            stack.push({p:q.p.child[q.i], i:0});
        }
        node.push(stack.pop().p);
        if (stack.length > 0) ++stack[stack.length-1].i;
        else break;
    }
    return node;
}

/* Count the number of leaves */
function kn_count_tips(tree)
{
    tree.n_tips = 0;
    for (var i = 0; i < tree.node.length; ++i)
        if (tree.node[i].child.length == 0 || tree.node[i].hidden)
            ++tree.n_tips;
    return tree.n_tips;
}

/* Highlight: set node.hl for leaves matching "pattern" */
function kn_search_leaf(tree, pattern)
{
    for (var i = 0; i < tree.node.length; ++i) {
        var p = tree.node[i];
        if (p.child.length == 0)
            p.hl = (pattern && pattern != "" && p.name.match(pattern))? true : false;
    }
}

/* Remove: delete a node and all its descendants */
function kn_remove_node(tree, node)
{
    var root = tree.node[tree.node.length - 1];
    if (node == root) return;

    var z = kn_new_node();
    z.child.push(root); root.parent = z;

    var p = node.parent, i;
    if (p.child.length == 2) { // then p will be removed
        var q, r = p.parent;
        i = (p.child[0] == node)? 0 : 1;
        q = p.child[1 - i]; // the other child
        q.d += p.d;
        q.parent = r;
        for (i = 0; i < r.child.length; ++i)
            if (r.child[i] == p) break;
        r.child[i] = q; p.parent = null;
    } else {
        var j, k;
        for (i = 0; i < p.child.length; ++i)
            if (p.child[i] == node) break;
        for (j = k = 0; j < p.child.length; ++j) {
            p.node[k] = p.node[j];
            if (j != i) ++k;
        }
        --p.child.length;
    }

    root = z.child[0];
    root.parent = null;
    return root;
}

/* Move: prune the subtree descending from p and regragh it to the edge between q and its parent */
function kn_move_node(tree, p, q)
{
    var root = tree.node[tree.node.length - 1];
    if (p == root) return null; // p cannot be root
    for (var r = q; r.parent; r = r.parent)
        if (r == p) return null; // p is an ancestor of q. We cannot move in this case.

    root = kn_remove_node(tree, p);

    var z = kn_new_node(); // a fake root
    z.child.push(root); root.parent = z;

    var i, r = q.parent;
    for (i = 0; i < r.child.length; ++i)
        if (r.child[i] == q) break;
    var s = kn_new_node(); // a new node
    s.parent = r; r.child[i] = s;
    if (q.d >= 0.0) {
        s.d = q.d / 2.0;
        q.d /= 2.0;
    }
    s.child.push(p); p.parent = s;
    s.child.push(q); q.parent = s;

    root = z.child[0];
    root.parent = null;
    return root;
}

/* Reroot: put the root in the middle of node and its parent */
function kn_reroot(root, node, dist)
{
    var i, d, tmp;
    var p, q, r, s, new_root;
    if (node == root) return root;
    if (dist < 0.0 || dist > node.d) dist = node.d / 2.0;
    tmp = node.d;

    /* p: the central multi-parent node
     * q: the new parent, previous a child of p
     * r: old parent
     * i: previous position of q in p
     * d: previous distance p->d
     */
    q = new_root = kn_new_node();
    q.child[0] = node;
    q.child[0].d = dist;
    p = node.parent;
    q.child[0].parent = q;
    for (i = 0; i < p.child.length; ++i)
        if (p.child[i] == node) break;
    q.child[1] = p;
    d = p.d;
    p.d = tmp - dist;
    r = p.parent;
    p.parent = q;
    while (r != null) {
        s = r.parent; /* store r's parent */
        p.child[i] = r; /* change r to p's child */
        for (i = 0; i < r.child.length; ++i) /* update i */
            if (r.child[i] == p) break;
        r.parent = p; /* update r's parent */
        tmp = r.d; r.d = d; d = tmp; /* swap r->d and d, i.e. update r->d */
        q = p; p = r; r = s; /* update p, q and r */
    }
    /* now p is the root node */
    if (p.child.length == 2) { /* remove p and link the other child of p to q */
        r = p.child[1 - i]; /* get the other child */
        for (i = 0; i < q.child.length; ++i) /* the position of p in q */
            if (q.child[i] == p) break;
        r.d += p.d;
        r.parent = q;
        q.child[i] = r; /* link r to q */
    } else { /* remove one child in p */
        for (j = k = 0; j < p.child.length; ++j) {
            p.child[k] = p.child[j];
            if (j != i) ++k;
        }
        --p.child.length;
    }
    return new_root;
}

function kn_multifurcate(p)
{
    var i, par, idx, tmp, old_length;
    if (p.child.length == 0 || !p.parent) return;
    par = p.parent;
    for (i = 0; i < par.child.length; ++i)
        if (par.child[i] == p) break;
    idx = i; tmp = par.child.length - idx - 1;
    old_length = par.child.length;
    par.child.length += p.child.length - 1;
    for (i = 0; i < tmp; ++i)
        par.child[par.child.length - 1 - i] = par.child[old_length - 1 - i];
    for (i = 0; i < p.child.length; ++i) {
        p.child[i].parent = par;
        if (p.child[i].d >= 0 && p.d >= 0) p.child[i].d += p.d;
        par.child[i + idx] = p.child[i];
    }
}

function kn_reorder(root)
{
    sort_leaf = function(a, b) {
        if (a.depth < b.depth) return 1;
        if (a.depth > b.depth) return -1;
        return String(a.name) < String(b.name)? -1 : String(a.name) > String(b.name)? 1 : 0;
    };
    sort_weight = function(a, b) { return a.weight / a.n_tips - b.weight / b.n_tips; };

    var x = new Array();
    var i, node = kn_expand_node(root);
    // get depth
    node[node.length-1].depth = 0;
    for (i = node.length - 2; i >= 0; --i) {
        var q = node[i];
        q.depth = q.parent.depth + 1;
        if (q.child.length == 0) x.push(q);
    }
    // set weight for leaves
    x.sort(sort_leaf);
    for (i = 0; i < x.length; ++i) x[i].weight = i, x[i].n_tips = 1;
    // set weight for internal nodes
    for (i = 0; i < node.length; ++i) {
        var q = node[i];
        if (q.child.length) { // internal
            var j, n = 0, w = 0;
            for (j = 0; j < q.child.length; ++j) {
                n += q.child[j].n_tips;
                w += q.child[j].weight;
            }
            q.n_tips = n; q.weight = w;
        }
    }
    // swap children
    for (i = 0; i < node.length; ++i)
        if (node[i].child.length >= 2)
            node[i].child.sort(sort_weight);
}

/*****************************************
 ***** Functions for plotting a tree *****
 *****************************************/

/* Calculate the coordinate of each node */
function kn_calxy(tree, is_real)
{
    var i, j, scale;
    // calculate y
    scale = tree.n_tips - 1;
    for (i = j = 0; i < tree.node.length; ++i) {
        var p = tree.node[i];
        p.y = (p.child.length && !p.hidden)? (p.child[0].y + p.child[p.child.length-1].y) / 2.0 : (j++) / scale;
        if (p.child.length == 0) p.miny = p.maxy = p.y;
        else p.miny = p.child[0].miny, p.maxy = p.child[p.child.length-1].maxy;
    }
    // calculate x
    if (is_real) { // use branch length
        var root = tree.node[tree.node.length-1];
        scale = root.x = (root.d >= 0.0)? root.d : 0.0;
        for (i = tree.node.length - 2; i >= 0; --i) {
            var p = tree.node[i];
            p.x = p.parent.x + (p.d >= 0.0? p.d : 0.0);
            if (p.x > scale) scale = p.x;
        }
        if (scale == 0.0) is_real = false;
    }
    if (!is_real) { // no branch length
        scale = tree.node[tree.node.length-1].x = 1.0;
        for (i = tree.node.length - 2; i >= 0; --i) {
            var p = tree.node[i];
            p.x = p.parent.x + 1.0;
            if (p.x > scale) scale = p.x;
        }
        for (i = 0; i < tree.node.length - 1; ++i)
            if (tree.node[i].child.length == 0)
                tree.node[i].x = scale;
    }
    // rescale x
    for (i = 0; i < tree.node.length; ++i)
        tree.node[i].x /= scale;
    return is_real;
}

function kn_get_node(tree, conf, x, y)
{
    if (conf.is_circular) {
        for (var i = 0; i < tree.node.length; ++i) {
            var p = tree.node[i];
            var tmp_x = Math.floor(conf.width/2 + p.x * conf.real_r * Math.cos(p.y * conf.full_arc) + .999);
            var tmp_y = Math.floor(conf.height/2 + p.x * conf.real_r * Math.sin(p.y * conf.full_arc) + .999);
            var tmp_l = 2;
            if (x >= tmp_x - tmp_l && x <= tmp_x + tmp_l && y >= tmp_y - tmp_l && y <= tmp_y + tmp_l)
                return i;
        }
    } else {
        for (var i = 0; i < tree.node.length; ++i) {
            var tmp_x = tree.node[i].x * conf.real_x + conf.shift_x;
            var tmp_y = tree.node[i].y * conf.real_y + conf.shift_y;
            var tmp_l = conf.box_width * .6;
            if (x >= tmp_x - tmp_l && x <= tmp_x + tmp_l && y >= tmp_y - tmp_l && y <= tmp_y + tmp_l)
                return i;
        }
    }
    return tree.node.length;
}

/* Initialize parameters for tree plotting */
function kn_init_conf()
{
    var conf = new Object();
    conf.c_box = new Array();
    conf.width = 1000; conf.height = 600;
    conf.xmargin = 20; conf.ymargin = 20;
    conf.fontsize = 8;
    conf.c_ext = "rgb(0,0,0)";
    conf.c_int = "rgb(255,0,0)";
    conf.c_line = '#444'; //"rgb(0,20,200)";
    conf.c_node = '#666'; //"rgb(20,20,20)";
    conf.c_active_node = "rgb(255,128,0)"
    conf.c_hl = "rgb(255, 180, 180)";
    conf.c_hidden = "rgb(0,200,0)";
    conf.c_regex = "rgb(0,128,0)";
//  conf.regex = ':S=([^:\\]]+)';
    conf.regex = ':B=([^:\\]]+)';
    conf.xskip = 3.0;
    conf.yskip = 14;
    conf.box_width = 6.0;
    conf.old_nh = null;
    conf.is_real = true;
    conf.is_circular = false;
    conf.show_dup = true;
    conf.runtime = 0;
    return conf;
}

/* Plot the tree in the "canvas". Both node.x and node.y MUST BE precomputed by kn_calxy */
function kn_plot_core(canvas, tree, conf)
{
    if (conf.is_circular) {
        kn_plot_core_O(canvas, tree, conf);
        return;
    }
    var ctx = canvas.getContext("2d");
//  ctx.font = "10px Sans";
    ctx.strokeStyle = ctx.fillStyle = "white";
    ctx.fillRect(0, 0, conf.width, conf.height);
    CanvasTextFunctions.enable(ctx);
    // get maximum name length
    var max_namelen, i;
    for (i = 0, max_namelen = 0; i < tree.node.length; ++i) {
        if (tree.node[i].child.length) continue;
        var tmp = ctx.measureText(conf.font, conf.fontsize, tree.node[i].name);
        if (tmp > max_namelen) max_namelen = tmp;
    }
    // set transformation
    var real_x, real_y, shift_x, shift_y;
    conf.real_x = real_x = conf.width - 2 * conf.xmargin - max_namelen;
    conf.real_y = real_y = conf.height - 2 * conf.ymargin - conf.fontsize;
    conf.shift_x = shift_x = conf.xmargin;
    conf.shift_y = shift_y = conf.ymargin + conf.fontsize / 2;
    // plot background boxes
    for (i = tree.node.length - 1; i >= 0 ; --i) {
        if (tree.node[i].box) {
            var p = tree.node[i];
            var x = p.x * real_x + shift_x - conf.box_width/2;
            ctx.strokeStyle = ctx.fillStyle = tree.node[i].box;
            ctx.fillRect(x, p.miny * real_y + shift_y - conf.yskip/2,
                         conf.width - conf.xmargin - x, (p.maxy - p.miny) * real_y + conf.yskip);
        }
    }
    // leaf name
    ctx.strokeStyle = conf.c_ext;
    ctx.fillStyle = conf.c_hl;
    for (i = 0; i < tree.node.length; ++i) {
        var p = tree.node[i];
        if (p.child.length == 0 || p.hidden) {
            if (p.hl) {
                var tmp = ctx.measureText(conf.font, conf.fontsize, tree.node[i].name);
                ctx.fillRect(p.x * real_x + conf.xskip * 2 + shift_x, p.y * real_y + shift_y - conf.fontsize * .8,
                             tmp, conf.fontsize * 1.5);
            }
//          ctx.fillText(p.name, p.x * real_x + conf.xskip * 2 + shift_x, p.y * real_y + shift_y + conf.fontsize / 3);
            ctx.drawText(conf.font, conf.fontsize, p.x * real_x + conf.xskip * 2 + shift_x,
                         p.y * real_y + shift_y + conf.fontsize / 3, p.name);
        }
    }
    // internal name
    ctx.strokeStyle = conf.c_int;
    for (i = 0; i < tree.node.length; ++i) {
        var p = tree.node[i];
        if (p.child.length && p.name.length > 0 && !p.hidden) {
            var l = ctx.measureText(conf.font, conf.fontsize, p.name);
            ctx.drawText(conf.font, conf.fontsize, p.x * real_x - conf.xskip + shift_x - l,
                         p.y * real_y + shift_y - conf.fontsize / 3, p.name);
        }
    }
    // internal name 2
    if (conf.regex && conf.regex.indexOf('(') >= 0) {
        var re = new RegExp(conf.regex);
        if (re) {
            ctx.strokeStyle = conf.c_regex;
            for (i = 0; i < tree.node.length; ++i) {
                var p = tree.node[i];
                if (p.child.length && p.meta) {
                    var m = re.exec(p.meta);
                    if (m.length > 1) {
                        var l = ctx.measureText(conf.font, conf.fontsize, m[1]);
                        ctx.drawText(conf.font, conf.fontsize, p.x * real_x - conf.xskip + shift_x - l,
                                     p.y * real_y + shift_y + conf.fontsize * 1.33, m[1]);
                    }
                }
            }
        }
    }
    // horizontal lines
    var y;
    ctx.strokeStyle = conf.c_line;
    ctx.beginPath();
    y = tree.node[tree.node.length-1].y * real_y + shift_y;
    ctx.moveTo(shift_x, y); ctx.lineTo(tree.node[tree.node.length-1].x * real_x + shift_x, y);
    for (i = 0; i < tree.node.length - 1; ++i) {
        var p = tree.node[i];
        y = p.y * real_y + shift_y;
        ctx.moveTo(p.parent.x * real_x + shift_x, y);
        ctx.lineTo(p.x * real_x + shift_x, y);
    }
    // vertical lines
    var x;
    for (i = 0; i < tree.node.length; ++i) {
        var p = tree.node[i];
        if (p.child.length == 0 || p.hidden) continue;
        x = p.x * real_x + shift_x;
        ctx.moveTo(x, p.child[0].y * real_y + shift_y);
        ctx.lineTo(x, p.child[p.child.length-1].y * real_y + shift_y);
    }
    ctx.stroke();
    ctx.closePath();
    // nodes
    for (i = 0; i < tree.node.length; ++i) {
        var tmp_x, tmp_y, tmp_l;
        var p = tree.node[i];
        tmp_x = p.x * real_x + shift_x;
        tmp_y = p.y * real_y + shift_y;
        tmp_l = conf.box_width / 2;
        if (p.hidden) ctx.fillStyle = conf.c_hidden;
        else if (conf.show_dup && /:D=Y/i.test(p.meta)) ctx.fillStyle = conf.c_dup;
        else ctx.fillStyle = conf.c_node;
        ctx.fillRect(tmp_x - tmp_l, tmp_y - tmp_l, conf.box_width, conf.box_width);
    }
}

function kn_plot_core_O(canvas, tree, conf)
{
    var ctx = canvas.getContext("2d");
    ctx.strokeStyle = ctx.fillStyle = "white";
    ctx.fillRect(0, 0, conf.width, conf.height);
    CanvasTextFunctions.enable(ctx);
    // get the maximum name length
    var max_namelen, i;
    for (i = 0, max_namelen = max_namechr = 0; i < tree.node.length; ++i) {
        if (tree.node[i].child.length) continue;
        var tmp = ctx.measureText(conf.font, conf.fontsize, tree.node[i].name);
        if (tmp > max_namelen) max_namelen = tmp;
    }
    // set transformation and estimate the font size
    var real_r, full = 2 * Math.PI * (350/360), fontsize;
    fontsize = (conf.width/2 - conf.xmargin - 1 * tree.n_tips / full) / (max_namelen / conf.fontsize + tree.n_tips / full);
    if (fontsize > conf.fontsize) fontsize = conf.fontsize;
    max_namelen *= fontsize / conf.fontsize;
    conf.real_r = real_r = conf.width/2 - conf.xmargin - max_namelen;
    conf.full_arc = full;
    ctx.save();
    ctx.translate(conf.width/2, conf.height/2);
    // plot background boxes
    for (i = tree.node.length - 1; i >= 0 ; --i) {
        if (tree.node[i].box) {
            var p = tree.node[i];
            var x = (p.parent? (p.parent.x + p.x)/2 : 0) * real_r;
            var miny, maxy;
            ctx.strokeStyle = ctx.fillStyle = tree.node[i].box;
            ctx.beginPath();
            miny = p.miny - 1. / tree.n_tips / 2;
            maxy = p.maxy + 1. / tree.n_tips / 2;
            ctx.moveTo(x * Math.cos(miny * full), x * Math.sin(miny * full));
            ctx.arc(0, 0, x, miny * full, maxy * full, false);
            ctx.lineTo(x * Math.cos(maxy * full), x * Math.sin(maxy * full));
            ctx.arc(0, 0, real_r, maxy * full, miny * full, true);
            ctx.closePath();
            ctx.fill();
        }
    }
    // leaf names
    ctx.strokeStyle = conf.c_ext;
    ctx.fillStyle = conf.c_hl;
    for (i = 0; i < tree.node.length; ++i) {
        var p = tree.node[i];
        if (p.child.length) continue;
        ctx.save();
        var tmp;
        if (p.hl) tmp = ctx.measureText(conf.font, fontsize, tree.node[i].name);
        if (p.y * full > Math.PI * .5 && p.y * full < Math.PI * 1.5) {
            ctx.rotate(p.y * full - Math.PI);
            if (p.hl) ctx.fillRect(-(real_r + fontsize/2), -fontsize * .8, -tmp, fontsize * 1.5);
            ctx.drawTextRight(conf.font, fontsize, -(real_r + fontsize/2), fontsize/3, p.name);
        } else {
            ctx.rotate(p.y * full);
            if (p.hl) ctx.fillRect(real_r + fontsize/2, -fontsize * .8, tmp, fontsize * 1.5);
            ctx.drawText(conf.font, fontsize, real_r + fontsize/2, fontsize/3, p.name);
        }
        ctx.restore();
    }
    // straight lines
    ctx.strokeStyle = "black";
    ctx.beginPath();
    var root = tree.node[tree.node.length-1];
    ctx.moveTo(0, 0);
    ctx.lineTo(root.x * real_r * Math.cos(root.y * full), root.x * real_r * Math.sin(root.y * full));
    for (i = 0; i < tree.node.length - 1; ++i) {
        var p = tree.node[i];
        var cos = Math.cos(p.y * full), sin = Math.sin(p.y * full);
        ctx.moveTo(p.parent.x * real_r * cos, p.parent.x * real_r * sin);
        ctx.lineTo(p.x * real_r * cos, p.x * real_r * sin);
    }
    ctx.stroke();
    ctx.closePath();
    // lines towards the tips
    ctx.strokeStyle = "lightgray";
    ctx.beginPath();
    for (i = 0; i < tree.node.length - 1; ++i) {
        var p = tree.node[i];
        if (p.child.length) continue;
        var cos = Math.cos(p.y * full), sin = Math.sin(p.y * full);
        ctx.moveTo(p.x * real_r * cos, p.x * real_r * sin);
        ctx.lineTo(real_r * cos, real_r * sin);
    }
    ctx.stroke();
    ctx.closePath();
    // arcs
    ctx.strokeStyle = "black";
    ctx.beginPath();
    for (i = 0; i < tree.node.length; ++i) {
        var p = tree.node[i];
        if (p.child.length == 0 || p.hidden) continue;
        var r = p.x * real_r;
        ctx.moveTo(r * Math.cos(p.child[0].y * full), r * Math.sin(p.child[0].y * full));
        ctx.arc(0, 0, r, p.child[0].y * full, p.child[p.child.length-1].y * full, false); // arcTo is preferred, but may have compatibility issues.
    }
    ctx.stroke();
    ctx.closePath();
    ctx.restore();
}

/* Plot the tree "str" in the Newick format in the "canvas" */
function kn_plot_str(canvas, str, conf)
{
    var tree = kn_parse(str);
    if (tree.error) return tree;
    conf.is_real = kn_calxy(tree, conf.is_real);
    conf.height = conf.is_circular? conf.width : conf.ymargin * 2 + tree.n_tips * conf.yskip;
    canvas.width = conf.width;
    canvas.height = conf.height;
    kn_plot_core(canvas, tree, conf);
    return tree;
}


/******************************************************************
 ******************************************************************
 ***** The library ends here. The following are DOM specific. *****
 ******************************************************************
 ******************************************************************/

var kn_g_tree = null;
var kn_g_conf = kn_init_conf();

//document.write('<script language="JavaScript" src="./menu.js"></script>');
//document.write('<script language="JavaScript" src="./canvastext.js"></script>');
document.write('<style type="text/css"><!-- \
    #popdiv a.alt { \
      padding-left: 9px; \
      font: 12px monospace; \
      border: none; \
      display: inline; \
    } \
--></style>');

/*****************
 * Event handler *
 *****************/

kn_actions = new function() {
    var self = this;
    var id, canvas, textarea;



    this.init = function(c, t) { canvas = c; textarea = t; 


    }

    this.set_id = function(_id) { id = _id; }

    this.plot = function(str) {
        var time_beg = new Date().getTime();
        if (str) {
            var tree = kn_plot_str(canvas, str, kn_g_conf);
            if (tree.error & 1) alert("Parsing ERROR: missing left parenthesis!");
            else if (tree.error & 2) alert("Parsing ERROR: missing right parenthesis!");
            else if (tree.error & 4) alert("Parsing ERROR: missing brackets!");
            kn_g_tree = tree;
        } else kn_plot_core(canvas, kn_g_tree, kn_g_conf);
        kn_g_conf.runtime = (new Date().getTime() - time_beg)/1000.0;


        /*
        $('.zoom-in').click(function() {
            console.log('zoom in')
            var canvas = document.getElementById('canvas');
            var ctx = canvas.getContext('2d')
            ctx.save();
            ctx.scale(1.1,1.1);    //zoom-in
            kn_plot_str(canvas, str, kn_g_conf)
            ctx.restore();
        })


        $('.zoom-out').click(function() {
            console.log('zoomout')
            var canvas = document.getElementById('canvas');
            var ctx = canvas.getContext('2d')
            ctx.save();
            ctx.scale(.9,.9);    //zoom-in
            kn_plot_str(canvas, str, kn_g_conf)
            ctx.restore();
        }) 
        */


    }

    this.plot_str = function() { this.plot(textarea.value); }

    this.undo_redo = function() {
        var tmp = kn_g_conf.old_nh; kn_g_conf.old_nh = textarea.value; textarea.value = tmp;
        kn_g_tree = kn_parse(textarea.value);
        kn_g_conf.is_real = kn_calxy(kn_g_tree, kn_g_conf.is_real);
        kn_plot_core(canvas, kn_g_tree, kn_g_conf);
    }

    var set_undo = function(conf, str) {
        conf.old_nh = textarea.value;
        textarea.value = str;
    }

    this.get = function(x, y) {
        var id = kn_get_node(kn_g_tree, kn_g_conf, x, y);
        return (id >= 0 && id < kn_g_tree.node.length)? id : -1;
    }

    this.swap = function() {
        var tree = kn_g_tree, conf = kn_g_conf, i = id;
        if (i < tree.node.length && tree.node[i].child.length) {
            var p = tree.node[i];
            var q = p.child[0];
            for (j = 0; j < p.child.length-1; ++j)
                p.child[j] = p.child[j+1];
            p.child[p.child.length-1] = q;
            tree.node = kn_expand_node(tree.node[tree.node.length-1]);
            conf.is_real = kn_calxy(tree, conf.is_real);
            kn_g_tree = tree; kn_g_conf = conf;
            kn_plot_core(canvas, tree, conf);
            set_undo(conf, kn_write_nh(tree));
        }
    }

    this.sort = function() {
        var tree = kn_g_tree, conf = kn_g_conf, i = id;
        if (i < tree.node.length && tree.node[i].child.length) {
            kn_reorder(tree.node[i]);
            tree.node = kn_expand_node(tree.node[tree.node.length-1]);
            conf.is_real = kn_calxy(tree, conf.is_real);
            kn_g_tree = tree; kn_g_conf = conf;
            kn_plot_core(canvas, tree, conf);
            set_undo(conf, kn_write_nh(tree));
        }
    }

    this.reroot = function() {
        var tree = kn_g_tree, conf = kn_g_conf, i = id;
        if (i < tree.node.length) {
            var new_root = kn_reroot(tree.node[tree.node.length-1], tree.node[i], -1.0);
            tree.node = kn_expand_node(new_root);
            kn_g_tree = tree;
            conf.is_real = kn_calxy(tree, conf.is_real);
            kn_plot_core(canvas, tree, conf);
            set_undo(conf, kn_write_nh(tree));
        }
    }

    this.collapse = function() {
        var tree = kn_g_tree, conf = kn_g_conf, i = id;
        if (i < tree.node.length && tree.node[i].child.length) {
            tree.node[i].hidden = !tree.node[i].hidden;
            var nn = tree.node.length;
            tree.node = kn_expand_node(tree.node[tree.node.length-1]);
            kn_count_tips(tree);
            conf.is_real = kn_calxy(tree, conf.is_real);
            kn_g_tree = tree; kn_g_conf = conf;
            kn_plot_core(canvas, tree, conf);
        }
    }

    this.remove = function() {
        var tree = kn_g_tree, conf = kn_g_conf, i = id;
        if (i < tree.node.length) {
            var new_root = kn_remove_node(tree, tree.node[i]);
            tree.node = kn_expand_node(new_root);
            kn_count_tips(tree);
            kn_g_tree = tree;
            conf.is_real = kn_calxy(tree, conf.is_real);
            kn_plot_core(canvas, tree, conf);
            set_undo(conf, kn_write_nh(tree));
//          document.getElementById("n_leaves").innerHTML = "#leaves: "+tree.n_tips+";";
        }
    }

    this.multifurcate = function() {
        var tree = kn_g_tree, conf = kn_g_conf, i = id;
        if (i < tree.node.length && tree.node[i].child.length) {
            kn_multifurcate(tree.node[i]);
            tree.node = kn_expand_node(tree.node[tree.node.length-1]);
            conf.is_real = kn_calxy(tree, conf.is_real);
            kn_g_tree = tree; kn_g_conf = conf;
            kn_plot_core(canvas, tree, conf);
            set_undo(conf, kn_write_nh(tree));
        }
    }

    function move_clear_mark(tree, conf) {
        if (tree.active_node != null && tree.active_node < tree.node.length) {
            var p = tree.node[tree.active_node];
            tree.active_node = null;
            var ctx = canvas.getContext("2d");
            ctx.fillStyle = (conf.show_dup && /:D=Y/i.test(p.meta))? conf.c_dup : conf.c_node;
            ctx.fillRect(p.x * conf.real_x + conf.shift_x - conf.box_width/2,
                         p.y * conf.real_y + conf.shift_y - conf.box_width/2, conf.box_width, conf.box_width);
        }
    }

    this.move = function() {
        var tree = kn_g_tree, conf = kn_g_conf, i = id;
        if (i < tree.node.length) {
            if (tree.active_node != null && tree.active_node < tree.node.length) {
                //alert(tree.active_node + " -> " + i);
                if (tree.node[tree.active_node].parent == tree.node[i]) {
                    alert("Error: cannot move a child to its parent!");
                } else {
                    var new_root = kn_move_node(tree, tree.node[tree.active_node], tree.node[i]);
                    if (new_root) {
                        tree.node = kn_expand_node(new_root);
                        kn_g_tree = tree;
                        conf.is_real = kn_calxy(tree, conf.is_real);
                        kn_plot_core(canvas, tree, conf);
                        set_undo(conf, kn_write_nh(tree));
                    } else alert("Error: Invalid move!");
                }
                move_clear_mark(tree, conf);
            } else {
                tree.active_node = i;
                var p = tree.node[i];
                var tmp = conf.box_width - 2;
                var ctx = self.canvas.getContext("2d");
                ctx.fillStyle = conf.c_active_node;
                ctx.fillRect(p.x * conf.real_x + conf.shift_x - tmp/2,
                             p.y * conf.real_y + conf.shift_y - tmp/2, tmp, tmp);
            }
        } else move_clear_mark(tree, conf);
    }

    this.highlight = function(color) {
        var tree = kn_g_tree, conf = kn_g_conf, i = id;
        var lookup = { white : '#FFFFFF', red : '#FFD8D0', green : '#D8FFC0', blue : '#C0D8FF',
                       yellow : '#FFFFC8', pink : '#FFD8FF', cyan : '#D8FFFF', none : 'none' };
        if (lookup[color]) color = lookup[color];
        if (i < tree.node.length) {
            // mark the clade to be highlighted
            var time_beg = new Date().getTime();
            var c = color;
            if (c == 'none') c = null;
            if (c != tree.node[i].box) {
                tree.node[i].box = c;
                kn_g_tree = tree; kn_g_conf = conf;
                kn_plot_core(canvas, tree, conf);
            }
            // highlight text
            var selbeg, selend;
            o = textarea;
            if (tree.node[i].child.length == 0) {
                selbeg = o.value.indexOf(tree.node[i].name);
                selend = selbeg + tree.node[i].name.length;
            } else {
                var left, leftd, str = o.value;
                left = tree.node[i]; leftd = 0;
                while (left.child.length) ++leftd, left = left.child[0]; // descend to the leftmost child
                selbeg = str.indexOf(left.name);
                for (--selbeg; selbeg >= 0; --selbeg) {
                    if (str.charAt(selbeg) == '(') --leftd;
                    if (leftd == 0) break;
                }
                var rght, rghtd;
                rght = tree.node[i]; rghtd = 0;
                while (rght.child.length) ++rghtd, rght = rght.child[rght.child.length-1];
                selend = str.indexOf(rght.name) + rght.name.length;
                for (; selend < str.length; ++selend) {
                    if (str.charAt(selend) == ')') --rghtd;
                    if (rghtd == 0) break;
                }
                ++selend;
            }
            //o.focus();
            if (o.setSelectionRange) {
                var j, nn, h = o.clientHeight / o.rows;
                var str = o.value.substr(0, selbeg);
                for (j = nn = 0; j < selbeg && j < str.length; ++j)
                    if (str.charAt(j) == '\n') ++nn;
                o.scrollTop = nn * h;
                o.setSelectionRange(selbeg, selend);
            } else { // for IE
                var j, nn, r = o.createTextRange();
                var str = o.value.substr(0, selend);
                for (j = nn = 0; j < selbeg; ++j)
                    if (str.charAt(j) == '\n') ++nn;
                selbeg -= nn;
                for (;j < selend; ++j)
                    if (str.charAt(j) == '\n') ++nn;
                selend -= nn;
                r.collapse(true);
                r.moveEnd('character', selend);
                r.moveStart('character', selbeg);
                r.select();
            }
        }
    }


    /*
    this.zoom_in = function() {
        var ctx = self.canvas.getContext("2d");
        ctx.scale(2, 2);
    }*/
    
}


knhx_init = function(canvasId, textareaId) {

    var kn_actions_html = '<h4>Actions</h4>'
        + '<a href="javascript:void(0);" onClick="kn_actions.swap();">Swap</a><br>'
        + '<a href="javascript:void(0);" onClick="kn_actions.sort();">Ladderize</a><br>'
        + '<a href="javascript:void(0);" onClick="kn_actions.collapse();">Collapse</a><br>'
        + '<a href="javascript:void(0);" onClick="kn_actions.reroot();">Reroot</a><br>'
        + '<a href="javascript:void(0);" onClick="kn_actions.move();">Move</a><br>'
        + '<a href="javascript:void(0);" onClick="kn_actions.multifurcate();">Multifurcate</a><br>'
        + '<a href="javascript:void(0);" onClick="kn_actions.remove();">Remove</a><br>'
        + '<a href="javascript:void(0);" onClick="kn_actions.highlight(\'none\');" class="alt">&nbsp;</a>'
        + '<a href="javascript:void(0);" class="alt" onClick="kn_actions.highlight(\'red\');" style="background-color:#FFD8D0;">&nbsp;</a>'
        + '<a href="javascript:void(0);" class="alt" onClick="kn_actions.highlight(\'green\');" style="background-color:#D0FFC0;">&nbsp;</a>'
        + '<a href="javascript:void(0);" onClick="kn_actions.highlight(\'blue\');" class="alt" style="background-color:#C0D8FF;">&nbsp;</a>'
        + '<a href="javascript:void(0);" onClick="kn_actions.highlight(\'yellow\');" class="alt" style="background-color:#FFFFC8;">&nbsp;</a>'
        + '<a href="javascript:void(0);" onClick="kn_actions.highlight(\'cyan\');" class="alt" style="background-color:#D8FFFF;">&nbsp;</a>'

    var menu_html = function() {
        return '<h4>Menu</h4>'
        + '<a href="javascript:void(0);" onClick="kn_actions.plot_str();">Draw tree</a><br>'
        + '<a href="javascript:void(0);" onClick="window.open(document.getElementById(\''+canvasId+'\').toDataURL(\'image/png\'));">Export to PNG</a><br>'
        + '<a href="javascript:void(0);" onClick="kn_actions.undo_redo();">Undo/Redo</a><br>'
        + '<a href="javascript:void(0);" style="display: inline" onClick="kn_search_leaf(kn_g_tree,document.getElementById(\'searchLeaf\').value);kn_actions.plot();">Search</a>: <input id="searchLeaf" size=12><br>'
        + '<h4>Configurations</h4>'
        + '<table class="table"><tr><td>Width:<td><input class="form-control input-sm" size=5 value="' + kn_g_conf.width + '" onBlur="kn_g_conf.width=this.value;">'
        + '<tr><td>Font size:<td><input class="form-control input-sm" size=5 value="' + kn_g_conf.fontsize + '" onBlur="kn_g_conf.fontsize=this.value;">'
        + '<tr><td>Spacing:<td><input class="form-control input-sm" size=5 value="' + kn_g_conf.yskip + '" onBlur="kn_g_conf.yskip=this.value;">'
        + '<tr><td>2nd label:<td><input class="form-control input-sm" size=10 value="' + kn_g_conf.regex + '" onBlur="kn_g_conf.regex=this.value;">'
        + '<tr><td>Phylogram:<td><input class="form-control input-sm" type="checkbox" '+(kn_g_conf.is_real? 'checked="yes"':'')+'" onChange="kn_g_conf.is_real=this.checked;">'
        + '<tr><td>Circular:<td><input class="form-control input-sm" type="checkbox" '+(kn_g_conf.is_circular? 'checked="yes"':'')+'" onChange="kn_g_conf.is_circular=this.checked;">'
        + '</table>'
        + '<h4>Information</h4>'
        + '<table><tr><td># leaves:<td>'+(kn_g_tree?kn_g_tree.n_tips:0)
        + '<tr><td># nodes:<td>'+(kn_g_tree?kn_g_tree.node.length:0)
        + '<tr><td>Run time:<td>'+kn_g_conf.runtime+' sec'
        + '</table>'
    }

    function ev_canvas(ev) {
        if (ev.layerX || ev.layerX == 0) { // Firefox
            ev._x = ev.layerX;
            ev._y = ev.layerY;
        } else if (ev.offsetX || ev.offsetX == 0) { // Opera
            ev._x = ev.offsetX;
            ev._y = ev.offsetY;
        }
        if (navigator.appName == "Microsoft Internet Explorer") { // for IE8
            /* When we click a node on the IE8 canvas, ev.offsetX gives
             * the offset inside the node instead of inside the canvas.
             * We have to do something nasty here... */
            var d = document.body;
            var o = document.getElementById("canvasContainer");
            ev._x = ev.clientX - (o.offsetLeft - d.scrollLeft) - 3;
            ev._y = ev.clientY - (o.offsetTop - d.scrollTop) - 3;
        }
        if (kn_g_tree) {
            var id = kn_actions.get(ev._x, ev._y);
            if (id >= 0) {
                kn_actions.set_id(id);
                if (kn_g_tree.active_node == null) popmenu.show(ev, kn_actions_html, "98px");
                else kn_actions.move();
            } //else popmenu.show(ev, menu_html());   // Don't show menu
        } //else popmenu.show(ev, menu_html());
    }

    var canvas = document.getElementById(canvasId);
    var textarea = document.getElementById(textareaId);

    kn_actions.init(canvas, textarea);
    if (canvas.addEventListener) canvas.addEventListener('click', ev_canvas, false);
    else canvas.attachEvent('onclick', ev_canvas);

    var insert_elements = function() {
        // put the canvas in a container
        var o = document.createElement("div");
        o.setAttribute('id', 'canvasContainer');
        o.setAttribute('style', 'position: relative;');
        var canvas_parent = canvas.parentNode || canvas.parent;
        canvas_parent.removeChild(canvas);
        canvas_parent.appendChild(o);
        o.appendChild(canvas);
    }

    insert_elements();
}

/********************************
 * Cross-domain request via YQL *
 ********************************/

function xss_query_core(jsurl) {
    var script_id, script = document.createElement('script');
    script.setAttribute('type', 'text/javascript');
    script.setAttribute('src', jsurl);
    script.setAttribute('id', 'script_id');
    script_id = document.getElementById('script_id');
    if (script_id) document.getElementsByTagName('head')[0].removeChild(script_id);
    document.getElementsByTagName('head')[0].appendChild(script);
//  document.getElementById('nhx').value = jsurl;
}

function xss_query(url) {
    document.getElementById('nhx').value = "Please wait while the tree being retrieved...\n";
    xss_query_core("http://query.yahooapis.com/v1/public/yql?callback=xss_callback&q="
                   + encodeURIComponent('select * from html where url="' + url + '"'));
}

function xss_callback(data) {
    var str = data.results[0];
    var beg = str.indexOf('('), end = str.lastIndexOf(')');
    document.getElementById('nhx').value = str.substr(beg, end - beg + 1).replace(/&amp;/ig, "&")
        .replace(/\n +/g, "\n").replace(/&quot;/, '"').replace(/&lt;/g, "<").replace(/&gt;/g, ">");
}





/*
var render = (function(global) {
    
    var docStyle = document.documentElement.style;
    
    var engine;
    if (global.opera && Object.prototype.toString.call(opera) === '[object Opera]') {
        engine = 'presto';
    } else if ('MozAppearance' in docStyle) {
        engine = 'gecko';
    } else if ('WebkitAppearance' in docStyle) {
        engine = 'webkit';
    } else if (typeof navigator.cpuClass === 'string') {
        engine = 'trident';
    }
    
    var vendorPrefix = {
        trident: 'ms',
        gecko: 'Moz',
        webkit: 'Webkit',
        presto: 'O'
    }[engine];
    
    var helperElem = document.createElement("div");
    var undef;

    var perspectiveProperty = vendorPrefix + "Perspective";
    var transformProperty = vendorPrefix + "Transform";
    
    if (helperElem.style[perspectiveProperty] !== undef) {
        
        return function(left, top, zoom) {
            content.style[transformProperty] = 'translate3d(' + (-left) + 'px,' + (-top) + 'px,0) scale(' + zoom + ')';
        };  
        
    } else if (helperElem.style[transformProperty] !== undef) {
        
        return function(left, top, zoom) {
            content.style[transformProperty] = 'translate(' + (-left) + 'px,' + (-top) + 'px) scale(' + zoom + ')';
        };
        
    } else {
        
        return function(left, top, zoom) {
            content.style.marginLeft = left ? (-left/zoom) + 'px' : '';
            content.style.marginTop = top ? (-top/zoom) + 'px' : '';
            content.style.zoom = zoom || '';
        };
        
    }
})(this);
*/




    




function EasyTree(canvasId, treeString, nodeIdToNameMap, leafClickListener, nodeColorFunc) {
	
	var kn_g_tree = kn_parse(treeString);
	
	if (nodeIdToNameMap) {
		for (var nodePos in kn_g_tree.node) {
			var nodeId = kn_g_tree.node[nodePos].name;
			var nodeName = nodeIdToNameMap[nodeId];
			if (nodeName) {
				kn_g_tree.node[nodePos].id = nodeId;
				kn_g_tree.node[nodePos].name = nodeName;
			}
		}
	}
	
	if (nodeColorFunc) {
		for (var nodePos in kn_g_tree.node) {
			var node = kn_g_tree.node[nodePos];
			var color = nodeColorFunc(node, nodePos);
			if (color) {
				node.hl = color;
			}
		}
	}
	
	var kn_g_conf = new Object();
	var canvas = document.getElementById(canvasId);
	
    var conf = kn_g_conf;
    conf.c_box = new Array();
    conf.width = 1000; conf.height = 600;
    conf.xmargin = 20; conf.ymargin = 20;
    conf.fontsize = 8;
    conf.c_ext = "rgb(0,0,0)";
    conf.c_int = "rgb(255,0,0)";
    conf.c_line = '#444'; //"rgb(0,20,200)";
    conf.c_node = '#666'; //"rgb(20,20,20)";
    conf.c_active_node = "rgb(255,128,0)"
    conf.c_hl = "rgb(180, 210, 255)";
    conf.c_hidden = "rgb(0,200,0)";
    conf.c_regex = "rgb(0,128,0)";
//  conf.regex = ':S=([^:\\]]+)';
    conf.regex = ':B=([^:\\]]+)';
    conf.xskip = 3.0;
    conf.yskip = 14;
    conf.box_width = 6.0;
    conf.old_nh = null;
    conf.is_real = true;
    conf.is_circular = false;
    conf.show_dup = true;
    conf.runtime = 0;

    var changeLayoutX = 0;
    var changeLayoutY = 0;
    var changeLayoutW = 0;
    var changeLayoutH = 0;
    
    function plot(canvas, kn_g_tree, kn_g_conf) {
    	kn_plot_core(canvas, kn_g_tree, kn_g_conf);
        var text = "Change layout";
        var ctx = canvas.getContext("2d");
        CanvasTextFunctions.enable(ctx);
        ctx.strokeStyle = kn_g_conf.c_ext;
        ctx.fillStyle = "rgb(180, 245, 220)";
        var w = ctx.measureText(kn_g_conf.font, kn_g_conf.fontsize, text);
        var x = kn_g_conf.width - 80;
        var y = 1;
        var h = kn_g_conf.fontsize * 1.5 + 1;
        ctx.fillRect(x, y, w, h);
        ctx.drawText(kn_g_conf.font, kn_g_conf.fontsize, x, y + kn_g_conf.fontsize * .8 + kn_g_conf.fontsize / 3, text);
        changeLayoutX = x;
        changeLayoutY = y;
        changeLayoutW = w;
        changeLayoutH = h;
    }
    
    function changeLayout(isCircular) {
    	kn_g_conf.is_circular = isCircular;
    	kn_g_conf.height = kn_g_conf.is_circular? kn_g_conf.width : kn_g_conf.ymargin * 2 + kn_g_tree.n_tips * kn_g_conf.yskip;
    	canvas.height = kn_g_conf.height;
        kn_count_tips(kn_g_tree);
        kn_g_conf.is_real = kn_calxy(kn_g_tree, kn_g_conf.is_real);
        plot(canvas, kn_g_tree, kn_g_conf);
    }

    function ev_canvas(ev) {
        if (ev.layerX || ev.layerX == 0) { // Firefox
            ev._x = ev.layerX;
            ev._y = ev.layerY;
        } else if (ev.offsetX || ev.offsetX == 0) { // Opera
            ev._x = ev.offsetX;
            ev._y = ev.offsetY;
        }
        if (navigator.appName == "Microsoft Internet Explorer") { // for IE8
            /* When we click a node on the IE8 canvas, ev.offsetX gives
             * the offset inside the node instead of inside the canvas.
             * We have to do something nasty here... */
            var d = document.body;
            var o = document.getElementById("canvasContainer");
            ev._x = ev.clientX - (o.offsetLeft - d.scrollLeft) - 3;
            ev._y = ev.clientY - (o.offsetTop - d.scrollTop) - 3;
        }
        if (kn_g_tree) {
            var id = kn_get_node(kn_g_tree, kn_g_conf, ev._x, ev._y);
            if (id >= 0 && id < kn_g_tree.node.length) {
                var tree = kn_g_tree, conf = kn_g_conf, i = id;
                if (i < tree.node.length && tree.node[i].child.length) {
                	if (!tree.node[i].parent)
                		return;
                    tree.node[i].hidden = !tree.node[i].hidden;
                    var nn = tree.node.length;
                    tree.node = kn_expand_node(tree.node[tree.node.length-1]);
                    kn_count_tips(tree);
                    conf.is_real = kn_calxy(tree, conf.is_real);
                    kn_g_tree = tree; kn_g_conf = conf;
                    plot(canvas, tree, conf);
                } else if (leafClickListener) {
            		leafClickListener(kn_g_tree.node[id], id);
            	}
            } else {
            	var x = ev._x;
            	var y = ev._y;
            	if (x >= changeLayoutX && x < changeLayoutX + changeLayoutW &&
            			y >= changeLayoutY && y < changeLayoutY + changeLayoutH) {
            		changeLayout(!kn_g_conf.is_circular);
            	}
        	}
        }
    }

    var tree = kn_g_tree;
    if (tree.error) {
        if (tree.error & 1) alert("Parsing ERROR: missing left parenthesis!");
        else if (tree.error & 2) alert("Parsing ERROR: missing right parenthesis!");
        else if (tree.error & 4) alert("Parsing ERROR: missing brackets!");
        else alert("Unknown parsing ERROR: " + tree.error);
    } else {
    	conf.is_real = kn_calxy(tree, conf.is_real);
    	conf.height = conf.is_circular? conf.width : conf.ymargin * 2 + tree.n_tips * conf.yskip;
    	canvas.width = conf.width;
    	canvas.height = conf.height;
    	plot(canvas, tree, conf);

		// put the canvas in a container
		var o = document.createElement("div");
		o.setAttribute('id', canvasId + '_container');
		o.setAttribute('style', 'position: relative;');
		var canvas_parent = canvas.parentNode || canvas.parent;
		canvas_parent.removeChild(canvas);
		canvas_parent.appendChild(o);
		o.appendChild(canvas);
		
    	if (canvas.addEventListener) canvas.addEventListener('click', ev_canvas, false);
    	else canvas.attachEvent('onclick', ev_canvas);
    }
};