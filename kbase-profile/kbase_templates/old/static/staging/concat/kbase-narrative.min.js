/**
 * @author Bill Riehl <wjriehl@lbl.gov>
 * @public
 */

(function( $, undefined ) {
    $.KBWidget({
        name: "kbaseNarrativeInput",
        parent: "kbaseAuthenticatedWidget",
        version: "1.0.0",
        options: {
            loadingImage: "../images/ajax-loader.gif",
            method: null,
        },
        IGNORE_VERSION: true,

        init: function(options) {
            this._super(options);

            // expects the method as a JSON string
            if (this.options.method)
                this.options.method = JSON.parse(this.options.method);
            
            return this;
        },

        getParameters: function() {
            return [ "returning parameter list" ];
        },
        
        getState: function() {
            return {};
        },

        loadState: function(state) {
            if (!state)
                return;
        },

        refresh: function() {

        },

        /*  NEW METHODS TO HANDLE NEW APP BEHAVIOR AND METHOD/APP SPECS */
        
        
        /*
         * This is called when this method is run to allow you to check if the parameters
         * that the user has entered is correct.  You need to return an object that indicates
         * if the input is valid, or if not, if there are any error messages.  When this is
         * called, you should visually indicate which parameters are invalid by marking them
         * red (see kbaseNarrativeMethodInput for default styles).
         */
        isValid: function() {
           return { isValid: true, errormssgs: [] }; 
        },
        
        /*
         * Necessary for Apps to disable editing parameters that are automatically filled
         * from a previous step.  Returns nothing.
         */
        disableParameterEditing: function(parameterId) {
            
        },
        
        /*
         * Allows those parameters to be renabled, which may be an option for advanced users.
         */
        enableParameterEditing: function(parameterId) {
            
        },
        
        /*
         * An App (or a narrative that needs to auto populate certain fields) needs to set
         * specific parameter values based on the App spec, so we need a way to do this.
         */
        setParameterValue: function(parameterId, value) {
            
        },
        
        /*
         * We need to be able to retrieve any parameter value from this method.  Valid parameter
         * values may be strings, numbers, objects, or lists, but must match what is declared
         * in the method spec.  If the parameter is not valid.
         */
        getParameterValue: function(parameterId) {
            return null;
        },
        
        
        /*
         * When we actually run the method, we need all the parameter inputs.  This should return
         * an array of objects, where each object has 'id' and 'value' defined giving the parameter ID
         * and parameter value.
         */
        getAllParameterValues: function() {
            /*  should be in the form:
             *      [
             *          { id: 'param1', value: 'MyGenome' },
             *          ...
             *      ]
             *  
             */
            return [ ];
        },
        
        
        lockInputs: function() {
            
        },
        unlockInputs: function() {
            
        },
        
        /*
         * This function is invoked every time we run app or method. This is the difference between it
         * and getAllParameterValues/getParameterValue which could be invoked many times before running 
         * (e.g. when widget is rendered). 
         */
        prepareDataBeforeRun: function() {
        	
        }
        
    });

})( jQuery );
/**
 * @author Bill Riehl <wjriehl@lbl.gov>
 * @public
 */

(function( $, undefined ) {
    $.KBWidget({
        name: "kbaseNarrativeMethodInput",
        parent: "kbaseNarrativeInput",
        version: "1.0.0",
        options: {
            loadingImage: "../images/ajax-loader.gif",
            isInSidePanel: false
        },

        init: function(options) {
            this._super(options);

            this.render();
            this.refresh();
            return this;
        },

        // list of objects in the form {id:"param_id", widget: ... } to ensure we preserve
        // parameter ordering
        parameters: null,
        // maps parameter id to widget for fast lookup of widget
        parameterIdLookup : {},
        
        $advancedOptionsDiv : null,
        
        /**
         * Builds the input div for a function cell, based on the given method object.
         * @param {Object} method - the method being constructed around.
         * @returns {String} an HTML string describing the available parameters for the cell.
         * @private
         */
        render: function() {
            // figure out all types from the method
            var self = this;
            var method = this.options.method;
            var params = method.parameters;

            var $inputParameterContainer = $('<div>');
            var $optionsDiv = $('<div>');
            this.$advancedOptionsDiv = $('<div>')
            
            this.parameters = [];
            this.parameterIdLookup = {};
            for (var i=0; i<params.length; i++) {
                var paramSpec = params[i];
                var $stepDiv = $('<div>');
                // check what kind of parameter here.
                if (paramSpec.field_type === "text") {
                    var textInputWidget = $stepDiv["kbaseNarrativeParameterTextInput"]({loadingImage: this.options.loadingImage, parsedParameterSpec: params[i], isInSidePanel: this.options.isInSidePanel});
                    this.parameters.push({id:paramSpec.id, widget:textInputWidget});
                    this.parameterIdLookup[paramSpec.id] = textInputWidget;
                } else if (paramSpec.field_type === "dropdown") {
                    var dropdownInputWidget = $stepDiv["kbaseNarrativeParameterDropdownInput"]({loadingImage: this.options.loadingImage, parsedParameterSpec: params[i], isInSidePanel: this.options.isInSidePanel});
                    this.parameters.push({id:paramSpec.id, widget:dropdownInputWidget});
                    this.parameterIdLookup[paramSpec.id] = dropdownInputWidget;
                } else if (paramSpec.field_type === "checkbox") {
                    var checkboxInputWidget = $stepDiv["kbaseNarrativeParameterCheckboxInput"]({loadingImage: this.options.loadingImage, parsedParameterSpec: params[i], isInSidePanel: this.options.isInSidePanel});
                    this.parameters.push({id:paramSpec.id, widget:checkboxInputWidget});
                    this.parameterIdLookup[paramSpec.id] = checkboxInputWidget;
                }else if (paramSpec.field_type === "textarea") {
                    var textareaInputWidget = $stepDiv["kbaseNarrativeParameterTextareaInput"]({loadingImage: this.options.loadingImage, parsedParameterSpec: params[i], isInSidePanel: this.options.isInSidePanel});
                    this.parameters.push({id:paramSpec.id, widget:textareaInputWidget});
                    this.parameterIdLookup[paramSpec.id] = textareaInputWidget;
                }else if (paramSpec.field_type === "file") {
                    var fileInputWidget = $stepDiv["kbaseNarrativeParameterFileInput"]({loadingImage: this.options.loadingImage, parsedParameterSpec: params[i], isInSidePanel: this.options.isInSidePanel});
                    this.parameters.push({id:paramSpec.id, widget:fileInputWidget});
                    this.parameterIdLookup[paramSpec.id] = fileInputWidget;
                }else if (paramSpec.field_type === "tab") {
                	continue;
                } else {
                    // this is what we should do:  this.getErrorDiv()
                    $stepDiv.append('<span class="label label-danger">Parameter '+paramSpec.id+
                                    ' not displaying properly, invalid parameter type: "'+paramSpec.field_type+'"</span>');
                }
                
                // If it is an advanced option, then we must place it in the correct div
                var isAdvanced = false;
                if (paramSpec.advanced) {
                    if (paramSpec.advanced === true || paramSpec.advanced === 1) {
                        isAdvanced = true;
                    }
                }
                this.addParameterDiv(i, paramSpec, $stepDiv, $optionsDiv, this.$advancedOptionsDiv, isAdvanced);
            }
            $inputParameterContainer.append($optionsDiv);
            var hasAdvancedOption = this.$advancedOptionsDiv.children().length > 0;
            var $advancedOptionsControllerRow = $("<div>").addClass("row").css({"margin":"5px"});
            if (hasAdvancedOption) {
                $advancedOptionsControllerRow.append($("<div>").addClass("col-md-12 kb-method-advanced-options-controller")
                                                     .append("show advanced options"))
                                                     .on('click',function() {
                                                        if (self.$advancedOptionsDiv.is(":visible")) {
                                                            self.$advancedOptionsDiv.hide();
                                                            $(this).find(".kb-method-advanced-options-controller").html("show advanced options");
                                                        } else {
                                                            self.$advancedOptionsDiv.show();
                                                            $(this).find(".kb-method-advanced-options-controller").html("hide advanced options");
                                                        }
                                                     } );
                $inputParameterContainer.append($advancedOptionsControllerRow);
                $inputParameterContainer.append(this.$advancedOptionsDiv.hide());
            } else {
                $advancedOptionsControllerRow.append($("<div>").addClass("col-md-12 kb-method-advanced-options-controller-inactive")
                                                     .append("no advanced options"));
                $inputParameterContainer.append($advancedOptionsControllerRow);
            }
            
            this.$elem.append($inputParameterContainer);
            this.$elem.css({"margin-bottom":"5px"});
            
        },

        addParameterDiv: function(paramPos, paramSpec, $stepDiv, $optionsDiv, $advancedOptionsDiv, isAdvanced) {
            if (isAdvanced) {
                $advancedOptionsDiv.append($stepDiv);
            } else {
                if ($optionsDiv.children().length == 0)
                    $stepDiv.css({"margin-top":"5px"});
                $optionsDiv.append($stepDiv);
            }
        },
        
        /**
         *OLD STYLE: we keep this for compatibility, but you should use new get parameter values!!!
         * Returns a list of parameters in the order in which the given method
         * requires them.
         * @return {Array} an array of strings - one for each parameter
         * @public
         */
        getParameters: function() {
            var paramList = [];
            if (this.parameters) {
                for(var i=0; i<this.parameters.length; i++) {
                    paramList.push(this.parameters[i].widget.getParameterValue());
                }
            }
            return paramList;
        },

        /**
         * Returns an object representing the state of this widget.
         * In this particular case, it is a list of key-value pairs, like this:
         * { 
         *   'param0' : 'parameter value',
         *   'param1' : 'parameter value'
         * }
         * with one key/value for each parameter in the defined method.
         */
        getState: function() {
            var state = {};

            if (this.parameters) {
                for(var i=0; i<this.parameters.length; i++) {
                    var id = this.parameters[i].id;
                    state[id] = this.parameters[i].widget.getState();
                }
            }
            
            return state;
        },

        /**
         * Adjusts the current set of parameters based on the given state.
         * Doesn't really do a whole lot of type checking yet, but it's assumed that
         * a state will be loaded from an object generated by getState.
         */
        loadState: function(state) {
            if (!state)
                return;

            if (this.parameters) {
                for(var i=0; i<this.parameters.length; i++) {
                    var id = this.parameters[i].id;
                    if (state.hasOwnProperty(id)) {
                        this.parameters[i].widget.loadState(state[id]);
                    }
                }
            }
        },

        /**
         * Refreshes the input fields for this widget. I.e. if any of them reference workspace
         * information, those fields get refreshed without altering any other inputs.
         */
        refresh: function() {
            if (this.parameters) {
                for(var i=0; i<this.parameters.length; i++) {
                    this.parameters[i].widget.refresh();
                }
            }
        },
        
        
        /*
         * This is called when this method is run to allow you to check if the parameters
         * that the user has entered is correct.  You need to return an object that indicates
         * if the input is valid, or if not, if there are any error messages.  When this is
         * called, you should visually indicate which parameters are invalid by marking them
         * red (see kbaseNarrativeMethodInput for default styles).
         */
        isValid: function() {
            var isValidRet = { isValid:true, errormssgs: [] };
            if (this.parameters) {
                for(var i=0; i<this.parameters.length; i++) {
                    var parameterStatus = this.parameters[i].widget.isValid();
                    //console.log("Status for parameter " + this.parameters[i].id + ":");
                    //console.log(parameterStatus);
                    if (!parameterStatus.isValid) {
                        isValidRet.isValid = false;
                        for(var e = 0; e<parameterStatus.errormssgs.length; e++) {
                            isValidRet.errormssgs.push(parameterStatus.errormssgs[e]);
                        }
                    }
                }
            }
            return isValidRet; 
        },
        
        /*
         * Necessary for Apps to disable editing parameters that are automatically filled
         * from a previous step.  Returns nothing.
         */
        disableParameterEditing: function(parameterId) {
            if (this.parameterIdLookup) {
                var widget = this.parameterIdLookup[parameterId];
                if (widget) {
                    if (typeof widget.disableParameterEditing === 'function') {
                        widget.disableParameterEditing();
                    }
                }
            }
        },
        
        /*
         * Allows those parameters to be renabled, which may be an option for advanced users.
         */
        enableParameterEditing: function(parameterId) {
            if (this.parameterIdLookup) {
                var widget = this.parameterIdLookup[parameterId];
                if (widget) {
                    if (typeof widget.enableParameterEditing === 'function') {
                        widget.enableParameterEditing();
                    }
                }
            }
        },
        
        /*
         * An App (or a narrative that needs to auto populate certain fields) needs to set
         * specific parameter values based on the App spec, so we need a way to do this.
         */
        setParameterValue: function(parameterId, value) {
            if (this.parameterIdLookup) {
                var widget = this.parameterIdLookup[parameterId];
                if (widget) {
                    if (typeof widget.setParameterValue(value) === 'function') {
                        widget.setParameterValue(value);
                    }
                }
            }
        },
        
        /*
         * We need to be able to retrieve any parameter value from this method.  Valid parameter
         * values may be strings, numbers, objects, or lists, but must match what is declared
         * in the method spec.  If the parameter is not valid.
         */
        getParameterValue: function(parameterId) {
            var value = null;
            if (this.parameterIdLookup) {
                var widget = this.parameterIdLookup[parameterId];
                if (widget) {
                    value = widget.getParameterValue();
                }
            }
            return value;
        },
        
        
        /*
         * When we actually run the method, we need all the parameter inputs.  This should return
         * an array of objects, where each object has 'id' and 'value' defined giving the parameter ID
         * and parameter value.
         */
        getAllParameterValues: function() {
            /*  should be in the form:
             *      [
             *          { id: 'param1', value: 'MyGenome' },
             *          ...
             *      ]
             *  
             */
            var values = [];
            if (this.parameters) {
                for(var i=0; i<this.parameters.length; i++) {
                    var value = this.parameters[i].widget.getParameterValue();
                    values.push( { id:this.parameters[i].id, value:value } );
                }
            }
            return values;
        },
        
        /** lock/unlock inputs allows temporary lock and unlock of the inputs only if they are enabled
        this means that unlocking will not enable the input if it was previously disabled by the disableInputEditing method. **/
        lockInputs: function() {
            if (this.parameters) {
                for(var i=0; i<this.parameters.length; i++) {
                    this.parameters[i].widget.lockInputs();
                }
            }
        },
        unlockInputs: function() {
            if (this.parameters) {
                for(var i=0; i<this.parameters.length; i++) {
                    this.parameters[i].widget.unlockInputs();
                }
            }
        },
        
        
        
        /**
         * allows an app or other higher-level function to attach a listener on a a parameter
         * so that when it changes, something else can be updated.
         */
        addInputListener: function(parameterId, onChangeFunc) {
            if (this.parameterIdLookup) {
                var widget = this.parameterIdLookup[parameterId];
                if (widget) {
                    value = widget.addInputListener(onChangeFunc);
                }
            }
        },
        
        /*
         * This function is invoked every time we run app or method. This is the difference between it
         * and getAllParameterValues/getParameterValue which could be invoked many times before running 
         * (e.g. when widget is rendered). 
         */
        prepareDataBeforeRun: function() {
            if (this.parameters) {
                for (var i = 0; i < this.parameters.length; i++)
                    this.parameters[i].widget.prepareValueBeforeRun(this.options.method);
            }
        },
        
        genUUID: function() {
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
                var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);
                return v.toString(16);
            });
        }
    });

})( jQuery );
/**
 * @author Bill Riehl <wjriehl@lbl.gov>
 * @public
 */

(function( $, undefined ) {
    $.KBWidget({
        name: "kbaseNarrativeParameterInput",
        parent: "kbaseAuthenticatedWidget",
        version: "1.0.0",
        options: {
            loadingImage: "../images/ajax-loader.gif",
            parsedParameterSpec: null,
            isInSidePanel: false
        },
        IGNORE_VERSION: true,

        $mainPanel:null,
        spec:null,
        
        init: function(options) {
            this._super(options);

            this.spec = options.parsedParameterSpec;
            
            this.$mainPanel = $("<div>");
            this.$elem.append(this.$mainPanel);
            this.render();
            
            return this;
        },
        
        render: function() {
            this.$mainPanel.append("A parameter is not being displayed correctly.");
            console.error("Incorrect Parameter Spec:");
            console.error(this.spec);
        },
        
        getState: function() {
            return this.getParameterValue();
        },

        loadState: function(state) {
            if (!state)
                return;
            this.setParameterValue(state);
        },
        
        refresh: function() {
        
        },

        /*
         * This is called when this method is run to allow you to check if the parameters
         * that the user has entered is correct.  You need to return an object that indicates
         * if the input is valid, or if not, if there are any error messages.  When this is
         * called, you should visually indicate which parameters are invalid by marking them
         * red (see kbaseNarrativeMethodInput for default styles).
         */
        isValid: function() {
           return { isValid: false, errormssgs: ["A parameter is not specified properly."] }; 
        },
        
        /*
         * Necessary for Apps to disable editing parameters that are automatically filled
         * from a previous step.  Returns nothing.
         */
        disableParameterEditing: function() {
            
        },
        
        /*
         * Allows those parameters to be renabled, which may be an option for advanced users.
         */
        enableParameterEditing: function() {
            
        },
        
        /*
         * An App (or a narrative that needs to auto populate certain fields) needs to set
         * specific parameter values based on the App spec, so we need a way to do this.
         */
        setParameterValue: function(value) {
            
        },
        
        /*
         * We need to be able to retrieve any parameter value from this method.  Valid parameter
         * values may be strings, numbers, objects, or lists, but must match what is declared
         * in the method spec.  If the parameter is not valid.
         */
        getParameterValue: function() {
            return "";
        },
        
        /*
         * This function is invoked every time we run app or method. This is the difference between it
         * and getParameterValue() which could be invoked many times before running (e.g. when widget 
         * is rendered). 
         */
        prepareValueBeforeRun: function(methodSpec) {
        	
        }
        
    });

})( jQuery );
/**
 * @author Bill Riehl <wjriehl@lbl.gov>
 * @public
 */

(function( $, undefined ) {
    $.KBWidget({
        name: "kbaseNarrativeParameterTextInput",
        parent: "kbaseNarrativeParameterInput",
        version: "1.0.0",
        options: {
            loadingImage: "../images/ajax-loader.gif",
            parsedParameterSpec: null,
            wsObjSelectPageSize : 20,
            isInSidePanel: false
        },
        IGNORE_VERSION: true,

        // properties inherited from kbaseNarrativeParameterInput
        // $mainPanel:null,
        // spec:null,
        
        isUsingSelect2: false,
        enabled: true,
        isOutputName: false,
        required: true,
        validDataObjectList: [],
        allow_multiple:false,
        
        $rowsContainer: null,
        $addRowController: null,
        
        rowInfo: null,
        
        // set the widths of the columns
        nameColClass  : "col-md-2",
        inputColClass : "col-md-5",
        hintColClass  : "col-md-5",
        
        render: function() {
            var self = this;
            if (self.options.isInSidePanel) {
            	self.nameColClass  = "col-md-12";
                self.inputColClass = "col-md-12";
                self.hintColClass  = "col-md-12";
            }

            var spec = self.spec;
            
            // check if we need to allow multiple values
            self.allow_multiple = false;
            if (spec.allow_multiple) {
                if (spec.allow_multiple===true || spec.allow_multiple===1) {
                    self.allow_multiple = true;
                }
            }
            // check if this is a required field
            self.required= true;
            if (spec.optional) {
                self.required=false;
            }
            
            // check if this is an output name
            if (spec.text_options) {
                if (spec.text_options.is_output_name) {
                    self.isOutputName = true;
                }
            }
            
            //self.$mainPanel.addClass("kb-method-parameter-panel")
            //        .hover(function(){$(this).toggleClass('kb-method-parameter-panel-hover');});;
            
            self.rowInfo = [];
            self.$rowsContainer=$("<div>");
            self.$mainPanel.append(self.$rowsContainer);
            self.$addRowController = $('<div>');
            
            var d = spec.default_values;
            
            // based on whether we have one or allow multiple, render the output rows...
            if (!self.allow_multiple) {
                var defaultValue = '';
                if (spec.default_values) { if (spec.default_values.length >= 1) {
                        var d = spec.default_values; defaultValue = (d[0] !== '' && d[0] !== undefined) ? d[0] : '';
                }}
                self.addRow(defaultValue,true,true); 
            } else {
                // for multiple elements, hover on entire panel
                self.$mainPanel
                        .addClass("kb-method-parameter-row")
                        .mouseenter(function(){$(this).addClass('kb-method-parameter-row-hover');})
                        .mouseleave(function(){$(this).removeClass('kb-method-parameter-row-hover');});
                
                var defaultValue = '';
                if (spec.default_values) { if (spec.default_values.length >= 1) {
                        var d = spec.default_values; defaultValue = (d[0] !== '' && d[0] !== undefined) ? d[0] : '';
                }}
                self.addRow(defaultValue,true,false);
                if (spec.default_values) {
                    var d = spec.default_values;
                    for(var i=1; i<d.length; d++) {
                        defaultValue = (d[i] !== '' && d[i] !== undefined) ? d[i] : '';
                        self.addRow(defaultValue,false,false); 
                    }
                }
                self.addTheAddRowController();
            }
            self.refresh();
        },
        
        addTheAddRowController: function () {
            var self = this;
            var $nameCol = $('<div>').addClass(self.nameColClass).addClass("kb-method-parameter-name");
            if (self.options.isInSidePanel)
            	$nameCol.css({'text-align': 'left', 'padding-left': '10px'});
            var $buttonCol = $('<div>').addClass(self.inputColClass).addClass("kb-method-parameter-input").append(
                                $('<button>').addClass("kb-default-btn kb-btn-sm")
                                .append($('<span class="kb-parameter-data-row-add">').addClass("fa fa-plus"))
                                .append(" add another "+self.spec.ui_name)
                                .on("click",function() { self.addRow() }) );
            self.$addRowController = $('<div>').addClass("row kb-method-parameter-row").append($nameCol).append($buttonCol);
            self.$mainPanel.append(self.$addRowController)
        },
        
        
        removeRow : function(uuid) {
            var self = this;
            for(var i=0; i<self.rowInfo.length; i++) {
                if (self.rowInfo[i].uuid === uuid) {
                    self.rowInfo[i].$all.remove();
                    self.rowInfo.splice(i,1);
                    break;
                }
            }
        },
        
        /* row number should only be set when first creating this row */
        addRow : function(defaultValue, showHint, useRowHighlight) {
            var self = this;
            var spec = self.spec;
            
            var placeholder = '';
            if(spec.text_options) {
                if(spec.text_options.placeholder) {
                    placeholder = spec.text_options.placeholder;
                    placeholder = placeholder.replace(/(\r\n|\n|\r)/gm,"");
                }
            }
            if (!defaultValue) { defaultValue = ""; }
            
            var form_id = spec.id;
            var $input= $('<input id="' + form_id + '" placeholder="' + placeholder + '"' +
                            ' value="'+defaultValue+'" type="text" style="width:100%"/>').addClass("form-control")
                            .on("input",function() { self.isValid() });
                            
            if(spec.text_options) {
                if (spec.text_options.valid_ws_types) {
                    if (spec.text_options.valid_ws_types.length>0) {
                        self.isUsingSelect2 = true;
                        $input =$('<input id="' + form_id + '" type="text" style="width:100%" />')
                                    .on("change",function() { self.isValid() });
                        //this.validDataObjectList = []; - why was this here? ...
                    }
                }
            }
                
            var $feedbackTip = $("<span>").removeClass();
            if (self.required && showHint) {  // it must be required, and it must be the first element (showHint is only added on first row)
                $feedbackTip.addClass('kb-method-parameter-required-glyph glyphicon glyphicon-arrow-left').prop("title","required field");
            }
                
            var $row = $('<div>').addClass("row kb-method-parameter-row");
            if (useRowHighlight) {
                $row.mouseenter(function(){$(this).addClass('kb-method-parameter-row-hover');})
                    .mouseleave(function(){$(this).removeClass('kb-method-parameter-row-hover');});
            }
                            
            var $nameCol = $('<div>').addClass(self.nameColClass).addClass("kb-method-parameter-name");
            if (self.options.isInSidePanel)
            	$nameCol.css({'text-align': 'left', 'padding-left': '10px'});
            if (showHint) { $nameCol.append(spec.ui_name); }
            var $inputCol = $('<div>').addClass(self.inputColClass).addClass("kb-method-parameter-input")
                                .append($('<div>').css({"width":"100%","display":"inline-block"}).append($input))
                                .append($('<div>').css({"display":"inline-block"}).append($feedbackTip));
            var $hintCol  = $('<div>').addClass(self.hintColClass).addClass("kb-method-parameter-hint");
            var uuidForRemoval = self.genUUID(); var $removalButton=null;
            if(showHint) {
                $hintCol.append(spec.short_hint);
                if (spec.description && spec.short_hint !== spec.description) {
                    $hintCol.append($('<span>').addClass('fa fa-info kb-method-parameter-info')
                                    .tooltip({title:spec.description, html:true}));
                }
            } else {
                $removalButton = $('<button>').addClass("kb-default-btn kb-btn-sm")
                                .append($('<span class="kb-parameter-data-row-remove">').addClass("fa fa-remove"))
                                .append(" remove "+spec.ui_name)
                                .on("click",function() { self.removeRow(uuidForRemoval); })
                $hintCol.append($removalButton);
            }
            $row.append($nameCol).append($inputCol).append($hintCol);
            var $errorPanel = $('<div>').addClass("kb-method-parameter-error-mssg").hide();
            var $errorRow = $('<div>').addClass('row')
                                .append($('<div>').addClass(self.nameColClass))
                                .append($errorPanel.addClass(self.inputColClass));
            
            var $allRowComponents = $('<div>').append($row).append($errorRow);
            self.$rowsContainer.append($allRowComponents);
            self.rowInfo.push({uuid: uuidForRemoval, $row:$row, $input:$input, $error:$errorPanel, $feedback:$feedbackTip, $all:$allRowComponents, $removalButton:$removalButton});
                
            /* for some reason, we need to actually have the input added to the main panel before this will work */
            if (self.isUsingSelect2) {
                if (placeholder === '') { placeholder = ' '; } // this allows us to cancel selections in select2
                this.setupSelect2($input, placeholder);
            }
            // if a default value is set, validate it.
            if (defaultValue) {
                this.isValid();
            }
        },
        
        refresh: function() {
            var self = this;
            
            var needToMakeCall = false;
            var lookupTypes = [];
            var foundTypes = {};
            
            // could also check if we are using select2... that for now is only used for ws types
            if(self.spec.text_options) {
                if (self.spec.text_options.valid_ws_types) {
                    if(self.spec.text_options.valid_ws_types.length>0) {
                        var types = self.spec.text_options.valid_ws_types;
                        for(var i=0; i<types.length; i++) {
                            if (!foundTypes.hasOwnProperty(types[i])) {
                                lookupTypes.push(types[i]);
                                foundTypes[types[i]] = 1;
                                needToMakeCall = true;
                            }
                        }
                    }
                }
            }
            if (!needToMakeCall) { return; }
            
            // update the validDataObjectList 
            this.trigger('dataLoadedQuery.Narrative', [lookupTypes, this.IGNORE_VERSION, $.proxy(
                function(objects) {
                    // we know from each parameter what each input type is.
                    // we also know how many of each type there is.
                    // so, iterate over all parameters and fulfill cases as below.
                    // extract the object infos
                    var allObjInfo = [];
                    for (var typeName in objects) {
                        if (objects.hasOwnProperty(typeName)) {
                            for(var i=0; i<objects[typeName].length; i++) {
                                allObjInfo.push(objects[typeName][i]);
                            }
                        }
                    }
                    // sort them by date, then by name
                    allObjInfo.sort(function(a, b) {
                            if (a[3] > b[3]) return -1; // sort by date
                            if (a[3] < b[3]) return 1;  // sort by date
                            if (a[1] < b[1]) return -1; // sort by name
                            if (a[1] > b[1]) return 1;  // sort by name
                            return 0;
                        });
                    /* object info
                    0: id
                    1: name
                    2: type
                    3: timestamp
                    4: version
                    5: owner
                    6: ws id
                    7: ws name
                    8: checksum
                    9: size
                    10: metadata*/
                    
                    // populate the valid data object list
                    self.validDataObjectList = [];
                    for(var i=0; i<allObjInfo.length; i++) {
                        self.validDataObjectList.push({name:allObjInfo[i][1], info:allObjInfo[i]});
                    }
                    
                    // refresh the input options
                    if(self.isUsingSelect2) {
                        self.$elem.find("#"+this.spec.id).trigger("change");
                    }
                },
                this
            )]);
        },

        
        /* private method - note: if placeholder is empty, then users cannot cancel a selection*/
        setupSelect2: function ($input, placeholder, defaultValue) {
            var self = this;
            var noMatchesFoundStr = "No matching data found.";
            if (self.isOutputName) {
                noMatchesFoundStr = "Enter a name for the output data object.";
            }
            $input.select2({
                matcher: self.select2Matcher,
                formatNoMatches: noMatchesFoundStr,
                placeholder:placeholder,
                allowClear: true,
                selectOnBlur: true,
                query: function (query) {
                    var data = {results:[]};
                    
                    // if there is a current selection (this is a bit of a hack) we
                    // prefill the input box so we don't have to do additional typing
                    if (query.term.trim()==="" && $input.select2('data') && $input.data('select2').kbaseHackLastSelection) {
                        var searchbox = $input.data('select2').search;
                        if (searchbox) {
                            $(searchbox).val($input.select2('data').text);
                            query.term = $input.select2('data').text;
                            $input.data('select2').kbaseHackLastSelection = null;
                        }
                    }
                    $input.data('select2').kbaseHackLastTerm = query.term;
                    
                    // populate the names from our valid data object list
                    var exactMatch = false;
                    if (self.validDataObjectList) {
                        for(var i=0; i<self.validDataObjectList.length; i++){
                            var d = self.validDataObjectList[i];
                            if (query.term.trim()!=="") {
                                if(self.select2Matcher(query.term,d.name)) {
                                    if (query.term === d.name) { exactMatch = true; }
                                    data.results.push({id:d.name, text:d.name, info:d.info});
                                }
                                // search metadata too
                                else if (d.info[10]) {
                                    for(var key in d.info[10]) {
                                        if (d.info[10].hasOwnProperty(key)) {
                                            if(self.select2Matcher(query.term,d.info[10][key])) {
                                                data.results.push({id:d.name, text:d.name,
                                                                  mm:key+' - '+d.info[10][key],info:d.info});
                                                // allow us to show metadata match!
                                            }
                                        }
                                    }
                                }
                                
                            } else {
                                data.results.push({id:d.name, text:d.name, info:d.info});
                            }
                        }
                    }
                    
                    //always allow the name if it is set as an output name, unshift it to the front...
                    if (query.term.trim()!=="") {
                        if(self.isOutputName && !exactMatch) {
                            data.results.unshift({id:query.term, text:query.term});
                        }
                    }
                    
                    // paginate results
                    var pageSize = self.options.wsObjSelectPageSize;
                    query.callback({results:data.results.slice((query.page-1)*pageSize, query.page*pageSize),
                                more:data.results.length >= query.page*pageSize });
                },
                
                formatSelection: function(object, container) {
                    var display = '<span class="kb-parameter-data-selection">'+object.text+'</span>';
                    return display;
                },
                formatResult: function(object, container, query) {
                    var display = '<span style="word-wrap:break-word;"><b>'+object.text+"</b></span>";
                    if (object.info) {
                        // we can add additional info here in the dropdown ...
                        display = display + " (v" + object.info[4]+")<br>";
                        if (object.mm) {
                            display = display + "&nbsp&nbsp&nbsp<i>"+object.mm+"</i><br>";
                        }
                        display = display + "&nbsp&nbsp&nbsp<i>updated " + self.getTimeStampStr(object.info[3])+"</i>";
                    }
                    return display;
                }
            })
            .on("select2-selecting",
                function(e) {
                    $input.data('select2').kbaseHackLastSelection = e.choice;
                });
            
            if (defaultValue) {
                $input.select2("data",{id:defaultValue, text:defaultValue});
            }
        },
        /* private method */
        select2Matcher: function(term,text) {
            return text.toUpperCase().indexOf(term.toUpperCase())>=0;
        },
        
        /*
         * This is called when this method is run to allow you to check if the parameters
         * that the user has entered is correct.  You need to return an object that indicates
         * if the input is valid, or if not, if there are any error messages.  When this is
         * called, you should visually indicate which parameters are invalid by marking them
         * red (see kbaseNarrativeMethodInput for default styles).
         */
        isValid: function() {
            var self = this;
            if (!self.enabled) {
                return { isValid: true, errormssgs:[]}; // do not validate if disabled
            }
            var p= self.getParameterValue();
            if (p===null) { return { isValid: true, errormssgs:[]}; }
            var errorDetected = false;
            var errorMessages = [];
            if(p instanceof Array) {
            } else { p = [p]; }
            for(var i=0; i<p.length; i++) {
                var errorDetectedHere = false;
                if (p[i]===null) { continue; }
                pVal = p[i].trim();
                // if it is a required field and not empty, keep the required icon around but we have an error (only for the first element)
                if (pVal==='' && self.required && i===0) {
                    self.rowInfo[i].$row.removeClass("kb-method-parameter-row-error");
                    self.rowInfo[i].$feedback.removeClass().addClass('kb-method-parameter-required-glyph glyphicon glyphicon-arrow-left').prop("title","required field");
                    self.rowInfo[i].$feedback.show();
                    self.rowInfo[i].$error.hide();
                    errorDetectedHere = true;
                    errorMessages.push("required field "+self.spec.ui_name+" missing.");
                } else {
                    if(self.spec.text_options) {
                        if (self.spec.text_options.validate_as) {
                            var fieldtype = self.spec.text_options.validate_as;
                            // int | float | nonnumeric | nospaces | none
                            if ("int" === fieldtype.toLowerCase()) {
                                if (pVal!=='') {
                                    var n = ~~Number(pVal);
                                    if(String(n) !== pVal) {
                                        self.rowInfo[i].$row.addClass("kb-method-parameter-row-error");
                                        self.rowInfo[i].$error.html("value must be an integer");
                                        self.rowInfo[i].$error.show();
                                        self.rowInfo[i].$feedback.removeClass();
                                        errorDetectedHere = true;
                                        errorMessages.push("value must be an integer in field "+self.spec.ui_name);
                                    }
                                }
                            } else if ("float" === fieldtype.toLowerCase()) {
                                if(isNaN(pVal)) {
                                    self.rowInfo[i].$row.addClass("kb-method-parameter-row-error");
                                    self.rowInfo[i].$error.html("value must be numeric");
                                    self.rowInfo[i].$error.show();
                                    self.rowInfo[i].$feedback.removeClass();
                                    errorDetectedHere = true;
                                    errorMessages.push("value must be a number in field "+self.spec.ui_name);
                                }
                            }
                        }
                        if (self.spec.text_options.valid_ws_types) {
                            if(self.spec.text_options.valid_ws_types.length>0) {
                                if (/\s/.test(pVal)) {
                                    if (self.rowInfo[i]) {
                                        self.rowInfo[i].$row.addClass("kb-method-parameter-row-error");
                                        self.rowInfo[i].$error.html("spaces are not allowed in data object names");
                                        self.rowInfo[i].$error.show();
                                        self.rowInfo[i].$feedback.removeClass();
                                    }
                                    errorDetectedHere = true;
                                    errorMessages.push("spaces are not allowed in data object names, in field "+self.spec.ui_name);
                                } else if (/^\d+$/.test(pVal)) {
                                    if (self.rowInfo[i]) {
                                        self.rowInfo[i].$row.addClass("kb-method-parameter-row-error");
                                        self.rowInfo[i].$error.html("data object names cannot be a number");
                                        self.rowInfo[i].$error.show();
                                        self.rowInfo[i].$feedback.removeClass();
                                    }
                                    errorDetectedHere = true;
                                    errorMessages.push("data object names cannot be a number, in field "+self.spec.ui_name);
                                } else if (!/^[a-z0-9|\.|\||_\-]*$/i.test(pVal)) {
                                    if (self.rowInfo[i]) {
                                        self.rowInfo[i].$row.addClass("kb-method-parameter-row-error");
                                        self.rowInfo[i].$error.html("object names can only include symbols: _ - . |");
                                        self.rowInfo[i].$error.show();
                                        self.rowInfo[i].$feedback.removeClass();
                                    }
                                    errorDetectedHere = true;
                                    errorMessages.push("object names can only include symbols: '_','-','.','|', in field "+self.spec.ui_name);
                                }
                            }
                        }
                    }
                }
                
                // no error, so we hide the error if any, and show the "accepted" icon if it is not empty
                if (!errorDetectedHere || !self.enabled) {
                    if (self.rowInfo[i]) {
                        self.rowInfo[i].$row.removeClass("kb-method-parameter-row-error");
                        self.rowInfo[i].$error.hide();
                        self.rowInfo[i].$feedback.removeClass();
                        if (pVal!=='') {
                            self.rowInfo[i].$feedback.removeClass().addClass('kb-method-parameter-accepted-glyph glyphicon glyphicon-ok');
                        }
                    }
                } else {
                    if (pVal==='' && self.required && i===0) {
                        //code
                    } else {
                        self.rowInfo[i].$feedback.removeClass().addClass('kb-method-parameter-required-glyph glyphicon glyphicon-arrow-left');
                    }
                }
                if (errorDetectedHere) { errorDetected = true; }
            }
            return { isValid: !errorDetected, errormssgs:errorMessages};
        },
        
        /*
         * Necessary for Apps to disable editing parameters that are automatically filled
         * from a previous step.  Returns nothing.
         */
        disableParameterEditing: function() {
            // disable the input
            this.enabled = false;
            for(var i=0; i<this.rowInfo.length; i++) {
                if(this.isUsingSelect2) {
                    this.rowInfo[i].$input.select2('disable',true);
                } else {
                    this.rowInfo[i].$input.prop('disabled',true);
                }
                // stylize the row div
                this.rowInfo[i].$feedback.removeClass();
                if (this.rowInfo[i].$removalButton) { this.rowInfo[i].$removalButton.hide(); }
            }
            this.$addRowController.hide();
        },
        
        /*
         * Allows those parameters to be renabled, which may be an option for advanced users.
         */
        enableParameterEditing: function() {
            // enable the input
            this.enabled = true;
            for(var i=0; i<this.rowInfo.length; i++) {
                if(this.isUsingSelect2) {
                    this.rowInfo[i].$input.select2('enable',true);
                } else {
                    this.rowInfo[i].$input.prop('disabled', false);
                }
                if (this.rowInfo[i].$removalButton) { this.rowInfo[i].$removalButton.show(); }
            }
            this.$addRowController.show();
            this.isValid();
        },
        
        
        lockInputs: function() {
            if (this.enabled) {
                for(var i=0; i<this.rowInfo.length; i++) {
                    if(this.isUsingSelect2) {
                        this.rowInfo[i].$input.select2('disable',true);
                    } else {
                        this.rowInfo[i].$input.prop('disabled',true);
                    }
                }
            }
            for(var i=0; i<this.rowInfo.length; i++) {
                this.rowInfo[i].$feedback.removeClass();
                if (this.rowInfo[i].$removalButton) { this.rowInfo[i].$removalButton.hide(); }
            }
            this.$addRowController.hide();
        },
        unlockInputs: function() {
            if (this.enabled) {
                for(var i=0; i<this.rowInfo.length; i++) {
                    if(this.isUsingSelect2) {
                       this.rowInfo[i].$input.select2('enable',true);
                    } else {
                        this.rowInfo[i].$input.prop('disabled', false);
                    }
                    if (this.rowInfo[i].$removalButton) { this.rowInfo[i].$removalButton.show(); }
                }
            }
            this.$addRowController.show();
            this.isValid();
        },
        
        
        
        addInputListener: function(onChangeFunc) {
            if(this.isUsingSelect2) {
                this.$elem.find("#"+this.spec.id).on("change",onChangeFunc);
            } else {
                this.$elem.find("#"+this.spec.id).on("input",onChangeFunc);
            }
        },
        
        /*
         * An App (or a narrative that needs to auto populate certain fields) needs to set
         * specific parameter values based on the App spec, so we need a way to do this.
         */
        setParameterValue: function(value) {
            if (value===null) { return; }
            if(value instanceof Array) {
            } else { value = [value]; }
            
            for(var i=0; i<value.length; i++) {
                var v = value[i].trim();
                if (i<this.rowInfo.length) {
                    if(v) { this.setSpecificRowValue(i,v) };
                } else {
                    this.addRow();
                    if(v) { this.setSpecificRowValue(i,value[i]) };
                }
            }
            this.isValid();
        },
        
        setSpecificRowValue: function(i,value) {
            if(this.isUsingSelect2) {
                if (this.enabled) {
                    this.rowInfo[i].$input.select2("data",{id:value, text:value});
                } else {
                    this.rowInfo[i].$input.select2('disable',false);
                    this.rowInfo[i].$input.select2("data",{id:value, text:value});
                    this.rowInfo[i].$input.select2('disable',true);
                }
            } else {
                this.rowInfo[i].$input.val(value);
            }
            
        },
        
        /*
         * We need to be able to retrieve any parameter value from this method.  Valid parameter
         * values may be strings, numbers, objects, or lists, but must match what is declared
         * in the method spec.
         */
        getParameterValue: function() {
            // if this is an output, and there's only one row, and it's optional,
            // but it's not filled out, then we need a random name.
            if (this.spec.text_options && 
                this.spec.text_options.is_output_name === 1 && 
                this.rowInfo.length === 1 &&
                this.rowInfo[0].$input.val().length === 0 &&
                this.spec.optional === 1) {
//                this.setParameterValue(this.generateRandomOutputString());
            }
            
            // if this is optional, and not filled out, then we return null
            if (this.spec.optional === 1) {
                if (this.rowInfo.length===1) {
                    if (this.rowInfo[0].$input.val().trim().length===0) {
                        return null; // return null since this is optional an no values are set
                    }
                    if (this.allow_multiple) {
                        return [this.rowInfo[0].$input.val()];
                    }
                    return this.rowInfo[0].$input.val();
                }
                var value = [];
                for(var i=0; i<this.rowInfo.length; i++) {
                    if (this.rowInfo[0].$input.val().trim().length>0) {
                        value.push(this.rowInfo[i].$input.val()); // only push the value if it is not empty
                    }
                }
                if (value.length===0) { return null; } // return null since this is optional and nothing was set
                return value;
            }

            if (this.rowInfo.length===1) {
                if (this.allow_multiple) {
                    return [this.rowInfo[0].$input.val()];
                }
                return this.rowInfo[0].$input.val();
            }
            var value = [];
            for(var i=0; i<this.rowInfo.length; i++) {
                value.push(this.rowInfo[i].$input.val());
            }
            return value;
        },
        
        // edited from: http://stackoverflow.com/questions/3177836/how-to-format-time-since-xxx-e-g-4-minutes-ago-similar-to-stack-exchange-site
        getTimeStampStr: function (objInfoTimeStamp) {
            var date = new Date(objInfoTimeStamp);
            var seconds = Math.floor((new Date() - date) / 1000);
            
            // f-ing safari, need to add extra ':' delimiter to parse the timestamp
            if (isNaN(seconds)) {
                var tokens = objInfoTimeStamp.split('+');  // this is just the date without the GMT offset
                var newTimestamp = tokens[0] + '+'+tokens[0].substr(0,2) + ":" + tokens[1].substr(2,2);
                date = new Date(newTimestamp);
                seconds = Math.floor((new Date() - date) / 1000);
                if (isNaN(seconds)) {
                    // just in case that didn't work either, then parse without the timezone offset, but
                    // then just show the day and forget the fancy stuff...
                    date = new Date(tokens[0]);
                    return this.monthLookup[date.getMonth()]+" "+date.getDate()+", "+date.getFullYear();
                }
            }
            var interval = Math.floor(seconds / 31536000);
            if (interval > 1) {
                return self.monthLookup[date.getMonth()]+" "+date.getDate()+", "+date.getFullYear();
            }
            interval = Math.floor(seconds / 2592000);
            if (interval > 1) {
                if (interval<4) {
                    return interval + " months";
                } else {
                    return this.monthLookup[date.getMonth()]+" "+date.getDate()+", "+date.getFullYear();
                }
            }
            interval = Math.floor(seconds / 86400);
            if (interval > 1) {
                return interval + " days ago";
            }
            interval = Math.floor(seconds / 3600);
            if (interval > 1) {
                return interval + " hours ago";
            }
            interval = Math.floor(seconds / 60);
            if (interval > 1) {
                return interval + " minutes ago";
            }
            return Math.floor(seconds) + " seconds ago";
        },
        
        monthLookup : ["Jan", "Feb", "Mar","Apr", "May", "Jun", "Jul", "Aug", "Sep","Oct", "Nov", "Dec"],
        
        // make a randomized string, assuming it's for an output.
        generateRandomOutputString: function(generProps) {
            var strArr = [];
            var symbols = 8
            if (generProps['symbols'])
                symbols = generProps['symbols'];
            for (var i=0; i<symbols; i++)
                strArr.push(String.fromCharCode(65 + Math.floor(Math.random() * 26)));
            var ret = strArr.join('');
            if (generProps['prefix'])
                ret = generProps['prefix'] + ret;
            if (generProps['suffix'])
                ret = ret + str(generProps['suffix']);
            return ret;
        },

        prepareValueBeforeRun: function(methodSpec) {
            if (this.spec.text_options && 
                    this.spec.text_options.is_output_name === 1 && 
                    this.rowInfo.length === 1 &&
                    this.rowInfo[0].$input.val().length === 0 &&
                    this.spec.optional === 1) {
            	//var e = new Error('dummy');
            	//var stack = e.stack.replace(/^[^\(]+?[\n$]/gm, '')
            	//	.replace(/^\s+at\s+/gm, '')
            	//	.replace(/^Object.<anonymous>\s*\(/gm, '{anonymous}()@')
            	//	.split('\n');
            	//console.log(stack);
            	var paramId = this.spec.id;
                var inputMapping = null;
                var isScript = false;
                var inputMapping = methodSpec['behavior']['kb_service_input_mapping'];
                if (!inputMapping) {
                    inputMapping = methodSpec['behavior']['script_input_mapping'];
                    isScript = true;
                }
                var generatedValueMapping = null;
                for (var i in inputMapping) {
                	mapping = inputMapping[i];
                    var aParamId = mapping['input_parameter'];
                    if (aParamId && aParamId === paramId && mapping['generated_value']) {
                    	generatedValueMapping = mapping['generated_value'];
                    	break;
                    }
                }
                if (generatedValueMapping) {
                	this.setParameterValue(this.generateRandomOutputString(generatedValueMapping));
                }
            }
        },

        genUUID: function() {
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
                var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);
                return v.toString(16);
            });
        },
    });
    

})( jQuery );
/**
 * @author Bill Riehl <wjriehl@lbl.gov>
 * @public
 */

(function( $, undefined ) {
    $.KBWidget({
        name: "kbaseNarrativeParameterDropdownInput",
        parent: "kbaseNarrativeParameterInput",
        version: "1.0.0",
        options: {
            loadingImage: "../images/ajax-loader.gif",
            parsedParameterSpec: null,
            isInSidePanel: false
        },
        IGNORE_VERSION: true,

        // properties inherited from kbaseNarrativeParameterInput
        // $mainPanel:null,
        // spec:null,
        
        enabled: true,
        required: true,
        rowDivs: null,
        
        render: function() {
            var self = this;
            //console.log(this.spec);
            var spec = self.spec;
            
            // check if we need to allow multiple values
            var allow_multiple = false;
            if (spec.allow_multiple) {
                if (spec.allow_multiple===true || spec.allow_multiple===1) {
                    allow_multiple = true;
                }
            }
            
            self.rowDivs = [];
            if (!allow_multiple) {
                // just one field, phew, this one should be easy    
                var d = spec.default_values;
                self.required= true;
                if (spec.optional===1) {
                    self.required = false;
                }
                
                var defaultValue = (d[0] !== "" && d[0] !== undefined) ? d[0] : "";
                var form_id = spec.id;
                var $dropdown= $('<select id="'+form_id+'">').css({width:"100%"})
                                .on("change",function() { self.isValid() });
                
                if (d && d.length>0 && d[0]==="" && !self.required) {
                    // we assume that if there is a single value set as empty, and this is optional, we allow an
                    // empty selection which ends up getting omitted from the params on the backend
                    // annoying select two removes my option if it is left blank!! must disguise it!
                    $dropdown.append($('<option value="">').append('-'));
                }
                
                
                var foundOptions = false;
                /* HOW IT SHOULD BE!!! */
                  if(spec.dropdown_options) {
                    if (spec.dropdown_options.options) {
                        for (var k=0; k<spec.dropdown_options.options.length; k++) {
                            var opt = spec.dropdown_options.options[k];
                            if (opt.id && opt.ui_name) {
                                $dropdown.append($('<option value="'+opt.id+'">').append(opt.ui_name));
                                foundOptions = true;
                            } else if (opt.value && opt.display) {  // id was misnamed, should have been value
                                $dropdown.append($('<option value="'+opt.value+'">').append(opt.display));
                                foundOptions = true;
                            }
                        }
                    }
                }
                if(spec.dropdown_options) {
                    if (spec.dropdown_options.ids_to_options) {
                        $dropdown.empty();
                        for (var optId in spec.dropdown_options.ids_to_options) {
                            if(spec.dropdown_options.ids_to_options.hasOwnProperty(optId)){
                                var opt = spec.dropdown_options.ids_to_options[optId];
                                $dropdown.append($('<option value="'+optId+'">').append(opt));
                                foundOptions = true;
                            }
                        }
                    }
                }
                
                if (!foundOptions) {
                    $dropdown.append($('<option value="">').append("no options found in method spec"));
                }
                
                var $feedbackTip = $("<span>").removeClass();
                if (self.required) {
                    $feedbackTip.addClass('kb-method-parameter-required-glyph glyphicon glyphicon-arrow-left').prop("title","required field");
                }
                
                // set the widths of the columns
                var nameColClass  = "col-md-2";
                var inputColClass = "col-md-5";
                var hintColClass  = "col-md-5";
                if (self.options.isInSidePanel) {
                	nameColClass  = "col-md-12";
                    inputColClass = "col-md-12";
                    hintColClass  = "col-md-12";
                }
                
                var $row = $('<div>').addClass("row kb-method-parameter-row")
                                .hover(function(){$(this).toggleClass('kb-method-parameter-row-hover');});
                var $nameCol = $('<div>').addClass(nameColClass).addClass("kb-method-parameter-name")
                                    .append(spec.ui_name);
                if (self.options.isInSidePanel)
                	$nameCol.css({'text-align': 'left', 'padding-left': '10px'});
                var $inputCol = $('<div>').addClass(inputColClass).addClass("kb-method-parameter-input")
                                .append($('<div>').css({"width":"100%","display":"inline-block"}).append($dropdown))
                                .append($('<div>').css({"display":"inline-block"}).append($feedbackTip));
                var $hintCol  = $('<div>').addClass(hintColClass).addClass("kb-method-parameter-hint")
                                .append(spec.short_hint);
                if (spec.description && spec.short_hint !== spec.description) {
                    $hintCol.append($('<span>').addClass('fa fa-info kb-method-parameter-info')
                                    .tooltip({title:spec.description, html:true}));
                }
                $row.append($nameCol).append($inputCol).append($hintCol);
                
                var $errorPanel = $('<div>').addClass("kb-method-parameter-error-mssg").hide();
                var $errorRow = $('<div>').addClass('row')
                                    .append($('<div>').addClass(nameColClass))
                                    .append($errorPanel.addClass(inputColClass));
                
                self.$mainPanel.append($row);
                self.$mainPanel.append($errorRow);
                self.rowDivs.push({$row:$row, $error:$errorPanel, $feedback:$feedbackTip});
                
                /* for some reason, we need to actually have the input added to the main panel before this will work */
                this.setupSelect2($dropdown,"",defaultValue);
                
                // for dropdowns, we always validate (because it adds the green check feedback)
                this.isValid();
                
            } else {
                // need to handle multiple fields- do something better!
                self.$mainPanel.append("<div>multiple dropdown fields not yet supported</div>");
            }
        },
        
        
        refresh: function() {
            // we don't allow types to be displayed, so we don't have to refresh
        },

        
        /* private method - note: if placeholder is empty, then users cannot cancel a selection*/
        setupSelect2: function ($input, placeholder, defaultValue) {
            var self = this;
            var noMatchesFoundStr = "No matching data found.";
            if (self.isOutputName) {
                noMatchesFoundStr = "Enter a name for the output data object.";
            }
            $input.select2({
                minimumResultsForSearch: -1,
                selectOnBlur: true,
                //placeholder:placeholder,
                //allowClear: true,
                formatSelection: function(object, container) {
                    var display = '<span class="kb-parameter-data-selection">'+object.text+'</span>';
                    return display;
                },
                //formatResult: function(object, container, query) {
                //    var display = "<b>"+object.text+"</b>";
                //    return display;
                //}
            });
            
            if (defaultValue) {
                $input.select2("val",defaultValue);
            }
        },
        
        /*
         * This is called when this method is run to allow you to check if the parameters
         * that the user has entered is correct.  You need to return an object that indicates
         * if the input is valid, or if not, if there are any error messages.  When this is
         * called, you should visually indicate which parameters are invalid by marking them
         * red (see kbaseNarrativeMethodInput for default styles).
         */
        isValid: function() {
            var self = this;
            if (!self.enabled) {
                return { isValid: true, errormssgs:[]}; // do not validate if disabled
            }
            var p= self.getParameterValue();
            var errorDetected = false;
            var errorMessages = [];
            if(p instanceof Array) {
                // todo: handle this case when there are multiple fields
            } else {
                if (p) {
                    p = p.trim();
                    // if it is a required selection and is empty, keep the required icon around but we have an error
                    if (p==='' && self.required) {
                        self.rowDivs[0].$row.removeClass("kb-method-parameter-row-error");
                        self.rowDivs[0].$feedback.removeClass().addClass('kb-method-parameter-required-glyph glyphicon glyphicon-arrow-left').prop("title","required field");
                        self.rowDivs[0].$feedback.show();
                        self.rowDivs[0].$error.hide();
                        errorDetected = true;
                        errorMessages.push("required field "+self.spec.ui_name+" missing.");
                    }
                    
                    // no error, so we hide the error if any, and show the "accepted" icon if it is not empty
                    if (!errorDetected) {
                        if (self.rowDivs[0]) {
                            self.rowDivs[0].$row.removeClass("kb-method-parameter-row-error");
                            self.rowDivs[0].$error.hide();
                            self.rowDivs[0].$feedback.removeClass();
                            if (p!=='') {
                                self.rowDivs[0].$feedback.removeClass().addClass('kb-method-parameter-accepted-glyph glyphicon glyphicon-ok');
                            }
                        }
                    }
                } else {
                    // something went wrong...  possibly no options set in the spec?
                }
            }
            return { isValid: !errorDetected, errormssgs:errorMessages};
        },
        
        /*
         * Necessary for Apps to disable editing parameters that are automatically filled
         * from a previous step.  Returns nothing.
         */
        disableParameterEditing: function() {
            // disable the input
            this.enabled = false;
            this.$elem.find("#"+this.spec.id).select2('disable',true);
            // stylize the row div
            if (this.rowDivs) {
                this.rowDivs[0].$feedback.removeClass();
            }
        },
        
        /*
         * Allows those parameters to be renabled, which may be an option for advanced users.
         */
        enableParameterEditing: function() {
            // enable the input
            this.enabled = true;
            this.$elem.find("#"+this.spec.id).select2('enable',true);
            this.isValid();
        },
        
        
        lockInputs: function() {
            if (this.enabled) {
                this.$elem.find("#"+this.spec.id).select2('disable',true);
            }
            // stylize the row div
            if (this.rowDivs) {
                this.rowDivs[0].$feedback.removeClass();
            }
        },
        unlockInputs: function() {
            if (this.enabled) {
                this.$elem.find("#"+this.spec.id).select2('enable',true);
            }
            this.isValid();
        },
        
        
        
        addInputListener: function(onChangeFunc) {
            this.$elem.find("#"+this.spec.id).on("change",onChangeFunc);
        },
        
        /*
         * An App (or a narrative that needs to auto populate certain fields) needs to set
         * specific parameter values based on the App spec, so we need a way to do this.
         */
        setParameterValue: function(value) {
            // todo: handle case where this is a multiple, we need to check if value array matches number of elements,
            // and if not we must do something special   ...
            if (this.enabled) {
                this.$elem.find("#"+this.spec.id).select2("val",value);
            } else {
                this.$elem.find("#"+this.spec.id).select2('disable',false);
                this.$elem.find("#"+this.spec.id).select2("val",value);
                this.$elem.find("#"+this.spec.id).select2('disable',true);
            }
            this.isValid();
        },
        
        /*
         * We need to be able to retrieve any parameter value from this method.  Valid parameter
         * values may be strings, numbers, objects, or lists, but must match what is declared
         * in the method spec.
         */
        getParameterValue: function() {
            var value = this.$elem.find("#"+this.spec.id).val();
            if (value==="") {
                return null;
            }
            return value;
        }
        
    });

})( jQuery );
/**
 * @author Bill Riehl <wjriehl@lbl.gov>
 * @public
 */

(function( $, undefined ) {
    $.KBWidget({
        name: "kbaseNarrativeParameterCheckboxInput",
        parent: "kbaseNarrativeParameterInput",
        version: "1.0.0",
        options: {
            loadingImage: "../images/ajax-loader.gif",
            parsedParameterSpec: null,
            isInSidePanel: false
        },
        IGNORE_VERSION: true,

        // properties inherited from kbaseNarrativeParameterInput
        // $mainPanel:null,
        // spec:null,
        
        enabled: true,
        required: true,
        rowDivs: null,
        
        checkedValue: 1,
        uncheckedValue: 0,
        
        render: function() {
            var self = this;
            var spec = self.spec;
            // check if we need to allow multiple values
            var allow_multiple = false;
            if (spec.allow_multiple) {
                if (spec.allow_multiple===true || spec.allow_multiple===1) {
                    allow_multiple = true;
                }
            }
            
            self.rowDivs = [];
            if (!allow_multiple) {
                // just one field, phew, this one should be easy    
                var d = spec.default_values;
                
                // check if this is a required field
                self.required= true;
                if (spec.optional) {
                    self.required=false;
                }
                
                var defaultValue = (d[0] !== "" && d[0] !== undefined) ? d[0] : "";
                var form_id = spec.id;
                var $checkboxContainer = $('<div>').addClass('checkbox').css({width:"100%"});
                var $checkbox= $('<input id="'+form_id+'" type="checkbox">')
                                .on("change",function() { self.isValid() });
                    $checkboxContainer.append($('<label>').addClass('kb-method-parameter-name').append($checkbox).append(spec.ui_name));
                
                if(spec.checkbox_options) {
                    if (spec.checkbox_options.checked_value) {
                        self.checkedValue = spec.checkbox_options.checked_value;
                    }
                    if (spec.checkbox_options.unchecked_value) {
                        self.uncheckedValue = spec.checkbox_options.unchecked_value;
                    }
                }
                
                var $feedbackTip = $("<span>").removeClass();
                if (self.required) {
                    // never add required on startup because checkboxes are always checked or not and are good
                    $feedbackTip.addClass('kb-method-parameter-required-glyph glyphicon glyphicon-arrow-left').prop("title","required field");
                }
                
                // set the widths of the columns
                var nameColClass  = "col-md-2";
                var inputColClass = "col-md-5";
                var hintColClass  = "col-md-5";
                if (self.options.isInSidePanel) {
                	nameColClass  = "col-md-12";
                    inputColClass = "col-md-12";
                    hintColClass  = "col-md-12";
                }
                
                var $row = $('<div>').addClass("row kb-method-parameter-row")
                                .hover(function(){$(this).toggleClass('kb-method-parameter-row-hover');});
                var $nameCol = $('<div>').addClass(nameColClass).addClass("kb-method-parameter-name");
                if (self.options.isInSidePanel)
                	$nameCol.css({'text-align': 'left', 'padding-left': '10px'});
                var $inputCol = $('<div>').addClass(inputColClass).addClass("kb-method-parameter-input")
                                .append($('<div>').css({"width":"100%","display":"inline-block"}).append($checkboxContainer))
                                .append($('<div>').css({"display":"inline-block"}).append($feedbackTip));
                var $hintCol  = $('<div>').addClass(hintColClass).addClass("kb-method-parameter-hint")
                                .append(spec.short_hint);
                if (spec.description && spec.short_hint !== spec.description) {
                    $hintCol.append($('<span>').addClass('fa fa-info kb-method-parameter-info')
                                    .tooltip({title:spec.description, html:true}));
                }
                                
                $row.append($nameCol).append($inputCol).append($hintCol);
                
                var $errorPanel = $('<div>').addClass("kb-method-parameter-error-mssg").hide();
                var $errorRow = $('<div>').addClass('row')
                                    .append($('<div>').addClass(nameColClass))
                                    .append($errorPanel.addClass(inputColClass));
                
                self.$mainPanel.append($row);
                self.$mainPanel.append($errorRow);
                self.rowDivs.push({$row:$row, $error:$errorPanel, $feedback:$feedbackTip});
                if (defaultValue) {
                    self.setParameterValue(defaultValue);
                }
                
            } else {
                // need to handle multiple fields- do something better!
                self.$mainPanel.append("<div>multiple dropdown fields not yet supported</div>");
            }
        },
        
        
        refresh: function() {
            // checkboxes don't need to refresh
        },

        /*
         * This is called when this method is run to allow you to check if the parameters
         * that the user has entered is correct.  You need to return an object that indicates
         * if the input is valid, or if not, if there are any error messages.  When this is
         * called, you should visually indicate which parameters are invalid by marking them
         * red (see kbaseNarrativeMethodInput for default styles).
         */
        isValid: function() {
            var self = this;
            if (!self.enabled) {
                return { isValid: true, errormssgs:[]}; // do not validate if disabled
            }
            var p= self.getParameterValue();
            if(p instanceof Array) {
                // todo: handle this case when there are multiple fields
            } else {
                // but we should still provide the feedback indicate
                if (self.enabled) {
                    if (self.rowDivs[0]) {
                        self.rowDivs[0].$feedback.removeClass();
                        self.rowDivs[0].$feedback.removeClass().addClass('kb-method-parameter-accepted-glyph glyphicon glyphicon-ok');
                    }
                }
            }
            // checkboxes are always valid!
            return { isValid: true, errormssgs:[]};
        },
        
        /*
         * Necessary for Apps to disable editing parameters that are automatically filled
         * from a previous step.  Returns nothing.
         */
        disableParameterEditing: function() {
            // disable the input
            this.enabled = false;
            this.$elem.find("#"+this.spec.id).prop('disabled',true);
            // stylize the row div
            if (this.rowDivs) {
                this.rowDivs[0].$feedback.removeClass();
            }
        },
        
        /*
         * Allows those parameters to be renabled, which may be an option for advanced users.
         */
        enableParameterEditing: function() {
            // enable the input
            this.enabled = true;
            this.$elem.find("#"+this.spec.id).prop('disabled',false);
            this.isValid();
        },
        
        
        lockInputs: function() {
            if (this.enabled) {
                this.$elem.find("#"+this.spec.id).prop('disabled',true);
            }
            // stylize the row div
            if (this.rowDivs) {
                this.rowDivs[0].$feedback.removeClass();
            }
        },
        unlockInputs: function() {
            if (this.enabled) {
            this.$elem.find("#"+this.spec.id).prop('disabled',false);
            }
            this.isValid();
        },
        
        
        
        addInputListener: function(onChangeFunc) {
            this.$elem.find("#"+this.spec.id).on("change",onChangeFunc);
        },
        
        /*
         * An App (or a narrative that needs to auto populate certain fields) needs to set
         * specific parameter values based on the App spec, so we need a way to do this.
         */
        setParameterValue: function(value) {
            // todo: handle case where this is a multiple, we need to check if value array matches number of elements,
            // and if not we must do something special   ...
            if(value == this.checkedValue) {
                this.$elem.find("#"+this.spec.id).prop('checked', true);
            } else if (value == this.uncheckedValue) {
                this.$elem.find("#"+this.spec.id).prop('checked', false);
            } else if(value === true) {
                this.$elem.find("#"+this.spec.id).prop('checked', true);
            } else if(value === false) {
                this.$elem.find("#"+this.spec.id).prop('checked', false);
            } else if(value === "checked") {
                this.$elem.find("#"+this.spec.id).prop('checked', true);
            } else if(value === "unchecked") {
                this.$elem.find("#"+this.spec.id).prop('checked', false);
            }
            
            this.isValid();
        },
        
        /*
         * We need to be able to retrieve any parameter value from this method.  Valid parameter
         * values may be strings, numbers, objects, or lists, but must match what is declared
         * in the method spec.
         */
        getParameterValue: function() {
            // handle case with multiple fields
            if(this.$elem.find("#"+this.spec.id).prop('checked')) {
                return this.checkedValue;
            } else {
                return this.uncheckedValue;
            }
            return "";
        }
        
    });

})( jQuery );
/**
 * @author Bill Riehl <wjriehl@lbl.gov>
 * @public
 */

(function( $, undefined ) {
    $.KBWidget({
        name: "kbaseNarrativeParameterTextareaInput",
        parent: "kbaseNarrativeParameterInput",
        version: "1.0.0",
        options: {
            loadingImage: "../images/ajax-loader.gif",
            parsedParameterSpec: null,
            isInSidePanel: false
        },
        IGNORE_VERSION: true,

        // properties inherited from kbaseNarrativeParameterInput
        // $mainPanel:null,
        // spec:null,
        
        enabled: true,
        required: true,
        rowDivs: null,
        
        render: function() {
            var self = this;
            var spec = self.spec;
            
            // check if we need to allow multiple values
            var allow_multiple = false;
            if (spec.allow_multiple) {
                if (spec.allow_multiple===true || spec.allow_multiple===1) {
                    allow_multiple = true;
                }
            }
            
            self.rowDivs = [];
            if (!allow_multiple) {
                // just one field, phew, this one should be easy    
                var d = spec.default_values;
                
                // check if this is a required field
                self.required= true;
                if (spec.optional) {
                    self.required=false;
                }
                
                var defaultValue = (d[0] !== "" && d[0] !== undefined) ? d[0] : "";
                var form_id = spec.id;
                
                var rows = 3;
                if(spec.textarea_options) {
                    if (spec.textarea_options.n_rows) {
                        rows = spec.textarea_options.n_rows;
                    }
                }
                var $textArea= $('<textarea id="'+form_id+'" rows="'+ rows +'">').addClass("form-control")
                                .css({width:"100%",resize:"vertical"})
                                .append(defaultValue)
                                .on("input",function() { self.isValid() });
                
                var $feedbackTip = $("<span>").removeClass();
                if (self.required) {
                    $feedbackTip.addClass('kb-method-parameter-required-glyph glyphicon glyphicon-arrow-left').prop("title","required field");
                }
                
                // set the widths of the columns
                var nameColClass  = "col-md-2";
                var inputColClass = "col-md-5";
                var hintColClass  = "col-md-5";
                if (self.options.isInSidePanel) {
                    nameColClass  = "col-md-12";
                    inputColClass = "col-md-12";
                    hintColClass  = "col-md-12";
                }
                
                var $row = $('<div>').addClass("row kb-method-parameter-row")
                                .hover(function(){$(this).toggleClass('kb-method-parameter-row-hover');});
                var $nameCol = $('<div>').addClass(nameColClass).addClass("kb-method-parameter-name")
                                    .append(spec.ui_name);
                if (self.options.isInSidePanel)
                	$nameCol.css({'text-align': 'left', 'padding-left': '10px'});
                var $inputCol = $('<div>').addClass(inputColClass).addClass("kb-method-parameter-input")
                                .append($('<div>').css({"width":"100%","display":"inline-block"}).append($textArea))
                                .append($('<div>').css({"display":"inline-block"}).append($feedbackTip));
                var $hintCol  = $('<div>').addClass(hintColClass).addClass("kb-method-parameter-hint")
                                .append(spec.short_hint);
		if (spec.description && spec.short_hint !== spec.description) {
		    $hintCol.append($('<span>').addClass('fa fa-info kb-method-parameter-info')
					.tooltip({title:spec.description, html:true}));
		}
                $row.append($nameCol).append($inputCol).append($hintCol);
                
                var $errorPanel = $('<div>').addClass("kb-method-parameter-error-mssg").hide();
                var $errorRow = $('<div>').addClass('row')
                                    .append($('<div>').addClass(nameColClass))
                                    .append($errorPanel.addClass(inputColClass));
                
                self.$mainPanel.append($row);
                self.$mainPanel.append($errorRow);
                self.rowDivs.push({$row:$row, $error:$errorPanel, $feedback:$feedbackTip});
                
                this.isValid();
                
            } else {
                // need to handle multiple fields- do something better!
                self.$mainPanel.append("<div>multiple dropdown fields not yet supported</div>");
            }
        },
        
        
        refresh: function() {
            // we don't allow types in textareas, so we don't have to refresh
        },

        
        
        
        /*
         * This is called when this method is run to allow you to check if the parameters
         * that the user has entered is correct.  You need to return an object that indicates
         * if the input is valid, or if not, if there are any error messages.  When this is
         * called, you should visually indicate which parameters are invalid by marking them
         * red (see kbaseNarrativeMethodInput for default styles).
         */
        isValid: function() {
            var self = this;
            if (!self.enabled) {
                return { isValid: true, errormssgs:[]}; // do not validate if disabled
            }
            var p= self.getParameterValue();
	    if (p===null) { return { isValid: true, errormssgs:[]}; }
            var errorDetected = false;
            var errorMessages = [];
            if(p instanceof Array) {
                // todo: handle this case when there are multiple fields
            } else {
                p = p.trim();
                // if it is a required selection and is empty, keep the required icon around but we have an error
                if (p==='' && self.required) {
                    self.rowDivs[0].$row.removeClass("kb-method-parameter-row-error");
                    self.rowDivs[0].$feedback.removeClass().addClass('kb-method-parameter-required-glyph glyphicon glyphicon-arrow-left').prop("title","required field");
                    self.rowDivs[0].$feedback.show();
                    self.rowDivs[0].$error.hide();
                    errorDetected = true;
                    errorMessages.push("required field "+self.spec.ui_name+" missing.");
                }
                
                // no error, so we hide the error if any, and show the "accepted" icon if it is not empty
                if (!errorDetected) {
                    if (self.rowDivs[0]) {
                        self.rowDivs[0].$row.removeClass("kb-method-parameter-row-error");
                        self.rowDivs[0].$error.hide();
                        self.rowDivs[0].$feedback.removeClass();
                        if (p!=='') {
                            self.rowDivs[0].$feedback.removeClass().addClass('kb-method-parameter-accepted-glyph glyphicon glyphicon-ok');
                        }
                    }
                }
            }
            return { isValid: !errorDetected, errormssgs:errorMessages};
        },
        
        /*
         * Necessary for Apps to disable editing parameters that are automatically filled
         * from a previous step.  Returns nothing.
         */
        disableParameterEditing: function() {
            // disable the input
            this.enabled = false;
            this.$elem.find("#"+this.spec.id).prop('disabled',true);
            // stylize the row div
            if (this.rowDivs) {
                this.rowDivs[0].$feedback.removeClass();
            }
        },
        
        /*
         * Allows those parameters to be renabled, which may be an option for advanced users.
         */
        enableParameterEditing: function() {
            // enable the input
            this.enabled = true;
            this.$elem.find("#"+this.spec.id).prop('disabled', false);
            this.isValid();
        },
        
        
        lockInputs: function() {
            if (this.enabled) {
                this.$elem.find("#"+this.spec.id).prop('disabled',true);
            }
            // stylize the row div
            if (this.rowDivs) {
                this.rowDivs[0].$feedback.removeClass();
            }
        },

        unlockInputs: function() {
            if (this.enabled) {
                this.$elem.find("#"+this.spec.id).prop('disabled',false);
            }
            this.isValid();
        },
        
        addInputListener: function(onChangeFunc) {
            this.$elem.find("#"+this.spec.id).on("input",onChangeFunc);
        },
        
        /*
         * An App (or a narrative that needs to auto populate certain fields) needs to set
         * specific parameter values based on the App spec, so we need a way to do this.
         */
        setParameterValue: function(value) {
            // todo: handle case where this is a multiple, we need to check if value array matches number of elements,
            // and if not we must do something special   ...
            this.$elem.find("#"+this.spec.id).val(value);
            this.isValid();
        },
        
        /*
         * We need to be able to retrieve any parameter value from this method.  Valid parameter
         * values may be strings, numbers, objects, or lists, but must match what is declared
         * in the method spec.
         */
        getParameterValue: function() {
            var value = this.$elem.find("#"+this.spec.id).val();
	    if (this.spec.optional === 1) {
		if (value.trim().length===0) {
		    return null;
		}
	    }
            return value;
        }
        
    });

})( jQuery );
/**
 * KBase widget to upload file content into shock node.
 */
(function($, undefined) {
    $.KBWidget({
        name: 'kbaseNarrativeParameterFileInput',
        parent: "kbaseNarrativeParameterInput",
        version: '1.0.0',
        options: {
        	isInSidePanel: false,
            shockUrl: window.kbconfig.urls.shock,
            ujsUrl: window.kbconfig.urls.user_and_job_state,
            fullShockSearchToResume: false,
            serviceNameInUJS: "ShockUploader",
            maxFileStatesInUJS: 100,
            maxFileStateTime: 7 * 24 * 3600000	// in milliseconds
        },
        wrongToken: false,
        token: null,
        shockNodeId: null,
        fileName: null,
        percentText: null,
        uploadIsReady: false,
        uploadWasStarted: false,
        enabled: true,
        locked: false,
        required: true,
        rowDivs: null,
        fakeButton: null,
        inSelectFileMode: true,
        cancelUpload: false,

        render: function() {
        	if (!this.token) {
        		this.wrongToken = true;
        		return;
        	}
            var self = this;
            var spec = self.spec;

            self.rowDivs = [];
            self.required = true;
            if (spec.optional) {
                self.required = false;
            }

        	var pref = this.uuid();
            //var div = this.$elem;
        	
            var tbl = $('<table style="border: 0px; margin: 0px; cellpadding: 0px; cellspacing: 0px; width: 100%;"/>');
            //div.append(tbl);
            var tr = $('<tr/>');
            var cellCss = { 'border' : 'none', 'vertical-align' : 'middle' };
            tr.css(cellCss);
            tbl.append(tr);
            			
            this.fileName = $('<input readonly>')
            	.addClass('form-control')
            	.css({'width' : '100%'})
            	.attr('type', 'text');
            var percentTextWidth = '50px';
            if (self.options.isInSidePanel)
                percentTextWidth = '100px';
            this.percentText = $('<input readonly>')
            	.addClass('form-control')
            	.css({'width' : percentTextWidth, 'padding': '0px', 'text-align': 'center'})
            	.attr('type', 'text');

            // create a file upload button and hide it and store it
            var realButton = document.createElement('input');
            realButton.setAttribute('type', 'file');
            realButton.setAttribute('style', 'display: none;');
            realButton.addEventListener('change', function() { 
            	var fileName = $(realButton).val();
            	if (fileName && fileName.length > 0)
            		self.fileSelected(self.fileName, self.percentText, realButton);
            });
            realButton.uploader = this;
            //this.fileBrowse = realButton;
            this.$elem.append(realButton);
            
            
            
            // create the visible upload button
            this.fakeButton = document.createElement('button');
            this.fakeButton.setAttribute('class', 'kb-primary-btn');
            this.selectFileMode(true);
            this.fakeButton.fb = realButton;
            this.fakeButton.addEventListener('click', function() {
            	if (self.locked || !self.enabled)
            		return;
            	if (self.inSelectFileMode) {
            		$(this.fb).val("");
            		this.fb.click();
            	} else {
            		self.cancelUpload = true;
                    self.selectFileMode(true);
                    self.uploadWasStarted = false;
            	}
            });
            $(this.fakeButton);
            var td2 = $('<td/>');
            td2.css(cellCss);
            tr.append(td2);
            td2.append(this.fakeButton);
	    
	    var td = $('<td/>');
            td.css(cellCss);
            td.css({'width' : '70%', 'padding' : '0px', 'margin':'2px'});
            tr.append(td);
            td.append(this.fileName);

            var td3 = $('<td/>');
            td3.css(cellCss);
            td3.css({'width' : percentTextWidth, 'padding' : '0px'});
            tr.append(td3);
            td3.append(this.percentText);
            
            var $feedbackTip = $("<span>").css({"vertical-align":"middle"}).removeClass();
            if (self.required) {
                $feedbackTip.addClass('kb-method-parameter-required-glyph glyphicon glyphicon-arrow-left').prop("title","required field");
            }

            var nameColClass  = "col-md-2";
            var inputColClass = "col-md-5";
            var hintColClass  = "col-md-5";
            if (self.options.isInSidePanel) {
            	nameColClass = "col-md-12";
                inputColClass = "col-md-12";
                hintColClass  = "col-md-12";
            }

            var $row = $('<div>').addClass("row kb-method-parameter-row")
            	.hover(function(){$(this).toggleClass('kb-method-parameter-row-hover');});
            var $nameCol = $('<div>').addClass(nameColClass).addClass("kb-method-parameter-name")
            	.append(spec.ui_name);
            if (self.options.isInSidePanel)
            	$nameCol.css({'text-align': 'left', 'padding-left': '10px'});
            var $inputCol = $('<div>').addClass(inputColClass).addClass("kb-method-parameter-input")
            	.append($('<div>').css({"width":"100%","display":"inline-block"}).append(tbl))
            	.append($('<div>').css({"display":"inline-block", "height": "34px", "vertical-align":"top"}).append($feedbackTip));
            var $hintCol = $('<div>').addClass(hintColClass).addClass("kb-method-parameter-hint")
            	.append(spec.short_hint);
	    if (spec.description && spec.short_hint !== spec.description) {
                $hintCol.append($('<span>').addClass('fa fa-info kb-method-parameter-info')
                                    .tooltip({title:spec.description, html:true}));
            }
            $row.append($nameCol).append($inputCol).append($hintCol);

            var $errorPanel = $('<div>').addClass("kb-method-parameter-error-mssg").hide();
            var $errorRow = $('<div>').addClass('row')
            	.append($('<div>').addClass(nameColClass))
            	.append($errorPanel.addClass(inputColClass));

            self.$mainPanel.append($row);
            self.$mainPanel.append($errorRow);
            self.rowDivs.push({$row:$row, $error:$errorPanel, $feedback:$feedbackTip});
            return this;
        },
        
        selectFileMode: function(inSelectFileMode) {
            this.inSelectFileMode = inSelectFileMode;
            this.fakeButton.innerHTML = inSelectFileMode ? "Select File" : "Cancel";
        },
        
        fileSelected: function (nameText, prcText, realButton) {
        	if (realButton.files.length != 1)
        		return;
            var self = this;
            var prevShockNodeId = self.shockNodeId;
            self.shockNodeId = null;
            self.uploadIsReady = false;
            self.uploadWasStarted = true;
    		self.isValid();
        	// get the selected file
        	var file = realButton.files[0];
        	self.fileName.val(file.name);
    		prcText.val("?..%");
            var curTime = new Date().getTime();
    		var ujsKey = "File:"+file.size+":"+file.lastModifiedDate.getTime()+":"+file.name+":"+self.getUser();
            var ujsClient = new UserAndJobState(self.options.ujsUrl, {'token': self.token});
        	var shockClient = new ShockClient({url: self.options.shockUrl, token: self.token});
            ujsClient.list_state(self.options.serviceNameInUJS, 0, function(data) {
            	if (data.length >= self.options.maxFileStatesInUJS) {
            		for (var keyPos in data) {
            			removeFileState(data[keyPos]);
            		}
            	}
    		}, function(error) {
    			console.log(error);
    		});
            ujsClient.get_has_state(self.options.serviceNameInUJS, ujsKey, 0, function(data) {
    			var value = data[1];
    			if (value != null)
    				value = value.split(" ")[0];
    			processAfterNodeCheck(value != null ? value : prevShockNodeId);
    		}, function(error) {
    			processAfterNodeCheck(prevShockNodeId);
    		});
    		
            function removeFileState(key) {
                ujsClient.get_state(self.options.serviceNameInUJS, key, 0, function(value) {
        			var parts = value.split(" ");
        			var nodeId = parts[0];
        			var nodeTime = parts.length < 2 ? 0 : parseInt(parts[1]);
        			var timeDif = curTime - nodeTime;
        			if (timeDif > self.options.maxFileStateTime) {
                    	shockClient.delete_node(nodeId, function(info) {
                			console.log("Shock node for file [" + key + "] was deleted: " + nodeId);                            		
                    	}, function(error) {
                    		console.log(error);
                    	});
                        ujsClient.remove_state(self.options.serviceNameInUJS, key, function(data) {
                			console.log("UJS file [" + key + "] state was removed");
                        }, function(error) {
                			console.log(error);
                		});
        			}
        		}, function(error) {
        			console.log(error);
        		});
            }
            
            function processAfterNodeCheck(storedShockNodeId) {
            	self.selectFileMode(false);
            	self.cancelUpload = false;
            	shockClient.upload_node(file, storedShockNodeId, self.options.fullShockSearchToResume, function(info) {
            		if (info.uploaded_size) {
            			var shockNodeWasntDefined = self.shockNodeId == null || self.shockNodeId !== info['node_id'];
            			if (shockNodeWasntDefined) {
            				self.shockNodeId = info['node_id'];
            				var fileState = self.shockNodeId + " " + curTime;
            				ujsClient.set_state(self.options.serviceNameInUJS, ujsKey, fileState, function(data) {
            					console.log("UJS file state saved: " + fileState);
            	    		}, function(error) {
            	            	console.log("Error saving shock node " + self.shockNodeId + " into UJS:");
            	    			console.log(error);
            	    		});
            			}
            			if (info.uploaded_size >= info.file_size) {
            				self.uploadIsReady = true;
            				self.isValid();
            				self.selectFileMode(true);
                            self.uploadWasStarted = false;
            				shockClient.change_node_file_name(self.shockNodeId, file.name, function(info) {
            					//showShockInfo(self.shockNodeId);
            				}, function(error) {
            	            	console.log("Error changing file name for shock node " + self.shockNodeId);
            	    			console.log(error);
            	    		});
            			}
            			var percent = "" + (Math.floor(info.uploaded_size * 1000 / info.file_size) / 10);
            			if (percent.indexOf('.') < 0)
            				percent += ".0";
            			prcText.val(percent + "%");
            			self.isValid();
            		}
            	}, function(error) {
            		self.selectFileMode(true);
                    self.uploadWasStarted = false;
            		alert("Error: " + error);
            	}, function() {
            		return self.cancelUpload;
            	});
            }
            
            function showShockInfo(shockNode) {
            	shockClient.get_node(shockNode, function(data) {
            		console.log("Info about node [" + shockNode + "]:");
            		console.log(data);
        		}, function(error) {
        			console.log(error);
        		});
            }
        },
        
        getShockNodeId: function() {
        	return this.shockNodeId;
        },
        
        isUploadReady: function() {
        	return this.uploadIsReady;
        },
        
        isValid: function() {
            var self = this;
            var errorDetected = false;
            var errorMessages = [];
            var pVal = self.getParameterValue();
            if (self.enabled && (self.required || self.uploadWasStarted) && !pVal) {
            	self.rowDivs[0].$row.removeClass("kb-method-parameter-row-error");
            	self.rowDivs[0].$feedback.removeClass().addClass('kb-method-parameter-required-glyph glyphicon glyphicon-arrow-left').prop("title","required field");
            	self.rowDivs[0].$feedback.show();
            	self.rowDivs[0].$error.hide();
            	errorDetectedHere = true;
            	if (self.uploadWasStarted) {
            		errorMessages.push("required field "+self.spec.ui_name+" is not 100% ready.");
            	} else {
            		errorMessages.push("required field "+self.spec.ui_name+" missing.");
            	}
            	errorDetected = true;
            } else {
            	self.rowDivs[0].$row.removeClass("kb-method-parameter-row-error");
            	self.rowDivs[0].$error.hide();
            	self.rowDivs[0].$feedback.removeClass();
            	if (pVal)
            		self.rowDivs[0].$feedback.removeClass().addClass('kb-method-parameter-accepted-glyph glyphicon glyphicon-ok');
            }
            return {isValid: !errorDetected, errormssgs:errorMessages};
        },
        
        getParameterValue: function() {
            var ret = this.uploadIsReady ? this.shockNodeId : null;
            return ret ? ret : "";
        },

        getState: function() {
            return [[this.shockNodeId ? this.shockNodeId : "", this.fileName.val(), this.uploadIsReady, this.percentText.val()]];
        },

        loadState: function(state) {
            if (!state)
                return;
            if (!$.isArray(state))
            	return;
            var self = this;
            this.shockNodeId = state[0][0];
            if (this.shockNodeId === "")
            	this.shockNodeId = null;
            this.fileName.val(state[0][1]);
            this.uploadIsReady = state[0][2];
            this.percentText.val(state[0][3]);
            if (this.shockNodeId) {
            	var shockClient = new ShockClient({url: self.options.shockUrl, token: self.token});
            	shockClient.get_node(self.shockNodeId, function(info) {
            		if (!info)
                		self.shockNodeId = null;
                	self.isValid();                		
            	}, function(error) {
            		self.shockNodeId = null;
                	self.isValid();
            	});
            } else {
            	this.isValid();
            }
        },

        loggedInCallback: function(event, auth) {
            this.token = auth.token;
            if (this.wrongToken)
            	this.render();
            return this;
        },

        loggedOutCallback: function(event, auth) {
            this.token = null;
            //this.render();
            return this;
        },
        
        disableParameterEditing: function() {
            this.enabled = false;
            if (this.rowDivs) {
                this.rowDivs[0].$feedback.removeClass();
            }
        },
        
        enableParameterEditing: function() {
            // enable the input
            this.enabled = true;
            this.isValid();
        },
        
        lockInputs: function() {
            if (this.enabled) {
            	this.locked = true;
            }
            if (this.rowDivs) {
                this.rowDivs[0].$feedback.removeClass();
            }
        },
        
        unlockInputs: function() {
            if (this.enabled) {
            	this.locked = false;
            }
            this.isValid();
        },

        uuid: function() {
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, 
                function(c) {
                    var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);
                    return v.toString(16);
                });
        },
        
        getUser: function() {
            var ret = null;
            if (!this.token)
            	return ret;
            var tokenParts = this.token.split("|");
            for (var i in tokenParts) {
            	var keyValue = tokenParts[i].split("=");
            	if (keyValue.length == 2 && keyValue[0] === "un")
            		ret = keyValue[1];
            }
            return ret;
        }
    });
})(jQuery);
(function($, undefined) {
    $.KBWidget({
        name: 'kbaseNarrativeSidePanel',
        parent: 'kbaseWidget',
        options: {
            loadingImage: "static/kbase/images/ajax-loader.gif",
            autorender: true,
            workspaceURL: "https://kbase.us/services/ws", //used for data importer
            landingPageURL: "/functional-site/#/", // used for data importer
        },
        $dataWidget: null,
        $methodsWidget: null,
        $narrativesWidget: null,
        $jobsWidget: null,
        $overlay: null,

        /**
         * Does the initial panel layout - tabs and spots for each widget
         * It then instantiates them, but not until told to render (unless autorender = true)
         */
        init: function(options) {
            this._super(options);

            // make sure we pick up the proper config urls
            if (window.kbconfig && window.kbconfig.urls) {
                this.options.workspaceURL = window.kbconfig.urls.workspace;
            }

            var analysisWidgets = this.buildPanelSet([
                {
                    name : 'kbaseNarrativeDataPanel',
                    params : {}
                },
                {
                    name : 'kbaseNarrativeMethodPanel',
                    params : { autopopulate: false }
                }
            ]);
            this.$dataWidget = analysisWidgets['kbaseNarrativeDataPanel'];
            this.$methodsWidget = analysisWidgets['kbaseNarrativeMethodPanel'];
            var $analysisPanel = analysisWidgets['panelSet'];

            var manageWidgets = this.buildPanelSet([
                {
                    name : 'kbaseNarrativeManagePanel',
                    params : { autopopulate: true }
                },
            ]);

            this.$narrativesWidget = manageWidgets['kbaseNarrativeAppsPanel'];
            var $managePanel = manageWidgets['panelSet'];

            var jobsWidget = this.buildPanelSet([
                {
                    name : 'kbaseNarrativeJobsPanel',
                    params : { autopopulate: false }
                }
            ]);
            this.$jobsWidget = jobsWidget['kbaseNarrativeJobsPanel'];
            var $jobsPanel = jobsWidget['panelSet'];

            var $tabs = this.buildTabs([
                {
                    tabName : 'Analyze',
                    content : $analysisPanel
                },
                {
                    tabName : 'Narratives',
                    content: $managePanel
                },
                {
                    tabName : this.$jobsWidget.title,
                    content: $jobsPanel
                }
            ], true);

            this.$elem.addClass('kb-side-panel');
            this.$elem.append($tabs.header).append($tabs.body);

            $(document).on('showSidePanelOverlay.Narrative', $.proxy(function(event, panel) {
                this.showOverlay(panel);
            }, this));

            $(document).on('hideSidePanelOverlay.Narrative', $.proxy(function(event, panel) {
                this.hideOverlay(panel);
            }, this));

            $(document).on('toggleSidePanelOverlay.Narrative', $.proxy(function(event, panel) {
                this.toggleOverlay(panel);
            }, this));

            if (this.autorender) {
                this.render();
            }
            else {

            }

            return this;
        },

        /**
         * @method
         * @private
         * Builds a very simple set of tabs.
         * @param {Array} tabs - a list of objects where each has a 'tabName' and 'content' property.
         * As you might expect, 'tabName' is the name of the tab that goes into the styled header,
         * and 'content' is the tab content, expected to be something that can be attached via .append()
         * @param isOuter - if true, treat these tabs as though they belong to the outer side panel,
         * not to an inner set of tabs. That is, when any new tab is selected, it hides the overlay,
         * if it's open.
         */
        buildTabs: function(tabs, isOuter) {
            var $header = $('<div>');
            var $body = $('<div>');

            for (var i=0; i<tabs.length; i++) {
                var tab = tabs[i];
                $header.append($('<div>')
                               .addClass('kb-side-header')
                               .css('width', (100/tabs.length)+'%')
                               .append(tab.tabName));
                $body.append($('<div>')
                             .addClass('kb-side-tab')
                             .append(tab.content));
            }

            $header.find('div').click($.proxy(function(event) {
                event.preventDefault();
                event.stopPropagation();
                var $headerDiv = $(event.currentTarget);

                if (!$headerDiv.hasClass('active')) {
                    var idx = $headerDiv.index();
                    $header.find('div').removeClass('active');
                    $headerDiv.addClass('active');
                    $body.find('div.kb-side-tab').removeClass('active');
                    $body.find('div:nth-child(' + (idx+1) + ').kb-side-tab').addClass('active');
                    if (isOuter)
                        this.hideOverlay();
                }
            }, this));

            $header.find('div:first-child').addClass('active');
            $body.find('div:first-child.kb-side-tab').addClass('active');

            return {
                header: $header,
                body: $body
            };
        },

        initOverlay: function() {
            var self = this;

            this.$overlayBody = $('<div class="kb-overlay-body">');
            this.$overlayFooter  = $('<div class="kb-overlay-footer">');
            this.$overlay = $('<div>')
                            .addClass('kb-side-overlay-container')
                            //.append(this.$overlayBody)
                            //.append(this.$overlayFooter);

            $('body').append(this.$overlay);
            this.$overlay.hide();

            this.$narrativeDimmer = $('<div>')
                                    .addClass('kb-overlay-dimmer');

            $('body').append(this.$narrativeDimmer);
            this.$narrativeDimmer.hide();
            this.updateOverlayPosition();

            // hide panel when clicking outside
            this.$narrativeDimmer.unbind('click');
            this.$narrativeDimmer.click(function() {
                self.hideOverlay();
            });
        },

        updateOverlayPosition: function() {
            this.$overlay.position({my: 'left top', at: 'right top', of: this.$elem});
            this.$narrativeDimmer.position({my: 'left top', at: 'right top', of: this.$elem});
        },

        /**
         * @method
         * @public
         * Also available through a trigger - 'toggleSidePanelOverlay.Narrative'
         * The behavior here is done in three cases.
         * 1. If the overlay is currently visible, it gets hidden.
         * 1a. If there is a panel given, and it is different from the currently attached panel, then
         *     the new panel is attached and the overlay is redisplayed.
         * 2. If the overlay is currently hidden, it is shown with the given panel.
         */
        toggleOverlay: function(panel) {
            if (this.$overlay.is(':visible')) {
                this.hideOverlay();
                if (panel && panel !== this.currentPanel) {
                    this.showOverlay(panel);
                }
            }
            else
                this.showOverlay(panel);
        },

        showOverlay: function(panel) {
            if (this.$overlay) {
                if (panel) {
                    if (this.currentPanel)
                        $(this.currentPanel).detach();
                    this.$overlay.append(panel);
                    this.currentPanel = panel;
                }
                this.$narrativeDimmer.show();
                this.$elem.find('.kb-side-header').addClass('overlay-active');
                this.$overlay.show('slide', 'fast', $.proxy(function() {
                }, this));
            }
        },

        hideOverlay: function() {
            if (this.$overlay) {
                this.$narrativeDimmer.hide();
                this.$elem.find('.kb-side-header').removeClass('overlay-active');
                this.$overlay.hide('slide', 'fast', $.proxy(function() {
                }, this));
            }
        },

        /**
         * Builds the general structure for a panel set.
         * These are intended to start with 2 panels, but we can move from there if needed.
         *
         * (I'll jsdoc this up in a bit)
         * widgets = [
         *     {
         *         name: kbaseNarrativeDataPanel (for instance)
         *         params: {}
         *     }
         * ]
         * @param {object} widgets
         *
         */
        buildPanelSet: function(widgets) {
            var $panelSet = $('<div>')
                            .addClass('kb-narr-side-panel-set');
            if (!widgets || Object.prototype.toString.call(widgets) !== '[object Array]' || widgets.length === 0)
                return $panelSet;

            var height = 100 / widgets.length;
            var minHeight = 200;

            var retObj = {};
            for (var i=0; i<widgets.length; i++) {
                var widgetInfo = widgets[i];
                var $widgetDiv = $('<div>')
                                 .addClass('kb-side-separator')
                                 .css({'height' : height + '%'});

                retObj[widgetInfo.name] = $widgetDiv[widgetInfo.name](widgetInfo.params);
                $panelSet.append($widgetDiv);
            }
            retObj['panelSet'] = $panelSet;
            return retObj;
        },

        render: function() {
            this.initOverlay();

            this.$methodsWidget.refreshFromService();
        }

    })
})( jQuery );

/**
 * "Import" tab on data side panel.
 * @author Roman Sutormin <rsutormin@lbl.gov>
 * @public
 */
(function( $, undefined ) {
    $.KBWidget({
        name: "kbaseNarrativeSideImportTab",
        parent: "kbaseAuthenticatedWidget",
        version: "1.0.0",
        options: {
        },
        token: null,
        wsName: null,
        loadingImage: "static/kbase/images/ajax-loader.gif",
        wsUrl: window.kbconfig.urls.workspace,
        methodStoreURL: window.kbconfig.urls.narrative_method_store,
        methClient: null,
        uploaderURL: window.kbconfig.urls.transform,
        ujsURL: window.kbconfig.urls.user_and_job_state,
        shockURL: window.kbconfig.urls.shock,
        methods: null,			// {method_id -> method_spec}
        types: null,			// {type_name -> type_spec}
        selectedType: null,		// selected type name
        widgetPanel: null,		// div for selected type
        widgetPanelCard1: null, // first page with importer type combobox (this page will be put on widgetPanel) 
        widgetPanelCard2: null, // second page with import widget (this page will be put on widgetPanel) 
        infoPanel: null,
        inputWidget: null,		// {methodId -> widget for selected type}
        tabs: null,				// mapping {methodId -> div}
        
        init: function(options) {
            this._super(options);
            var self = this;
            $(document).on(
            		'setWorkspaceName.Narrative', $.proxy(function(e, info) {
                        //console.log('side panel import tab -- setting ws to ' + info.wsId);
                        self.wsName = info.wsId;
            		}, this)
            );
            return this;
        },
        
        render: function() {
        	var self = this;
        	this.inputWidget = {};
        	this.tabs = {};
            var errorModalId = "app-error-modal-"+ self.uuid();
            var modalLabel = "app-error-modal-lablel-"+ self.uuid();
            self.$errorModalContent = $('<div>');
            self.$errorModal =  $('<div id="'+errorModalId+'" tabindex="-1" role="dialog" aria-labelledby="'+modalLabel+'" aria-hidden="true" style="position:auto">').addClass("modal fade");
            self.$errorModal.append(
                $('<div>').addClass('modal-dialog').append(
                    $('<div>').addClass('modal-content').append(
                        $('<div>').addClass('modal-header kb-app-step-error-main-heading').append('<h4 class="modal-title" id="'+modalLabel+'">Problems exist in your parameter settings.</h4>')
                    ).append(
                       $('<div>').addClass('modal-body').append(self.$errorModalContent)
                    ).append(
                        $('<div>').addClass('modal-footer').append(
                            $('<button type="button" data-dismiss="modal">').addClass("kb-default-btn").append("Dismiss"))
                    )
                ));
            $('body').append(self.$errorModal);
            self.$warningModalContent = $('<div>');
            self.$warningModal =  $('<div tabindex="-1" role="dialog" aria-labelledby="'+modalLabel+'" aria-hidden="true" style="position:auto">').addClass("modal fade");
            var confirmButton = $('<button type="button" data-dismiss="modal">').addClass("btn").append("Confirm");
            confirmButton.click($.proxy(function(event) {
            	self.stopTimer();
            	self.back();
            }, this));
            self.$warningModal.append(
                $('<div>').addClass('modal-dialog').append(
                    $('<div>').addClass('modal-content').append(
                        $('<div>').addClass('modal-header kb-app-step-error-main-heading').append('<h4 class="modal-title" id="'+modalLabel+'">User confirmation required.</h4>')
                    ).append(
                       $('<div>').addClass('modal-body').append(self.$warningModalContent)
                    ).append(
                        $('<div>').addClass('modal-footer').append(confirmButton).append(
                            $('<button type="button" data-dismiss="modal">').addClass("kb-default-btn").append("Cancel"))
                    )
                ));
            $('body').append(self.$warningModal);


            if (window.kbconfig && window.kbconfig.urls) {
                this.methodStoreURL = window.kbconfig.urls.narrative_method_store;
            }
            var upperPanel = $('<div>');
            this.widgetPanel = $('<div>');
            this.widgetPanelCard1 = $('<div style="margin: 30px 30px 0px 30px;">');
            this.widgetPanel.append(this.widgetPanelCard1);
            this.widgetPanelCard1.append("<div class='kb-cell-run'><h2 class='collapse in'>Use your own data or data from another data source in your narrative. First, select the type of data you wish to import.</h2></div><hr>");
            
            var $nameDiv = $('<div>').addClass("kb-method-parameter-name").css("text-align", "left")
            	.append("DATA TYPE");

            var $dropdown= $('<select>').css({width:"400px"});
            var $nextButton = $('<button>')
                              .attr('id', this.cellId + '-next')
                              .attr('type', 'button')
                              .attr('value', 'Next')
                              .addClass('kb-primary-btn')
                              .css({'border' : '4px'})
                              .append('Next');
            var $hintDiv  = $('<div>').addClass("kb-method-parameter-hint")
            	.append("Select the type of data you wish to import.");

            $nextButton.click(
            		$.proxy(function(event) {
            			event.preventDefault();
            			var selectedType = $dropdown.val();
                    	self.showWidget(selectedType);
            		}, this)
            );
            this.widgetPanelCard1
            	.append('<div style="height: 30px">')
            	.append($nameDiv)
            	.append($('<div>').append($dropdown))
            	.append($hintDiv)
            	.append('<div style="height: 30px">')
            	.append($('<div>').append($nextButton));
            
            this.widgetPanelCard2 = $('<div style="display: none; margin: 0px;">');
            this.widgetPanel.append(this.widgetPanelCard2);

            this.infoPanel = $('<div style="margin: 20px 0px 0px 30px;">');

            this.$elem.append(upperPanel);
            this.$elem.append(this.widgetPanel);
            this.$elem.append(this.infoPanel);
            this.methClient = new NarrativeMethodStore(this.methodStoreURL);
            this.methClient.list_categories({'load_methods': 0, 'load_apps' : 0, 'load_types' : 1}, 
                    $.proxy(function(data) {
                    	var aTypes = data[3];
                    	var methodIds = [];
                    	self.types = {};
                    	for (var key in aTypes) {
                    		if (aTypes[key]["loading_error"]) {
                            	console.log("Error loading type [" + key + "]: " + aTypes[key]["loading_error"]);
                    			continue;
                    		}
                    		if (aTypes[key]["import_method_ids"].length > 0) {
                    			self.types[key] = aTypes[key];
                    			for (var methodPos in aTypes[key]["import_method_ids"]) {
                    				var methodId = aTypes[key]["import_method_ids"][methodPos];
                    				methodIds.push(methodId);
                    			}
                    		}
                    	}
                        self.methClient.get_method_spec({ 'ids' : methodIds },
                                $.proxy(function(specs) {
                                	self.methods = {};
                                	for (var i in specs) {
                                		self.methods[specs[i].info.id] = specs[i];
                                	}
                                	var keys = [];
                                	for (var key in self.types) {
                                		keys.push(key);
                                	}
                                	keys.sort(function(a,b) {return self.types[a]["name"].localeCompare(self.types[b]["name"])});
                                	for (var keyPos in keys) {
                                		addItem(keys[keyPos]);                                		
                                	}
                                    $dropdown.select2({
                                        minimumResultsForSearch: -1,
                                        formatSelection: function(object, container) {
                                            var display = '<span class="kb-parameter-data-selection">'+object.text+'</span>';
                                            return display;
                                        }
                                    });

                                	function addItem(key) {
                                		var name = self.types[key]["name"];
                                        $dropdown.append($('<option value="'+key+'">').append(name));
                                	}
                                }, this),
                                $.proxy(function(error) {
                                    self.showError(error);
                                }, this)
                            );
                    }, this),
                    $.proxy(function(error) {
                        self.showError(error);
                    }, this)
                );
            return this;
        },

        showWidget: function(type) {
          var self = this;
          this.selectedType = type;
          this.widgetPanelCard1.css('display', 'none');
          this.widgetPanelCard2.css('display', '');
          this.widgetPanelCard2.empty();
          var $header = null;
          var $body = null;
          var numberOfTabs = this.types[type]["import_method_ids"].length;
          if (numberOfTabs > 1) {
        	  var $header = $('<div>');
        	  var $body = $('<div>');
        	  this.widgetPanelCard2.append($header).append($body);
          }
          for (var methodPos in this.types[type]["import_method_ids"]) {
        		
        	var methodId = this.types[type]["import_method_ids"][methodPos];
        	var methodSpec = this.methods[methodId];
            var inputWidgetName = methodSpec.widgets.input;
            if (!inputWidgetName || inputWidgetName === 'null')
                inputWidgetName = "kbaseNarrativeMethodInput";
            var methodJson = JSON.stringify(methodSpec);
            
            var $inputDiv = $('<div>');

            // These are the 'delete' and 'run' buttons for the cell
            var $runButton = $('<button>')
                             .attr('id', this.cellId + '-run')
                             .attr('type', 'button')
                             .attr('value', 'Import')
                             .addClass('kb-primary-btn')
                             .append('Import');
            $runButton.click(
                $.proxy(function(event) {
                    event.preventDefault();
                    var v = self.getInputWidget().isValid();
                    if (v.isValid) {
                    	self.runImport();
                    } else {
                        var errorCount = 1;
                        self.$errorModalContent.empty();
                        var $errorStep = $('<div>');
                        for (var e=0; e<v.errormssgs.length; e++) {
                        	$errorStep.append($('<div>')
                        			.addClass("kb-app-step-error-mssg")
                        			.append('['+errorCount+']: ' + v.errormssgs[e]));
                        	errorCount = errorCount+1;
                        }
                        self.$errorModalContent.append($errorStep);
                        self.$errorModal.modal('show');
                    }
                }, this)
            );
            var $backButton = $('<button>')
                             .attr('id', this.cellId + '-back')
                             .attr('type', 'button')
                             .attr('value', 'Back')
                             .addClass('kb-primary-btn')
                             .append('Back');
            $backButton.click(
                $.proxy(function(event) {
                	event.preventDefault();
                	self.back();
                }, this)
            );

            var $buttons = $('<div>')
                           .addClass('buttons')
                           .append($runButton)
                           .append('&nbsp;')
                           .append($backButton);

            var $progressBar = $('<div>')
                               .attr('id', 'kb-func-progress')
                               .addClass('pull-left')
                               .css({'display' : 'none'})
                               .append($('<div>')
                                       .addClass('progress progress-striped active kb-cell-progressbar')
                                       .append($('<div>')
                                               .addClass('progress-bar progress-bar-success')
                                               .attr('role', 'progressbar')
                                               .attr('aria-valuenow', '0')
                                               .attr('aria-valuemin', '0')
                                               .attr('aria-valuemax', '100')
                                               .css({'width' : '0%'})))
                               .append($('<p>')
                                       .addClass('text-success'));

            var methodUuid = 'import-method-details-'+this.uuid();
            var buttonLabel = 'details';
            var methodDesc = methodSpec.info.tooltip;
            var $methodInfo = $('<div>')
                    .addClass('kb-func-desc')
                    .css({'margin' : '25px 0px 0px 15px'})
            		.append($('<h2>')
                    .attr('id', methodUuid)
                    .addClass('collapse in')
                    .append(methodDesc));
            
            var tab = $('<div style="margin: 0px 30px 0px 15px;">')
                    .append($('<div>')
                    .addClass('kb-func-panel kb-cell-run')
                    .append($methodInfo))
                    .append($('<div>').css({'margin' : '25px 0px 0px 15px'}).append("<hr>"))
                    .append($('<div>')
                    .append($inputDiv))
                    .append($('<div>')
                    .css({'overflow' : 'hidden', 'margin' : '0px 0px 0px 18px'})
                    .append($buttons));
                        
        	var isShown = methodPos == 0;
        	var tabName = methodSpec.info.name;
        	var params = {tab: tabName, content: tab, canDelete : false, show: isShown};
    		if (numberOfTabs == 1) {
    			this.widgetPanelCard2.append(tab);
    		} else {
    			var tabHeader = $('<div>')
    				.addClass('kb-side-header');
    			tabHeader.css('width', (100/numberOfTabs)+'%');
    			tabHeader.append($('<small>').append(params.tab));
    			$header.append(tabHeader);
    			var tabContent = $('<div>')
    				.addClass('kb-side-tab3')
    				.css("display", "none")
    				.append(params.content);
    			$body.append(tabContent);
    			if (params.show) {
    				tabHeader.addClass('active');
    				tabContent.css('display', '');
    			}
    			tabHeader.click($.proxy(function(event) {
    				event.preventDefault();
    				event.stopPropagation();
    				var $headerDiv = $(event.currentTarget);
    				if (!$headerDiv.hasClass('active')) {
    					var idx = $headerDiv.index();
    					$header.find('div').removeClass('active');
    					$headerDiv.addClass('active');
    					$body.find('div.kb-side-tab3').css('display', 'none');
    					$body.find('div:nth-child(' + (idx+1) + ').kb-side-tab3').css('display', '');
    				}
    			}, this));
    		}
            this.inputWidget[methodId] = $inputDiv[inputWidgetName]({ method: methodJson, isInSidePanel: true });

        	this.tabs[methodId] = tab;
          }
        },
        
        getSelectedTabId: function() {
            var ret = null;
            for (var tabId in this.tabs) {
            	var tab = this.tabs[tabId];
            	if (tab.is(':visible'))
            		ret = tabId;
            }
            return ret;
        },

        getInputWidget: function() {
        	return this.inputWidget[this.getSelectedTabId()];
        },
        
        back: function() {
        	var self = this;
        	if (self.timer != null) {
                self.$warningModalContent.empty();
                self.$warningModalContent.append(
                		$('<div>').addClass("kb-app-step-error-mssg")
                			.append('Import process is not finished yet. Are you sure you want to stop watching it?'));
                self.$warningModal.modal('show');
        		return;
        	}
        	this.infoPanel.empty();
        	this.widgetPanelCard2.css('display', 'none');
            this.widgetPanelCard1.css('display', '');
        },
        
        runImport: function() {
        	var self = this;
        	var paramValueArray = this.getInputWidget().getParameters();
        	var params = {};
        	var methodId = self.getSelectedTabId();
        	var methodSpec = self.methods[methodId];
        	for(var i in methodSpec.parameters) {
            	var paramId = methodSpec.parameters[i].id;
            	var paramValue = paramValueArray[i];
            	params[paramId] = paramValue;
        	}
            var uploaderClient = new Transform(this.uploaderURL, {'token': self.token});
            var args = null;
            if (self.selectedType === 'KBaseGenomes.Genome') {
            	var url = null;
            	if (methodId === 'import_genome_gbk_file') {
            		url = self.shockURL + '/node/' + params['gbkFile'];
            	} else if (methodId === 'import_genome_gbk_ftp') {
            		url = params['ftpFolder'];
            	}
            	if (url) {
            		var options = {};
            		if (params['contigObject'] && params['contigObject'].length > 0) {
            			options['contigset_object_name'] = params['contigObject'];
            		} else {
            			options['contigset_object_name'] = params['outputObject'] + '.contigset';
            		}
            		args = {'external_type': 'Genbank.Genome', 
            				'kbase_type': 'KBaseGenomes.Genome', 
            				'workspace_name': self.wsName, 
            				'object_name': params['outputObject'],
            				'optional_arguments': {'validate':{},'transform':options},
            				'url_mapping': {'Genbank.Genome': url}};
            	} else {
            		self.showError(methodId + " import mode for Genome type is not supported yet");
            	}
            } else if (self.selectedType === 'Transcript') {
            	if (methodId === 'import_transcript_file') {
            		var options = {'dna':self.asInt(params['dna']),
            				"output_file_name": "transcripts.json"};
            		var genomeId = params['genomeId'];
            		if (genomeId)
            			options['genome_id'] = genomeId;
            		args = {'external_type': 'FASTA.Transcripts', 
            				'kbase_type': 'KBaseGenomes.Genome', 
            				'workspace_name': self.wsName, 
            				'object_name': params['outputObject'],
            				'optional_arguments': {'validate':{},'transform':options},
            				'url_mapping': {'FASTA.Transcripts': self.shockURL + '/node/' + params['fastaFile']}};
            	} else {
            		self.showError(methodId + " import mode for Genome type is not supported yet");
            	}
            } else if (self.selectedType === 'KBaseGenomes.ContigSet') {
            	var url = null;
            	if (methodId === 'import_contigset_fasta_file') {
            		url = self.shockURL + '/node/' + params['fastaFile'];
            	} else if (methodId === 'import_contigset_fasta_ftp') {
            		url = params['ftpFolder'];
            	}
            	if (url) {
            		args = {'external_type': 'FASTA.DNA.Assembly', 
            				'kbase_type': 'KBaseGenomes.ContigSet', 
            				'workspace_name': self.wsName, 
            				'object_name': params['outputObject'],
            				'optional_arguments': {'validate':{},'transform':
            						{"fasta_reference_only":self.asBool(params['fastaReferenceOnly'])}},
            				'url_mapping': {'FASTA.DNA.Assembly': url}};
            	} else {
            		self.showError(methodId + " import mode for ContigSet type is not supported yet");
            	}
            } else if (self.selectedType === 'ShortReads') {
            	if (methodId === 'import_reads_fasta_file') {
            		var options = {};
            		var refName = params['refname'];
            		if (refName)
            			options['refname'] = refName;
            		args = {'external_type': 'FASTA.DNA.Assembly', 
            				'kbase_type': 'KBaseAssembly.ReferenceAssembly', 
            				'workspace_name': self.wsName, 
            				'object_name': params['outputObject'],
            				'optional_arguments': {'validate':{},'transform':options},
            				'url_mapping': {'FASTA.DNA.Assembly': self.shockURL + '/node/' + params['fastaFile']}};
            	} else if (methodId === 'import_reads_pe_fastq_file') {
            		var urlMapping = {'SequenceReads.1': self.shockURL + '/node/' + params['fastqFile1']};
            		if (params['fastqFile2'] && params['fastqFile2'].length > 0)
            			urlMapping['SequenceReads.2'] = self.shockURL + '/node/' + params['fastqFile2'];
            		var options = {'outward':self.asInt(params['readOrientationOutward']),
            				'output_file_name': 'pelib.fastq.json'};
            		var optInsert = params['insertSizeMean'];
            		if (optInsert)
            			options['insert'] = optInsert;
            		var optStdev = params['insertSizeStDev'];
            		if (optStdev)
            			options['stdev'] = optStdev;
            		args = {'external_type': 'SequenceReads', 
            				'kbase_type': 'KBaseAssembly.PairedEndLibrary', 
            				'workspace_name': self.wsName, 
            				'object_name': params['outputObject'],
            				'optional_arguments': {'validate':{},'transform':options},
            				'url_mapping': urlMapping};
            	} else if (methodId === 'import_reads_se_fastq_file') {
            		args = {'external_type': 'SequenceReads', 
            				'kbase_type': 'KBaseAssembly.SingleEndLibrary', 
            				'workspace_name': self.wsName, 
            				'object_name': params['outputObject'],
            				'optional_arguments': {'validate':{},'transform':{'output_file_name': 'selib.fastq.json'}},
            				'url_mapping': {'SequenceReads': self.shockURL + '/node/' + params['fastqFile']}};
            	} else {
            		self.showError(methodId + " import mode for ShortReads type is not supported yet");
            	}
            } else if (self.selectedType === 'KBaseFBA.FBAModel') {
            	if (methodId === 'import_fbamodel_csv_file') {
            		var options = {};
            		var genome = params['genomeObject'];
            		if (genome)
            			options['genome'] = genome;
            		var biomass = params['biomass'];
            		if (biomass)
            			options['biomass'] = biomass;
            		args = {'external_type': 'CSV', 
            				'kbase_type': 'KBaseFBA.FBAModel', 
            				'workspace_name': self.wsName, 
            				'object_name': params['outputObject'],
            				'optional_arguments': {'validate':{},'transform':options},
            				'url_mapping': {
            					'CSV.FBAModel': self.shockURL + '/node/' + params['reactionFile'],
            					'CSV.Compounds': self.shockURL + '/node/' + params['compoundFile']
            				}
            		};
            	} else if (methodId === 'import_fbamodel_sbml_file') {
            		var urlMapping = {'SBML.FBAModel': self.shockURL + '/node/' + params['reactionFile']};
            		var compoundFile = params['compoundFile'];
            		if (compoundFile)
            			urlMapping['CSV.Compounds'] = self.shockURL + '/node/' + compoundFile;
            		var options = {};
            		var genome = params['genomeObject'];
            		if (genome)
            			options['genome'] = genome;
            		var biomass = params['biomass'];
            		if (biomass)
            			options['biomass'] = biomass;
            		args = {'external_type': 'SBML', 
            				'kbase_type': 'KBaseFBA.FBAModel', 
            				'workspace_name': self.wsName, 
            				'object_name': params['outputObject'],
            				'optional_arguments': {'validate':{},'transform':options},
            				'url_mapping': urlMapping};
            	} else {
            		self.showError(methodId + " import mode for FBAModel type is not supported yet");
            	}
            } else if (self.selectedType === 'KBaseBiochem.Media') {
            	if (methodId === 'import_media_csv_file') {
            		args = {'external_type': 'CSV', 
            				'kbase_type': 'KBaseBiochem.Media', 
            				'workspace_name': self.wsName, 
            				'object_name': params['outputObject'],
            				'optional_arguments': {'validate':{},'transform':{}},
            				'url_mapping': {'CSV.Media': self.shockURL + '/node/' + params['csvFile']}};
            	} else {
            		self.showError(methodId + " import mode for Media type is not supported yet");
            	}
            } else if (self.selectedType === 'KBasePhenotypes.PhenotypeSet') {
            	if (methodId === 'import_phenotypeset_csv_file') {
            		var options = {};
            		var genome = params['genomeObject'];
            		if (genome)
            			options['genome'] = genome;
            		args = {'external_type': 'CSV', 
            				'kbase_type': 'KBasePhenotypes.PhenotypeSet', 
            				'workspace_name': self.wsName, 
            				'object_name': params['outputObject'],
            				'optional_arguments': {'validate':{},'transform':options},
            				'url_mapping': {'CSV.Phenotypes': self.shockURL + '/node/' + params['csvFile']}};
            	} else {
            		self.showError(methodId + " import mode for PhenotypeSet type is not supported yet");
            	}
            } else {
            	self.showError("Import for [" + self.selectedType + "] type is not supported yet.");
            }
            if (args) {
        		console.log("Data to be sent to transform service:");
        		console.log(JSON.stringify(args));
				self.showInfo("Sending data...", true);
        		uploaderClient.upload(args,
        				$.proxy(function(data) {
        					console.log(data);
        					self.waitForJob(data[1]);
                        }, this),
                        $.proxy(function(error) {
                            self.showError(error);
                        }, this)
                    );
            }
        },
        
        asBool: function(val) {
        	if (!val)
        		return false;
        	return (val == 1 || val === "1");
        },

        asInt: function(val) {
        	if (!val)
        		return 0;
        	if (val == 1 || val === "1")
        		return 1;
        	return 0;
        },

        waitForJob: function(jobId) {
        	var self = this;
        	/*var aweClient = new AweClient({url: self.aweURL, token: self.token});
        	var timeLst = function(event) {
        		aweClient.get_job(jobId, function(data) {
        			console.log("Job status:");
        			console.log(data);
        			var state = data['state'];
        			if (state === 'completed') {  // Done
        				self.stopTimer();
        				self.showInfo("Import job is done");
        			} else if (state === 'suspended') {  // Error
        				self.stopTimer();
        				self.showError("Unexpected error");
        			} else {
        				self.showInfo("Import job has status: " + state, true);
        			}
        		}, function(error) {
    				self.stopTimer();
    				console.log(error);
        		});
        	};*/
            var jobSrv = new UserAndJobState(self.ujsURL, {'token': self.token});
        	var timeLst = function(event) {
        		jobSrv.get_job_status(jobId, function(data) {
        			console.log(data);
        			var status = data[2];
        			var complete = data[5];
        			var wasError = data[6];
        			if (complete === 1) {
        				self.stopTimer();
        				if (wasError === 0) {
                            self.trigger('updateDataList.Narrative');
            				self.showInfo("Import job is done");
        				} else {
            				self.showError(status);
        				}
        			} else {
        				self.showInfo("Import job has status: " + status, true);
        			}
        		}, function(data) {
        			self.stopTimer();
    				console.log(data.error.message);
        		});
        	};
        	self.timer = setInterval(timeLst, 5000);
        	timeLst();
        },
        
        stopTimer: function() {
        	var self = this;
			if (self.timer != null) {
				clearInterval(self.timer);
				self.timer = null;
			}
		},
        
        showError: function(error) {
        	console.log(error);
        	var errorMsg = error;
        	if (error.error && error.error.message)
        		errorMsg = error.error.message;
        	this.infoPanel.empty();
        	this.infoPanel.append('<span class="label label-danger">Error: '+errorMsg+'"</span>');
        },

        showInfo: function(message, spinner) {
        	if (spinner)
        		message = '<img src="'+this.loadingImage+'"/> ' + message;
        	this.infoPanel.empty();
        	this.infoPanel.append(message);
        },

        loggedInCallback: function(event, auth) {
            this.token = auth.token;
            this.render();
            return this;
        },

        loggedOutCallback: function(event, auth) {
            this.token = null;
            this.render();
            return this;
        },
        
        uuid: function() {
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, 
                function(c) {
                    var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);
                    return v.toString(16);
                });
        }
    });
})( jQuery );

/**
 * "Import" tab on data side panel.
 * @author Roman Sutormin <rsutormin@lbl.gov>
 * @public
 */
(function( $, undefined ) {
    $.KBWidget({
        name: "kbaseNarrativeSidePublicTab",
        parent: "kbaseAuthenticatedWidget",
        version: "1.0.0",
        options: {
		$importStatus:$('<div>'),
        	addToNarrativeButton: null,
        	selectedItems: null,
        	landing_page_url: "/functional-site/#/", // !! always include trailing slash
            default_landing_page_url: "/functional-site/#/json/" // ws_name/obj_name,
        },
        token: null,
        wsName: null,
        searchUrlPrefix: 'https://kbase.us/services/search/getResults',
        loadingImage: "static/kbase/images/ajax-loader.gif",
        wsUrl: "https://kbase.us/services/ws/",
        wsClient: null,
        categories: ['genomes', 'metagenomes', 'media', 'plant_gnms'
                     /*'gwas_populations', 'gwas_population_kinships', 'gwas_population_variations',
                     'gwas_top_variations', 'gwas_population_traits', 'gwas_gene_lists'*/ ],
        categoryDescr: {  // search API category -> {}
        	'genomes': {name:'Genomes',type:'KBaseGenomes.Genome',ws:'KBasePublicGenomesV4',search:true},
        	'metagenomes': {name: 'Metagenomes',type:'KBaseCommunities.Metagenome',ws:'KBasePublicMetagenomes',search:true},
        	'media': {name:'Media',type:'KBaseBiochem.Media',ws:'KBaseMedia',search:false},
        	'plant_gnms': {name:'Plant Genomes',type:'KBaseGenomes.Genome',ws:'PlantCSGenomes',search:false}
        	/*'gwas_populations': {name:'GWAS Populations',type:'KBaseGwasData.GwasPopulation',ws:'KBasePublicGwasDataV2',search:true},
        	'gwas_population_kinships': {name:'GWAS Population Kinships',type:'KBaseGwasData.GwasPopulationKinship',ws:'KBasePublicGwasDataV2',search:true},
        	'gwas_population_variations': {name:'GWAS Population Variations',type:'KBaseGwasData.GwasPopulationVariation',ws:'KBasePublicGwasDataV2',search:true},
        	'gwas_top_variations': {name:'GWAS Top Variations',type:'KBaseGwasData.GwasTopVariations',ws:'KBasePublicGwasDataV2',search:true},
        	'gwas_population_traits': {name:'GWAS Population Traits',type:'KBaseGwasData.GwasPopulationTrait',ws:'KBasePublicGwasDataV2',search:true},
        	'gwas_gene_lists': {name:'GWAS Gene Lists',type:'KBaseGwasData.GwasGeneList',ws:'KBasePublicGwasDataV2',search:true}*/
        },
        mainListPanelHeight: '535px',
        maxNameLength: 60,
        totalPanel: null,
        resultPanel: null,
        objectList: null,
        currentCategory: null,
        currentQuery: null,
        currentPage: null,
        totalResults: null,
        itemsPerPage: 20,

        init: function(options) {
            this._super(options);
            var self = this;
            $(document).on(
            		'setWorkspaceName.Narrative', $.proxy(function(e, info) {
                        //console.log('side panel import tab -- setting ws to ' + info.wsId);
                        self.wsName = info.wsId;
                        self.data_icons = window.kbconfig.icons.data;
                        this.icon_colors = window.kbconfig.icons.colors;
                        self.render();
            		}, this)
            );
            return this;
        },

        render: function() {
        	var self = this;
        	if (!self.data_icons)
        		return;

            this.wsClient = new Workspace(this.wsUrl, {'token': this.token});
            var mrg = {'margin': '10px 0px 10px 0px'};
            var typeInput = $('<select class="form-control kb-import-filter">').css(mrg);
            for (var catPos in self.categories) {
            	var cat = self.categories[catPos];
            	var catName = self.categoryDescr[cat].name;
                typeInput.append('<option value="'+cat+'">'+catName+'</option>');
            }
            var typeFilter = $('<div class="col-sm-3">').append(typeInput);
            var filterInput = $('<input type="text" class="form-control kb-import-search" placeholder="Search data...">').css(mrg);
            typeInput.change(function() {
            	self.searchAndRender(typeInput.val(), filterInput.val());
            });
            filterInput.keyup(function(e) {
            	self.searchAndRender(typeInput.val(), filterInput.val());
            });

            var searchFilter = $('<div class="col-sm-9">').append(filterInput);

            var header = $('<div class="row">').css({'margin': '0px 10px 0px 10px'}).append(typeFilter).append(searchFilter);
            self.$elem.append(header);
            self.totalPanel = $('<div>').css({'margin': '0px 0px 0px 10px'});
            self.$elem.append(self.totalPanel);
            self.resultPanel = $('<div>')
            	.css({'overflow-x' : 'hidden', 'overflow-y':'auto', 'height':this.mainListPanelHeight })
            	.on('scroll', function() {
            		if($(this).scrollTop() + $(this).innerHeight() >= this.scrollHeight) {
            			self.renderMore();
            		}
            	});
            self.$elem.append(self.resultPanel);
			self.searchAndRender(typeInput.val(), filterInput.val());
            return this;
        },

        searchAndRender: function(category, query) {
        	var self = this;
        	if (query) {
        		query = query.trim();
        		if (query.length == 0) {
        			query = '*';
        		} else if (query.indexOf('"') < 0) {
        			var parts = query.split(/\s+/);
        			for (var i in parts)
        				if (parts[i].indexOf('*', parts[i].length - 1) < 0)
        					parts[i] = parts[i] + '*';
        			query = parts.join(' ');
        		}
        	} else {
        		query = '*';
        	}
        	if (self.currentQuery && self.currentQuery === query && category === self.currentCategory)
        		return;
        	//console.log("Sending query: " + query);
        	self.totalPanel.empty();
        	self.resultPanel.empty();
        	self.totalPanel.append($('<span>').addClass("kb-data-list-type").append('<img src="'+this.loadingImage+'"/> searching...'));
            self.objectList = [];
        	self.currentCategory = category;
        	self.currentQuery = query;
        	self.currentPage = 0;
        	self.totalResults = null;
        	self.renderMore();
        },

        renderMore: function() {
        	var self = this;
        	var cat = self.categoryDescr[self.currentCategory];
        	if (!cat.search) {
        		if (self.currentPage > 0)
        			return;
            	self.currentPage++;
            	var type = cat.type;
            	var ws = cat.ws;
            	self.wsClient.list_objects({workspaces: [ws], type: type, includeMetadata: 1}, function(data) {
            		//console.log(data);
            		var query = self.currentQuery.replace(/[\*]/g,' ').trim().toLowerCase();
            		for (var i in data) {
            			var info = data[i];
                        // object_info:
                        // [0] : obj_id objid // [1] : obj_name name // [2] : type_string type
                        // [3] : timestamp save_date // [4] : int version // [5] : username saved_by
                        // [6] : ws_id wsid // [7] : ws_name workspace // [8] : string chsum
                        // [9] : int size // [10] : usermeta meta
            			var name = info[1];
            			var id = info[1];
            			var metadata = {};
            			if (self.currentCategory === 'media') {
            				metadata['Size'] = info[9];
            			} else if (self.currentCategory === 'plant_gnms') {
            				if (info[10].Name) {
            					metadata['ID'] = id;
            					name = info[10].Name;
            				}
            				metadata['Source'] = info[10].Source;
            				metadata['Genes'] = info[10]['Number features'];
            			}
            			if (name.toLowerCase().indexOf(query) == -1)
            				continue;
            			self.objectList.push({
    						$div: null,
    						info: info,
    						id: id,
    						name: name,
    						metadata: metadata,
    						ws: cat.ws,
    						type: cat.type,
    						attached: false
    					});
    					self.attachRow(self.objectList.length - 1);
            		}
            		data.totalResults = self.objectList.length;
        			self.totalPanel.empty();
        			self.totalPanel.append($('<span>').addClass("kb-data-list-type")
        					.append("Total results: " + data.totalResults));
            	}, function(error) {
        			//console.log(error);
    				self.totalPanel.empty();
    				self.totalPanel.append($('<span>').addClass("kb-data-list-type").append("Total results: 0"));
                });
        	} else {
            	self.currentPage++;
        		self.search(self.currentCategory, self.currentQuery, self.itemsPerPage, self.currentPage, function(query, data) {
        			if (query !== self.currentQuery) {
        				//console.log("Skip results for: " + query);
        				return;
        			}
        			self.totalPanel.empty();
        			if (!self.totalResults) {
        				self.totalResults = data.totalResults;
        			}
        			if (self.currentCategory === 'genomes') {
        				for (var i in data.items) {
        					var id = data.items[i].genome_id;
        					var name = data.items[i].scientific_name;
        					var domain = data.items[i].domain;
        					var contigs = data.items[i].num_contigs
        					var genes = data.items[i].num_cds
        					self.objectList.push({
        						$div: null,
        						info: null,
        						id: id,
        						name: name,
        						metadata: {'Domain': domain, 'Contigs': contigs, 'Genes': genes},
        						ws: cat.ws,
        						type: cat.type,
        						attached: false
        					});
        					self.attachRow(self.objectList.length - 1);
        				}
        			} else if (self.currentCategory === 'metagenomes') {
        				for (var i in data.items) {
        					var id = data.items[i].object_name;
        					var name = data.items[i].metagenome_name;
        					var project = data.items[i].project_name;
        					var sample = data.items[i].sample_name;
        					self.objectList.push({
        						$div: null,
        						info: null,
        						id: id,
        						name: name,
        						metadata: {'Project': project, 'Sample': sample},
        						ws: cat.ws,
        						type: cat.type,
        						attached: false
        					});
        					self.attachRow(self.objectList.length - 1);
        				}
        			} /*else {
        				for (var i in data.items) {
        					var id = data.items[i].object_name;
        					var name = data.items[i].object_name;
        					var metadata = {};
        					if (self.currentCategory === 'gwas_populations') {
        						metadata['Genome'] = data.items[i].kbase_genome_name;
        						metadata['Source'] = data.items[i].source_genome_name;
        					} else if (self.currentCategory === 'gwas_population_kinships') {
        						metadata['Genome'] = data.items[i].kbase_genome_name;
        						metadata['Source'] = data.items[i].source_genome_name;
        					} else if (self.currentCategory === 'gwas_population_variations') {
        						metadata['Originator'] = data.items[i].originator;
        						metadata['Assay'] = data.items[i].assay;
        					} else if (self.currentCategory === 'gwas_top_variations') {
        						metadata['Trait'] = data.items[i].trait_name;
        						metadata['Ontology'] = data.items[i].trait_ontology_id;
        						metadata['Genome'] = data.items[i].kbase_genome_name;
        					} else if (self.currentCategory === 'gwas_population_traits') {
        						metadata['Trait'] = data.items[i].trait_name;
        						metadata['Ontology'] = data.items[i].trait_ontology_id;
        						metadata['Genome'] = data.items[i].kbase_genome_name;
        					} else if (self.currentCategory === 'gwas_gene_lists') {
        						metadata['Genes'] = data.items[i].gene_count;
        						metadata['SNPs'] = data.items[i].gene_snp_count;
        					}
        					self.objectList.push({
        						$div: null,
        						info: null,
        						id: id,
        						name: name,
        						metadata: metadata,
        						ws: cat.ws,
        						type: cat.type,
        						attached: false
        					});
        					self.attachRow(self.objectList.length - 1);
        				}
        			}*/
        			self.totalPanel.append($('<span>').addClass("kb-data-list-type")
        					.append("Total results: " + data.totalResults + " (" + self.objectList.length + " shown)"));
        		}, function(error) {
        			//console.log(error);
        			if (self.objectList.length == 0) {
        				self.totalPanel.empty();
        				self.totalPanel.append($('<span>').addClass("kb-data-list-type").append("Total results: 0"));
        			}
        		});
        	}
        },

        attachRow: function(index) {
            var obj = this.objectList[index];
            if (obj.attached) { return; }
            if (obj.$div) {
                this.resultPanel.append(obj.$div);
            } else {
                obj.$div = this.renderObjectRowDiv(obj);
                this.resultPanel.append(obj.$div);
            }
            obj.attached = true;
            this.n_objs_rendered++;
        },

        escapeSearchQuery: function(str) {
        	return str.replace(/[\%]/g, "").replace(/[\:\"\\]/g, "\\$&");
        },

        search: function (category, query, itemsPerPage, pageNum, ret, errorCallback) {
        	var escapedQ = this.escapeSearchQuery(query);
        	var url = this.searchUrlPrefix + '?itemsPerPage=' + itemsPerPage + '&' +
        		'page=' + pageNum + '&q=' + encodeURIComponent(escapedQ) + '&category=' + category;
        	var promise = jQuery.Deferred();
        	jQuery.ajax(url, {
        		success: function (data) {
        			ret(query, data);
        			promise.resolve();
        		},
        		error: function(jqXHR, error){
        			if (errorCallback)
    					errorCallback(error);
        			promise.resolve();
        		},
        		headers: {},
        		type: "GET"
        	});

        	return promise;
        },

        renderObjectRowDiv: function(object) {
            var self = this;
            var type_tokens = object.type.split('.')
            var type_module = type_tokens[0];
            var type = type_tokens[1].split('-')[0];

            var $addDiv =
                $('<div>').append(
                    $('<button>').addClass('kb-primary-btn').css({'white-space':'nowrap', padding:'10px 15px'})
                        .append($('<span>').addClass('fa fa-chevron-circle-left').append(' Add'))
                        .on('click',function() { // probably should move action outside of render func, but oh well
                            $(this).attr("disabled","disabled");
                            $(this).html('<img src="'+self.loadingImage+'">');

                            var thisBtn = this;
                            var targetName = object.name;
                            if (!isNaN(targetName))
                            	targetName = self.categoryDescr[self.currentCategory].type.split('.')[1] + ' ' + targetName;
                            targetName = targetName.replace(/[^a-zA-Z0-9|\.\-_]/g,'_');
                            console.log("Copying " + object.ws + "/" + object.id + " -> " + self.wsName + "/" + targetName);
                            self.wsClient.copy_object({
                                to:   {ref: self.wsName + "/" + targetName},
                                from: {ref: object.ws +   "/" + object.id} },
                                function (info) {
                                    $(thisBtn).html('Added');
                                    self.trigger('updateDataList.Narrative');
                                },
                                function(error) {
                                    $(thisBtn).html('Error');
                                    if (error.error && error.error.message) {
                                        if (error.error.message.indexOf('may not write to workspace')>=0) {
                                            self.options.$importStatus.html($('<div>').css({'color':'#F44336','width':'500px'}).append('Error: you do not have permission to add data to this Narrative.'));
                                        } else {
                                            self.options.$importStatus.html($('<div>').css({'color':'#F44336','width':'500px'}).append('Error: '+error.error.message));
                                        }
                                    } else {
                                        self.options.$importStatus.html($('<div>').css({'color':'#F44336','width':'500px'}).append('Unknown error!'));
                                    }
                                    console.error(error);
                                });

                        }));

            var shortName = object.name;
            var isShortened=false;
            if (shortName.length>this.maxNameLength) {
                shortName = shortName.substring(0,this.maxNameLength-3)+'...';
                isShortened=true;
            }
            var landingPageLink = this.options.default_landing_page_url + object.ws + '/' + object.id;
            var ws_landing_page_map = window.kbconfig.landing_page_map;
            if (ws_landing_page_map && ws_landing_page_map[type_module] && ws_landing_page_map[type_module][type]) {
            	landingPageLink = this.options.landing_page_url +
            			ws_landing_page_map[type_module][type] + "/" + object.ws + '/' + object.id;
            }
            var $name = $('<span>').addClass("kb-data-list-name").append('<a href="'+landingPageLink+'" target="_blank">' + shortName + '</a>');
            if (isShortened) { $name.tooltip({title:object.name, placement:'bottom'}); }

            var $btnToolbar = $('<span>').addClass('btn-toolbar pull-right').attr('role', 'toolbar').hide();
            var btnClasses = "btn btn-xs btn-default";
            var css = {'color':'#888'};
            var $openLandingPage = $('<span>')
                                        // tooltips showing behind pullout, need to fix!
                                        //.tooltip({title:'Explore data', 'container':'#'+this.mainListId})
                                        .addClass(btnClasses)
                                        .append($('<span>').addClass('fa fa-binoculars').css(css))
                                        .click(function(e) {
                                            e.stopPropagation();
                                            window.open(landingPageLink);
                                        });

            var $openProvenance = $('<span>')
                                        .addClass(btnClasses).css(css)
                                        //.tooltip({title:'View data provenance and relationships', 'container':'body'})
                                        .append($('<span>').addClass('fa fa-sitemap fa-rotate-90').css(css))
                                        .click(function(e) {
                                            e.stopPropagation();
                                            window.open(self.options.landing_page_url+'objgraphview/'+object.ws+'/'+object.id);
                                        });
            $btnToolbar.append($openLandingPage).append($openProvenance);

            var titleElement = $('<span>').css({'margin':'10px'}).append($btnToolbar.hide()).append($name);
            for (var key in object.metadata) {
            	var value = $('<span>').addClass("kb-data-list-type").append('&nbsp;&nbsp;' + key + ':&nbsp;' + object.metadata[key]);
            	titleElement.append('<br>').append(value);
            }

      var icons = this.data_icons;
      var icon = null;
      if (icons) {
    	  icon = _.has(icons, type) ? icons[type] : icons['DEFAULT'];
      } else {
    	  ison = [];
      }
      var $logo = $('<span>')
      // background circle
      .addClass("fa-stack fa-2x").css({'cursor':'pointer'})
      .append($('<i>')
      .addClass("fa fa-circle fa-stack-2x")
      .css({'color': this.logoColorLookup(type)}));
      // add stack of font-awesome icons
      _.each(icon, function(cls) {
        $logo.append($('<i>')
        .addClass("fa fa-inverse fa-stack-1x " + cls));
      });

	    var $topTable = $('<table>')
                                 .css({'width':'100%','background':'#fff'})  // set background to white looks better on DnD
                                 .append($('<tr>')
                                         .append($('<td>')
                                                 .css({'width':'90px'})
                                                .append($addDiv.hide()))
                                         .append($('<td>')
                                                 .css({'width':'50px'})
                                                 .append($logo))/*$('<span>')
                                            		 	.addClass("kb-data-list-logo")
                                            		 	.css({'background-color':this.logoColorLookup(type)})
                                            		 	.append(type.substring(0,1))))*/
                                         .append($('<td>')
                                                 .append(titleElement)));

	    var $row = $('<div>')
                                .css({margin:'2px',padding:'4px','margin-bottom': '5px'})
                                //.addClass('kb-data-list-obj-row')
                                .append($('<div>').addClass('kb-data-list-obj-row-main')
                                            .append($topTable))
                                // show/hide ellipses on hover, show extra info on click
                                .mouseenter(function(){
                                    //if (!$moreRow.is(':visible')) { $toggleAdvancedViewBtn.show(); }
                                    $addDiv.show();
                                    $btnToolbar.show();
                                })
                                .mouseleave(function(){
                                    //$toggleAdvancedViewBtn.hide();
                                    $addDiv.hide();
                                    $btnToolbar.hide();
                                });

            var $rowWithHr = $('<div>')
                                    .append($('<hr>')
                                                .addClass('kb-data-list-row-hr')
                                                .css({'margin-left':'155px'}))
                                    .append($row);
            return $rowWithHr;
        },

        showError: function(error) {
        	console.log(error);
        	var errorMsg = error;
        	if (error.error && error.error.message)
        		errorMsg = error.error.message;
        	this.infoPanel.empty();
        	this.infoPanel.append('<span class="label label-danger">Error: '+errorMsg+'"</span>');
        },

        logoColorLookup:function(type) {
          var code = 0;
          for (var i=0; i < type.length; code += type.charCodeAt(i++));
          return this.icon_colors[ code % this.icon_colors.length ];
        },

        showInfo: function(message, spinner) {
        	if (spinner)
        		message = '<img src="'+this.loadingImage+'"/> ' + message;
        	this.infoPanel.empty();
        	this.infoPanel.append(message);
        },

        loggedInCallback: function(event, auth) {
            this.token = auth.token;
            this.render();
            return this;
        },

        loggedOutCallback: function(event, auth) {
            this.token = null;
            this.render();
            return this;
        },

        uuid: function() {
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g,
                function(c) {
                    var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);
                    return v.toString(16);
                });
        }
    });
})( jQuery );

/**
 * @author Michael Sneddon <mwsneddon@lbl.gov>
 * @public
 */
(function( $, undefined ) {
    $.KBWidget({
        name: 'kbaseNarrativeExampleDataTab',
        parent: 'kbaseAuthenticatedWidget',
        version: '1.0.0',
        options: {
            ws_name: null, // must be the WS name, not the WS Numeric ID
            ws_url:"https://kbase.us/services/ws",
            landing_page_url: "/functional-site/#/", // !! always include trailing slash
            default_landing_page_url: "/functional-site/#/json/", // ws_name/obj_name,
            loadingImage: 'static/kbase/images/ajax-loader.gif',
            exampleWsId: 2901, // designed to be a workspace with just a handful of objects
	    $importStatus:$('<div>'),
            exampleTypeOrder: [
                {name:['AssemblyInput','SingleEndLibrary','PairedEndLibrary','ReferenceAssembly'], displayName: "Example Sequence Assembly Inputs", header:'Various types of read data configured for sequence assembly.'},
                {name:['ContigSet'], displayName: "Example Contig Sets", header:'A set of DNA sequences'},
                {name:['Genome'], displayName: "Example Genomes", header:'Genomic sequence generally with attached functional annotations'},
                {name:['FBAModel'], displayName: "Example FBAModels", header:'A metabolic model of an organism'},
                {name:['Media'], displayName: "Example Media", header:'Specification of an environmental condition'},
                {name:['Collection', 'Metagenome'], displayName: "Example Metagenomic Data Sets", header:'Sets of WGS and amplicon metagenomes'},
                {name:['TranscriptomeHack'], displayName: "Example Sorghum Transcriptomes", header:'Sorghum bicolor transcriptome data in response to ABA and osmotic stress'}
                ]

        },

        ws: null,
        narWs:null,
        ws_landing_page_map: {},

        $mainPanel:null,
        $loadingDiv:null,


        /**
         * @method init
         * Builds the DOM structure for the widget.
         * Includes the tables and panel.
         * If any data was passed in (options.data), that gets shoved into the datatable.
         * @param {Object} - the options set.
         * @returns {Object} this shiny new widget.
         * @private
         */
        init: function(options) {
            this._super(options);
            var self = this;
            this.getLandingPageMap();  //start off this request so that we hopefully get something back right away

            this.$loadingDiv = $('<div>').addClass('kb-data-loading')
                                 .append('<img src="' + this.options.loadingImage + '">');
            this.$elem.append(this.$loadingDiv);
            this.$mainPanel = $('<div>')
                .css({'overflow-y':'auto','height':'604px'});
            this.$elem.append(this.$mainPanel);

            if (window.kbconfig && window.kbconfig.urls) {
                this.options.ws_url = window.kbconfig.urls.workspace;
                this.data_icons = window.kbconfig.icons.data;
                this.icon_colors = window.kbconfig.icons.colors;
            }
            this.showLoading();

            var self = this;
            $(document).on('setWorkspaceName.Narrative', function(e, info){
                self.narWs = info.wsId;
                self.getExampleDataAndRender();
            })
            return this;
        },

        refresh: function() { },

        objectList:null,

        getExampleDataAndRender: function() {
            var self = this;
            if (self.narWs && self.ws) {
                self.ws.list_objects({
                        ids : [self.options.exampleWsId],
                        includeMetadata: 1
                    },
                    function(infoList) {
                        self.objectList = [];
                        // object_info:
                        // [0] : obj_id objid // [1] : obj_name name // [2] : type_string type
                        // [3] : timestamp save_date // [4] : int version // [5] : username saved_by
                        // [6] : ws_id wsid // [7] : ws_name workspace // [8] : string chsum
                        // [9] : int size // [10] : usermeta meta
                        for (var i=0; i<infoList.length; i++) {
                            // skip narrative objects
                            if (infoList[i][2].indexOf('KBaseNarrative') == 0) { continue; }
                            if (infoList[i][1].indexOf('Transcriptome') == 0) {
                                infoList[i][2] = 'TranscriptomeHack';
                            }
                            self.objectList.push({
                                    $div:self.renderObjectRowDiv(infoList[i]), // we defer rendering the div until it is shown
                                    info:infoList[i]
                                }
                            );
                        }
                        self.renderData();
                    },
                    function(error) {
                        self.$mainPanel.show();
                        self.$mainPanel.append("error: ");
                        self.$mainPanel.append(error.error.message);
                        console.error(error);
                        self.hideLoading();
                    });
            }

        },


        renderData: function() {
            var self = this;
            if (!self.objectList) { return; }

            var typeDivs = {};
            for(var t=0; t<self.options.exampleTypeOrder.length; t++) {
                var typeInfo = self.options.exampleTypeOrder[t];
                var $tc = $('<div>')
                            .append($('<div>').css({'margin':'15px'})
                                .append($('<div>').css({'margin':'4px','margin-top':'15px','color':'#555','font-size':'large','font-weight':'bold'})
                                        .append(typeInfo.displayName))
                                .append($('<div>').css({'margin':'4px','color':'#555'})
                                        .append(typeInfo.header)));
                for(var k=0; k<typeInfo.name.length; k++) {
                    typeDivs[typeInfo.name[k]] = $tc;
                }
            }
            var $tc = $('<div>')
                            .append($('<div>').css({'margin':'15px'})
                                .append($('<div>').css({'margin':'4px','margin-top':'15px','color':'#555','font-size':'large','font-weight':'bold'})
                                        .append('Other Examples'))
                                .append($('<div>').css({'margin':'4px','color':'#555'})
                                        .append('Assorted data types used in more advanced analyses')));
            typeDivs['other.types'] = $tc;

            var hasOthers = false;
            self.objectList.sort(function(a,b) {
                                        if (a.info[2].toUpperCase() > b.info[2].toUpperCase()) return -1; // sort by type
                                        if (a.info[2].toUpperCase() < b.info[2].toUpperCase()) return 1;
                                        if (a.info[1].toUpperCase() > b.info[1].toUpperCase()) return -1; // then by name
                                        if (a.info[1].toUpperCase() < b.info[1].toUpperCase()) return 1;
                                        return 0;
                                    });
            for (var k=0; k<self.objectList.length; k++) {
                var obj = self.objectList[k];
                var typeName='';
                if (obj.info[2]==='TranscriptomeHack') {
                    typeName=obj.info[2];
                } else {
                    typeName = obj.info[2].split('-')[0].split('.')[1];
                }

                if (typeDivs.hasOwnProperty(typeName)) {
                    typeDivs[typeName].append(obj.$div);
                } else {
                    typeDivs['other.types'].append(obj.$div);
                    hasOthers = true;
                }
            }

            for(var t=0; t<self.options.exampleTypeOrder.length; t++) {
                self.$mainPanel.append(typeDivs[self.options.exampleTypeOrder[t].name[0]]);
            }
            if (hasOthers) {
                self.$mainPanel.append(typeDivs['other.types']);
            }

            self.hideLoading();
        },

        getObjData: function(type, ignoreVersion) {
            if (type) {
                var dataSet = {};
                if (typeof type === 'string') {
                    type = [type];
                }
                for (var i=0; i<type.length; i++) {
                    if (this.obj_data[type[i]]) {
                        dataSet[type[i]]=this.obj_data[type[i]];
                    }
                }
                return dataSet;
            }
            return this.obj_data;
        },

        renderObjectRowDiv: function(object_info) {
            var self = this;
            // object_info:
            // [0] : obj_id objid // [1] : obj_name name // [2] : type_string type
            // [3] : timestamp save_date // [4] : int version // [5] : username saved_by
            // [6] : ws_id wsid // [7] : ws_name workspace // [8] : string chsum
            // [9] : int size // [10] : usermeta meta
            var type = '';
            if (object_info[2]==='TranscriptomeHack') {
                type='Genome';
            } else {
                var type_tokens = object_info[2].split('.')
                var type_module = type_tokens[0];
                type = type_tokens[1].split('-')[0];
            }

            var $addDiv =
                $('<div>').append(
                    $('<button>').addClass('kb-primary-btn').css({'white-space':'nowrap', padding:'10px 15px'})
                        .append($('<span>').addClass('fa fa-chevron-circle-left').append(' Add'))
                        .on('click',function() { // probably should move action outside of render func, but oh well
                            $(this).attr("disabled","disabled");
                            $(this).html('<img src="'+self.options.loadingImage+'">');

                            var thisBtn = this;
                            self.ws.copy_object({
                                to:   {ref: self.narWs     + "/" + object_info[1]},
                                from: {ref: object_info[6] + "/" + object_info[0]} },
                                function (info) {
                                    $(thisBtn).html('Added');
                                    self.trigger('updateDataList.Narrative');
                                },
                                function(error) {
                                    $(thisBtn).html('Error');
                                    if (error.error && error.error.message) {
                                        if (error.error.message.indexOf('may not write to workspace')>=0) {
                                            self.options.$importStatus.html($('<div>').css({'color':'#F44336','width':'500px'}).append('Error: you do not have permission to add data to this Narrative.'));
                                        } else {
                                            self.options.$importStatus.html($('<div>').css({'color':'#F44336','width':'500px'}).append('Error: '+error.error.message));
                                        }
                                    } else {
                                        self.options.$importStatus.html($('<div>').css({'color':'#F44336','width':'500px'}).append('Unknown error!'));
                                    }
                                    console.error(error);
                                });

                        }));

            var shortName = object_info[1]; var isShortened=false;
            /*if (shortName.length>this.options.max_name_length) {
                shortName = shortName.substring(0,this.options.max_name_length-3)+'...';
                isShortened=true;
            }*/
            var $name = $('<span>').addClass("kb-data-list-name").append(shortName);
            if (isShortened) { $name.tooltip({title:object_info[1], placement:'bottom'}); }
            var $type = $('<span>').addClass("kb-data-list-type").append(type);

            var metadata = object_info[10];
            var metadataText = '';
            for(var key in metadata) {
                if (metadata.hasOwnProperty(key)) {
                    metadataText += '<tr><th>'+ key +'</th><td>'+ metadata[key] + '</td></tr>';
                }
            }
            if (type==='Genome') {
                if (metadata.hasOwnProperty('Name')) {
                    $type.html('Genome: '+metadata['Name']);
                }
            }
            /*
            var landingPageLink = this.options.default_landing_page_url +object_info[7]+ '/' + object_info[1];
            if (this.ws_landing_page_map) {
                if (this.ws_landing_page_map[type_module]) {
                    if (this.ws_landing_page_map[type_module][type]) {
                        landingPageLink = this.options.landing_page_url +
                            this.ws_landing_page_map[type_module][type] + "/" +
                            object_info[7]+ '/' + object_info[1];
                    }
                }
            }

            var $moreRow  = $('<div>').addClass("kb-data-list-more-div").hide()
                                .append($('<div>').css({'text-align':'center','margin':'5pt'})
                                            .append('<a href="'+landingPageLink+'" target="_blank">'+
                                                        'explore data</a>&nbsp&nbsp|&nbsp&nbsp')
                                            .append('<a href="'+this.options.landing_page_url+'objgraphview/'+object_info[7] +'/'+object_info[1] +'" target="_blank">'+
                                                        'view provenance</a><br>'))
                                .append(
                                    $('<table style="width=100%">')
                                        .append("<tr><th>Permament Id</th><td>" +object_info[6]+ "/" +object_info[0]+ "/" +object_info[4] + '</td></tr>')
                                        .append(metadataText));

            var $toggleAdvancedViewBtn = $('<span>').addClass('btn btn-default btn-xs kb-data-list-more-btn')
                .html('<span class="fa fa-plus" style="color:#999" aria-hidden="true"/>')
                .on('click',function() {
                        var $more = $(this).closest(".kb-data-list-obj-row").find(".kb-data-list-more-div");
                        if ($more.is(':visible')) {
                            $more.slideToggle('fast');
                            $(this).html('<span class="fa fa-plus" style="color:#999" aria-hidden="true" />');
                        } else {
                            $more.slideToggle('fast');
                            $(this).html('<span class="fa fa-minus" style="color:#999" aria-hidden="true" />');
                        }
                    });*/
            var icons = this.data_icons;
            var icon = _.has(icons, type) ? icons[type] : icons['DEFAULT'];
            var $logo = $('<span>')
            // background circle
            .addClass("fa-stack fa-2x").css({'cursor':'pointer'})
            .append($('<i>')
            .addClass("fa fa-circle fa-stack-2x")
            .css({'color': this.logoColorLookup(type)}));
            // add stack of font-awesome icons
            _.each(icon, function(cls) {
              $logo.append($('<i>')
              .addClass("fa fa-inverse fa-stack-1x " + cls));
            });

            var $topTable = $('<table>')
                                 .css({'width':'100%','background':'#fff'})  // set background to white looks better on DnD
                                 .append($('<tr>')
                                         .append($('<td>')
                                                 .css({'width':'90px'})
                                                .append($addDiv.hide()))
                                         .append($('<td>')
                                                 .css({'width':'50px'})
                                                 .append($logo))/*$('<span>')
                                            		 	.addClass("kb-data-list-logo")
                                            		 	.css({'background-color':this.logoColorLookup(type)})
                                            		 	.append(type.substring(0,1))))*/
                                         .append($('<td>')
                                                 .append($name).append('<br>').append($type)));

	    var $row = $('<div>')
                                .css({margin:'2px',padding:'4px','margin-bottom': '5px'})
                                //.addClass('kb-data-list-obj-row')
                                .append($('<div>').addClass('kb-data-list-obj-row-main')
                                            .append($topTable))
                                .mouseenter(function(){
                                    $addDiv.show();
                                })
                                .mouseleave(function(){
                                    $addDiv.hide();
                                });

            return $row;
        },



        renderMore: function() {
            var self=this;
            if (self.objectList) {

                if (!self.searchFilterOn) { // if search filter is off, then we just are showing everything
                    var start = self.n_objs_rendered;
                    for(var i=start; i<self.objectList.length; i++) {
                        // only show them as we scroll to them
                        if (self.n_objs_rendered >= start+self.options.objs_to_render_on_scroll) {
                            break;
                        }
                        self.attachRow(i);
                    }
                    //console.log('showing '+ self.n_objs_rendered + ' of ' + self.objectList.length);
                } else {
                    // search filter is on, so we have to base this on what is currently filtered
                    var start = self.n_filteredObjsRendered;
                    for(var i=start; i<self.currentMatch.length; i++) {
                        // only show them as we scroll to them
                        if (self.n_filteredObjsRendered >= start+self.options.objs_to_render_on_scroll) {
                            break;
                        }
                        self.attachRowElement(self.currentMatch[i]);
                        self.n_filteredObjsRendered++;
                    }
                    //console.log('showing '+ self.n_filteredObjsRendered + ' of ' + self.currentMatch.length + ' objs matching search filter');
                }
            }
        },

        attachRow: function(index) {
            if (this.objectList[index].attached) { return; }
            if (this.objectList[index].$div) {
                this.$mainListDiv.append(this.objectList[index].$div);
            } else {
                this.objectList[index].$div = this.renderObjectRowDiv(this.objectList[index].info);
                this.$mainListDiv.append(this.objectList[index].$div);
            }
            this.objectList[index].attached = true;
            this.n_objs_rendered++;
        },
        attachRowElement: function(row) {
            if (row.attached) { return; } // return if we are already attached
            if (row.$div) {
                this.$mainListDiv.append(row.$div);
            } else {
                row.$div = this.renderObjectRowDiv(row.info);
                this.$mainListDiv.append(row.$div);
            }
            row.attached = true;
            this.n_objs_rendered++;
        },

        detachAllRows: function() {
            for (var i=0; i<this.objectList.length; i++) {
                this.detachRow(i);
            }
            this.$mainListDiv.children().detach();
            this.n_objs_rendered=0;
            this.renderedAll = false;
        },
        detachRow: function(index) {
            if (this.objectList[index].attached) {
                if (this.objectList[index].$div) {
                    this.objectList[index].$div.detach();
                }
                this.objectList[index].attached = false;
                this.n_objs_rendered--;
            }
        },


        renderList: function() {
            var self = this;
            self.showLoading();

            self.detachAllRows();

            if (self.objectList.length>0) {
                for(var i=0; i<self.objectList.length; i++) {
                    // only show up to the given number
                    if (i>=self.options.objs_to_render_to_start) {
                        self.n_objs_rendered = i;
                        break;
                    }
                    self.attachRow(i);
                }
            } else {
                // todo: show an upload button or some other message if there are no elements
                self.$mainListDiv.append($('<div>').css({'text-align':'center','margin':'20pt'}).append("No data added yet."));
            }

            self.hideLoading();
        },

        renderController: function() {
            var self = this;

            var $byDate = $('<label id="nar-data-list-default-sort-label" class="btn btn-default">').addClass('btn btn-default')
                                .append($('<input type="radio" name="options" id="nar-data-list-default-sort-option" autocomplete="off">'))
                                .append("date")
                                .on('click',function() {
                                    self.sortData(function(a,b) {
                                        if (a.info[3] > b.info[3]) return -1; // sort by date
                                        if (a.info[3] < b.info[3]) return 1;  // sort by date
                                        return 0;
                                    });
                                });

            var $byName = $('<label class="btn btn-default">')
                                .append($('<input type="radio" name="options" id="option2" autocomplete="off">'))
                                .append("name")
                                .on('click',function() {
                                    self.sortData(function(a,b) {
                                        if (a.info[1].toUpperCase() < b.info[1].toUpperCase()) return -1; // sort by name
                                        if (a.info[1].toUpperCase() > b.info[1].toUpperCase()) return 1;
                                        return 0;
                                    });
                                });

            var $byType = $('<label class="btn btn-default">')
                                .append($('<input type="radio" name="options" id="option3" autocomplete="off">'))
                                .append("type")
                                .on('click',function() {
                                    self.sortData(function(a,b) {
                                        if (a.info[2].toUpperCase() > b.info[2].toUpperCase()) return -1; // sort by type
                                        if (a.info[2].toUpperCase() < b.info[2].toUpperCase()) return 1;
                                        return 0;
                                    });
                                });
            var $upOrDown = $('<button class="btn btn-default btn-sm" type="button">').css({'margin-left':'5px'})
                                .append('<span class="glyphicon glyphicon-sort" style="color:#777" aria-hidden="true" />')
                                .on('click',function() {
                                    self.reverseData();
                                });

            var $sortByGroup = $('<div data-toggle="buttons">')
                                    .addClass("btn-group btn-group-sm")
                                    .css({"margin":"2px"})
                                    .append($byDate)
                                    .append($byName)
                                    .append($byType);

            var $addDataBtn = $('<button>')
                                .addClass("btn btn-warning kb-data-list-get-data-button")
                                .append('<span class="fa fa-plus" style="color:#fff" aria-hidden="true" /> Get Data')
                                .on('click',function() {
                                    self.trigger('toggleSidePanelOverlay.Narrative');

                                      // Lovely hack to make the 'Get Data' button behave like a method/app panel button.
                                    /*  self.methClient.get_method_spec({ 'ids' : ['import_genome_data_generic'] },
                                          function(spec) {
                                              self.trigger('methodClicked.Narrative', spec[0]);
                                          },
                                          function(error) {
                                              self.showError(error);
                                          }
                                      );*/
                                });


            var $openSearch = $('<span>').addClass('btn btn-default kb-data-list-nav-buttons')
                .html('<span class="fa fa-search" style="color:#666" aria-hidden="true"/>')
                .on('click',function() {
                    if(!self.$searchDiv.is(':visible')) {
                        self.$searchDiv.show();
                        self.$sortByDiv.hide();
                        self.$filterTypeDiv.hide();
                    } else {
                        self.$searchDiv.hide();
                    }
                });
            var $openSort = $('<span>').addClass('btn btn-default kb-data-list-nav-buttons')
                .html('<span class="fa fa-sort-amount-asc" style="color:#666" aria-hidden="true"/>')
                .on('click',function() {
                    if(!self.$sortByDiv.is(':visible')) {
                        self.$sortByDiv.show();
                        self.$searchDiv.hide();
                        self.$filterTypeDiv.hide();
                    } else {
                        self.$sortByDiv.hide();
                    }
                });
            var $openFilter = $('<span>').addClass('btn btn-default kb-data-list-nav-buttons')
                .html('<span class="fa fa-filter" style="color:#666" aria-hidden="true"/>')
                .on('click',function() {
                    if(!self.$filterTypeDiv.is(':visible')) {
                        self.$filterTypeDiv.show();
                        self.$sortByDiv.hide();
                        self.$searchDiv.hide();
                    } else {
                        self.$filterTypeDiv.hide();
                    }
                });

            self.$searchInput = $('<input type="text">').addClass('form-control');
            self.$searchDiv = $('<div>').addClass("input-group").css({'margin-bottom':'10px'})
                                .append(self.$searchInput)
                                .append($("<span>").addClass("input-group-addon")
                                            .append($("<span>")
                                                .addClass("glyphicon glyphicon-search")
                                                .css({'cursor':'pointer'})
                                                .on('click',function() {
                                                        self.search();
                                                    })  ));

            self.$sortByDiv = $('<div>').css({'margin':'3px','margin-left':'5px','margin-bottom':'10px'})
                                .append("<small>sort by: </small>")
                                .append($sortByGroup)
                                .append($upOrDown);

            self.$filterTypeSelect = $('<select>').addClass("form-control")
                                        .append($('<option value="">'))
                                        .change(function() {
                                            var optionSelected = $(this).find("option:selected");
                                            var typeSelected  = optionSelected.val();
                                            //var textSelected   = optionSelected.text();
                                            self.filterByType(typeSelected);
                                        });

            self.$filterTypeDiv = $('<div>').css({'margin':'3px','margin-left':'5px','margin-bottom':'10px'})
                                .append(self.$filterTypeSelect);



            var $header = $('<div>').addClass('row').css({'margin':'5px'})
                    .append($('<div>').addClass('col-xs-7').css({'margin':'0px','padding':'0px'})
                        .append($openSearch)
                        .append($openSort)
                        .append($openFilter))
                    .append($('<div>').addClass('col-xs-5').css({'margin':'0px','padding':'0px','text-align':'right'})
                        .append($addDataBtn));


            self.$sortByDiv.hide();
            self.$searchDiv.hide();
            self.$filterTypeDiv.hide();

            var $filterDiv = $('<div>')
                                .append(self.$sortByDiv)
                                .append(self.$searchDiv)
                                .append(self.$filterTypeDiv);

            self.$controllerDiv.append($header).append($filterDiv);
        },

        populateAvailableTypes: function() {
            var self = this;
            if (self.availableTypes && self.$filterTypeSelect) {

                var types = [];
                for(var type in self.availableTypes) {
                    if(self.availableTypes.hasOwnProperty(type)) {
                        types.push(type);
                    }
                }
                types.sort();

                self.$filterTypeSelect.empty();
                self.$filterTypeSelect.append($('<option value="">'));
                for(var i=0; i<types.length; i++) {
                    var countStr = " (".concat(self.availableTypes[types[i]].count).concat(" objects)");
                    self.$filterTypeSelect.append(
                        $('<option value="'+self.availableTypes[types[i]].type+'">')
                            .append(self.availableTypes[types[i]].type + countStr));
                }
            }
        },


        reverseData: function() {
            var self = this;
            if (!self.objectList) { return; }

            self.objectList.reverse();
            self.renderList();
            self.search();

            self.hideLoading();
        },

        sortData: function(sortfunction) {
            var self = this;
            if (!self.objectList) { return; }
            //should add spinning wait bar ....
            self.showLoading();

            self.objectList.sort(sortfunction);
            self.renderList();
            self.search();  // always refilter on the search term search if there is something there

            self.hideLoading();

            // go back to the top on sort
            self.$mainListDiv.animate({
                scrollTop:0
            }, 300); // fast = 200, slow = 600
        },


        currentMatch: [],
        currentTerm: '',
        searchFilterOn: false,
        n_filteredObjsRendered: null,

        search: function(term, type) {
            var self = this;
            if (!self.objectList) { return; }

            if (!term && self.$searchInput) {
                term = self.$searchInput.val();
            }

            // if type wasn't selected, then we try to get something that was set
            if (!type) {
                if (self.$filterTypeSelect) {
                    type = self.$filterTypeSelect.find("option:selected").val();
                }
            }

            term = term.trim();
            if (term.length>0 || type) {
                self.searchFilterOn = true;
                // todo: should show searching indicator (could take several seconds if there is a lot of data)
                // optimization => we filter existing matches instead of researching everything if the new
                // term starts with the last term searched for
                var newMatch = [];
                if (!self.currentTerm) {
                    // reset if currentTerm is null or empty
                    self.currentMatch = self.objectList;
                } else {
                    if (term.indexOf(self.currentTerm)!==0) {
                        self.currentMatch = self.objectList;
                    }
                }
                // clean the term for regex use
                term = term.replace(/\|/g,'\\|').replace(/\\\\\|/g,'|'); // bars are common in kb ids, so escape them unless we have \\|
                term = term.replace(/\./g,'\\.').replace(/\\\\\./g,'.'); // dots are common in names, so we escape them, but
                                                                         // if a user writes '\\.' we assume they want the regex '.'

                var regex = new RegExp(term, 'i');

                var n_matches = 0; self.n_filteredObjsRendered = 0;
                for(var k=0; k<self.currentMatch.length; k++) {
                    // [0] : obj_id objid // [1] : obj_name name // [2] : type_string type
                    // [3] : timestamp save_date // [4] : int version // [5] : username saved_by
                    // [6] : ws_id wsid // [7] : ws_name workspace // [8] : string chsum
                    // [9] : int size // [10] : usermeta meta
                    var match = false;
                    var info = self.currentMatch[k].info;
                    if (regex.test(info[1])) { match = true; } // match on name
                    else if (regex.test(info[2].split('.')[1].split('-'))) { match = true; } // match on type name
                    else if (regex.test(info[5])) { match = true; } // match on saved_by user

                    if (!match && info[10]) { // match on metadata values
                        for(var metaKey in info[10]) {
                            if (info[10].hasOwnProperty(metaKey)) {
                                if (regex.test(info[10][metaKey])) { match = true; break; }
                                else if (regex.test(metaKey+"::"+info[10][metaKey])) {
                                    match = true; break;
                                }
                            }
                        }
                    }


                    if (type) { // if type is defined, then our sort must also filter by the type
                        if (type !== info[2].split('-')[0].split('.')[1]) {
                            match = false; // no match if we are not the selected type!
                        }
                    }

                    if (match) {
                        // matches must always switch to show if they are rendered
                        if (self.currentMatch[k].$div) {
                            self.currentMatch[k].$div.show();
                        }

                        // todo: add check so we only show up to the number we render... switching to this will require that
                        // we revise the renderMore logic...
                        if (n_matches < self.options.objs_to_render_to_start) {
                            self.attachRowElement(self.currentMatch[k]);
                            self.n_filteredObjsRendered++;
                        }

                        newMatch.push(self.currentMatch[k]);
                        n_matches++;
                    }
                    else {
                        if (self.currentMatch[k].$div) {
                            self.currentMatch[k].$div.hide();
                        }
                    }
                }
                self.currentMatch = newMatch; // update the current match
            } else {
                self.searchFilterOn = false;
                // no new search, so show all and render the list
                for(var k=0; k<self.objectList.length; k++) {
                    if (self.objectList[k].$div) {
                        self.objectList[k].$div.show();
                    }
                }
                self.renderList();
            }
            self.currentTerm = term;
        },


        filterByType: function(type) {
            var self = this;
            self.search(null,type);
        },

        getRichData: function(object_info,$moreRow) {
            var self = this;
            var $usernameTd = $moreRow.find(".kb-data-list-username-td");
            self.displayRealName(object_info[5],$usernameTd);
        },

        showLoading : function() {
            this.$loadingDiv.show();
            this.$mainPanel.hide();
        },
        hideLoading : function() {
            this.$loadingDiv.hide();
            this.$mainPanel.show();
        },

        displayRealName: function(username,$targetSpan) {
	    var self = this;
	    // todo : use globus to populate user names, but we use a hack because of globus CORS headers
	    if (self.ws) { // make sure we are logged in and have some things

                if (self.real_name_lookup[username]) {
                    $targetSpan.html(self.real_name_lookup[username]+" ("+username+")");
                } else {
                    self.real_name_lookup[username] = "..."; // set a temporary value so we don't search again
                    $targetSpan.html(username);
                    $.ajax({
                            type: "GET",
                            url: self.options.user_name_fetch_url + username + "&token="+self._attributes.auth.token,
                            dataType:"json",
                            crossDomain : true,
                            success: function(data,res,jqXHR) {
                                if (username in data['data'] && data['data'][username]['fullName']) {
                                    self.real_name_lookup[username] = data['data'][username]['fullName'];
                                    $targetSpan.html(self.real_name_lookup[username]+" ("+username+")");
                                }
                            },
                            error: function(jqXHR, textStatus, errorThrown) {
                                //do nothing
                            }
                        });
                }
	    }
        },

        getLandingPageMap: function() {
            this.ws_landing_page_map = window.kbconfig.landing_page_map;
        },

        loggedInCallback: function(event, auth) {
            this.ws = new Workspace(this.options.ws_url, auth);
            this.getExampleDataAndRender();
            return this;
        },

        loggedOutCallback: function(event, auth) {
            this.ws = null;
            this.isLoggedIn = false;
            return this;
        },

        logoColorLookup:function(type) {
          var code = 0;
          for (var i=0; i < type.length; code += type.charCodeAt(i++));
          return this.icon_colors[ code % this.icon_colors.length ];
        }

    })

})(jQuery);

(function($, undefined) {
    $.KBWidget({
        name: 'kbaseNarrativeCellMenu',
        parent: 'kbaseWidget',
        options: {},

        init: function(options) {
            this._super(options);

            var $deleteBtn = $('<button type="button" class="btn btn-default btn-xs" data-toggle="tooltip" data-placement="left" Title="Delete Cell">')
                              .css({"background-color": "transparent"})
                             .append($('<span class="fa fa-trash-o" style="font-size:14pt; padding-left: 5px;">'))
                             .click($.proxy(function() {
                    this.trigger('deleteCell.Narrative', IPython.notebook.get_selected_index());
                }, this));

            var $btn = $('<button type="button" data-toggle="dropdown" aria-haspopup="true" class="btn btn-default btn-xs">')
                      .css({"background-color": "transparent"})
                       .append($('<span class="fa fa-cog" style="font-size:14pt">'));

            this.$menu = $('<ul>')
                         .addClass('dropdown-menu')
                         .css({
                                'right' : '0',
                                'left' : 'auto',
                                'margin' : '0'
                         });

            if (window.kbconfig && window.kbconfig.mode === "debug") {
                this.addMenuItem({
                    icon: 'fa fa-code',
                    text: 'View Job Submission',
                    action: function() {
                        var metadata = IPython.notebook.get_selected_cell().metadata;
                        var stackTrace = [];
                        if (metadata['kb-cell'] && metadata['kb-cell']['stackTrace'])
                            stackTrace = metadata['kb-cell']['stackTrace'];
                        console.log(stackTrace);
                        var cell = IPython.notebook.insert_cell_below('code');
                        if (stackTrace instanceof Array) {
                            cell.set_text('job_info=' + stackTrace[stackTrace.length - 1] + '\njob_info');
                            IPython.notebook.get_selected_cell().execute();
                        }
                        else {
                            cell.set_text('job_info=' + stackTrace);
                        }
                    }
                });
            }

            this.addMenuItem({
                icon: 'fa fa-arrow-up',
                text: 'Move Cell Up',
                action: function() {
                    IPython.notebook.move_cell_up();
                }
            });

            this.addMenuItem({
                icon: 'fa fa-arrow-down',
                text: 'Move Cell Down',
                action: function() {
                    IPython.notebook.move_cell_down();
                }
            });

            this.addMenuItem({
                icon: 'fa fa-caret-square-o-up',
                text: 'Insert Cell Above',
                action: function() {
                    var cell = IPython.notebook.insert_cell_above('markdown');
                }
            });

            this.addMenuItem({
                icon: 'fa fa-caret-square-o-down',
                text: 'Insert Cell Below',
                action: function() {
                    var cell = IPython.notebook.insert_cell_below('markdown');
                }
            });

            this.addMenuItem({
                icon: 'fa fa-terminal',
                text: 'Convert to code cell',
                action: function() {
                    //IPython.notebook.to_code();
                },
                disable: true
            });

            this.addMenuItem({
                icon: 'fa fa-trash-o',
                text: 'Delete Cell',
                action: $.proxy(function() {
                                    this.trigger('deleteCell.Narrative', IPython.notebook.get_selected_index());
                                }, this)
            });

            // this shows whether the app is running
            this.$runningIcon = $("<span>").addClass("fa fa-circle-o-notch fa-spin")
                                .css({"color": "rgb(42,121,191)"})
                                .hide();
            // this shows on error
            this.$errorIcon =  $("<span>").addClass("fa fa-exclamation-triangle")
                              .css({"color": "red"})
                              .hide();

            this.$elem.append(
                $('<span>')
                    .append(this.$runningIcon)
                    .append(this.$errorIcon)
                    .append($deleteBtn)
                    .append($('<span class="dropdown">')
                              .append($btn)
                              .append(this.$menu)));
            $deleteBtn.tooltip();

            return this;
        },

        addMenuItem: function(item) {
            var label = '';
            if (item.icon)
                label += '<span class="' + item.icon +'"></span> ';
            if (item.text)
                label += ' ' + item.text;
            var $item = $('<a>')
                        .append(label)
                        .click($.proxy(function(event) {
                            event.preventDefault();
                            event.stopPropagation();
                            if (!item.disable) {
                                if (item.action)
                                    item.action();
                                this.$menu.dropdown('toggle');
                            }
                        }, this));
            var $itemElem = $('<li>').append($item);
            if (item.disable)
                $itemElem.addClass('disabled');
            this.$menu.append($itemElem);
        },
    });
})( jQuery );

/**
 * @author Bill Riehl <wjriehl@lbl.gov>
 * @public
 * This is a generalized class for an input cell that sits in an IPython markdown cell.
 * It handles all of its rendering here (no longer in HTML in markdown), and invokes
 * an input widget passed to it.
 *
 * This expects a method object passed to it, and expects that object to have the new
 * format from the narrative_method_store service.
 */

(function( $, undefined ) {
    $.KBWidget({
        name: "kbaseNarrativeMethodCell",
        parent: "kbaseWidget",
        version: "1.0.0",
        options: {
            method: null,
            cellId: null,
            methodHelpLink: '/functional-site/#/narrativestore/method/',
        },
        IGNORE_VERSION: true,
        defaultInputWidget: 'kbaseNarrativeMethodInput',
        allowOutput: true,
        runState: 'input',

        /**
         * @private
         * @method
         * Initialization is done by the KBase widget architecture itself.
         * This requires and assumes that a method and cellId are both present
         * as options
         * TODO: add checks and failures for this.
         */
        init: function(options) {
            this._super(options);

            this.options.method = this.options.method.replace(/\n/g, '');
            this.method = JSON.parse(this.options.method);
            this.cellId = this.options.cellId;
            this.initErrorModal();
            this.render();
            return this;
        },

        /**
         * Renders this cell and its contained input widget.
         */
        render: function() {
            this.$inputDiv = $('<div>');
            this.$submitted = $('<span>').addClass("kb-func-timestamp").hide();

            // These are the 'delete' and 'run' buttons for the cell
            this.$runButton = $('<button>')
                             .attr('id', this.cellId + '-run')
                             .attr('type', 'button')
                             .attr('value', 'Run')
                             .addClass('kb-method-run')
                             .append('Run');
            this.$runButton.click(
                $.proxy(function(event) {
                    event.preventDefault();

                    if (!this.checkMethodRun())
                        return;

                    this.submittedText = 'submitted on ' + this.readableTimestamp();
                    this.trigger('runCell.Narrative', {
                        cell: IPython.notebook.get_selected_cell(),
                        method: this.method,
                        parameters: this.getParameters()
                    });
                    this.changeState('submitted');
                }, this)
            );

            this.$stopButton = $('<button>')
                              .attr('type', 'button')
                              .attr('value', 'Cancel')
                              .addClass('kb-app-run kb-app-cancel')
                              .append('Cancel')
                              .css({'margin-right':'5px'})
                              .click(
                                  $.proxy(function(event) {
                                      this.stopRunning();
                                  }, this)
                              )
                              .hide();

            var $buttons = $('<div>')
                           .addClass('buttons pull-left')
                           .append(this.$runButton)
                           .append(this.$stopButton)
                           .append(this.$submitted);

            var $progressBar = $('<div>')
                               .attr('id', 'kb-func-progress')
                               .addClass('pull-left')
                               .css({'display' : 'none'})
                               .append($('<div>')
                                       .addClass('progress progress-striped active kb-cell-progressbar')
                                       .append($('<div>')
                                               .addClass('progress-bar progress-bar-success')
                                               .attr('role', 'progressbar')
                                               .attr('aria-valuenow', '0')
                                               .attr('aria-valuemin', '0')
                                               .attr('aria-valuemax', '100')
                                               .css({'width' : '0%'})))
                               .append($('<p>')
                                       .addClass('text-success'));

            var methodId = this.options.cellId + '-method-details-'+this.genUUID();
            var buttonLabel = 'details';
            var methodDesc = this.method.info.tooltip;
            var $menuSpan = $('<div class="pull-right">');
            var $methodInfo = $('<div>')
                              .addClass('kb-func-desc')
                              .append('<h1><b>' + this.method.info.name + '</b></h1>')
                              .append($menuSpan)
                              .append($('<span>')
                                      .addClass('pull-right kb-func-timestamp')
                                      .attr('id', 'last-run'))
                              /*.append($('<button>')
                                      .addClass('btn btn-default btn-xs')
                                      .attr('type', 'button')
                                      .attr('data-toggle', 'collapse')
                                      .attr('data-target', '#' + methodId)
                                      .append(buttonLabel))*/
                              .append($('<h2>')
                                      .attr('id', methodId)
                                      //.addClass('collapse')
                                      .append(methodDesc +
                                            ' &nbsp&nbsp<a href="'+ this.options.methodHelpLink + this.method.info.id +
                                                '" target="_blank">more...</a>'

                                      ));

            // Controls (minimize)
            var $controlsSpan = $('<div>').addClass("pull-left");
            var $minimizeControl = $("<span class='glyphicon glyphicon-chevron-down'>")
                                    .css({color: "#888", fontSize: "14pt",
                                          paddingTop: "7px"});
            $controlsSpan.append($minimizeControl);

            this.$cellPanel = $('<div>')
                              .addClass('panel kb-func-panel kb-cell-run')
                              .append($controlsSpan)
                              .append($('<div>')
                                      .addClass('panel-heading')
                                      .append($methodInfo))
                              .append($('<div>')
                                      .addClass('panel-body')
                                      .append(this.$inputDiv))
                              .append($('<div>')
                                      .addClass('panel-footer')
                                      .css({'overflow' : 'hidden'})
                                      .append($buttons));

            this.cellMenu = $menuSpan.kbaseNarrativeCellMenu();
            this.$elem.append(this.$cellPanel);

            // Add minimize/restore actions.
            // These mess with the CSS on the cells!
            var $mintarget = this.$cellPanel;
            this.panel_minimized = false;
            var self = this;
            $controlsSpan.click(function() {
              if (self.panel_minimized) {
                console.debug("restore full panel");
                $mintarget.find(".panel-body").slideDown();
                $mintarget.find(".panel-footer").show();
                $minimizeControl.removeClass("glyphicon-chevron-right")
                                .addClass("glyphicon-chevron-down")
                                .css({paddingTop: "7px"});
                self.panel_minimized = false;
              }
              else {
                console.debug("minimize panel");
                $mintarget.find(".panel-footer").hide();
                $mintarget.find(".panel-body").slideUp();
                $minimizeControl.removeClass("glyphicon-chevron-down")
                                 .addClass("glyphicon-chevron-right")
                                 .css({paddingTop: "7px"});
               self.panel_minimized = true;
              }
            });

            var inputWidgetName = this.method.widgets.input;
            if (!inputWidgetName || inputWidgetName === 'null')
                inputWidgetName = this.defaultInputWidget;

            this.$inputWidget = this.$inputDiv[inputWidgetName]({ method: this.options.method });
        },

        /**
         * @method
         * Returns parameters from the contained input widget
         * @public
         */
        getParameters: function() {
            if (this.$inputWidget)
                return this.$inputWidget.getParameters();
            return null;
        },

        /**
         * @method
         * Returns the state as reported by the contained input widget.
         * @public
         */
        getState: function() {
            return {
                'runningState' : {
                    'runState' : this.runState,
                    'submittedText' : this.submittedText,
                    'outputState' : this.allowOutput
                },
                'params' : this.$inputWidget.getState()
            };
        },

        /**
         * @method
         * Passes along the state to its contained input widget.
         * @public
         */
        loadState: function(state) {
            // cases (for older ones)
            // 1. state looks like:
            // { params: {},
            //   runningState: {runState,
            //                  submittedText,
            //                  outputState}
            // }
            // That's new!
            // old one just has the state that should be passed to the input widget.
            // that'll be deprecated soonish.
            if (state.hasOwnProperty('params') && state.hasOwnProperty('runningState')) {
                this.allowOutput = state.runningState.outputState;
                this.$inputWidget.loadState(state.params);
                this.submittedText = state.runningState.submittedText;
                this.changeState(state.runningState);
            }
            else
                this.$inputWidget.loadState(state);
        },

        /* Show/hide running icon */
        displayRunning: function(is_running, had_error) {
          if (is_running) {
            this.cellMenu.$runningIcon.show();
            // never show error icon while running
            this.cellMenu.$errorIcon.hide();
          }
          else {
            this.cellMenu.$runningIcon.hide();
            // only display error when not running
            if (had_error) { this.cellMenu.$errorIcon.show(); }
            else { this.cellMenu.$errorIcon.hide(); }
            }
          },

        /**
         * @method
         * This sends a trigger to the jobs panel to stop any running jobs. If the callback is
         * truthy, this resets the cell to an input state.
         */
        stopRunning: function() {
            this.trigger('cancelJobCell.Narrative', [this.cellId, true, $.proxy(function(isCanceled) {
                if (isCanceled) {
                    this.changeState('input');
                }
            }, this)]);
        },
        /**
         * @method
         * Shows an associated error with a cell (if available)
         */
        showError: function() {
            this.trigger('showJobError.Narrative', [this.cellId, true, $.proxy(function(isCanceled) {
                if (isCanceled) {
                    this.changeState('input');
                }
            }, this)]);
        },



        /**
         * @method
         * Updates the method cell's state.
         * Currently supports "input", "submitted", "running", or "complete".
         */
        changeState: function(runState) {
            if (!this.$cellPanel)
                return;
            if (this.runState !== runState) {
                this.runState = runState.toLowerCase();
                switch(this.runState) {
                    case 'submitted':
                        this.$cellPanel.removeClass('kb-app-step-running');
                        this.$elem.find('.kb-app-panel').removeClass('kb-app-error');
                        this.$submitted.html(this.submittedText).show();
                        this.$runButton.hide();
                        this.$stopButton.hide();
                        this.$inputWidget.lockInputs();
                        this.displayRunning(true);
                        break;
                    case 'complete':
                        console.debug("Method is complete");
                        this.$cellPanel.removeClass('kb-app-step-running');
                        this.$elem.find('.kb-app-panel').removeClass('kb-app-error');
                        this.$submitted.html(this.submittedText).show();
                        this.$runButton.hide();
                        this.$stopButton.hide();
                        this.$inputWidget.lockInputs();
                        this.displayRunning(false);
                        // maybe unlock? show a 'last run' box?
                        break;
                    case 'running':
                        this.$submitted.html(this.submittedText).show();
                        this.$elem.find('.kb-app-panel').removeClass('kb-app-error');
                        this.$cellPanel.addClass('kb-app-step-running');
                        this.$runButton.hide();
                        this.$stopButton.show();
                        this.$inputWidget.lockInputs();
                        this.displayRunning(true);
                        break;
                    case 'error':
                        this.$submitted.html(this.submittedText).show();
                        this.$cellPanel.addClass('kb-app-step-error');
                        this.$runButton.hide();
                        this.$stopButton.show();
                        this.$inputWidget.lockInputs();
                        this.$elem.find('.kb-app-panel').addClass('kb-app-error');
                        this.displayRunning(true, false);
                        break;
                    default:
                        this.$cellPanel.removeClass('kb-app-step-running');
                        this.$elem.find('.kb-app-panel').removeClass('kb-app-error');
                        this.$submitted.hide();
                        this.$runButton.show();
                        this.$stopButton.hide();
                        this.$inputWidget.unlockInputs();
                        this.displayRunning(false);
                        break;
                }
            }
        },

        getRunningState: function() {
            return this.runState;
        },

        /*
         * This function is invoked every time we run app. This is the difference between it
         * and getAllParameterValues/getParameterValue which could be invoked many times before running
         * (e.g. when widget is rendered).
         */
        prepareDataBeforeRun: function() {
            if (this.inputSteps) {
                for(var i=0; i<this.inputSteps.length; i++)
                    var v = this.inputSteps[i].widget.prepareDataBeforeRun();
            }
        },

        /* locks inputs and updates display properties to reflect the running state
            returns true if everything is valid and we can start, false if there were errors
        */
        checkMethodRun: function() {
            var v = this.$inputWidget.isValid();
            if (!v.isValid) {
                this.$errorModalContent.empty();
                for (var i=0; i<v.errormssgs.length; i++) {
                    this.$errorModalContent.append($('<div>')
                                                   .addClass("kb-app-step-error-mssg")
                                                   .append('['+(i+1)+']: ' + v.errormssgs[i]));
                }
                this.$errorModal.modal('show');
                return false;
            }

            return true;
        },

        initErrorModal: function() {
            // var errorModalId = "app-error-modal-"+ this.genUUID();
            // var modalLabel = "app-error-modal-lablel-"+ this.genUUID();
            this.$errorModalContent = $('<div>');
            this.$errorModal =  $('<div tabindex="-1" role="dialog" aria-hidden="true">').addClass("modal fade");
            this.$errorModal.append(
                $('<div>').addClass('modal-dialog').append(
                    $('<div>').addClass('modal-content').append(
                        $('<div>').addClass('modal-header kb-app-step-error-main-heading').append('<h4 class="modal-title" >Problems exist in your parameter settings.</h4>')
                    ).append(
                       $('<div>').addClass('modal-body').append(this.$errorModalContent)
                    ).append(
                        $('<div>').addClass('modal-footer').append(
                            $('<button type="button" data-dismiss="modal">').addClass("btn btn-default").append("Dismiss"))
                    )
                ));
            this.$elem.append(this.$errorModal);
        },

        /**
         * Refreshes the input widget according to its own method.
         */
        refresh: function() {
            if (this.$inputWidget)
                this.$inputWidget.refresh();
        },

        genUUID: function() {
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
                var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);
                return v.toString(16);
            });
        },

        /* temp hack to deal with current state of NJS */
        getSpecAndParameterInfo: function() {
            return {
                methodSpec : this.method,
                parameterValues: this.getParameters()
            };
        },

        setOutput: function(data) {
            if (data.cellId && this.allowOutput) {
                this.allowOutput = false;
                console.debug("Creating output cell...");
                data.next_steps = this.getNextSteps();
                this.trigger('createOutputCell.Narrative', data);
                this.changeState('complete');
            }
        },

        /**
         * Return list of specs which are the 'next steps'
         * from the current method.
         */
        getNextSteps: function() {
          //console.debug("Find next steps for method",this.method);
          var method_ids = [ ], app_ids = [ ];
          // add one or more next steps
          // XXX: replace this with something much smarter
          switch (this.method.info.id) {
            case "assemble_contigset_from_reads":
              method_ids.push("annotate_contigset"); // genome_assembly
              break;
            case "build_a_metabolic_model":
              method_ids.push("gapfill_a_metabolic_model"); // build_fba_model
              break;
            case  "retrieve_functional_abundance_profile":
              method_ids.push("normalize_abundance_profile"); //communities_build_functional_profile
              break;
            case "merge_to_community_model":
              method_ids.push("gapfill_a_metabolic_model"); //community_fba_modeling
              break;
            case "compare_two_proteomes_generic":
              method_ids.push("translate_model_to_new_genome"); //fba_model_translation
              break;
            case "translate_model_to_new_genome":
              method_ids.push("gapfill_a_metabolic_model"); //fba_model_translation
              break;
            case "gapfill_a_metabolic_model":
              method_ids.push("compare_two_metabolic_models_generic"); //fba_model_translation
              break;
            case "compute_pangenome":
              method_ids.push("genome_comparison_from_pangenome"); // genome_comparison
              break;
          }
          // Fetch function specs now because we need the real, human-readable
          // name of the spec and all we have is the id.
          var result = {};
          var params = {apps: app_ids, methods: method_ids};
          this.trigger('getFunctionSpecs.Narrative', [params, function(specs) {
              result.specs = specs;
          }]);
          return result.specs;
        },

        /**
         * Converts a timestamp to a simple string.
         * Do this American style - HH:MM:SS MM/DD/YYYY
         *
         * @param {string} timestamp - a timestamp in number of milliseconds since the epoch.
         * @return {string} a human readable timestamp
         */
        readableTimestamp: function(timestamp) {
            var format = function(x) {
                if (x < 10)
                    x = '0' + x;
                return x;
            };

            var d = null;
            if (timestamp)
                d = new Date(timestamp);
            else
                d = new Date();
            var hours = format(d.getHours());
            var minutes = format(d.getMinutes());
            var seconds = format(d.getSeconds());
            var month = d.getMonth()+1;
            var day = format(d.getDate());
            var year = d.getFullYear();

            return hours + ":" + minutes + ":" + seconds + ", " + month + "/" + day + "/" + year;
        }
    });
})( jQuery );

/**
 * @author Bill Riehl <wjriehl@lbl.gov>
 * @author Michael Sneddon <mwsneddon@lbl.gov>
 * @author Dan Gunter <dkgunter@lbl.gov>
 * @public
 * This is a generalized class for an input cell that sits in an IPython markdown cell.
 * It handles all of its rendering here (no longer in HTML in markdown), and invokes
 * an input widget passed to it.
 *
 * This expects a method object passed to it, and expects that object to have the new
 * format from the narrative_method_store service.
 */

(function( $, undefined ) {
    $.KBWidget({
        name: "kbaseNarrativeAppCell",
        parent: "kbaseWidget",
        version: "1.0.0",
        options: {
            app: null,
            cellId: null,
            loadingImage: 'static/kbase/images/ajax-loader.gif',
            methodStoreURL: 'https://kbase.us/services/narrative_method_store',

            appHelpLink: '/functional-site/#/narrativestore/app/',
            methodHelpLink: '/functional-site/#/narrativestore/method/',
        },
        IGNORE_VERSION: true,
        defaultInputWidget: 'kbaseNarrativeMethodInput',
        defaultOutputWidget: 'kbaseDefaultNarrativeOutput',

        appSpec: null,
        methodSpecs: null,
        inputSteps: null,
        inputStepLookup: null,

        $runButton: null,
        $stopButton: null,

        $errorModal: null,
        $errorModalContent:null,

        OUTPUT_ERROR_WIDGET: 'kbaseNarrativeError',

        state: null,

        /**
         * @private
         * @method
         * Initialization is done by the KBase widget architecture itself.
         * This requires and assumes that an app spec and cellId are both present.
         * TODO: add checks and failures for this.
         *
         * This renders by calling fetchMethodInfo, which grabs all the specs
         * for the intermediate steps, then renders the whole mess and
         * refreshes to update with jobs and results and such.
         *
         */
        init: function(options) {
            this._super(options);

            if (window.kbconfig && window.kbconfig.urls) {
                this.options.methodStoreURL = window.kbconfig.urls.narrative_method_store;
            }
            this.methClient = new NarrativeMethodStore(this.options.methodStoreURL);

            this.options.appSpec = this.options.appSpec.replace(/\n/g, '');
            this.appSpec = JSON.parse(this.options.appSpec);
            this.cellId = this.options.cellId;

            this.$elem.append($('<img src="' + this.options.loadingImage + '">'))
                      .append($('<div>Loading App...</div>'));

            // initialize the state
            this.state = {
                    runningState: {
                        appRunState: "input", // could be 'input' || 'running' || 'error' || 'done', something else?
                        runningStep: null
                    },
                    step: { }
                };
            this.initErrorModal();

            this.fetchMethodInfo();

            return this;
        },

        fetchMethodInfo: function() {
            if (!this.appSpec.steps || this.appSpec.steps.length === 0) {
                KBError("App::" + this.appSpec.info.name, "has no steps");
                this.showAppLoadingError('App "' + this.appSpec.info.name + '" has no steps!');
            }
            // get the list of method ids
            var methodIds = [];
            for (var i=0; i<this.appSpec.steps.length; i++) {
                methodIds.push(this.appSpec.steps[i].method_id);
            }
            this.methClient.get_method_spec({'ids' : methodIds},
                $.proxy(function(specs) {
                    this.methodSpecs = specs;
                    this.render(specs);
                }, this),
                $.proxy(function(error) {
                    KBError('get_method_spec', error);
                    this.showAppLoadingError(error);
                }, this)
            );
        },

        /**
         * Shows an error that occurred while loading app information. This essentially breaks the cell.
         * @method
         * @private
         */
        showAppLoadingError: function(error) {
            console.error(error);
            var $errorHeader = $('<div>')
                               .addClass('alert alert-danger')
                               .append('<b>Sorry, an error occurred while loading your KBase App.</b><br>Please contact the KBase team at <a href="mailto:help@kbase.us?subject=Narrative%App%20loading%20error">help@kbase.us</a> with the information below.');
            var $errorPanel = $('<div>')
                                .addClass('panel kb-app-panel');
            $errorPanel.append($errorHeader);

            // If it's a string, just dump the string.
            if (typeof error === 'string') {
                $errorPanel.append($('<div>').append(error));
            }

            // If it's an object, expect an error object as returned by the execute_reply callback from the IPython kernel.
            else if (typeof error === 'object') {
                var $details = $('<div>');
                $details.append($('<div>')
                                .append('<b>Error:</b> ' + error.error.message+ '<br><br>'));

                var $tracebackDiv = $('<div>')
                                    .addClass('kb-function-error-traceback');
                if (error.error) {
                    error.error.error.replace(/\n/g, "<br>");
                    $tracebackDiv.append(error.error.error + "<br>");
                }

                var $tracebackPanel = $('<div>');
                var tracebackAccordion = [{'title' : 'Detailed Error Trace', 'body' : $tracebackDiv}];

                $errorPanel.append($details)
                           .append($tracebackPanel);
                $tracebackPanel.kbaseAccordion({ elements : tracebackAccordion });
            }
            this.$elem.empty().append($errorPanel);
        },

        /** 
         * Fetches the app spec, method specs, and parameter values
         * These are used elsewhere to set up the NJS job and to send 
         * returned output values to the right place.
         */
        getSpecAndParameterInfo: function() {
            return {
                appSpec : this.appSpec,
                methodSpecs : this.methodSpecs,
                parameterValues: this.getAllParameterValues()
            };
        },

        /**
         * Renders this cell and its contained input widget.
         */
        render: function(stepSpecs) {
            this.methodSpecs = {};

            var self = this;
            this.$runButton = $('<button>')
                              .attr('type', 'button')
                              .attr('value', 'Run')
                              .addClass('kb-app-run')
                              .append('Run')
                              .click(
                                  $.proxy(function(event) {
                                      self.$submitted.html("submitted on "+this.readableTimestamp(new Date().getTime()));

                                      var isGood = self.startAppRun();
                                      if (!isGood) { return; }

                                      event.preventDefault();
                                      this.trigger('runApp.Narrative', {
                                          cell: IPython.notebook.get_selected_cell(),
                                          appSpec: this.appSpec,
                                          methodSpecs: this.methodSpecs,
                                          parameters: this.getParameters()
                                      });
                                  }, this)
                              );


            /* A little debug button for fetching the app's state. */
            this.$stateDebugBtn = $('<button>')
                                  .attr('type', 'button')
                                  .attr('value', 'Get State')
                                  .addClass('btn btn-danger btn-sm')
                                  .append('Get State')
                                  .click(
                                      function(event) {
                                          console.log(self.getState());
                                      }
                                  );


            //We cannot stop a method from running, so this button for now is gone.
            this.$stopButton = $('<button>')
                              .attr('type', 'button')
                              .attr('value', 'Cancel')
                              .addClass('kb-app-run kb-app-cancel')
                              .append('Cancel')
                              .css({'margin-right':'5px'})
                              .click(
                                  $.proxy(function(event) {
                                      self.stopAppRun();
                                  }, this)
                              )
                              .hide();
            // Reset the inputs and prepare for another "run"
            this.$resetButton = $('<button>')
                .attr('type', 'button')
                .attr('value', 'Reset')
                .addClass('kb-app-run kb-app-reset')
                .append('Reset')
                .css({'margin-right':'5px'})
                .click(
                    $.proxy(function(event) {
                    self.resetAppRun(true);
                }, this)
            )
            .hide();

            this.$submitted = $('<span>').addClass("kb-func-timestamp").hide();

            var appInfo = this.appSpec.info.name;
            this.$methodPanel = $('<div>')
                                .addClass('kb-app-steps');
            var stepHeaderText = "Step ";
            this.inputSteps = [];
            this.inputStepLookup = {};
            var inputStep = {};
            for (var i=0; i<stepSpecs.length; i++) {
                var $stepPanel = this.renderStepDiv(this.appSpec.steps[i].step_id, stepSpecs[i], stepHeaderText + (i+1));
                this.$methodPanel.append($stepPanel);
                this.methodSpecs[stepSpecs[i].info.id] = stepSpecs[i];
            }

            var $buttons = $('<div>')
                           .addClass('buttons pull-left')
                           .append(this.$runButton)
                           .append(this.$stopButton)
                           .append(this.$resetButton)
                           //.append(this.$stateDebugBtn)
                           .append(this.$submitted);

            var $appSubtitleDiv = $("<div>")
                                        .addClass('kb-app-panel-description')
                                        .append(this.appSpec.info.subtitle)
                                        .append('&nbsp;&nbsp;<a href="'+this.options.appHelpLink+this.appSpec.info.id+'" target="_blank">more...</a>');

            var headerCleaned = this.appSpec.info.header.replace(/&quot;/g, '"')
            var $appHeaderDiv = $("<div>")
                                        .addClass('kb-app-panel-header')
                                        .html(headerCleaned);

            var $menuSpan = $('<div class="pull-right">');

            // Controls (minimize)
            var $controlsSpan = $('<div>').addClass("pull-left");
            var $minimizeControl = $("<span class='glyphicon glyphicon-chevron-down'>")
                        .css({color: "#888", fontSize: "14pt"});
            $controlsSpan.append($minimizeControl);

            var $cellPanel = $('<div>')
                             .addClass('panel kb-app-panel kb-cell-run')
                             .append($menuSpan)
                             .append($controlsSpan)
                             .append($('<div>')
                                     .addClass('panel-heading app-panel-heading')
                                     .append($('<div>')
                                             .append($('<h1><b>' + appInfo + '</b></h1>'))
                                             )
                                     .append($appSubtitleDiv))
                             .append($('<div>')
                                     .addClass('panel-body')
                                     .append($appHeaderDiv))
                             .append($('<div>')
                                     .addClass('panel-body')
                                     .append(this.$methodPanel))
                             .append($('<div>')
                                     .addClass('panel-footer')
                                     .css({'overflow' : 'hidden'})
                                     .append($buttons));

            this.cellMenu = $menuSpan.kbaseNarrativeCellMenu();


            //now we link the step parameters together that are linked
            this.linkStepsTogether();

            // then we show the result
            this.$elem.empty().append($cellPanel);

            // Add minimize/restore actions.
            // These mess with the CSS on the cells!
            var $mintarget = $cellPanel;
            this.panel_minimized = false;
            var self = this;
            $controlsSpan.click(function() {
                if (self.panel_minimized) {
                    console.debug("restore full panel");
                    $mintarget.find(".panel-body").slideDown();
                    $mintarget.find(".panel-footer").show();
                    $minimizeControl.removeClass("glyphicon-chevron-right")
                                    .addClass("glyphicon-chevron-down");
                    // restore original padding (20px)
                    $mintarget.find(".app-panel-heading").css({padding: "20px"});
                    self.panel_minimized = false;
                }
                else {
                    console.debug("minimize panel");
                    $mintarget.find(".panel-footer").hide();
                    $mintarget.find(".panel-body").slideUp();
                    $minimizeControl.removeClass("glyphicon-chevron-down")
                                    .addClass("glyphicon-chevron-right");
                    // reduce padding so it lines up
                    $mintarget.find(".app-panel-heading").css({padding: "5px"});
                    self.panel_minimized = true;
                }
            });

            // finally, we refresh so that our drop down or other boxes can be populated
            this.refresh();
        },

        minimizePanel: function() {
            // console.debug("minimize panel");
        },

        showFullPanel: function() {
            // console.debug("restore panel to full size");
        },

        // given a method spec, returns a jquery div that is rendered but not added yet to the dom
        // stepSpec - the spec from the narrative method store
        // stepHeading - something to show in front of the method title, e.g. Step 1, Step 2 ...
        renderStepDiv: function (stepId, stepSpec, stepHeading) {
            var $stepPanel = $("<div>").addClass('kb-app-step-container');

            var $statusPanel = $('<div>');
            var $outputPanel = $('<div>');


            var $inputWidgetDiv = $("<div>");
            var methodId = stepSpec.info.id + '-step-details-' + this.genUUID();
            var buttonLabel = 'details';
            var methodDesc = stepSpec.info.subtitle;
            var $methodInfo = $('<div>')
                              .addClass('kb-func-desc')
                              .append('<h1><b>' + stepHeading +'&nbsp&nbsp-&nbsp '+ stepSpec.info.name + '</b></h1>')
                              .append($('<div>')
                                      .attr('id', methodId)
                                      //.addClass('collapse')
                                      .append($('<h2>')
                                         .append(methodDesc +
                                                 ' &nbsp&nbsp<a href="'+ this.options.methodHelpLink + stepSpec.info.id +
                                                        '" target="_blank">more...</a>')));

            var $cellPanel = $('<div>')
                             .addClass('panel kb-func-panel kb-app-func-panel kb-cell-run')
                             //.attr('id', this.options.cellId)
                             .append($('<div>')
                                     .addClass('panel-heading')
                                     .append($methodInfo))
                             .append($('<div>')
                                     .addClass('panel-body')
                                     .append($inputWidgetDiv))

            $stepPanel.append($cellPanel);
            $stepPanel.append($statusPanel);
            $stepPanel.append($outputPanel);

            var inputWidgetName = stepSpec.widgets.input;
            if (!inputWidgetName || inputWidgetName === 'null') {
                inputWidgetName = this.defaultInputWidget;
            }
            var outputWidgetName = stepSpec.widgets.output;
            if (!outputWidgetName || outputWidgetName === 'null') {
                outputWidgetName = this.defaultOutputWidget;
            }

            // todo, update input widget so that we don't have to stringify
            var inputWidget = $inputWidgetDiv[inputWidgetName]({ method: JSON.stringify(stepSpec) });
            var inputStepData = {id:stepId ,methodId: stepSpec.info.id, widget:inputWidget, $stepContainer:$stepPanel, $statusPanel:$statusPanel, $outputPanel:$outputPanel, outputWidgetName:outputWidgetName }
            this.inputSteps.push(inputStepData);
            this.inputStepLookup[stepId] = inputStepData;

            this.state.step[stepId] = { };

            return $stepPanel;
        },

        linkStepsTogether: function() {
            var self = this;
            if(this.appSpec && this.inputSteps) {
                var steps = this.appSpec.steps;
                for(var s=0; s<steps.length; s++) {
                    var input_mapping = steps[s].input_mapping;
                    for(var m=0; m<input_mapping.length; m++) {
                        if (input_mapping[m].is_from_input) { // should be 1 for true, 0 for false
                            // first disable the input box
                            this.inputStepLookup[steps[s].step_id].widget.disableParameterEditing(input_mapping[m].to);
                            // connect the values
                            if(this.inputStepLookup[input_mapping[m].step_source]) {
                                (function(localS, localM) {
                                    var step_target = self.inputStepLookup[steps[localS].step_id].widget;
                                    var step_source = self.inputStepLookup[input_mapping[localM].step_source].widget;
                                    var from = input_mapping[localM].from;
                                    var to = input_mapping[localM].to;
                                    // set the value to the original value
                                    step_target.setParameterValue(to, step_source.getParameterValue(from));
                                    // make sure the value changes every time the source input changes
                                    step_source.addInputListener(
                                        from,
                                        function() {
                                            step_target.setParameterValue(to, step_source.getParameterValue(from));
                                        }
                                    );
                                })(s,m);
                            } else {
                                console.error("invalid input mapping in spec for "+steps[s].step_id+", from step does not exist.");
                                console.error(this.appSpec);
                            }
                        }
                    }
                }
            }
            return;
        },

        /**
         * Checks all parameters across all steps for validity. If any are invalid,
         * this returns them in {stepErrors: []} and the valid state in {isValid:boolean}
         * @method
         * @private
         */
        validateParameters : function() {
            var isValidRet = {isValid:true, stepErrors:[]}
            if (this.inputSteps) {
                for(var i=0; i<this.inputSteps.length; i++) {
                    var v = this.inputSteps[i].widget.isValid();
                    if (!v.isValid) {
                        isValidRet.isValid = false;
                        isValidRet.stepErrors.push({
                            stepId:this.inputSteps[i].step_id,
                            stepNum:(i+1),
                            errormssgs:v.errormssgs});
                    }
                }
            }
            return isValidRet;
        },

        /*
         * This function is invoked every time we run app. This is the difference between it
         * and getAllParameterValues/getParameterValue which could be invoked many times before running
         * (e.g. when widget is rendered).
         */
        prepareDataBeforeRun: function() {
            if (this.inputSteps) {
                for(var i=0; i<this.inputSteps.length; i++)
                    var v = this.inputSteps[i].widget.prepareDataBeforeRun();
            }
        },

        /**
         * locks inputs and updates display properties to reflect the running state
         * returns true if everything is valid and we can start, false if there were errors
         */
        startAppRun: function(ignoreValidCheck) {
            var self = this;
            if (ignoreValidCheck) {
                //code
            } else {
                var v = self.validateParameters();
                // Take these action if the app input is not valid?
                if (!v.isValid) {
                    var errorCount = 1;
                    self.$errorModalContent.empty();
                    for(var k=0; k<v.stepErrors.length; k++) {
                        var $errorStep = $('<div>');
                        $errorStep.append($('<div>').addClass("kb-app-step-error-heading").append('Errors in Step '+v.stepErrors[k].stepNum+':'));
                        for (var e=0; e<v.stepErrors[k].errormssgs.length; e++) {
                            $errorStep.append($('<div>').addClass("kb-app-step-error-mssg").append('['+errorCount+']: ' + v.stepErrors[k].errormssgs[e]));
                            errorCount = errorCount+1;
                        }
                        self.$errorModalContent.append($errorStep);
                        KBError("App::" + this.appSpec.info.name, "errors=" + errorCount);
                    }
                    self.$errorModal.modal('show');
                    return false;
                }
            }
            self.prepareDataBeforeRun();
            self.$submitted.show();
            self.$runButton.hide();
            self.$stopButton.show();
            if (this.inputSteps) {
                for(var i=0; i<this.inputSteps.length; i++) {
                    this.inputSteps[i].widget.lockInputs();
                }
            }
            this.state.runningState.appRunState = "running";
            this.displayRunning(true);
            return true;
        },

        /* Show/hide running icon */
        displayRunning: function(is_running, had_error) {
            if (is_running) {
                this.cellMenu.$runningIcon.show();
                // never show error icon while running
                this.cellMenu.$errorIcon.hide();
            }
            else {
                this.cellMenu.$runningIcon.hide();
                // only display error when not running
                if (had_error) { this.cellMenu.$errorIcon.show(); }
                else { this.cellMenu.$errorIcon.hide(); }
            }
        },

        /*
         * Reset parameters and allow to re-run
         */
        resetAppRun: function(clear_inputs) {
            this.displayRunning(false);
            // buttons
            this.$stopButton.hide();
            this.$resetButton.hide();
            this.$submitted.hide();
            // clear inputs
            if (this.inputSteps) {
                for(var i=0; i<this.inputSteps.length; i++) {
                    this.inputSteps[i].widget.unlockInputs();
                    this.inputSteps[i].$stepContainer.removeClass('kb-app-step-running');
                    // If invoked from "Reset" button, then clear_inputs will be
                    // true and we need to get back to the original state.
                    // If invoked from "Cancel" button we skip this step and
                    // allow the user to Reset later.
                    if (clear_inputs) {
                        var c = this.inputSteps[i].$stepContainer;
                        // clear text fields
                        c.find("span.kb-parameter-data-selection").text("");
                        // remove old output
                        c.find(".kb-cell-output").remove();
                    }
                }
            }
            if (clear_inputs) {
                this.setErrorState(false);
                this.state.runningState.appRunState = "input";
                this.$runButton.show();
            }
            else {
                this.state.runningState.appRunState = "canceled"; // XXX?
                this.$runButton.hide();
                this.$resetButton.show();
            }
        },

        /* unlocks inputs and updates display properties to reflect the not running state */
        stopAppRun: function() {
            // trigger a cancel job action
            // if that returns something truthy (i.e. auto canceled, or user chose to cancel),
            // then continue and reset the state to input.
            // Otherwise, bail.
            var self = this;
            this.trigger('cancelJobCell.Narrative', [this.cellId, true, $.proxy(function(isCanceled) {
                if (isCanceled) {
                  self.resetAppRun(false);

                }
            }, this)]);
        },

        /**
         * DO NOT USE!!  use getAllParameterValues instead from now on...
         */
        getParameters: function() {
            return this.getAllParameterValues();
        },


        /**
         * returns structure that preserves method/parameter ordering in original spec
         * [
         *   { stepId: id, values = [
         *          {id: paramid, value: v},
         *          ...
         *      ]
         *   },
         *   ...
         * ]
         */
        getAllParameterValues: function() {
            var allValues = [];
            if (this.inputSteps) {
                for(var i=0; i<this.inputSteps.length; i++) {
                    var stepId = this.inputSteps[i].id;
                    var methodId = this.inputSteps[i].methodId;
                    var values = this.inputSteps[i].widget.getAllParameterValues();
                    allValues.push({stepId:stepId, methodId:methodId, values:values});
                }
            }
            return allValues;
        },

        /**
         * @method
         * Returns the state as reported by the contained input widget.
         * @public
         */
        getState: function() {
            // get the state of each step and return (all other properties of this.state should be set elsewhere)
            if (this.inputSteps) {
                for(var i=0; i<this.inputSteps.length; i++) {
                    var id = this.inputSteps[i].id;
                    this.state.step[id].inputState = this.inputSteps[i].widget.getState();
                    // if there is an output widget, then we need to set its state too
                    if(this.inputSteps[i].outputWidget && this.inputSteps[i].outputWidget.getState) {
                        this.state.step[id].outputState.widgetState = this.inputSteps[i].outputWidget.getState();
                    }
                }
            }
            this.state.runningState.submittedText = this.$submitted.html();
            return this.state;
        },

        getRunningState: function() {
            return this.state.runningState.appRunState;
        },

        /**
         * @method
         * Passes along the state to its contained input widget.
         * @public
         */
        loadState: function(state) {
            if (!state) {
                return;
            }
            //console.log("setting app state:");
            //console.log(state);
            // set the step states
            if (this.inputSteps && state.step) {
                for(var i=0; i<this.inputSteps.length; i++) {
                    var id = this.inputSteps[i].id;
                    if (state.step.hasOwnProperty(id)) {
                        // set the input states
                        if (state.step[id].inputState) {
                            this.inputSteps[i].widget.loadState(state.step[id].inputState);
                        }
                    }
                }
            }

            // if we were in the running state before, set the values
            if (state.runningState) {
                if (state.runningState.runningStep) {
                    this.setRunningStep(state.runningState.runningStep);
                }
                if (state.runningState.appRunState) {
                    if (state.runningState.submittedText) {
                        this.$submitted.html(state.runningState.submittedText);
                    }
                    if (state.runningState.appRunState === "running") {
                        this.startAppRun();
                    }
                    else if (state.runningState.appRunState === "done") {
                        this.$submitted.show();
                        this.$runButton.hide();
                    }
                }
            }

            // set the output state (we do this last so that in case we run into an error, we still show that we are running)
            if (this.inputSteps && state.step) {
                for(var i=0; i<this.inputSteps.length; i++) {
                    var id = this.inputSteps[i].id;
                    if (state.step.hasOwnProperty(id)) {
                        // set the output states
                        if (state.step[id].outputState) {
                            if (state.step[id].outputState.output) {
                                this.setStepOutput(id,state.step[id].outputState.output, state.step[id].outputState.widgetState);
                            }
                        }
                    }
                }
            }
            return;
        },

        /** methods for setting the app state based on the job status **/
        setRunningStep: function(stepId) {
            if (this.inputSteps) {
                for(var i=0; i<this.inputSteps.length; i++) {
                    this.inputSteps[i].$stepContainer.removeClass("kb-app-step-running");
                    if (this.inputSteps[i].id === stepId) {
                        this.inputSteps[i].$stepContainer.addClass("kb-app-step-running");
                        this.state.runningState.runningStep = stepId;
                    }
                }
            }
        },

        updateStepStatus: function(stepId, status) {
            if (this.inputStepLookup) {
                if(this.inputStepLookup[stepId]) {
                    this.inputStepLookup[stepId].$statusPanel.empty();
                    var $statusCell = $("<div>").addClass("kb-cell-output").css({"padding-top":"5px"}).append(
                                            $('<div>').addClass("panel panel-default")
                                                .append($('<div>').addClass("panel-body").html(status))
                                            );
                    this.inputStepLookup[stepId].$statusPanel.append($statusCell);
                }
            }
        },

        setRunningState: function(state) {
            state = state.toLowerCase();
            if (state === 'error') {
                this.setErrorState(true);
                for (var i=0; i<this.inputSteps.length; i++) {
                    if (this.inputSteps[i].$stepContainer.hasClass('kb-app-step-running')) {
                        this.inputSteps[i].$stepContainer.removeClass('kb-app-step-running');
                        this.inputSteps[i].$stepContainer.addClass('kb-app-step-error');
                    }
                }
            }
            else if (state === 'complete') {
                for (var i=0; i<this.inputSteps.length; i++) {
                    this.inputSteps[i].$stepContainer.removeClass('kb-app-step-running');
                }
                this.state.runningState.runningStep = null;
                this.state.runningState.appRunState = state;
                this.$stopButton.hide();
                // Show the 'next-steps' to take, if there are any
                var next_steps = this.getNextSteps();
                if (next_steps.apps || next_steps.methods) {
                    this.trigger("showNextSteps.Narrative",
                      {elt: this.$elem, "next_steps": next_steps});
                }
            }
        },

        /**
         * From a single string - maybe an object - set the state of a running app
         * possible states:
         * input - unlock all input areas, remove footer, show Run button
         * submitted - in-between state after user clicks Run, while we wait on the job info,
         *             lock inputs, no control buttons, etc, show spinny icon
         * queued - lock inputs, show Cancel button, but no highlighted steps, show spinny icon
         * running - should highlight which step is running, use Cancel button
         * error - should color whole app with error styling, still lock things, show cancel button,
         *       - show error icon, no spinny icon
         * completed - no more icons, show reset button which can unlock inputs
         *
         */
        setAppState: function(state) {
            // this.state = {
            //         runningState: {
            //             appRunState: "input", // could be 'input' || 'running' || 'error' || 'done', something else?
            //             runningStep: null
            //         },
            //         step: { }
            //     };

        },

        getNextSteps: function() {
            console.debug("Find next steps for app",this.appSpec);
            var method_ids = [ ], app_ids = [ ];
            // add one or more next steps
            // XXX: replace this with something much smarter
            switch (this.appSpec.info.id) {
                case "genome_assembly":
                    app_ids.push("genome_comparison");
                    app_ids.push("build_fba_model");
                    method_ids.push("insert_genome_into_species_tree_generic");
                    method_ids.push("compare_two_metabolic_models_generic");
                    break;
                case "build_fba_model":
                    app_ids.push("community_fba_modeling");
                    // ?? Translate Model to New Genome
                    break;
                case "build_species_tree":
                    method_ids.push("compute_pangenome");
                    break;
            }
            // Fetch function specs now because we need the real, human-readable
            // name of the spec and all we have is the id.
            var result = {};
            var params = {apps: app_ids, methods: method_ids};
            this.trigger('getFunctionSpecs.Narrative', [params, function(specs) {
                result.specs = specs;
            }]);
            return result.specs;
        },

        /*
         * Handle error in app.
         */
        setErrorState: function(isError) {
            if (isError) {
                this.state.runningState.appRunState = "error";
                this.displayRunning(false, true);
                this.$elem.find('.kb-app-panel').addClass('kb-app-error');
                this.$runButton.hide();
                this.$stopButton.hide();
                this.$resetButton.show();
                this.$submitted.show();
            }
            else {
                this.$elem.find('.kb-app-panel').removeClass('kb-app-error');
            }
        },

        /* optional state parameter, if null then no state is set on the widget */
        setStepOutput: function(stepId, output, state) {
            if (this.inputStepLookup) {
                if(this.inputStepLookup[stepId]) {
                    if (this.inputStepLookup[stepId].outputWidget) {
                        //output is already set and cannot change, so we do not rerender
                        return;
                    }
                    // clear the output panel, and assume we are no longer running this step
                    this.inputStepLookup[stepId].$outputPanel.empty();
                    this.inputStepLookup[stepId].$stepContainer.removeClass("kb-app-step-running");

                    var widgetName = this.inputStepLookup[stepId].outputWidgetName;
                    var $outputWidget = $('<div>').css({'padding':'5px 0'});
                    $outputWidget.kbaseNarrativeOutputCell({
                        widget: widgetName,
                        data: output,
                        type: 'app',
                        title: this.methodSpecs[this.inputStepLookup[stepId].methodId].info.name,
                        showMenu: false,
                        time: new Date().getTime()
                    });
                    if (state) {
                        $outputWidget.loadState(state);
                    }
                    this.inputStepLookup[stepId].$outputPanel.append($outputWidget);
                    this.inputStepLookup[stepId].outputWidget = $outputWidget;
                    var objCopy = $.extend(true, {}, output);
                    this.state.step[stepId].outputState = {
                        output: objCopy
                    };
                }
            }
        },

        setStepError: function(stepId, error) {
            if (this.inputStepLookup) {
                if(this.inputStepLookup[stepId]) {
                    this.inputStepLookup[stepId].kbaseNarrativeOutputCell({
                        widget: this.OUTPUT_ERROR_WIDGET,
                        data: error,
                        type: 'error',
                        showMenu: false,
                        time: new Date().getTime()
                    });
                }
            }
        },

        /** end methods for setting the app state based on the job status **/

        initErrorModal: function() {
            var self=this;
            var errorModalId = "app-error-modal-"+ self.genUUID();
            var modalLabel = "app-error-modal-lablel-"+ self.genUUID();
            self.$errorModalContent = $('<div>');
            self.$errorModal =  $('<div id="'+errorModalId+'" tabindex="-1" role="dialog" aria-labelledby="'+modalLabel+'" aria-hidden="true">').addClass("modal fade");
            self.$errorModal.append(
                $('<div>').addClass('modal-dialog').append(
                    $('<div>').addClass('modal-content').append(
                        $('<div>').addClass('modal-header kb-app-step-error-main-heading').append('<h4 class="modal-title" id="'+modalLabel+'">Problems exist in your parameter settings.</h4>')
                    ).append(
                       $('<div>').addClass('modal-body').append(self.$errorModalContent)
                    ).append(
                        $('<div>').addClass('modal-footer').append(
                            $('<button type="button" data-dismiss="modal">').addClass("btn btn-default").append("Dismiss"))
                    )
                ));
            self.$elem.append(self.$errorModal);
        },

        /**
         * Refreshes the input widget according to its own method.
         */
        refresh: function() {
            if (this.inputSteps) {
                for(var i=0; i<this.inputSteps.length; i++) {
                    this.inputSteps[i].widget.refresh();
                }
            }
        },

        genUUID: function() {
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
                var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);
                return v.toString(16);
            });
        },

         /**
         * Converts a timestamp to a simple string.
         * Do this American style - HH:MM:SS MM/DD/YYYY
         *
         * @param {string} timestamp - a timestamp in number of milliseconds since the epoch.
         * @return {string} a human readable timestamp
         */
        readableTimestamp: function(timestamp) {
            var format = function(x) {
                if (x < 10)
                    x = '0' + x;
                return x;
            };

            var d = new Date(timestamp);
            var hours = format(d.getHours());
            var minutes = format(d.getMinutes());
            var seconds = format(d.getSeconds());
            var month = d.getMonth()+1;
            var day = format(d.getDate());
            var year = d.getFullYear();

            return hours + ":" + minutes + ":" + seconds + ", " + month + "/" + day + "/" + year;
        }
    });

})( jQuery );

(function($, undefined) {
    $.KBWidget({
        name: 'kbaseNarrativeOutputCell',
        parent: 'kbaseWidget',
        version: '1.0.0',
        options: {
            widget: 'kbaseDefaultNarrativeOutput',
            data: '{}',
            cellId: null,
            type: 'error',
            title: 'Output',
            time: '',
            showMenu: true
        },
        OUTPUT_ERROR_WIDGET: 'kbaseNarrativeError',

        init: function(options) {
            this._super(options);

            this.data = this.options.data;
            this.options.type = this.options.type.toLowerCase();
            if (this.options.widget.toLowerCase() === "null")
                this.options.widget = 'kbaseDefaultNarrativeOutput';

            this.render();

            return this;
        },

        render: function() {
            switch(this.options.type) {
                case 'method':
                    this.renderMethodOutputCell();
                    break;
                case 'app':
                    this.renderAppOutputCell();
                    break;
                case 'error':
                    this.renderErrorOutputCell();
                    break;
                case 'viewer':
                    this.renderViewerCell();
                    break;
                default:
                    this.renderErrorOutputCell();
                    break;
            }
        },

        renderViewerCell: function() {
            var $label = $('<span>').addClass('label label-info').append('Viewer');
            this.renderCell('kb-cell-output', 'panel-default', 'kb-out-desc', $label);            
        },

        renderMethodOutputCell: function() {
            var $label = $('<span>').addClass('label label-info').append('Output');
            this.renderCell('kb-cell-output', 'panel-default', 'kb-out-desc', $label);
        },

        // same as method for now
        renderAppOutputCell: function() {
            this.renderMethodOutputCell();
        },

        renderErrorOutputCell: function() {
            if (!this.options.title)
                this.options.title = 'Narrative Error';
            var $label = $('<span>').addClass('label label-danger').append('Error');
            this.renderCell('kb-cell-error', 'panel-danger', 'kb-err-desc', $label);
        },

        renderCell: function(baseClass, panelClass, headerClass, $label) {
            // set up the widget line
            var widget = this.options.widget;
            var methodName = this.options.title ? this.options.title : 'Unknown method';

            var widgetData = this.options.data;
            if (widget === 'kbaseDefaultNarrativeOutput')
                widgetData = { data : this.options.data };

            this.$timestamp = $('<span>')
                              .addClass('pull-right kb-func-timestamp');

            if (this.options.time) {
                this.$timestamp.append($('<span>')
                                       .append(this.readableTimestamp(this.options.time)));
            }
            if (this.options.showMenu) {
                var $menuSpan = $('<span style="margin-left:5px">');
                this.$timestamp.append($menuSpan);
                $menuSpan.kbaseNarrativeCellMenu();
            }

            var $headerLabel = $('<span>')
                               .addClass('label label-info')
                               .append('Output');

            var $headerInfo = $('<span>')
                              .addClass(headerClass)
                              .append($('<b>').append(methodName))
                              .append(this.$timestamp);

            var $body = $('<div>')
                        .addClass(baseClass)
                        .append($('<div>')
                                .addClass('panel ' + panelClass)
                                .append($('<div>')
                                        .addClass('panel-heading')
                                        .append($label)
                                        .append($headerInfo))
                                .append($('<div>')
                                        .addClass('panel-body')
                                        .append($('<div>'))));
            try {
                this.$outWidget = $body.find('.panel-body > div')[widget](widgetData);
                this.$elem.append($body);
            }
            catch (err) {
                KBError("Output::" + this.options.title, "failed to render output widget: '" + widget);
                this.options.title = 'App Error';
                this.options.data = {'error': {
                    'msg': 'An error occurred while showing your output:',
                    'method_name': 'kbaseNarrativeOutputCell.renderCell',
                    'type': 'Output',
                    'severity': '',
                    'traceback': 'Failed while trying to show a "' + widget + '"\n' +
                                 'With inputs ' + JSON.stringify(widgetData) + '\n\n' + 
                                 err.message                    
                }};
                this.options.widget = this.OUTPUT_ERROR_WIDGET;
                this.renderErrorOutputCell();

                // this.$outWidget = $body.find('.panel-body > div')[this.OUTPUT_ERROR_WIDGET]({'error': {
                //     'msg': 'An error occurred while showing your output:',
                //     'method_name': 'kbaseNarrativeOutputCell.renderCell',
                //     'type': 'Output',
                //     'severity': '',
                //     'traceback': 'Failed while trying to show a "' + widget + '"\n' +
                //                  'With inputs ' + JSON.stringify(widgetData) + '\n\n' + 
                //                  err.message
                // }});
            }

        },

        getState: function() {
            var state = null;
            if (this.$outWidget && this.$outWidget.getState) {
                state = this.$outWidget.getState();
            }
            return state;
        },

        loadState: function(state) {
            if (state) {
                if (state.time) {
                    this.$timestamp.html(readableTimestamp(state.time));
                }
                if (this.$outWidget && this.$outWidget.loadState) {
                    this.$outWidget.loadState(state);
                }
            }
        },

        /**
         * Returns a timestamp in milliseconds since the epoch.
         * (This is a one-liner, but kept as a separate function in case our needs change. 
         * Maybe we'll want to use UTC or whatever...)
         * @public
         */
        getTimestamp: function() {
            return new Date().getTime();
        },

        /**
         * Converts a timestamp to a simple string.
         * Do this American style - HH:MM:SS MM/DD/YYYY
         *
         * @param {string} timestamp - a timestamp in number of milliseconds since the epoch.
         * @return {string} a human readable timestamp
         */
        readableTimestamp: function(timestamp) {
            var format = function(x) {
                if (x < 10)
                    x = '0' + x;
                return x;
            };

            var d = new Date(timestamp);
            var hours = format(d.getHours());
            var minutes = format(d.getMinutes());
            var seconds = format(d.getSeconds());
            var month = d.getMonth()+1;
            var day = format(d.getDate());
            var year = d.getFullYear();

            return hours + ":" + minutes + ":" + seconds + ", " + month + "/" + day + "/" + year;
        }

    });
})( jQuery );
/**
 * This widget is an outer DOM container for a KBase Narrative control element.
 * It instantiates a panel that the widget lives in, with some flexibility for
 * the title of the panel, adds a list of buttons on the panel, and gives the
 * option to minimize or restore the panel.
 *
 * This is a base class widget for any sidebar widgets that want its behavior.
 * Those sidebars should just include a title option. 
 * Usage: 
 * $('#my-element').kbaseNarrativeControlPanel({ 
 *     title : 'My Controls', 
 *     collapsible : true,
 *     buttons: [],
 * });
 *
 * @author Bill Riehl <wjriehl@lbl.gov>
 * @public
 */
 (function($, undefined){
    $.KBWidget({
        name: 'kbaseNarrativeControlPanel', 
        parent: 'kbaseAuthenticatedWidget',
        version: '0.0.1',
        options: {
            title: 'Control',
            collapsible: true,
            maxHeight: '400px'
        },

        /**
         * @method
         * Initializes the widget. This sets up internal variables, renders
         * the DOM structure, and creates an internal spot for the widget it
         * should hold.
         * Runs automatically on instantiation.
         * @param {object} options - set of inserted options from the instantiation
         * statement.
         * @returns {object} the initialized widget
         * @private
         */
        init: function(options) {
            this._super(options);

            this.render();
            /** commenting out the overlay panel for now **/
            return this;
        },

        /**
         * @method
         * Renders the new containing panel widget
         * @private
         */
        render: function() {
            // DOM structure setup here.
            // After this, just need to update the function list

            /* There's a few bits here.
             * 1. It's all in a Bootstrap Panel scaffold.
             * 2. The panel-body section contains the core of the widget:
             *    a. loading panel (just a blank thing with a spinning gif)
             *    b. error panel
             *    c. actual function widget setup.
             *
             * So, initialize the scaffold, bind the three core pieces in the
             * panel-body, make sure the right one is being shown at the start,
             * and off we go.
             */
            // Make a main body panel for everything to sit inside.
            this.$bodyDiv = $('<div>');

            this.$headerDiv = $('<div>');

            this.$buttonPanel = $('<span>')
                                .addClass('btn-toolbar pull-right')
                                .attr('role', 'toolbar')
                                .css({'margin-top' : '-2px'});

            this.$elem.append($('<div>')
                              .addClass('kb-narr-side-panel')
                                      .append($('<div>')
                                              .addClass('kb-title')
                                              .append($('<span>')
                                                      .css({'cursor' : 'pointer'})
                                                      .click(
                                                          $.proxy(function(event) {
                                                              event.preventDefault();
                                                              if ($(event.currentTarget.firstChild).hasClass('glyphicon-chevron-down')) {
                                                                  $(event.currentTarget.firstChild).removeClass('glyphicon-chevron-down')
                                                                                                   .addClass('glyphicon-chevron-right');
                                                                  this.$bodyDiv.parent().slideUp(400);
                                                              }
                                                              else {
                                                                  $(event.currentTarget.firstChild).removeClass('glyphicon-chevron-right')
                                                                                                   .addClass('glyphicon-chevron-down');
                                                                  this.$bodyDiv.parent().slideDown(400);
                                                              }
                                                          }, this)
                                                      )
                                                      .append($('<span>')
                                                              .addClass('glyphicon glyphicon-chevron-down kb-narr-panel-toggle'))
                                                      .append(this.options.title))
                                                      .append(this.$buttonPanel))
                              .append($('<div>')
                                      .addClass('kb-narr-panel-body')
                                      .css({ 
//                                          'max-height' : this.options.maxHeight,
                                          'overflow-y' : 'auto'
                                      })
                                      .append(this.$bodyDiv)));
        },

        /**
         * Adds a button to the button panel that sits on the right side of the header.
         * @param {object} btn - the button element to add. Expected to be a jquery node.
         * @public
         */
        addButton: function(btn) {
            this.$buttonPanel.append(btn);
        },

        /**
         * Sets the button panel to have the given list of buttons. This replaces any
         * existing buttons that might be there.
         * @param {Array} btnList - the list of button elements. Each one is expected to
         * be a jquery node representing a button
         * @public
         */
        addButtonList: function(btnList) {
            this.$buttonPanel.empty();
            for (var i=0; i<btnList.length; i++) {
                this.addButton(btnList[i]);
            }
        },

        /**
         * Returns the main body element of the widget as a jquery node. This is effective
         * for binding a functional widget into it.
         * @returns {object} a jquery node for the main widget panel
         * @public
         */
        body: function() {
            return this.$bodyDiv;
        },
    });
})(jQuery);
/**
 * A widget that contains functions and function information for the Narrative.
 * When initialized, it uses a loading gif while waiting for functions to load
 * (unless functions were passed in on construction).
 *
 * Each function is presented in a list (for now - accordion may be coming soon)
 * and when clicked will fire a "methodClicked.narrative" event.
 *
 * @author Bill Riehl <wjriehl@lbl.gov>
 * @public
 */
kb_require(['kbaseMethodGallery'], 
(function( $, undefined ) {
    $.KBWidget({
        name: 'kbaseNarrativeMethodPanel',
        parent: 'kbaseNarrativeControlPanel',
        version: '0.0.1',
        options: {
            loadingImage: 'static/kbase/images/ajax-loader.gif',
            autopopulate: true,
            title: 'Apps & Methods',
            methodStoreURL: 'http://dev19.berkeley.kbase.us/narrative_method_store',
            methodHelpLink: '/functional-site/#/narrativestore/method/',
        },
        ignoreCategories: { 'inactive' : 1, 'importers' : 1 },
        id2Elem: {},
        methodSpecs: {},  // id -> spec
        appSpecs: {},     // id -> spec
        categories: {},   // id -> category info

        /**
         * This private method is automatically called when the widget is initialized.
         *
         * Initialization steps:
         * 1. Put a loading spinner in its attached div
         * 2. Assume that the kernel is loaded before this is inited. //Check if the kernel is loaded - wait until it is.
         * 3. Make a kernel call to get the set of available services and functions.
         * 4. Shuffle the available functions into the right format.
         * 5. Display them on the screen, bind events.
         * @param {object} options
         * @private
         */
        init: function(options) {
            this._super(options);

            // DOM structure setup here.
            // After this, just need to update the function list

            if (window.kbconfig && window.kbconfig.urls) {
                this.options.methodStoreURL = window.kbconfig.urls.narrative_method_store;
                this.meth_icons = window.kbconfig.icons.methods;
                this.icon_colors = window.kbconfig.icons.colors;
            }

            this.$searchDiv = $('<div>')
                             .addClass('input-group')
                             .css({'margin-bottom' : '3px'})
                             .hide();

            this.$searchInput = $('<input type="text">')
                                .addClass('form-control')
                                .attr('Placeholder', 'Search methods')
                                .on('input',
                                    $.proxy(function(e) {
                                        var txt = this.$searchInput.val().trim().toLowerCase();
                                        if (txt.indexOf("type:") === 0) {
                                            this.visualFilter(this.inputTypeFilter, txt.substring(5));
                                        }
                                        else
                                            this.visualFilter(this.textFilter, txt);
                                    }, this)
                                );
            this.$numHiddenSpan = $('<span>0</span>');
            this.$showHideSpan = $('<span>show</span>');
            this.$toggleHiddenDiv = $('<div>')
                                    .append(this.$showHideSpan)
                                    .append(' ')
                                    .append(this.$numHiddenSpan)
                                    .append(' filtered')
                                    .addClass('kb-function-toggle')
                                    .hide()
                                    .click($.proxy(function(e) {
                                        var curText = this.$showHideSpan.text();
                                        this.toggleHiddenMethods(curText === 'show');
                                        this.$showHideSpan.text(curText === 'show' ? 'hide' : 'show');
                                    }, this));

            var $clearSearchBtn = $('<span>')
                                  .addClass('input-group-btn')
                                  .append($('<button>')
                                          .addClass('btn btn-default')
                                          .css({'border-left' : 'none'})
                                          .attr('type', 'button')
                                          .append($('<span>')
                                                  .append('X'))
                                          .click(
                                            $.proxy(function(event) {
                                                this.$searchInput.val('');
                                                this.$searchInput.trigger('input');
                                            }, this)
                                          ));

            this.$searchDiv.append(this.$searchInput)
                           .append($clearSearchBtn);

            // placeholder for apps and methods once they're loaded.
            this.$methodList = $('<div>')
                               .css({'height' : '300px', 'overflow-y': 'auto', 'overflow-x' : 'hidden'});
            // Make a function panel for everything to sit inside.
            this.$functionPanel = $('<div>')
                                  .addClass('kb-function-body')
                                  .append($('<div>')
                                          .append(this.$searchDiv)
                                          .append(this.$toggleHiddenDiv))
                                  .append(this.$methodList);

            // The 'loading' panel should just have a spinning gif in it.
            this.$loadingPanel = $('<div>')
                                 .addClass('kb-data-loading')
                                 .append('<img src="' + this.options.loadingImage + '">')
                                 .append($('<div>')
                                         .attr('id', 'message'))
                                 .hide();

            // The error panel should be empty for now.
            this.$errorPanel = $('<div>')
                               .addClass('kb-error')
                               .hide();

            // The help element should be outside of the panel itself, so it can be manipulated separately.
            // It should hide itself when clicked.
            this.initMethodTooltip();
            this.$bodyDiv.append($('<div>')
                                 .addClass('kb-narr-panel-body')
                                 .append(this.$functionPanel)
                                 .append(this.$loadingPanel)
                                 .append(this.$errorPanel));

            // $(document).on('hasFunction.Narrative',
            //     $.proxy(function(e, service, method, callback) {
            //         if (callback) {
            //             callback(this.hasFunction(service, method));
            //         }
            //     }, this)
            // );

            $(document).on('filterMethods.Narrative',
                $.proxy(function(e, filterString) {
                    if (filterString) {
                        this.$searchDiv.show();
                        this.$searchInput.val(filterString);
                        this.$searchInput.trigger('input');
                    }
                }, this)
            );

            $(document).on('removeFilterMethods.Narrative',
                $.proxy(function(e) {
                    this.$searchDiv.hide();
                    this.$searchInput.val('');
                    this.$searchInput.trigger('input');
                }, this)
            );

            /* 'request' should be expected to be an object like this:
             * {
             *      apps: [list, of, app, ids],
             *      methods: [list, of, method, ids]
             * }
             *
             * Either the apps or methods key can exist, or not and will be searched
             * appropriately.
             *
             * This will pass to the callback a similar structure:
             * {
             *      apps: {
             *         id: { spec },
             *         id: { spec }
             *      },
             *      methods: {
             *         id: { spec },
             *         id: { spec }
             *      }
             * }
             *
             * If a spec isn't found, then it won't appear in the return values.
             */
            $(document).on('getFunctionSpecs.Narrative',
                $.proxy(function(e, specSet, callback) {
                  console.debug("Trigger proxy: specSet=", specSet, "callback=", callback);
                    if (callback) {
                      console.debug("Trigger: specSet=",specSet);
                        callback(this.getFunctionSpecs(specSet));
                    }
                }, this)
            );

            this.$methodGalleryBody = $('<div>');
            this.$methodGalleryBody.kbaseMethodGallery({sidePanel : this});
            this.$methodGallery = $('<div>')
                                  .append($('<div>')
                                          .addClass('kb-side-header active')
                                          .css({'width':'100%'})
                                          .append('Methods'))
                                  .append(this.$methodGalleryBody);

            this.addButton($('<button>')
                           .addClass('btn btn-xs btn-default')
                           .append('<span class="fa fa-search"></span>')
                           .click($.proxy(function(event) {
                               this.$searchDiv.slideToggle(400);
                           }, this)));
            this.addButton($('<button>')
                           .addClass('btn btn-xs btn-default')
                           .append('<span class="fa fa-arrow-right"></span>')
                           .click($.proxy(function(event) {
                               this.trigger('toggleSidePanelOverlay.Narrative', this.$methodGallery);
                           }, this)));

            if (!NarrativeMethodStore) {
                this.showError('Unable to connect to KBase Method Store!');
                return this;
            }

            this.methClient = new NarrativeMethodStore(this.options.methodStoreURL);

            if (this.options.autopopulate === true) {
                this.refresh();
            }

            return this;
        },

        initMethodTooltip: function() {
            this.help = {};

            this.help.$helpPanel = $('<div>')
                                   .addClass('kb-function-help-popup alert alert-info')
                                   .hide()
                                   .click($.proxy(function(event) { this.help.$helpPanel.hide(); }, this));
            this.help.$helpTitle = $('<span>');
            this.help.$helpVersion = $('<span>')
                                   .addClass('version');

            var $helpHeader = $('<div>')
                              //.addClass('header')
                              .append(
                                    $('<h1>')
                                      .css("display","inline")
                                      .css("padding-right","8px")
                                        .append(this.help.$helpTitle))
                              .append(this.help.$helpVersion);

            this.help.$helpBody = $('<div>')
                                  .addClass('body');
            this.help.$helpLinkout = $('<a>')
                                     .attr('href', this.options.methodHelpLink)
                                     .attr('target', '_blank')
                                     .append('More...');

            this.help.$helpPanel.append($helpHeader)
                                .append(this.help.$helpBody)
                                .append($('<div>').append(this.help.$helpLinkout))
                                .append($('<h2>').append('Click to hide'));
            $('body').append(this.help.$helpPanel);
        },

        /**
         * Shows a popup panel with a description of the clicked method.
         * @param {object} method - the method containing a title and
         * description for populating the popup.
         * @private
         */
        showTooltip: function(method, event) {
            this.help.$helpTitle.text(method.name);
            this.help.$helpVersion.text('v' + method.ver);
            this.help.$helpBody.html(method.tooltip);
            this.help.$helpLinkout.attr('href', this.options.methodHelpLink + method.id);
            this.help.$helpPanel.css({
                                       'left':event.pageX,
                                       'top':event.pageY
                                     })
                                .show();
        },

        showErrorTooltip: function(method, event) {
            this.showTooltip({
                'name' : method.name,
                'ver' : method.ver,
                'id' : method.id,
                'tooltip' : "This method has an internal error and cannot currently be used.<br><br>The detailed error message is:<br>"+method.loading_error
            }, event);
        },

        refreshFromService: function() {
            this.showLoadingMessage("Loading KBase Methods from service...");

            var methodProm = this.methClient.list_methods_spec({},
                $.proxy(function(methods) {
                    this.methodSpecs = {};
                    for (var i=0; i<methods.length; i++) {
                        this.methodSpecs[methods[i].info.id] = methods[i];
                    }
                }, this)
            );
            var appProm = this.methClient.list_apps_spec({},
                $.proxy(function(apps) {
                    this.appSpecs = {};
                    for (var i=0; i<apps.length; i++) {
                        this.appSpecs[apps[i].info.id] = apps[i];
                    }
                }, this)
            );
            var catProm = this.methClient.list_categories({},
                $.proxy(function(categories) {
                    this.categories = categories[0];
                }, this)
            );

            $.when(methodProm, appProm, catProm).done($.proxy(function(a, b, c) {
                // console.log([this.appSpecs, this.methodSpecs, this.categories]);
                this.parseMethodsAndApps(this.categories, this.methodSpecs, this.appSpecs);
                this.showFunctionPanel();
            }, this));

            $.when(methodProm, appProm).fail($.proxy(function(error) {
                console.log("error'd!")
                console.log(error);
                this.showError(error);
            }, this));
        },

        parseMethodsAndApps: function(catSet, methSet, appSet) {
            var self = this;
            var triggerMethod = function(method) {
                self.trigger('methodClicked.Narrative', method);
            };

            var triggerApp = function(app) {
                self.trigger('appClicked.Narrative', app);
            };

            var generatePanel = function(catSet, fnSet, icon, callback) {
                var $fnPanel = $('<div>');
                var fnList = [];
                var id2Elem = {};
                for (var fn in fnSet) {
                    var ignoreFlag = false;
                    for (var i=0; i<fnSet[fn].info.categories.length; i++) {
                        if (self.ignoreCategories[fnSet[fn].info.categories[i]]) {
                            ignoreFlag = true;
                        }
                    }
                    if (ignoreFlag)
                        delete fnSet[fn];
                    else
                        fnList.push(fnSet[fn]);
                }
                fnList.sort(function(a, b) {
                    return a.info.name.localeCompare(b.info.name);
                });
                for (var i=0; i<fnList.length; i++) {
                    var $fnElem = self.buildMethod(icon, fnList[i], callback);
                    $fnPanel.append($fnElem);
                    id2Elem[fnList[i].info.id] = $fnElem;
                }
                return [$fnPanel, id2Elem];
            };

            this.methodSet = {};

            var methodRender = generatePanel(catSet, methSet, 'M', triggerMethod);
            var $methodPanel = methodRender[0];
            this.id2Elem['method'] = methodRender[1];

            var appRender = generatePanel(catSet, appSet, 'A', triggerApp);
            var $appPanel = appRender[0];
            this.id2Elem['app'] = appRender[1];

            this.$methodList.empty().append($appPanel).append($methodPanel);
            //console.log([Object.keys(this.appSpecs).length, Object.keys(this.methodSpecs).length]);
        },

        /**
         * Creates and returns a list item containing info about the given narrative function.
         * Clicking the function anywhere outside the help (?) button will trigger a
         * methodClicked.Narrative event. Clicking the help (?) button will trigger a
         * function_help.Narrative event.
         *
         * Both events have the relevant data passed along with them for use by the responding
         * element.
         * @param {object} method - the method object returned from the kernel.
         * @private
         */
        buildMethod: function(icon, method, triggerFn) {
            /* Logos */
            var icon_name = (icon == "A") ? "app" : "method";
            var icon_color = (icon == "A") ? this.icon_colors[9] : this.icon_colors[5];
            //var icon_url = "static/kbase/images/" + icon_name + "-icon.png";
            var icons = this.meth_icons;
            var icon = icons[icon_name];
            var $logo = $('<div>')
              // background
              .addClass("fa-stack fa-2x").css({'cursor':'pointer'})
              .append($('<i>')
                .addClass("fa fa-square fa-stack-2x")
                .css({'color': icon_color}));
            // add stack of font-awesome icons
            _.each(icon, function(cls) {
              $logo.append($('<i>')
              .addClass("fa fa-inverse fa-stack-1x " + cls));
            });
            // add behavior
            $logo.click($.proxy(function(e) {
              e.stopPropagation();
              triggerFn(method);
            }, this));

            var $name = $('<div>')
                        .addClass('kb-data-list-name')
                        .css({'white-space':'normal', 'cursor':'pointer'})
                        .append(method.info.name)
                        .click($.proxy(function(e) {
                            e.stopPropagation();
                            triggerFn(method);
                        }, this));
            var $version = $('<span>').addClass("kb-data-list-type").append('v'+method.info.ver); // use type because it is a new line

            var $more = $('<div>')
                        .addClass('kb-method-list-more-div')
                        .append($('<div>')
                                .append(method.info.subtitle))
                        .append($('<div>')
                                .append($('<a>')
                                        .append('more...')
                                        .attr('target', '_blank')
                                        .attr('href', this.options.methodHelpLink + method.info.id)));

            var $moreBtn = $('<span>')
                           .addClass('kb-data-list-more fa fa-ellipsis-h')
                           .attr('aria-hidden', 'true')
                           .css({'color' : '#999'});

            var $mainDiv = $('<div>')
                           .addClass('kb-data-list-info')
                           .css({ padding:'0', margin:'0'})
                           .append($name)
                           .append($('<div>')
                                   .append($version)
                                   .append($moreBtn.hide()));

            var $newMethod = $('<table>')
                             .css({'width':'100%'})
                             .append($('<tr>')
                                     .append($('<td>')
                                             .css({'width':'15%'})
                                             .append($logo))
                                     .append($('<td>')
                                             // .css({'width':'80%'})
                                             .append($mainDiv)));

            return $('<div>')
                   .append($('<hr>').addClass('kb-data-list-row-hr').css({'margin-left':'65px'}))
                   .append($('<div>')
                           .addClass('kb-data-list-obj-row')
                           .append($newMethod)
                           .append($more.hide())
                           .mouseenter(function() {
                                if (!$more.is(':visible')) { $moreBtn.show(); }
                           })
                           .mouseleave(function() { $moreBtn.hide(); })
                           .click(function() {
                                $more.slideToggle('fast', $.proxy(function() {
                                    if (!$more.is(':visible')) { $moreBtn.show(); }
                                    else { $moreBtn.hide(); }
                                }, this));
                           } ));

        },

        /* 'request' should be expected to be an object like this:
         * {
         *      apps: [list, of, app, ids],
         *      methods: [list, of, method, ids]
         * }
         *
         * Either the apps or methods key can exist, or not and will be searched
         * appropriately.
         *
         * This will pass to the callback a similar structure:
         * {
         *      apps: {
         *         id: { spec },
         *         id: { spec }
         *      },
         *      methods: {
         *         id: { spec },
         *         id: { spec }
         *      }
         * }
         *
         * If a spec isn't found, then it won't appear in the return values.
         */
        getFunctionSpecs: function(specSet) {
            console.debug("getFunctionSpecs(specSet=",specSet,")");
            var results = {};
            if (specSet.apps && specSet.apps instanceof Array) {
                results.apps = {};
                for (var i=0; i<specSet.apps.length; i++) {
                    if (this.appSpecs[specSet.apps[i]])
                        results.apps[specSet.apps[i]] = this.appSpecs[specSet.apps[i]];
                }
            }
            if (specSet.methods && specSet.methods instanceof Array) {
              results.methods = _.pick(this.methodSpecs, specSet.methods);
              /*
                results.methods = {};
                for (var i=0; i < specSet.methods.length; i++) {
                    if (this.methodSpecs[specSet.methods[i]])
                        results.methods[specSet.methods[i]] = this.methodSpecs[specSet.methods[i]];
                }
              */
            }
            console.debug("getFunctionSpecs returning:",results);
            return results;
        },

        logoColorLookup:function(type) {
            var colors = [
                            '#F44336', //red
                            '#E91E63', //pink
                            '#9C27B0', //purple
                            '#673AB7', //deep purple
                            '#3F51B5', //indigo
                            '#2196F3', //blue
                            '#03A9F4', //light blue
                            '#00BCD4', //cyan
                            '#009688', //teal
                            '#4CAF50', //green
                            '#8BC34A', //lime green
                            '#CDDC39', //lime
                            '#FFEB3B', //yellow
                            '#FFC107', //amber
                            '#FF9800', //orange
                            '#FF5722', //deep orange
                            '#795548', //brown
                            '#9E9E9E', //grey
                            '#607D8B'  //blue grey
                         ];

            // first, if there are some colors we want to catch...
            switch (type) {
                case "M":
                    return "#FF9800";
                    break;
                case "A":
                    return "#03A9F4";
                    break;
            }

            // pick one based on the characters
            var code = 0;
            for(var i=0; i<type.length; i++) {
                code += type.charCodeAt(i);
            }
            return colors[ code % colors.length ];
        },

        /**
         * @method
         * A simple tester to see if a service.method call exists in the currently loaded set
         * @param {string} service - the name of the service to test
         * @param {string} method - the name of the method to test
         * @return {boolean} true if the call exists, false otherwise
         */
        // hasFunction: function(service, method) {
        //     if (!this.services)
        //         return true;

        //     console.debug("looking up '" + service + "'.'" + method + "'");
        //     if (this.services.hasOwnProperty(service))
        //         return this.services[service].hasOwnProperty(method);
        //     return false;
        // },


        /**
         * Creates a new function field in the functions list.
         * This 'function' is represented as a DOM element. It has a name (styled as
         * a button, or something buttonish) and a help button.
         *
         * Clicking the function button triggers a function_clicked.Narrative event,
         * and clicking the help button triggers a function_help.Narrative event.
         *
         * Both of these events have the relevant data passed along with them for
         * population by the responding element.
         *
         * @param {object} method - the method object returned from the kernel.
         * @private
         */
        // addFunction: function(method) {
        //     var self = this;
        //     var $funcButton = $('<button>')
        //                       .attr('type', 'button')
        //                       .addClass('btn btn-default')
        //                       .append(method.title)
        //                       .click(function(event) { self.trigger('function_clicked.Narrative', method); });

        //     var $helpButton = $('<span>')
        //                       .addClass('glyphicon glyphicon-question-sign')
        //                       .css({'float': 'right',
        //                             'cursor': 'pointer',
        //                             'font-size': '14pt',
        //                             'color': '#0064b6'})
        //                       .click(function(event) { self.showHelpPopup(method); });

        //     this.$functionList.append($('<li>')
        //                                 .append($funcButton)
        //                                 .append($helpButton)
        //                              );
        // },

        /**
         * Shows a loading spinner or message on top of the panel.
         * @private
         */
        showLoadingMessage: function(message) {
            this.$loadingPanel.find('#message').empty();
            if (message)
                this.$loadingPanel.find('#message').html(message);
            this.$functionPanel.hide();
            this.$errorPanel.hide();
            this.$loadingPanel.show();
        },

        /**
         * Shows the main function panel, hiding all others.
         * @private
         */
        showFunctionPanel: function() {
            this.$errorPanel.hide();
            this.$loadingPanel.hide();
            this.$functionPanel.show();
        },

        /**
         * Shows an error text message on top of the panel. All other pieces are hidden.
         * @param {string} error - the text of the error message
         * @private
         */
        showError: function(error) {
            var $errorHeader = $('<div>')
                               .addClass('alert alert-danger')
                               .append('<b>Sorry, an error occurred while loading KBase functions.</b><br>Please contact the KBase team at <a href="mailto:help@kbase.us?subject=Narrative%20function%20loading%20error">help@kbase.us</a> with the information below.');

            this.$errorPanel.empty();
            this.$errorPanel.append($errorHeader);

            // If it's a string, just dump the string.
            if (typeof error === 'string') {
                this.$errorPanel.append($('<div>').append(error));
            }

            // If it's an object, expect an error object as returned by the execute_reply callback from the IPython kernel.
            else if (typeof error === 'object') {
                var $details = $('<div>');
                $details.append($('<div>').append('<b>Type:</b> ' + error.ename))
                        .append($('<div>').append('<b>Value:</b> ' + error.evalue));

                var $tracebackDiv = $('<div>')
                                 .addClass('kb-function-error-traceback');
                for (var i=0; i<error.traceback.length; i++) {
                    $tracebackDiv.append(error.traceback[i] + "<br>");
                }

                var $tracebackPanel = $('<div>');
                var tracebackAccordion = [{'title' : 'Traceback', 'body' : $tracebackDiv}];

                this.$errorPanel.append($details)
                                .append($tracebackPanel);
                $tracebackPanel.kbaseAccordion({ elements : tracebackAccordion });
            }

            this.$functionPanel.hide();
            this.$loadingPanel.hide();
            this.$errorPanel.show();
        },

        /**
         * @method
         * Temp function borrowed from kbaseAccordion.js, so we can have access to the internal
         * accordion bits that get generated. Maybe it'll change more!
         */
        buildAccordion : function (elements) {
            var fontSize = '100%';

            var $block = $('<div></div>')
                         .addClass('accordion')
                         .css('font-size', fontSize)
                         .attr('id', 'accordion');

            var topElements = [];

            $.each(elements,
                $.proxy(
                    function (idx, val) {
                        var $topElem =
                            $('<div></div>')
                            .addClass('panel panel-default')
                            .css('margin-bottom', '2px')
                            .append($('<div></div>')
                                    .addClass('panel-heading')
                                    .css('padding', '0px')
                                    .append($('<i></i>')
                                            .css('margin-right', '5px')
                                            .css('margin-left', '3px')
                                            .addClass('fa fa-chevron-right')
                                            .addClass('pull-left')
                                            .css('height', '22px')
                                            .css('line-height', '22px')
                                            .css('color', 'gray'))
                                    .append($('<a></a>')
                                            .css('padding', '0px')
                                            .attr('href', '#')
                                            .attr('title', val.title)
                                            .css('height', '22px')
                                            .css('line-height', '22px')
                                            .append(val.title))
                                    .bind('click',
                                        function(e) {
                                            e.preventDefault();
                                            var $opened = $(this).closest('.panel').find('.in');
                                            var $target = $(this).next();

                                            if ($opened != undefined) {
                                                $opened.collapse('hide');
                                                var $i = $opened.parent().first().find('i');
                                                $i.removeClass('fa fa-chevron-down');
                                                $i.addClass('fa fa-chevron-right');
                                            }

                                            if ($target.get(0) != $opened.get(0)) {
                                                $target.collapse('show');
                                                var $i = $(this).parent().find('i');
                                                $i.removeClass('fa fa-chevron-right');
                                                $i.addClass('fa fa-chevron-down');
                                            }
                                        }
                                    )
                            )
                            .append($('<div></div>')
                                    .addClass('panel-body collapse')
                                    .css('padding-top', '9px')
                                    .css('padding-bottom', '9px')
                                    .append(val.body));
                        topElements[val.title] = $topElem;
                        $block.append($topElem);
                    },
                    this
                )
            );
            this._rewireIds($block, this);

            return [$block, topElements];
        },

        /**
         * A *REALLY* simple filter based on whether the given pattern string is present in the
         * method's name.
         * Returns true if so, false if not.
         * Doesn't care if its a method or an app, since they both have name fields at their root.
         */
        textFilter: function(pattern, method) {
            var lcName = method.info.name.toLowerCase();
            return lcName.indexOf(pattern.toLowerCase()) > -1;
        },

        /**
         * Returns true if the type is available as in input to the method, false otherwise
         */
        inputTypeFilter: function(type, spec) {
            var methodFilter = function(type, spec) {
                for (var i=0; i<spec.parameters.length; i++) {
                    var p = spec.parameters[i];
                    if (p.text_options && p.text_options.valid_ws_types && p.text_options.valid_ws_types.length > 0) {
                        var validTypes = p.text_options.valid_ws_types;
                        for (var j=0; j<validTypes.length; j++) {
                            if (validTypes[j].toLowerCase().indexOf(type) !== -1)
                                return true;
                        }
                    }
                }
                return false;
            };
            if (spec.steps) {
                // ignoring apps right now
                for (var i=0; i<spec.steps.length; i++) {
                    var methodSpec = this.methodSpecs[spec.steps[i].method_id];
                    if (!methodSpec || methodSpec === undefined || methodSpec === null) {
//                        console.error('missing spec for ' + spec.steps[i].method_id);
                    }
                    else if (methodFilter(type, methodSpec))
                        return true;
                }
                return false;
            } else {
                return methodFilter(type, spec);
            }
        },

        /**
         * @method
         * @public
         * Expects this.methodSet to be an associative array, like this:
         * {
         *     <methodId> : {
         *         $elem : rendered element as jQuery node,
         *         rest of method spec
         *     }
         * }
         */
        visualFilter: function(filterFn, fnInput) {
            var numHidden = 0;
            var self = this;
            filterFn = $.proxy(filterFn, this);
            var filterSet = function(set, type) {
                var numHidden = 0;
                for (var id in set) {
                    if (!filterFn(fnInput, set[id])) {
                        self.id2Elem[type][id].hide();
                        self.id2Elem[type][id].addClass('kb-function-dim');
                        // self.methodSet[methId].$elem.hide();
                        // self.methodSet[methId].$elem.addClass('kb-function-dim');
                        numHidden++;
                    }
                    else {
                        self.id2Elem[type][id].removeClass('kb-function-dim');
                        self.id2Elem[type][id].show();
                    }
                }
                return numHidden;
            };

            numHidden += filterSet(this.appSpecs, 'app');
            numHidden += filterSet(this.methodSpecs, 'method');

            if (numHidden > 0) {
                this.$numHiddenSpan.text(numHidden);
                this.$toggleHiddenDiv.show();
                this.toggleHiddenMethods(this.$showHideSpan.text() !== 'show');
            }
            else {
                this.$toggleHiddenDiv.hide();
                this.toggleHiddenMethods(true);
            }
        },

        toggleHiddenMethods: function(show) {
            /* 2 cases
             * show is truthy -> show()
             * show is falsy -> hide()
             */

            if (show) {
                this.$functionPanel.find('.kb-function-dim').show();
            }
            else {
                this.$functionPanel.find('.kb-function-dim').hide();

            }
        },

        // Temporary pass-through for Jim's gallery widget
        toggleOverlay: function() {
            this.trigger('toggleSidePanelOverlay.Narrative');
        },
    });
})( jQuery )
);

/**
 * Widget to display a table of data objects from a kbase workspace.
 *
 * TODO: Re-enable "readonly" mode by following instructions in isReadonlyWorkspace()
 *       (dan g. 10/30/2014)
 *
 * Options:
 *    wsId - the name of the workspace to show in this widget
 *    loadingImage - an image to show in the middle of the widget while loading data
 *    notLoggedInMsg - a string to put in the middle of the widget when not logged in.
 *
 * Triggers events:
 * dataUpdated.Narrative - when the loaded data table gets updated.
 * workspaceUpdated.Narrative - when the current workspace ID gets updated
 * @author Bill Riehl <wjriehl@lbl.gov>
 * @author Dan Gunter <dkgunter@lbl.gov>
 * @public
 */
(function( $, undefined ) {

    $.KBWidget({
        name: "kbaseNarrativeDataPanel",
        parent: "kbaseNarrativeControlPanel",
        version: "1.0.0",
        wsClient: null,
        table: null,
        tableData: [],
        $loginMessage: null,
        $errorMessage: null,
        $loading: null,
        isLoggedIn: false,
        narrWs: null, /* see setNarrWS */
        // The set of all data currently loaded into the widget
        loadedData: {},
        options: {
            title: 'Data',
            loadingImage: "static/kbase/images/ajax-loader.gif",
            notLoggedInMsg: "Please log in to view a workspace.",
            workspaceURL: "https://kbase.us/services/ws",
            wsBrowserURL: "/functional-site/#/ws/",
            landing_page_url: "/functional-site/#/", // !! always include trailing slash
            default_landing_page_url: "/functional-site/#/json/", // ws_name/obj_name,
            container: null,
            ws_name: null,
        },
        ws_name: null,
        // Constants
        WS_NAME_KEY: 'ws_name', // workspace name, in notebook metadata
        WS_META_KEY: 'ws_meta', // workspace meta (dict), in notebook metadata


        dataListWidget: null,

        init: function(options) {
            this._super(options);

            if (this.options.wsId) {
                this.ws_name = options.wsId;
                this.options.ws_name = options.wsId;
            }
            if (this.options.ws_name) {
                this.ws_name = options.ws_name;
            }

            if (window.kbconfig && window.kbconfig.urls) {
                this.options.workspaceURL = window.kbconfig.urls.workspace;
                this.options.wsBrowserURL = window.kbconfig.urls.ws_browser;
                this.options.landingPageURL = window.kbconfig.urls.landing_pages;
            }
            this.data_icons = window.kbconfig.icons.data;
            this.icon_colors = window.kbconfig.icons.colors;

            var $dataList = $('<div>');
            this.body().append($dataList);
            this.dataListWidget = $dataList["kbaseNarrativeDataList"](
                                    {
                                        ws_name: this.ws_name,
                                        ws_url: this.options.workspaceURL,
                                        loadingImage: this.options.loadingImage,
                                        parentControlPanel: this
                                    });

            $(document).on(
                'setWorkspaceName.Narrative', $.proxy(function(e, info) {
                    this.ws_name = info.wsId;
                    this.narrWs = info.narrController;
                    this.dataListWidget.setWorkspace(this.ws_name);
                }, this)
            );

            /**
             * This should be triggered if something wants to know what data is loaded from the current workspace
             */
            $(document).on(
                'dataLoadedQuery.Narrative', $.proxy(function(e, params, ignoreVersion, callback) {
                    var obj_data = this.dataListWidget.getObjData(params,ignoreVersion);
                    if (callback) {
                        callback(obj_data);
                    }
                },
                this)
            );


            /**
             * This should be triggered when something updates the available data in either the narrative or
             * in the workspace.
             */
            $(document).on(
                'updateData.Narrative', $.proxy(function(e) {
                    //this.refresh();
                    this.dataListWidget.refresh();
                },
                this )
            );

            /**
             * This should be triggered when something wants to know what workspace this widget is currently linked to.
             */
            $(document).on(
                'workspaceQuery.Narrative', $.proxy(function(e, callback) {
                    if (callback) {
                        callback(this.ws_name);
                    }
                },
                this)
            );

            this.landingPageMap = window.kbconfig.landing_page_map;

            // initialize the importer
            this.dataImporter();

            if (this.ws_name)
                this.trigger('workspaceUpdated.Narrative', this.ws_name);

            this.dataImporter();

            this.addButton($('<button>')
                           .addClass('btn btn-xs btn-default')
                           .tooltip({title:'Hide / Show data browser', 'container':'body', delay: { "show": 400, "hide": 50 }})
                           .append('<span class="fa fa-arrow-right"></span>')
                           .click($.proxy(function(event) {
                               this.trigger('hideGalleryPanelOverlay.Narrative');
                               this.trigger('toggleSidePanelOverlay.Narrative', this.$overlayPanel);
                           }, this)));

            return this;
        },

        addButtonToControlPanel: function($btn) {
            this.addButton($btn);
        },

        /**
         * @method loggedInCallback
         * This is associated with the login widget (through the kbaseAuthenticatedWidget parent) and
         * is triggered when a login event occurs.
         * It associates the new auth token with this widget and refreshes the data panel.
         * @private
         */
        loggedInCallback: function(event, auth) {
            this.wsClient = new Workspace(this.options.workspaceURL, auth);
            this.isLoggedIn = true;
            this.refresh();
            return this;
        },

        /**
         * @method loggedOutCallback
         * Like the loggedInCallback, this is triggered during a logout event (through the login widget).
         * It throws away the auth token and workspace client, and refreshes the widget
         * @private
         */
        loggedOutCallback: function(event, auth) {
            this.wsClient = null;
            this.isLoggedIn = false;
            this.refresh();
            return this;
        },

        setWorkspace: function(ws_name) {
            this.ws_name = ws_name;
            this.refresh();
        },

        /**
         * Set the narrative workspace (parent) into the data widget
         * so it can call back to it about information discovered
         * from the workspace, e.g. permissions to objects in the
         * narrative for read-only mode.
         *
         * @param obj kbaseNarrativeWorkspace instance
         */
        setNarrWs: function(obj) {
            this.narrWs = obj;
        },

        /**
         * @method refresh
         * This reloads any data that this panel should display.
         * It uses the existing workspace client to fetch data from workspaces and populates the
         * panel. It then fetches anything that's a part of the narrative (using the Narrative's metadata)
         * and displays that.
         *
         * @public
         */
        refresh: function() {
            this.dataListWidget.refresh();
            return;
        },

        /**
         * Returns the set of currently loaded data objects from the workspace.
         * These are returned as described below.
         *
         * If 'type' is a string, then it returns only objects matching that
         * object type (this is case-sensitive!).
         *
         * If 'type' is an array, then it returns only objects matching all of
         * those types.
         *
         * Returns data like this:
         * {
         *   type1 : [ [metadata1], [metadata2], ... ],
         *   type2 : [ [metadata3], [metadata4], ... ]
         * }
         * @returns a list of data objects
         */
        getLoadedData: function(type, ignoreVersion) {
            if (this.dataListWidget) {
                return this.dataListWidget.getObjData(params,ignoreVersion);
            } else {
                return {};
            }

        },

        /**
         * Shows the loading panel and hides all others
         * @private
         */
        showLoadingMessage: function(message) {
            this.$loadingPanel.find('#message').empty();
            if (message)
                this.$loadingPanel.find('#message').html(message);
            this.$dataPanel.hide();
            this.$errorPanel.hide();
            this.$loadingPanel.show();
        },




        buildTabs: function(tabs, isOuter) {
            var $header = $('<div>');
            var $body = $('<div>');

            for (var i=0; i<tabs.length; i++) {
                var tab = tabs[i];
                $header.append($('<div>')
                               .addClass('kb-side-header')
                               .css('width', (100/tabs.length)+'%')
                               .append(tab.tabName));
                $body.append($('<div>')
                             .addClass('kb-side-tab')
                             .append(tab.content));
            }

            $header.find('div').click($.proxy(function(event) {
                event.preventDefault();
                event.stopPropagation();
                var $headerDiv = $(event.currentTarget);

                if (!$headerDiv.hasClass('active')) {
                    var idx = $headerDiv.index();
                    $header.find('div').removeClass('active');
                    $headerDiv.addClass('active');
                    $body.find('div.kb-side-tab').removeClass('active');
                    $body.find('div:nth-child(' + (idx+1) + ').kb-side-tab').addClass('active');
                    if (isOuter)
                        this.hideOverlay();
                }
            }, this));

            $header.find('div:first-child').addClass('active');
            $body.find('div:first-child.kb-side-tab').addClass('active');

            return {
                header: $header,
                body: $body
            };
        },

        /**
         * Renders the data importer panel
         * I'm throwing this here because I have no idea how to
         * bind a sidepanel to a specific widget, since all the other panels "inherit" these widgets.
         */
        dataImporter: function() {
            var self = this;
            var maxObjFetch = 300000;

            var narWSName;
            $(document).on('setWorkspaceName.Narrative', function(e, info){
                narWSName = info.wsId;
            })

            var self = this;
            var user = $("#signin-button").kbaseLogin('session', 'user_id');  // TODO: use

            // models
            var myData = [], sharedData = [];

            var myWorkspaces = [], sharedWorkspaces = [];

            // model for selected objects to import
            var mineSelected = [], sharedSelected = [];

            var types = ["KBaseGenomes.Genome",
                         "KBaseSearch.GenomeSet",
                         "KBaseGenomes.Pangenome",
                         "KBaseGenomes.GenomeComparison",
                         "KBaseGenomes.GenomeDomainData",
                         "GenomeComparison.ProteomeComparison",
                         "KBaseGenomes.ContigSet",
                         "KBaseAssembly.AssemblyInput",
                         "KBaseRegulation.Regulome",
                         "KBaseTrees.MSA",
                         "KBaseTrees.Tree",
                         "KBaseFBA.FBAModel",
                         "KBaseFBA.ModelTemplate",
                         "KBaseFBA.PromConstraint",
                         "KBaseBiochem.Media",
                         "KBaseFBA.FBA",
                         "KBasePhenotypes.PhenotypeSet",
                         "KBasePhenotypes.PhenotypeSimulationSet",
                         "KBaseFBA.ReactionSensitivityAnalysis",
                         "KBaseGenomes.MetagenomeAnnotation",
                         "Communities.SequenceFile",
                         "KBaseExpression.ExpressionSeries",
                         "KBaseExpression.ExpressionSample"
                         ];

            // tab panels
            var minePanel = $('<div class="kb-import-content kb-import-mine">'),
                sharedPanel = $('<div class="kb-import-content kb-import-shared">'),
                publicPanel = $('<div class="kb-import-content kb-import-public">'),
                importPanel = $('<div class="kb-import-content kb-import-import">'),
                examplePanel = $('<div class="kb-import-content">');



            // add tabs
            var $tabs = this.buildTabs([
                    {tabName: '<small>My Data</small>', content: minePanel},
                    {tabName: '<small>Shared With Me</small>', content: sharedPanel},
                    {tabName: '<small>Public</small>', content: publicPanel},
                    {tabName: '<small>Example</small>', content: examplePanel},
                    {tabName: '<small>Import</small>', content: importPanel},
                ]);


            // hack to keep search on top

            var $mineFilterRow = $('<div class="row">');
            minePanel.append($mineFilterRow);
            var $mineScrollPanel = $('<div>').css({'overflow-x':'hidden','overflow-y':'auto','height':'550px'});
            setLoading($mineScrollPanel);
            minePanel.append($mineScrollPanel);

            var $sharedFilterRow = $('<div class="row">');
            sharedPanel.append($sharedFilterRow);
            var $sharedScrollPanel = $('<div>').css({'overflow-x':'hidden','overflow-y':'auto','height':'550px'});
            setLoading($sharedScrollPanel);
            sharedPanel.append($sharedScrollPanel);

            var body = $('<div>');
            var footer = $('<div>');
            body.addClass('kb-side-panel');
            body.append($tabs.header, $tabs.body);

            // add footer status container and buttons
            var importStatus = $('<div class="pull-left kb-import-status">');
            footer.append(importStatus)
            var btn = $('<button class="btn btn-primary pull-right" disabled>Add to Narrative</button>').css({'margin':'10px'});
            var closeBtn = $('<button class="kb-default-btn pull-right">Close</button>').css({'margin':'10px'});

            // Setup the panels that are defined by widgets
            publicPanel.kbaseNarrativeSidePublicTab({$importStatus:importStatus});
            importPanel.kbaseNarrativeSideImportTab({});
            examplePanel.kbaseNarrativeExampleDataTab({$importStatus:importStatus});

            // It is silly to invoke a new object for each widget
            var auth = {token: $("#signin-button").kbaseLogin('session', 'token')}
            var ws = new Workspace(this.options.workspaceURL, auth);


            closeBtn.click(function() {
                self.trigger('hideSidePanelOverlay.Narrative');
            })
            footer.append(closeBtn);

            // start with my data, then fetch other data
            // this is because data sets can be large and
            // makes things more fluid
            updateView('mine').done(function() {
                updateView('shared')
            });

            var narrativeNameLookup={};
            this.$overlayPanel = body.append(footer);

            function updateView(view) {
                var p;
                if (view == 'mine') {
                    p = getMyWS();
                } else if (view == 'shared') {
                    p = getSharedWS();
                }

                return $.when(p).done(function(workspaces) {
                    if (view == 'mine') {
                        prom = getMyData(workspaces);
                    } else if (view == 'shared') {
                        prom = getSharedData(workspaces);
                    }
                    $.when(prom).done(function() {
                        if (view == 'mine') {
                           // minePanel.detach();  // arg!! why isn't the filter bar it's own div?
                           // minePanel.append($mineScrollPanel);
                            addMyFilters();
                        } else if(view == 'shared') {
                          //  minePanel.detach();  // arg!! why isn't the filter bar it's own div?
                          //  minePanel.append($mineScrollPanel);
                            addSharedFilters();
                        }
                    });
                });
            }

            // function used to update my data list
            function getMyData(workspaces, type, ws_name) {
                if (workspaces.length==0) {
                    render([], $mineScrollPanel, {});
                    return [];
                }
                var params = {includeMetadata:1};
                if (!ws_name) {
                    var ws_ids = [], obj_count = 0;
                    for (var i in workspaces) {
                        ws_ids.push(workspaces[i].id);
                        obj_count = workspaces[i].count + obj_count;
                    }

                    params.ids = ws_ids;
                } else
                    params.workspaces = [ws_name];

                if (type) params.type = type;

                if (obj_count > maxObjFetch)
                    console.error("user's object count for owned workspaces was", obj_count);

                //console.log('total owned data is', obj_count)

                var req_count = Math.ceil(obj_count/10000);

                var proms = [];
                proms.push( ws.list_objects(params) );
                for (var i=1; i < req_count; i++) {
                    params.skip = 10000 * i;
                    proms.push( ws.list_objects(params) );
                }

                var p = ws.list_objects(params);
                return $.when(p).then(function(d) {
                    // update model
                    myData = [].concat.apply([], arguments);
                    myData.sort(function(a,b) {
                            if (a[3] > b[3]) return -1; // sort by name
                            if (a[3] < b[3]) return 1;
                            return 0;
                        });
                    render(myData, $mineScrollPanel, mineSelected);
                });
            }


            // function used to update shared with me data list
            function getSharedData(workspaces, type, ws_name) {
                if (workspaces.length==0) {
                    render([], $sharedScrollPanel, {});
                    return null;
                }
                var params = {includeMetadata:1};
                if (!ws_name) {
                    var ws_ids = [], obj_count = 0;
                    for (var i in workspaces) {
                        ws_ids.push(workspaces[i].id);
                        obj_count = workspaces[i].count + obj_count;
                    }

                    params.ids = ws_ids;
                } else
                    params.workspaces = [ws_name];

                if (type) params.type = type;

                if (obj_count > maxObjFetch)
                    console.error("user's object count for shared workspaces was", obj_count);

                //console.log('total shared data', obj_count);

                var req_count = Math.ceil(obj_count/10000);

                var proms = [];
                proms.push( ws.list_objects(params) );
                for (var i=1; i < req_count; i++) {
                    params.skip = 10000 * i;
                    proms.push( ws.list_objects(params) );
                }

                return $.when.apply($, proms).then(function() {
                    // update model
                    sharedData = [].concat.apply([], arguments);

                    sharedData.sort(function(a,b) {
                            if (a[3] > b[3]) return -1; // sort by name
                            if (a[3] < b[3]) return 1;
                            return 0;
                        });

                    render(sharedData, $sharedScrollPanel, sharedSelected);
                })
            }

            // This function takes data to render and
            // a container to put data in.
            // It produces a scrollable dataset
            function render(data, container, selected, template) {
                var start = 0, end = 30;

                // remove items from only current container being rendered
                container.empty();

                if (data.length == 0){
                    container.append($('<div>').addClass("kb-data-list-type").css({margin:'15px', 'margin-left':'35px'}).append('No data found'));
                    return;
                } else if (data.length-1 < end)
                    end = data.length;

                var rows = buildMyRows(data, start, end, template);
                container.append(rows);
                events(container, selected);

                if (rows.children().length==0) {
                    container.append($('<div>').addClass("kb-data-list-type").css({margin:'15px', 'margin-left':'35px'}).append('No data found'));
                    return;
                }

                // infinite scroll
                var currentPos = end;
                container.unbind('scroll');
                container.on('scroll', function() {
                    if($(this).scrollTop() + $(this).innerHeight() >= this.scrollHeight) {
                        currentPos = currentPos+end;
                        var rows = buildMyRows(data, currentPos, end, template);
                        container.append(rows);
                    }
                    events(container, selected);
                });
            }

            function getMyWS() {
                return ws.list_workspace_info({owners: [user]})
                        .then(function(d) {
                            var workspaces = [];
                            for (var i in d) {
                                if (d[i][8].is_temporary) {
                                    if (d[i][8].is_temporary === 'true') { continue; }
                                }
                                var displayName = d[i][1];
                                if (d[i][8].narrative) {
                                    if (d[i][8].narrative_nice_name) {
                                        displayName = d[i][8].narrative_nice_name;
                                        // todo: should skip temporary narratives
                                        workspaces.push({id: d[i][0],
                                                         name: d[i][1],
                                                         displayName: displayName,
                                                         count: d[i][4]});
                                        narrativeNameLookup[d[i][1]] = displayName;
                                        continue;
                                    }
                                }

                                if (d[i][8].show_in_narrative_data_panel) {
                                    if(d[i][8].show_in_narrative_data_panel==='1') {
                                        displayName = "(data only) "+d[i][1];
                                        workspaces.push({id: d[i][0],
                                                     name: d[i][1],
                                                     displayName:displayName,
                                                     count: d[i][4]});
                                        narrativeNameLookup[d[i][1]] = displayName;
                                    }
                                }
                            }

                            // add to model for filter
                            myWorkspaces = workspaces;

                            // sort by name
                            myWorkspaces.sort(function(a,b) {
                                    if (a.displayName.toUpperCase() < b.displayName.toUpperCase()) return -1; // sort by name
                                    if (a.displayName.toUpperCase() > b.displayName.toUpperCase()) return 1;
                                    return 0;
                                });
                            return workspaces;
                        })
            }

            function getSharedWS() {
                return ws.list_workspace_info({excludeGlobal: 1})
                        .then(function(d) {
                            var workspaces = [];
                            for (var i in d) {
                                // skip owned workspaced
                                if (d[i][2] == user) {
                                    continue;
                                }

                                if (d[i][8].is_temporary) {
                                    if (d[i][8].is_temporary === 'true') { continue; }
                                }
                                var displayName = d[i][1];
                                if (d[i][8].narrative) {
                                    if (d[i][8].narrative_nice_name) {
                                        displayName = d[i][8].narrative_nice_name;
                                        // todo: should skip temporary narratives
                                        workspaces.push({id: d[i][0],
                                                         name: d[i][1],
                                                         displayName: displayName,
                                                         count: d[i][4]});
                                        narrativeNameLookup[d[i][1]] = displayName;
                                        continue;
                                    }
                                }

                                if (d[i][8].show_in_narrative_data_panel) {
                                    if(d[i][8].show_in_narrative_data_panel==='1') {
                                        displayName = "(data only) "+d[i][1];
                                        workspaces.push({id: d[i][0],
                                                     name: d[i][1],
                                                     displayName:displayName,
                                                     count: d[i][4]});
                                        narrativeNameLookup[d[i][1]] = displayName;
                                    }
                                }
                            }

                            // add to model for filter
                            sharedWorkspaces = workspaces;
                            sharedWorkspaces.sort(function(a,b) {
                                    if (a.displayName.toUpperCase() < b.displayName.toUpperCase()) return -1; // sort by name
                                    if (a.displayName.toUpperCase() > b.displayName.toUpperCase()) return 1;
                                    return 0;
                                });
                            return workspaces;
                        })
            }

            function typeList(data) {
                var types = [];

                for (var i in data) {
                    var mod_type = data[i][2].split('-')[0];
                    // update model for types dropdown
                    if (types.indexOf(mod_type) == -1) types.push(mod_type);
                }
                return types;
            }

            function copyObjects(objs, nar_ws_name) {
                importStatus.html('Adding <i>'+objs.length+'</i> objects to narrative...');

                var proms = [];
                for (var i in objs) {
                    var ref = objs[i].ref;
                    var name = objs[i].name;
                    console.log('copying ', ref, 'to', nar_ws_name);
                    proms.push( ws.copy_object({to: {workspace: nar_ws_name, name: name},
                                                from: {ref: ref} }) );
                }
                return proms;
            }


            function events(panel, selected) {
                panel.find('.kb-import-item').unbind('click');
                panel.find('.kb-import-item').click(function(){
                    var item = $(this);
                    var ref = item.data('ref').replace(/\./g, '/');
                    var name = item.data('obj-name');

                    var checkbox = $(this).find('.kb-import-checkbox');
                    checkbox.toggleClass('fa-check-square-o')
                            .toggleClass('fa-square-o');

                    // update model for selected items
                    if (checkbox.hasClass('fa-check-square-o') ) {
                        selected.push({ref: ref, name: name});
                    }
                    else {
                        for (var i=0; i<selected.length; i++) {
                            if (selected[i].ref == ref)
                                selected.splice(i, 1);
                        }
                    }

                    // disable/enable button
                    if (selected.length > 0) btn.prop('disabled', false);
                    else btn.prop('disabled', true);

                    // import items on button click
                    btn.unbind('click');
                    btn.click(function() {
                        if (selected.length == 0) return;

                        //uncheck all checkboxes, disable add button
                        $('.kb-import-checkbox').removeClass('fa-check-square-o', false);
                        $('.kb-import-checkbox').addClass('fa-square-o', false);
                        $(this).prop('disabled', true);

                        var proms = copyObjects(selected, narWSName);
                        $.when.apply($, proms).done(function(data) {
                            importStatus.html('');
                            var status = $('<span class="text-success">done.</span>');
                            importStatus.append(status);
                            status.delay(1000).fadeOut();

                            // update sidebar data list
                            self.trigger('updateDataList.Narrative');
                        });

                        selected = [];

                        // um... reset events until my rendering issues are solved
                        events(panel, selected)
                    });
                });

                panel.find('.kb-import-item').unbind('hover');
                panel.find('.kb-import-item').hover(function() {
                    $(this).find('hr').css('visibility', 'hidden');
                    $(this).prev('.kb-import-item').find('hr').css('visibility', 'hidden');
                    $(this).find('.kb-import-checkbox').css('opacity', '.8');
                }, function() {
                    $(this).find('hr').css('visibility', 'visible');
                    $(this).prev('.kb-import-item').find('hr').css('visibility', 'visible');
                    $(this).find('.kb-import-checkbox').css('opacity', '.4');
                })

                // prevent checking when clicking link
                panel.find('.kb-import-item a').unbind('click');
                panel.find('.kb-import-item a').click(function(e) {
                    e.stopPropagation();
                })

            }

            function filterData(data, f) {
                if (data.length == 0) return [];

                var filteredData = [];
                // add each item to view
                for (var i=0; i<data.length; i< i++) {
                    var obj = data[i];

                    var mod_type = obj[2].split('-')[0],
                        ws = obj[7],
                        name = obj[1];
                    var kind = mod_type.split('.')[1];

                    // filter conditions
                    if (f.query) {
                        //query filter
                        var query = f.query.toLowerCase();
                        if (name.toLowerCase().indexOf(query) >= 0) {
                            filteredData.push(obj);
                        } else if (kind.toLowerCase().indexOf(query)>=0) {
                            filteredData.push(obj);
                        } else if (obj[5].toLowerCase().indexOf(query)>=0) {
                            filteredData.push(obj);
                        }
                    } else if (f.type) {
                        //type filter
                        if (f.type.split('.')[1] === kind) {
                            filteredData.push(obj);
                        }
                    } else if (f.ws) {
                        // workspace filter
                        if (f.ws === ws) {
                            filteredData.push(obj);
                        }
                    } else {
                        // no filter is on, so add it
                        filteredData.push(obj);
                    }

                }
                return filteredData;
            }


            function buildMyRows(data, start, end, template) {

                // add each set of items to container to be added to DOM
                var rows = $('<div class="kb-import-items">');

                for (var i=start; i< (start+end); i++) {
                    var obj = data[i];
                    // some logic is not right
                    if (!obj) {
                        continue;
                    }
                    var mod_type = obj[2].split('-')[0];
                    var item = {id: obj[0],
                                name: obj[1],
                                mod_type: mod_type,
                                version: obj[4],
                                kind: mod_type.split('.')[1],
                                module: mod_type.split('.')[0],
                                wsID: obj[6],
                                ws: obj[7],
                                info: obj, // we need to have this all on hand!
                                relativeTime: getTimeStampStr(obj[3])} //use the same one as in data list for consistencey  kb.ui.relativeTime( Date.parse(obj[3]) ) }

                    if (item.module=='KBaseNarrative') {
                        continue;
                    }
                    if (template)
                        var item = template(item);
                    else
                        var item = rowTemplate(item);

                    rows.append(item);
                }

                return rows;
            }


            function addMyFilters() {
                //var types = typeList(myData);
                var wsList = myWorkspaces;

                // possible filters via input
                var type, ws, query;

                // create filter (search)
                var filterInput = $('<input type="text" class="form-control kb-import-search" placeholder="Search data...">');
                var searchFilter = $('<div class="col-sm-4">').append(filterInput);

                // create workspace filter
                var wsInput = $('<select class="form-control kb-import-filter">');
                wsInput.append('<option>All narratives...</option>');
                for (var i=0; i < wsList.length; i++) {
                    wsInput.append('<option data-id="'+[i].id+'" data-name="'+wsList[i].name+'">'+
                                          wsList[i].displayName+
                                   '</option>');
                }
                var wsFilter = $('<div class="col-sm-4">').append(wsInput);

                // event for type dropdown
                wsInput.change(function() {
                    ws = $(this).children('option:selected').data('name');
                    filterInput.val('');
                    // request again with filted type
                    setLoading($mineScrollPanel);
                    getMyData(myWorkspaces, type, ws);
                })

                // create type filter
                var typeInput = $('<select class="form-control kb-import-filter">');
                typeInput.append('<option>All types...</option>');
                for (var i=0; i < types.length; i++) {
                    typeInput.append('<option data-type="'+types[i]+'">'+
                                          types[i].split('.')[1]+
                                     '</option>');
                }
                var typeFilter = $('<div class="col-sm-3">').append(typeInput);

                // event for type dropdown
                typeInput.change(function() {
                    type = $(this).children('option:selected').data('type');
                    filterInput.val('');
                    // request again with filted type
                    //minePanel.loading(); // loading puts the loading image in the wrong place..
                    setLoading($mineScrollPanel);
                    getMyData(myWorkspaces, type, ws);
                })


                // event for filter (search)
                filterInput.keyup(function(e){
                    query = $(this).val();
                    setLoading($mineScrollPanel);
                    var filtered = filterData(myData, {type: type, ws:ws, query:query})
                    render(filtered, $mineScrollPanel, mineSelected);
                });


                var $refreshBtnDiv = $('<div>').addClass('col-sm-1').css({'text-align':'center'}).append(
                                        $('<button>')
                                            .css({'margin-top':'12px'})
                                            .addClass('btn btn-xs btn-default')
                                            .click(function(event) {
                                                $mineScrollPanel.empty();
                                                setLoading($mineScrollPanel);
                                                updateView('mine').done(function() {
                                                    updateView('shared'); });
                                                })
                                            .append($('<span>')
                                                .addClass('glyphicon glyphicon-refresh')));


                // add search, type, ws filter to dom
                $mineFilterRow.empty();
                $mineFilterRow.append(searchFilter, typeFilter, wsFilter, $refreshBtnDiv);
                //minePanel.prepend(row);
            }

            function addSharedFilters() {
                //var types = typeList(sharedData);
                var wsList = sharedWorkspaces

                // possible filters via input
                var type, ws, query;

                // create filter (search)
                var filterInput = $('<input type="text" class="form-control kb-import-search" placeholder="Search data...">');
                var searchFilter = $('<div class="col-sm-4">').append(filterInput);

                // create workspace filter
                var wsInput = $('<select class="form-control kb-import-filter">');
                wsInput.append('<option>All narratives...</option>');
                for (var i=0; i < wsList.length; i++) {
                    wsInput.append('<option data-id="'+wsList[i].id+'" data-name="'+wsList[i].name+'">'+
                                          wsList[i].displayName+
                                    '</option>');
                }
                var wsFilter = $('<div class="col-sm-4">').append(wsInput);

                // event for type dropdown
                wsInput.change(function() {
                    filterInput.val('');
                    ws = $(this).children('option:selected').data('name');
                    // request again with filted type
                    setLoading($sharedScrollPanel);
                    getSharedData(sharedWorkspaces, type, ws);
                })


                // create type filter
                var typeInput = $('<select class="form-control kb-import-filter">');
                typeInput.append('<option>All types...</option>');
                for (var i=0; i < types.length; i++) {
                    typeInput.append('<option data-type="'+types[i]+'">'+
                                          types[i].split('.')[1]+
                                     '</option>');
                }
                var typeFilter = $('<div class="col-sm-3">').append(typeInput);

                // event for type dropdown
                typeInput.change(function() {
                    type = $(this).children('option:selected').data('type');
                    filterInput.val('');

                    // request again with filted type
                    setLoading($sharedScrollPanel);
                    getSharedData(sharedWorkspaces, type, ws);
                })



                // event for filter (search)
                filterInput.keyup(function(e){
                    query = $(this).val();
                    var filtered = filterData(sharedData, {type: type, ws:ws, query:query})
                    render(filtered, $sharedScrollPanel, sharedSelected);
                });


                var $refreshBtnDiv = $('<div>').addClass('col-sm-1').append(
                                        $('<button>')
                                            .css({'margin-top':'12px'})
                                            .addClass('btn btn-xs btn-default')
                                            .click(function(event) {
                                                $sharedScrollPanel.empty();
                                                setLoading($sharedScrollPanel);
                                                updateView('shared').done(function() {
                                                    updateView('mine'); });
                                                })
                                            .append($('<span>')
                                                .addClass('glyphicon glyphicon-refresh')));

                // add search, type, ws filter to dom
                $sharedFilterRow.empty();
                $sharedFilterRow.append(searchFilter, typeFilter, wsFilter, $refreshBtnDiv);
                //sharedPanel.prepend(row);
            }

            function rowTemplate(obj) {
                var object_info = obj.info;
                // object_info:
                // [0] : obj_id objid // [1] : obj_name name // [2] : type_string type
                // [3] : timestamp save_date // [4] : int version // [5] : username saved_by
                // [6] : ws_id wsid // [7] : ws_name workspace // [8] : string chsum
                // [9] : int size // [10] : usermeta meta
                var type_tokens = object_info[2].split('.')
                var type_module = type_tokens[0];
                var type = type_tokens[1].split('-')[0];
                var unversioned_full_type = type_module + '.' + type;
                var logo_name = "";
                var landingPageLink = self.options.default_landing_page_url + object_info[7] + '/' + object_info[1];
                                            var ws_landing_page_map = window.kbconfig.landing_page_map;
                                            if (ws_landing_page_map && ws_landing_page_map[type_module] && ws_landing_page_map[type_module][type]) {
                                                landingPageLink = self.options.landing_page_url +
                                                                ws_landing_page_map[type_module][type] + "/" + object_info[7] + '/' + object_info[1];
                                            }
                var icons = self.data_icons;
                var icon = _.has(icons, type) ? icons[type] : icons['DEFAULT'];
                var $logo = $('<span>')
                  // background circle
                  .addClass("fa-stack fa-2x").css({'cursor':'pointer'})
                  .append($('<i>')
                    .addClass("fa fa-circle fa-stack-2x")
                    .css({'color': self.logoColorLookup(type)}));
                  // add stack of font-awesome icons
                  _.each(icon, function(cls) {
                    $logo.append($('<i>')
                    .addClass("fa fa-inverse fa-stack-1x " + cls));
                  });

                var shortName = object_info[1]; var isShortened=false;
                if (shortName.length>50) {
                    shortName = shortName.substring(0,50)+'...';
                    isShortened=true;
                }
                var $name = $('<span>').addClass("kb-data-list-name").append('<a href="'+landingPageLink+'" target="_blank">'+shortName+'</a>'); // TODO: make link!!
                if (isShortened) { $name.tooltip({title:object_info[1], placement:'bottom', delay: { show: 750, hide: 0 } }); }

                var $version = $('<span>').addClass("kb-data-list-version").append('v'+object_info[4]);
                var $type = $('<span>').addClass("kb-data-list-type").append(type);

                var $date = $('<span>').addClass("kb-data-list-date").append(getTimeStampStr(object_info[3]));
                var $byUser = $('<span>').addClass("kb-data-list-edit-by");
                if (object_info[5] !== self.my_user_id) {
                    $byUser.append(' by '+object_info[5])
                        .click(function(e) {
                            e.stopPropagation();
                            window.open(self.options.landing_page_url+'people/'+object_info[5]);
                        });
                }

                var metadata = object_info[10];
                var metadataText = '';
                for(var key in metadata) {
                    if (metadata.hasOwnProperty(key)) {
                        metadataText += '<tr><th>'+ key +'</th><td>'+ metadata[key] + '</td></tr>';
                    }
                }
                if (type==='Genome') {
                    if (metadata.hasOwnProperty('Name')) {
                        $type.text(type+': '+metadata['Name']);
                    }
                }

                var narName = obj.ws;
                if (narrativeNameLookup[obj.ws]) {
                    narName = narrativeNameLookup[obj.ws];
                }
                var $narName = $('<span>').addClass("kb-data-list-narrative").append(narName);
                //var $savedByUserSpan = $('<td>').addClass('kb-data-list-username-td').append(object_info[5]);
                //this.displayRealName(object_info[5],$savedByUserSpan);

                //var typeLink = '<a href="'+this.options.landing_page_url+'spec/module/'+type_module+'" target="_blank">' +type_module+"</a>.<wbr>" +
                //                '<a href="'+this.options.landing_page_url+'spec/type/'+object_info[2]+'" target="_blank">' +(type_tokens[1].replace('-','&#8209;')) + '.' + type_tokens[2] + '</a>';
                //var $moreRow  = $('<div>').addClass("kb-data-list-more-div").hide()
                //                .append(
                //                    $('<table style="width:100%;">')
                //                        .append("<tr><th>Permament Id</th><td>" +object_info[6]+ "/" +object_info[0]+ "/" +object_info[4] + '</td></tr>')
                //                        .append("<tr><th>Full Type</th><td>"+typeLink+'</td></tr>')
                //                        .append($('<tr>').append('<th>Saved by</th>').append($savedByUserSpan))
                //                        .append(metadataText));

                //var $toggleAdvancedViewBtn = $('<span>').addClass("kb-data-list-more")//.addClass('btn btn-default btn-xs kb-data-list-more-btn')
                //    .hide()
                //    .html('<span class="fa fa-ellipsis-h" style="color:#999" aria-hidden="true"/>');
                //var toggleAdvanced = function() {
                //        if ($moreRow.is(':visible')) {
                //            $moreRow.slideUp('fast');
                //            $toggleAdvancedViewBtn.show();
                //        } else {
                //            $moreRow.slideDown('fast');
                //            $toggleAdvancedViewBtn.hide();
                //        }
                //    };

                var $btnToolbar = $('<span>').addClass('btn-toolbar pull-right').attr('role', 'toolbar').hide();
                var btnClasses = "btn btn-xs btn-default";
                var css = {'color':'#888'};
                var $openLandingPage = $('<span>')
                                        // tooltips showing behind pullout, need to fix!
                                        //.tooltip({title:'Explore data', 'container':'#'+this.mainListId})
                                        .addClass(btnClasses)
                                        .append($('<span>').addClass('fa fa-binoculars').css(css))
                                        .click(function(e) {
                                            e.stopPropagation();
                                            window.open(landingPageLink);
                                        });

                var $openProvenance = $('<span>')
                                        .addClass(btnClasses).css(css)
                                        //.tooltip({title:'View data provenance and relationships', 'container':'body'})
                                        .append($('<span>').addClass('fa fa-sitemap fa-rotate-90').css(css))
                                        .click(function(e) {
                                            e.stopPropagation();
                                            window.open(self.options.landing_page_url+'objgraphview/'+object_info[7]+'/'+object_info[1]);
                                        });
                $btnToolbar.append($openLandingPage).append($openProvenance);



                var $mainDiv  = $('<div>').addClass('kb-data-list-info').css({padding:'0px',margin:'0px'})
                                    .append($btnToolbar)
                                    .append($name).append($version).append('<br>')
                                    .append($type).append('<br>').append($narName).append('<br>').append($date).append($byUser);
                                    //.append($toggleAdvancedViewBtn)
                                    //.click(
                                    //    function() {
                                    //        toggleAdvanced();
                                    //    });


                var $addDiv =
                    $('<div>').append(
                        $('<button>').addClass('kb-primary-btn').css({'white-space':'nowrap', padding:'10px 15px'})
                            .append($('<span>').addClass('fa fa-chevron-circle-left').append(' Add'))
                            .on('click',function() { // probably should move action outside of render func, but oh well
                                $(this).attr("disabled","disabled");
                                $(this).html('<img src="'+self.options.loadingImage+'">');

                                var thisBtn = this;
                                var targetName = object_info[1];
                                //console.log(object.name + " -> " + targetName);
                                ws.copy_object({
                                    to:   {ref: self.ws_name + "/" + targetName},
                                    from: {ref: object_info[6] +   "/" + object_info[0]} },
                                    function (info) {
                                        $(thisBtn).html('Added');
                                        self.trigger('updateDataList.Narrative');
                                    },
                                    function(error) {
                                        $(thisBtn).html('Error');
                                        if (error.error && error.error.message) {
                                            if (error.error.message.indexOf('may not write to workspace')>=0) {
                                                importStatus.html($('<div>').css({'color':'#F44336','width':'500px'}).append('Error: you do not have permission to add data to this Narrative.'));
                                            } else {
                                                importStatus.html($('<div>').css({'color':'#F44336','width':'500px'}).append('Error: '+error.error.message));
                                            }
                                        } else {
                                            importStatus.html($('<div>').css({'color':'#F44336','width':'500px'}).append('Unknown error!'));
                                        }
                                        console.error(error);
                                    });

                            }));


                var $topTable = $('<table>')
                                 .css({'width':'100%','background':'#fff'})  // set background to white looks better on DnD
                                 .append($('<tr>')
                                         .append($('<td>')
                                                 .css({'width':'90px'})
                                                .append($addDiv.hide()))
                                         .append($('<td>')
                                                 .css({'width':'50px'})
                                                 .append($logo))
                                         .append($('<td>')
                                                 .append($mainDiv)));

                var $row = $('<div>')
                                .css({margin:'2px',padding:'4px','margin-bottom': '5px'})
                                //.addClass('kb-data-list-obj-row')
                                .append($('<div>').addClass('kb-data-list-obj-row-main')
                                            .append($topTable))
                                //.append($moreRow)
                                // show/hide ellipses on hover, show extra info on click
                                .mouseenter(function(){
                                    //if (!$moreRow.is(':visible')) { $toggleAdvancedViewBtn.show(); }
                                    $addDiv.show();
                                    $btnToolbar.show();
                                })
                                .mouseleave(function(){
                                    //$toggleAdvancedViewBtn.hide();
                                    $addDiv.hide();
                                    $btnToolbar.hide();
                                });

                var $rowWithHr = $('<div>').data('ref', obj.wsID+'.'+obj.id)
                                .data('obj-name', obj.name)
                                    .append($('<hr>')
                                                .addClass('kb-data-list-row-hr')
                                                .css({'margin-left':'150px'}))
                                    .append($row);

                return $rowWithHr;
            }

            // the existing .loading() .rmLoading() puts the loading icon in the wrong place
            function setLoading($container) {
                $container.empty();
                $container.append($('<div>').addClass("kb-data-list-type").css({margin:'15px', 'margin-left':'35px'})
                                  .append('<img src="' + self.options.loadingImage + '">'));
            }

            function objURL(module, type, ws, name) {
                var mapping = window.kbconfig.landing_page_map;
                if (mapping[module] && mapping[module][type]) {
                    return self.options.landingPageURL+mapping[module][type]+'/'+ws+'/'+name;
                }
                return self.options.landingPageURL+'json/'+ws+'/'+name;
            }

            function wsURL(ws) {
                return self.options.landingPageURL+'ws/'+ws;
            }

            var monthLookup = ["Jan", "Feb", "Mar","Apr", "May", "Jun", "Jul", "Aug", "Sep","Oct", "Nov", "Dec"];
            // edited from: http://stackoverflow.com/questions/3177836/how-to-format-time-since-xxx-e-g-4-minutes-ago-similar-to-stack-exchange-site
            function getTimeStampStr(objInfoTimeStamp) {
                var date = new Date(objInfoTimeStamp);
                var seconds = Math.floor((new Date() - date) / 1000);

                // f-ing safari, need to add extra ':' delimiter to parse the timestamp
                if (isNaN(seconds)) {
                    var tokens = objInfoTimeStamp.split('+');  // this is just the date without the GMT offset
                    var newTimestamp = tokens[0] + '+'+tokens[0].substr(0,2) + ":" + tokens[1].substr(2,2);
                    date = new Date(newTimestamp);
                    seconds = Math.floor((new Date() - date) / 1000);
                    if (isNaN(seconds)) {
                        // just in case that didn't work either, then parse without the timezone offset, but
                        // then just show the day and forget the fancy stuff...
                        date = new Date(tokens[0]);
                        return monthLookup[date.getMonth()]+" "+date.getDate()+", "+date.getFullYear();
                    }
                }

                var interval = Math.floor(seconds / 31536000);
                if (interval > 1) {
                    return monthLookup[date.getMonth()]+" "+date.getDate()+", "+date.getFullYear();
                }
                interval = Math.floor(seconds / 2592000);
                if (interval > 1) {
                    if (interval<4) {
                        return interval + " months ago";
                    } else {
                        return monthLookup[date.getMonth()]+" "+date.getDate()+", "+date.getFullYear();
                    }
                }
                interval = Math.floor(seconds / 86400);
                if (interval > 1) {
                    return interval + " days ago";
                }
                interval = Math.floor(seconds / 3600);
                if (interval > 1) {
                    return interval + " hours ago";
                }
                interval = Math.floor(seconds / 60);
                if (interval > 1) {
                    return interval + " minutes ago";
                }
                return Math.floor(seconds) + " seconds ago";
            };
        },

        logoColorLookup:function(type) {
            var code = 0;
            for (var i=0; i < type.length; code += type.charCodeAt(i++));
            return this.icon_colors[ code % this.icon_colors.length ];
        }

    });

})( jQuery );

/**
 * Widget for displaying a list of Narratives and basic narrative management (copy, delete, share)
 * @author Michael Sneddon <mwsneddon@lbl.gov>
 * @public
 */
(function( $, undefined ) {

    $.KBWidget({
        name: "kbaseNarrativeManagePanel", 
        parent: "kbaseNarrativeControlPanel",
        version: "1.0.0",
        wsClient: null,
        table: null,
        tableData: [],
        $loginMessage: null,
        $errorMessage: null,
        $loading: null,
        isLoggedIn: false,
        narrWs: null, /* see setNarrWS */
        // The set of all data currently loaded into the widget
        loadedData: {},
        options: {
            title: 'Narratives',
            loadingImage: "static/kbase/images/ajax-loader.gif",
            ws_url: "https://kbase.us/services/ws",
            nms_url: "https://kbase.us/services/narrative_method_store/rpc",
            user_name_fetch_url:"https://kbase.us/services/genome_comparison/users?usernames=",
            landing_page_url: "/functional-site/#/", // !! always include trailing slash
            ws_name: null,
            nar_name: null,
            new_narrative_link:"/functional-site/#/narrativemanager/new"
        },
        
        ws:null,
        manager:null,
        
        ws_name: null,
        nar_name: null,
        
        $mainPanel: null,
        $newNarrativeLink: null, // when a new narrative is created, gives a place to link to it
        
        init: function(options) {
            this._super(options);

            if (this.options.ws_name)  { this.ws_name = options.ws_name; }
            if (this.options.nar_name) { this.nar_name = options.nar_name; }

            if (window.kbconfig && window.kbconfig.urls) {
                this.options.ws_url = window.kbconfig.urls.workspace;
                this.options.nms_url = window.kbconfig.urls.narrative_method_store;
            }
            
            this.$mainPanel = $('<div>')//.css({'height':'600px'});
            this.body().append(this.$mainPanel);
            
            $(document).on(
                'setWorkspaceName.Narrative', $.proxy(function(e, info) {
                    this.ws_name = info.wsId;
                    this.nar_name = info.narrController;
                    this.refresh();
                }, this)
            );

            $([IPython.events]).on(
                'notebook_saved.Notebook', $.proxy(function(e) {
                    this.refresh();
                }, this)
            );
            
            this.landingPageMap = window.kbconfig.landing_page_map;
            
            if (this.ws_name && this.nar_name && this.ws) {
                this.refresh();
            }
            return this;
        },

        
        my_user_id: null,
        
        loggedInCallback: function(event, auth) {
            this.ws = new Workspace(this.options.ws_url, auth);
            this.manager = new NarrativeManager({ws_url:this.options.ws_url, nms_url:this.options.nms_url},auth);
            this.my_user_id = auth.user_id;
            this.refresh();
            return this;
        },
        loggedOutCallback: function(event, auth) {
            this.ws = null;
            this.manager=null;
            this.my_user_id = null;
            this.refresh();
            return this;
        },
        
        refresh: function() {
            if (!self.$narPanel) {
                this.renderHeader();
            }
            this.loadDataAndRenderPanel();
        },
        
        
        narData: null,
        allNarInfo:null,
        tempNars:null,
        oldStyleWs:null,
        
        loadDataAndRenderPanel: function() {
            var self = this;
            if (self.ws) {
                self.narData=null;
                self.showLoading();
                self.ws.list_workspace_info(
                    {excludeGlobal:1},
                    function(wsList) {
                        self.narData={
                            mine:[],
                            shared:[],
                            pub:[],
                            temp:[],
                            allWs:[]
                        };
                        self.allNarData=[];
                        /*WORKSPACE INFO
                            0: ws_id id
                            1: ws_name workspace
                            2: username owner
                            3: timestamp moddate,
                            4: int object
                            5: permission user_permission
                            6: permission globalread,
                            7: lock_status lockstat
                            8: usermeta metadata*/
                        var narRefsToLookup = []; var allNarInfo = [];
                        for (var i=0; i<wsList.length; i++) {
                            if (wsList[i][8]) { // must have metadata or else we skip
                                
                                // if it is temporary, we skip
                                if (wsList[i][8].is_temporary) {
                                    if (wsList[i][8].is_temporary === 'true') {
                                        self.narData.temp.push({ws_info:wsList[i]});
                                        continue;
                                    }
                                }
                                //must have the new narrative tag, or else we skip
                                if (wsList[i][8].narrative) {  
                                    var info={
                                            ws_info: wsList[i],
                                            nar_info: null,
                                            $div:null
                                    };
                                    if (wsList[i][2]===self._attributes.auth.user_id) {
                                        self.allNarData.push(info);
                                        self.narData.mine.push(info);
                                        narRefsToLookup.push({ref:info.ws_info[0]+"/"+wsList[i][8].narrative});
                                    } else if (wsList[i][5]==='a' || wsList[i][5]==='w' || wsList[i][5]==='r') {
                                        self.allNarData.push(info);
                                        self.narData.shared.push(info);
                                        narRefsToLookup.push({ref:info.ws_info[0]+"/"+wsList[i][8].narrative});
                                    }
                                }
                                if (wsList[i][5]==='a' || wsList[i][5]==='w') {
                                    // allWs is used for advanced management options, which we only
                                    // have if we have admin or write access
                                    self.narData.allWs.push({ws_info:wsList[i]});
                                }
                            }
                        }
                        self.ws.get_object_info_new({objects:narRefsToLookup,includeMetadata:1,ignoreErrors:1},
                                function(objList) {
                                    for(var i=0; i<objList.length; i++) {
                                        if (objList[i]!==null && objList[i][2].indexOf('KBaseNarrative.Narrative')===0) {
                                            self.allNarData[i].nar_info = objList[i];
                                        } else {
                                            console.error('Corrupted Workspace: ');
                                            console.error('Searching for narrative: ', narRefsToLookup[i], ' but got: ', objList[i]);
                                            self.allNarData[i].error = true;
                                            (function(errorIndex) {
                                                self.ws.get_object_info_new({objects:[narRefsToLookup[errorIndex]],includeMetadata:1,ignoreErrors:0},
                                                    function(error_obj_info) {
                                                        // this should not work!! but if it does, fine, remove the error and save the info
                                                        self.allNarData[errorIndex].error = false;
                                                        self.allNarData[errorIndex].nar_info = error_obj_info[0];
                                                    },
                                                    function(error) {
                                                        // this shouldn't happen often, so if it does, just take the time to refresh
                                                        self.allNarData[errorIndex].error_msg = error.error.message;
                                                        self.allNarData[errorIndex].$div = null;
                                                        self.renderPanel();
                                                    });
                                            })(i);
                                        }
                                    }
                                    self.renderPanel();
                                },
                                function(error) {
                                    console.error(error);
                                });
                    },
                    function (error) {
                        console.error(error);
                    }
                )
            }
        },
        
        showLoading: function() {
            this.$narPanel.html('<br><center><img src="'+this.options.loadingImage+'"/></center><br>');
        },
        
        renderHeader: function() {
            var self = this;
            if (self.$mainPanel) {
                self.$mainPanel.empty();
                
                var $msgPanel = $("<div>").css({'margin':'10px','text-align':'center'});
                self.$mainPanel.append(
                    $('<div>').css({'margin':'15px','text-align':'center'})
                        .append(self.makeNewNarrativeBtn())
                        .append(self.makeCopyThisNarrativeBtn($msgPanel))
                        .append($msgPanel));
                
                self.$narPanel = $('<div>');
                self.$mainPanel.append(self.$narPanel);
            }
        },
        
        advancedSetNarLookup: {},
        
        sortNarrativesFunc : function(a,b) {
            if (a.error && b.error) { return 0; }
            if (a.error) { return 1; }
            if (b.error) { return -1; }
            if (a.nar_info[3] > b.nar_info[3]) return -1; // sort by date
            if (a.nar_info[3] < b.nar_info[3]) return 1;  // sort by date
            return 0;
        },
        
        
        renderPanel: function() {
            var self = this;
            
            if (self.$narPanel && self.narData) {
                self.$narPanel.children().detach(); // this will also hide any loading messages if they exist
                
                if (self.narData.mine.length>0) {
                    self.$narPanel.append($('<div>').append($('<div>').addClass('kb-nar-manager-titles').append("My Narratives")));
                    self.narData.mine.sort(self.sortNarrativesFunc);
                    for(var k=0; k<self.narData.mine.length; k++) {
                        if (!self.narData.mine[k].$div) {
                            self.narData.mine[k].$div = self.renderNarrativeDiv(self.narData.mine[k]);
                        }
                        self.$narPanel.append(self.narData.mine[k].$div);
                    }
                }
                
                if (self.narData.shared.length>0) {
                    self.narData.shared.sort(self.sortNarrativesFunc);
                    self.$narPanel.append($('<div>').append($('<div>').addClass('kb-nar-manager-titles').append("Shared With Me")));
                    for(var k=0; k<self.narData.shared.length; k++) {
                        if (!self.narData.shared[k].$div) {
                            self.narData.shared[k].$div = self.renderNarrativeDiv(self.narData.shared[k]);
                        }
                        self.$narPanel.append(self.narData.shared[k].$div);
                    }
                }
                
                
                // ADVANCED TAB: allows users to set the default narrative for any workspace
                var $advancedDiv = $('<div>').hide();
                var $advLink = $('<h4>').append("Show Advanced Controls");
                self.$narPanel.append($('<div>').append($('<span>').append($("<a>").append($advLink)))
                                        .css({'text-align':'center','cursor':'pointer'})
                                        .on('click', function() {
                                            if ($advancedDiv.is(":visible") ) {
                                                $advancedDiv.hide();
                                                $advLink.html("Show Advanced Controls");
                                            } else {
                                                $advancedDiv.show();
                                                $advLink.html("Hide Advanced Controls");
                                            }
                                        }));
                self.$narPanel.append($advancedDiv);
                
                
                var $selectWsContainer = $('<select id="setPrimaryNarSelectWs">').addClass('form-control');
                var $selectNarContainer = $('<select id="setPrimaryNarSelectNar">').addClass('form-control').hide();
                var $setBtn = $('<button>').addClass('btn btn-default').append('Set this Narrative').hide();
                var $setPrimary = $('<div>').append(
                    $('<div>').addClass('form-group').css({'text-align':'center'})
                        .append($('<label for="setPrimaryNarSelectWs">').append("Set Active Narrative for Workspace"))
                        .append($selectWsContainer)
                        .append($selectNarContainer)
                        .append($setBtn));
                
                self.narData.allWs.sort(function(a,b) {
                    if (a.ws_info[1].toLowerCase() > b.ws_info[1].toLowerCase()) return 1; // sort by name
                    if (a.ws_info[1].toLowerCase() < b.ws_info[1].toLowerCase()) return -1;  // sort by name
                    return 0;
                });
                
                for(var k=0; k<self.narData.allWs.length; k++) {
                    var info = self.narData.allWs[k].ws_info;
                    $selectWsContainer.append($('<option value="'+info[1]+'">').append(info[1] + ' (id='+info[0]+')'));
                }
                $selectWsContainer.on('change',
                    function() {
                        $selectNarContainer.empty();
                        self.ws.list_objects({
                                workspaces: [$selectWsContainer.val()],
                                type:"KBaseNarrative.Narrative",
                                includeMetadata:1
                            },
                            function(objList) {
                                if (objList.length==0) {
                                    $selectNarContainer.append($('<option value="none">').append('No Narratives'));
                                    $setBtn.prop('disabled', true);
                                    $selectNarContainer.prop('disabled', true);
                                    return;
                                }
                                $setBtn.prop('disabled', false);
                                $selectNarContainer.prop('disabled', false);
                                
                                // sort by date
                                objList.sort(function(a,b) {
                                    if (a[3] > b[3]) return -1; // sort by date
                                    if (a[3] < b[3]) return 1;  // sort by date
                                    return 0;
                                });
                                self.advancedSetNarLookup = {};
                                // add the list to the select
                                for(var i=0; i<objList.length; i++) {
                                    var narDispName = objList[i][1];
                                    if (objList[i][10].name) {
                                        narDispName = objList[i][10].name;
                                    }
                                    self.advancedSetNarLookup[objList[i][0]] = narDispName;
                                    $selectNarContainer.append($('<option value="'+objList[i][0]+'">')
                                                                .append(narDispName + ' (id='+objList[i][0]+')'));
                                }
                            },
                            function(error) {
                                console.error(error);
                            });
                        
                        $selectNarContainer.show();
                        $setBtn.show();
                    });
                $selectWsContainer.change();
                $setBtn.on('click',
                    function() {
                        // should only get here if it was a valid WS/Nar combo
                        var ws = $selectWsContainer.val();
                        var nar = $selectNarContainer.val();
                        $(this).prop('disabled', true).empty().append("please wait...");
                        // should probably be moved to NarrativeManager
                        self.ws.alter_workspace_metadata({
                                wsi:{workspace:ws},
                                new: {
                                    'narrative' : nar,
                                    'is_temporary' : 'false',
                                    'narrative_nice_name': self.advancedSetNarLookup[nar]
                                }
                            },
                            function (args) {
                                self.loadDataAndRenderPanel();  
                            },
                            function name(error) {
                                $setBtn.html("error...");
                                console.error(error);
                            }
                        );
                    });
                $advancedDiv.append($setPrimary);
            }
        },
        
        addDataControls: function(object_info, $alertContainer, ws_info, isError) {
            var self = this;
            var $btnToolbar = $('<span>')
                                        .addClass('btn-toolbar')
                                        .attr('role', 'toolbar');
            
            var btnClasses = "btn btn-xs btn-default";
            var css = {'color':'#888', 'margin':'0px'};
                                        
            var $openHistory = $('<span>');
            if (!isError) {
                $openHistory
                                        .addClass(btnClasses).css(css)
                                        .tooltip({title:'View narrative history to revert changes', 'container':'body'})
                                        .append($('<span>').addClass('fa fa-history').css(css))
                                        .click(function(e) {
                                            e.stopPropagation(); $alertContainer.empty(); $alertContainer.show();
                                            
                                            if (self.ws_name && self.ws) {
                                                self.ws.get_object_history({ref:object_info[6]+"/"+object_info[0]},
                                                    function(history) {
                                                        history.reverse();
                                                        $alertContainer.append($('<div>')
                                                            .append($('<button>').addClass('kb-data-list-cancel-btn')
                                                                        .append('Hide History')
                                                                        .click(function() {$alertContainer.empty();} )));
                                                        var isCurrent = false;
                                                        if(self.ws_name === ws_info[1]) {
                                                            isCurrent = true;
                                                        }
                                                        var $tbl = $('<table>').css({'width':'100%'});
                                                        for(var k=0; k<history.length;k++) {
                                                            var $revertBtn = $('<button>').append('v'+history[k][4]).addClass('kb-data-list-btn');
                                                            if (k==0) {
                                                                $revertBtn.tooltip({title:'Current Version', 'container':'body',placement:'bottom'});
                                                            } else if(history[k][4]==1) {
                                                                $revertBtn.tooltip({title:'Cannot revert to first unsaved version', 'container':'body',placement:'bottom'});
                                                            } else {
                                                                var revertRef = {wsid:history[k][6], objid:history[k][0], ver:history[k][4]};
                                                                (function(revertRefLocal) {
                                                                    $revertBtn.tooltip({title:'Revert to this version?',placement:'bottom'})
                                                                        .click(function() {
                                                                            self.ws.revert_object(revertRefLocal,
                                                                                function(reverted_obj_info) {
                                                                                    // update the workspace info with the specified name
                                                                                    self.ws.alter_workspace_metadata({
                                                                                        wsi:{id:ws_info[0]},
                                                                                        new:{'narrative_nice_name':reverted_obj_info[10].name}},
                                                                                        function() {
                                                                                            if (isCurrent) {
                                                                                                window.location.reload();
                                                                                            } else {
                                                                                                self.refresh();
                                                                                            }
                                                                                        },
                                                                                        function(error) {
                                                                                            console.error(error);
                                                                                            $alertContainer.empty();
                                                                                            $alertContainer.append($('<span>').css({'color':'#F44336'}).append("Narrative reverted, but a minor data update error occured."+error.error.message));
                                                                                        });
                                                                                }, function(error) {
                                                                                    console.error(error);
                                                                                    $alertContainer.empty();
                                                                                    $alertContainer.append($('<span>').css({'color':'#F44336'}).append("Error! "+error.error.message));
                                                                                });
                                                                        }); })(revertRef);
                                                            }
                                                            var summary = self.getNarSummary(history[k]);
                                                            if (summary) { summary = '<br>'+summary; }
                                                            $tbl.append($('<tr>')
                                                                        .append($('<td>').append($revertBtn))
                                                                        .append($('<td>').append(self.getTimeStampStr(history[k][3]) + ' by ' + history[k][5] + summary))
                                                                        .append($('<td>').append($('<span>').css({margin:'4px'}).addClass('fa fa-info pull-right'))
                                                                                 .tooltip({title:history[k][2]+'<br>'+history[k][10].name+'<br>'+history[k][8]+'<br>'+history[k][9]+' bytes', container:'body',html:true,placement:'bottom'}))
                                                                                );
                                                        }
                                                        $alertContainer.append($tbl);
                                                    },
                                                    function(error) {
                                                        console.error(error);
                                                        $alertContainer.empty();
                                                        $alertContainer.append($('<span>').css({'color':'#F44336'}).append("Error! "+error.error.message));
                                                    });
                                            }
                                        });
            }
                                        
            /*var $openProvenance = $('<span>')
                                        .addClass(btnClasses).css(css)
                                        .tooltip({title:'View data provenance and relationships', 'container':'body'})
                                        .append($('<span>').addClass('fa fa-sitemap fa-rotate-90').css(css))
                                        .click(function(e) {
                                            e.stopPropagation(); $alertContainer.empty();
                                            window.open(self.options.landing_page_url+'objgraphview/'+object_info[7]+'/'+object_info[1]);
                                        });*/
            /*var $download = $('<span>')
                                        .addClass(btnClasses).css(css)
                                        .tooltip({title:'Export / Download data', 'container':'body'})
                                        .append($('<span>').addClass('fa fa-download').css(css))
                                        .click(function(e) {
                                            e.stopPropagation(); $alertContainer.empty();
                                            $alertContainer.append('Coming soon');
                                        });*/
            
            var $copy = $('<span>');
            if (!isError) {
                $copy
                    .addClass(btnClasses).css(css)
                    .tooltip({title:'Copy Narrative and Data', 'container':'body'})
                    .append($('<span>').addClass('fa fa-copy').css(css))
                    .click(function(e) {
                        e.stopPropagation(); $alertContainer.empty(); $alertContainer.show();
                        var $newNameInput = $('<input type="text">').addClass('form-control').val(ws_info[8].narrative_nice_name+ ' - Copy');
                        $alertContainer.append(
                            $('<div>').append(
                                $('<div>').append("Enter a name for the new Narrative"))
                                    .append($('<div>').append($newNameInput))
                                    .append($('<button>').addClass('kb-data-list-btn')
                                        .append('Copy')
                                        .click(function() {
                                            $(this).prop("disabled",true);
                                            var newMeta = ws_info[8];
                                            newMeta['narrative_nice_name'] = $newNameInput.val();
                                            
                                            var id = new Date().getTime();
                                            var ws_name = self.my_user_id + ":" + id;
                                            
                                            self.ws.clone_workspace({
                                                        wsi: {id:ws_info[0]},
                                                        workspace: ws_name,
                                                        meta: newMeta
                                                    },
                                                    function(new_ws_info) {
                                                        // we have to match based on names because when cloning, the object id is not preserved!!! arg!
                                                        var new_narrative_ref = new_ws_info[0]+"/"+ object_info[1]; //new_ws_info[8].narrative;
                                                        // ok, a lot of work just to update the narrative name in the metadata
                                                        self.ws.get_objects([{ref:new_narrative_ref}],
                                                            function(data) {
                                                                data = data[0]; // only one thing should be returned
                                                                var new_nar_metadata = data.info[10];
                                                                new_nar_metadata.name = newMeta['narrative_nice_name'];
                                                                data.data.metadata.name = newMeta['narrative_nice_name'];
                                                                
                                                                // set workspace metadata to point to the correct object id since they can change on clone!!
                                                                self.ws.alter_workspace_metadata({
                                                                        wsi:{id:new_ws_info[0]},
                                                                        new: {'narrative' : String(data.info[0]) }
                                                                    },
                                                                    function () {
                                                                        // so much work just to update this name!
                                                                        self.ws.save_objects({id:new_ws_info[0],objects:[
                                                                            {
                                                                                type:data.info[2],
                                                                                data:data.data,
                                                                                provenance:data.provenance,
                                                                                name:data.info[1],
                                                                                meta:new_nar_metadata
                                                                            }
                                                                            ]},
                                                                            function(info) {
                                                                                console.log('copying complete',info);
                                                                                self.refresh();
                                                                            },
                                                                            function(error) {
                                                                                console.error(error);
                                                                                $alertContainer.empty();
                                                                                $alertContainer.append($('<span>').css({'color':'#F44336'}).append("Error! Copied successfully, but error on rename."+error.error.message));
                                                                            });
                                                                    
                                                                    },
                                                                    function name(error) {
                                                                        
                                                                    });
                                                                
                                                                
                                                            },
                                                            function(error) {
                                                                console.error(error);
                                                                $alertContainer.empty();
                                                                $alertContainer.append($('<span>').css({'color':'#F44336'}).append("Error! Copied successfully, but error on rename."+error.error.message));
                                                            })
                                                    },
                                                    function(error) {
                                                        console.error(error);
                                                        $alertContainer.empty();
                                                        $alertContainer.append($('<span>').css({'color':'#F44336'}).append("Error! "+error.error.message));
                                                    });
                                            }))
                                    .append($('<button>').addClass('kb-data-list-cancel-btn')
                                        .append('Cancel')
                                        .click(function() {$alertContainer.empty();} )));
                });
            }
            
            var $delete = $('<span>') 
                                        .addClass(btnClasses).css(css)
                                        .tooltip({title:'Delete Narrative', 'container':'body'})
                                        .append($('<span>').addClass('fa fa-trash-o').css(css))
                                        .click(function(e) {
                                            e.stopPropagation();
                                            $alertContainer.empty(); $alertContainer.show();
                                            
                                            var warningMsg = 'Are you sure?'; var isCurrent = false;
                                            if(self.ws_name === ws_info[1]) {
                                                isCurrent = true;
                                                warningMsg = 'Warning - you are currently viewing this Narrative!<br>You will be redirected to another Narrative if deleted.  Are you sure?';
                                            }
                                            
                                            $alertContainer.append($('<div>')
                                                .append($('<div>').append(warningMsg))
                                                .append($('<button>').addClass('kb-data-list-btn')
                                                            .append('Delete')
                                                            .click(function() {
                                                                if (self.ws_name && self.ws) {
                                                                    self.ws.delete_workspace({ id: ws_info[0] },
                                                                        function() {
                                                                            if (isCurrent) {
                                                                                window.location.replace(self.options.landing_page_url+'narrativemanager/start');
                                                                            } else {
                                                                                self.refresh();
                                                                            }
                                                                        },
                                                                        function(error) {
                                                                            console.error(error);
                                                                            $alertContainer.empty();
                                                                            $alertContainer.append($('<span>').css({'color':'#F44336'}).append("Error! "+error.error.message));
                                                                        });
                                                                }
                                                            }))
                                                .append($('<button>').addClass('kb-data-list-cancel-btn')
                                                            .append('Cancel')
                                                            .click(function() {$alertContainer.empty();} )));
                                        });
            
            $btnToolbar
                .append($openHistory)
                //.append($openProvenance)
                //.append($download)
                .append($copy)
                .append($delete);
            
            return $btnToolbar;
        },
        
        
        renderNarrativeDiv: function(data) {
            var self = this;
            
            var isCurrent = false;
            if(this.ws_name === data.ws_info[1]) {
                isCurrent = true;
            }
            
            var $narDiv = $('<div>').addClass('kb-data-list-obj-row');
            
            var $tbl = $('<table>').css({'width':'100%'});
            var $dataCol = $('<td>').css({'text-align':'left','vertical-align':'top'});
            var $ctrCol = $('<td>').css({'text-align':'right','vertical-align':'top', 'width':'80px'});
            var $ctrContent = $('<div>').css({'min-height':'60px'});
            $ctrCol.append($ctrContent);
            
            var $alertContainer=$('<div>').addClass('kb-data-list-more-div').css({'text-align':'center','margin':'5px'}).hide();
            
            var narRef = "ws."+data.ws_info[0]+".obj."+data.ws_info[8].narrative;
            var nameText = narRef; var version='';
            if (data.nar_info && data.nar_info[10].name) {
                nameText = data.nar_info[10].name;
                version = 'v'+data.nar_info[4];
            } else if (data.error && data.ws_info[8].narrative_nice_name) {
                nameText = data.ws_info[8].narrative_nice_name + ' ('+nameText+')';
            }
            var $version = $('<span>').addClass("kb-data-list-version").append(version);
            var $priv = $('<span>').css({'color':'#999','margin-left':'8px'}).prop('data-toggle','tooltip').prop('data-placement','right');
             if (data.ws_info[5]==='r') {
                $priv.addClass('fa fa-lock').prop('title','read-only');
            } else if (data.ws_info[5]==='w' || data.ws_info[5]==='a') {
                $priv.addClass('fa fa-pencil').prop('title','you can edit');
            }
            
            var $nameLink =  $('<a href="'+narRef+'" target="_blank">');
            if (isCurrent) {
                 $nameLink.append($('<span>').addClass('fa fa-circle').css({'margin-right':'3px','color':'#4BB856'})
                                    .tooltip({title:'You are viewing this Narrative now'}));
            } else if (data.error) {
                 $nameLink.append($('<span>').addClass('fa fa-circle').css({'margin-right':'3px','color':'#F44336'})
                                    .tooltip({title:'This narrative has been corrupted.'}));
            }
            $nameLink.append(nameText).append($version).append($priv);
            $dataCol.append($('<div>').addClass('kb-data-list-name').css({'white-space':'normal', 'cursor':'pointer'}).append($nameLink));
            
            // only disply the rest if there was no error
            if (!data.error) {
                var $usrNameSpan = $('<span>').addClass('kb-data-list-type').append(data.ws_info[2]);
                if(data.ws_info[2]===this._attributes.auth.user_id) {
                } else {
                    $dataCol.append($usrNameSpan).append('<br>');
                    this.displayRealName(data.ws_info[2], $usrNameSpan);
                }
                var summary = this.getNarSummary(data.nar_info);
                if (summary) {
                    $dataCol.append($('<span>').addClass('kb-data-list-narinfo').append(summary)
                                    .click(
                                        function() {
                                            $alertContainer.empty(); $alertContainer.show();
                                            $alertContainer.append($('<div>')
                                                                .append($('<button>').addClass('kb-data-list-cancel-btn')
                                                                            .append('Hide Narrative Info')
                                                                            .click(function() {$alertContainer.empty();} )));
                                            $alertContainer.append(self.getNarContent(data.nar_info));
                                        })
                                    .append('<br>'));
                }
                $dataCol.append($('<span>').addClass('kb-data-list-type').append(this.getTimeStampStr(data.nar_info[3])));
                
                var $shareContainer = $('<div>').hide();
                var $shareToolbar = $('<span>').addClass('btn-toolbar').attr('role', 'toolbar');
                $ctrContent.append($shareToolbar);
                this.ws.get_permissions({id:data.ws_info[0]},
                    function(perm) {
                        var shareCount = 0;
                        for(var usr in perm) {
                            if (perm.hasOwnProperty(usr)) {
                                if (usr === '*') { continue; }
                                shareCount++;
                            }
                        }
                        // should really put this in the addDatacontrols; so refactor at some point!
                        $shareToolbar.append(
                                $('<span>')   
                                    .addClass('btn btn-xs btn-default').css({'color':'#888', 'margin':'0px'})
                                    .tooltip({title:'View share settings', 'container':'body'})
                                                .append($('<span>').addClass('fa fa-share-alt').css({'color':'#888','margin':'0px','font-size':'10pt'})
                                                    .append(' '+shareCount)
                                                    .on('click',function() {
                                                        $alertContainer.hide();
                                                        $shareContainer.slideToggle('fast');
                                                        if($shareContainer.is(':empty')) {
                                                            var $share = $('<div>');
                                                            // just use the share panel, max height is practically unlimited because we are already
                                                            // in a scrollable pane
                                                            $share.kbaseNarrativeSharePanel({ws_name_or_id:data.ws_info[0],max_list_height:'none', add_user_input_width:'280px'});
                                                            $shareContainer.append($share);
                                                        }
                                                    })));
                    },
                    function(error) {
                        console.error('error getting permissions for manage panel');
                        console.error(error);
                    });
            
                var $btnToolbar = self.addDataControls(data.nar_info,$alertContainer, data.ws_info);
                $ctrContent.append($btnToolbar.hide());
                $narDiv
                    .mouseenter(function(){ $btnToolbar.show(); })
                    .mouseleave(function(){ $btnToolbar.hide(); });
            } else if (data.error_msg) {
                 $dataCol.append($('<span>').addClass('kb-data-list-narrative-error').append(
                                 'This Narrative has been corrupted: '+data.error_msg));
                var $btnToolbar = self.addDataControls(data.nar_info,$alertContainer, data.ws_info, true);
                $ctrContent.append($btnToolbar);
            }
            $narDiv.append($('<table>').css({'width':'100%'})
                           .append($('<tr>').append($dataCol).append($ctrCol)));
            $narDiv.append($alertContainer);
            $narDiv.append($shareContainer);
            
            var $narDivContainer = $('<div>').append($('<hr>').addClass('kb-data-list-row-hr').css({'margin-left':'15px'}))
                                        .append($narDiv);
            
            return $narDivContainer;
        },
        
        
        makeCopyThisNarrativeBtn: function($alertContainer) {
            var self = this;
            var active = '<span class="fa fa-copy"></span> Copy Narrative';
//            var $active = $('<span>').addClass('fa fa-copy').append(" Copy Narrative");
            var $working = $('<span>').append("Copying Narrative...");
            
            var $btn = $('<button>').addClass('kb-primary-btn')
                    .append(active)
                    .on('click', function(e) {
                        e.stopPropagation();
                        var $cpyBtn = $(this);
                        $cpyBtn.prop('disabled', true).empty().append($working);
                        
                        self.ws.get_workspace_info({workspace: self.ws_name},
                            function(ws_info) {
                                self.ws.get_object_info_new({objects:[{ref: ws_info[0] + '/' + ws_info[8]['narrative']}], includeMetadata:1},
                                    function(object_info_list) {
                                        var object_info = object_info_list[0];
                                        var $newNameInput = $('<input type="text">').addClass('form-control').val(ws_info[8]['narrative_nice_name']+' - Copy');
                                        $alertContainer.append(
                                            $('<div>').append(
                                                $('<div>').append("Enter a name for the new Narrative"))
                                                    .append($('<div>').append($newNameInput))
                                                    .append($('<button>').addClass('kb-data-list-btn')
                                                        .append('Copy')
                                                        .click(function() {
                                                            var $thisBtn = $(this);
                                                            $thisBtn.prop("disabled",true);
                                                            var newMeta = ws_info[8];
                                                            newMeta['narrative_nice_name'] = $newNameInput.val();
                                                            
                                                            var id = new Date().getTime();
                                                            var ws_name = self.my_user_id + ":" + id;
                                                            
                                                            self.ws.clone_workspace({
                                                                        wsi: {id:ws_info[0]},
                                                                        workspace: ws_name,
                                                                        meta: newMeta
                                                                    },
                                                                    function(new_ws_info) {
                                                                        // we have to match based on names because when cloning, the object id is not preserved!!! arg!
                                                                        var new_narrative_ref = new_ws_info[0]+"/"+ object_info[1]; //new_ws_info[8].narrative;
                                                                        // ok, a lot of work just to update the narrative name in the metadata
                                                                        self.ws.get_objects([{ref:new_narrative_ref}],
                                                                            function(data) {
                                                                                data = data[0]; // only one thing should be returned
                                                                                var new_nar_metadata = data.info[10];
                                                                                new_nar_metadata.name = newMeta['narrative_nice_name'];
                                                                                data.data.metadata.name = newMeta['narrative_nice_name'];
                                                                                
                                                                                // set workspace metadata to point to the correct object id since they can change on clone!!
                                                                                self.ws.alter_workspace_metadata({
                                                                                        wsi:{id:new_ws_info[0]},
                                                                                        new: {'narrative' : String(data.info[0]) }
                                                                                    },
                                                                                    function () {
                                                                                        // so much work just to update this name!
                                                                                        self.ws.save_objects({id:new_ws_info[0],objects:[
                                                                                            {
                                                                                                type:data.info[2],
                                                                                                data:data.data,
                                                                                                provenance:data.provenance,
                                                                                                name:data.info[1],
                                                                                                meta:new_nar_metadata
                                                                                            }
                                                                                            ]},
                                                                                            function(info) {
                                                                                                console.log('copying complete',info);
                                                                                                $thisBtn.prop('disabled', false).empty().append($active);
                                                                                                $alertContainer.empty();
                                                                                                self.refresh();
                                                                                            },
                                                                                            function(error) {
                                                                                                console.error(error);
                                                                                                $alertContainer.empty();
                                                                                                $alertContainer.append($('<span>').css({'color':'#F44336'}).append("Error! Copied successfully, but error on data update. "+error.error.message));
                                                                                            });
                                                                                    
                                                                                    },
                                                                                    function (error) {
                                                                                        console.error(error);
                                                                                        $alertContainer.empty();
                                                                                        $alertContainer.append($('<span>').css({'color':'#F44336'}).append("Error! Copied successfully, but error on data update. "+error.error.message));
                                                                                    });
                                                                                
                                                                                
                                                                            },
                                                                            function(error) {
                                                                                console.error(error);
                                                                                $alertContainer.empty();
                                                                                $alertContainer.append($('<span>').css({'color':'#F44336'}).append("Error! Copied successfully, but error on rename. "+error.error.message));
                                                                            })
                                                                    },
                                                                    function(error) {
                                                                        console.error(error);
                                                                        $alertContainer.empty();
                                                                        $alertContainer.append($('<span>').css({'color':'#F44336'}).append("Error! "+error.error.message));
                                                                    });
                                                            }))
                                                    .append($('<button>').addClass('kb-data-list-cancel-btn')
                                                        .append('Cancel')
                                                        .click(function() {
                                                            $cpyBtn.prop('disabled', false).empty().append($active);
                                                            $alertContainer.empty();
                                                        } )));
                                    },
                                    function(error) {
                                        console.error(error);
                                        $alertContainer.empty();
                                        $alertContainer.append($('<span>').css({'color':'#F44336'}).append("Error! "+error.error.message));
                                    });
                            },
                            function(error) {
                                console.error(error);
                                $alertContainer.empty();
                                $alertContainer.append($('<span>').css({'color':'#F44336'}).append("Error! "+error.error.message));
                            });
                });
            return $btn;
        },
        
        makeNewNarrativeBtn: function() {
            var self = this;
            var active = '<span class="fa fa-plus"></span> New Narrative';
            // !!! Putting text inside the span with font awesome classes will 
            // cause the browser to use its default font.
//            var $active = $('<span>').addClass('fa fa-plus').append(" New Narrative");
            var $working = $('<span>').append("Building Narrative...");
            var $btn =
                $('<button>').addClass('kb-primary-btn').append(active)
                    .on('click', function() {
                        // just open the link, don't do the work here...
                        window.open(self.options.new_narrative_link);
                    });
            
            return $btn;
        },
        
        getNarSummary : function(nar_info) {
            var summary = '';
            if (nar_info[10].methods) {
                var content = JSON.parse(nar_info[10].methods);
                var summaryCounts = [];
                var appCount=0; var methodCount=0;
                for(var a in content.app) {
                    if (content.app.hasOwnProperty(a)) {
                        appCount+= content.app[a];
                    }
                }
                if (appCount===1) { summaryCounts.push('1 App'); }
                else if (appCount>1) { summaryCounts.push(appCount+' Apps');}
                                                            
                for(var m in content.method) {
                    if (content.method.hasOwnProperty(m)) {
                        methodCount+= content.method[m];
                    }
                }
                if (methodCount===1) { summaryCounts.push('1 Method'); }
                else if (methodCount>1) { summaryCounts.push(methodCount+' Methods');}
                                                            
                if (content.output ===1) { summaryCounts.push('1 Result'); }
                else if (content.output >1) { summaryCounts.push(content.output + ' Results'); }
                
                if (content.ipython.code ===1) { summaryCounts.push('1 Code Cell'); }
                else if (content.ipython.code >1) { summaryCounts.push(content.ipython.code + ' Code Cells'); }
                                                            
                if (content.ipython.markdown ===1) { summaryCounts.push('1 Md Cell'); }
                else if (content.ipython.markdown >1) { summaryCounts.push(content.ipython.markdown + ' Md Cells'); }
                                                            
                                                            
                if (summaryCounts.length>0) {
                    summary = summaryCounts.join(', ');
                } else {
                    summary = 'Empty Narrative';
                }
            }
            return summary;
        },
        
        getNarContent: function(nar_info) {
            var self = this;
            console.log(nar_info);
            
            var specsToLookup = {apps:[],methods:[]};
            if (nar_info[10].methods) {
                var content = JSON.parse(nar_info[10].methods);
                var apps = []; var methods = [];
                var appCount=0; var methodCount=0;
                for(var a in content.app) {
                    if (content.app.hasOwnProperty(a)) {
                        apps.push({name:a,count:content.app[a]});
                        specsToLookup.apps.push(a);
                    }
                }
                for(var m in content.method) {
                    if (content.method.hasOwnProperty(m)) {
                        methods.push({name:m,count:content.method[m]});
                        specsToLookup.methods.push(m);
                    }
                }
            }
            
            if ((apps.length + methods.length) ===0) {
                if (nar_info[10].description) {
                    $container.append('<br><b>Description</b><br><div style="text-align:left;">'+nar_info[10].description+'</div>');
                }
                return "<br>No Apps or Methods in this Narrative.<br>";
            }
            
            var $container = $('<div>').css({'width':'100%'});
            if (!self.appMethodSpecRef) {
                self.trigger('getFunctionSpecs.Narrative', [specsToLookup,
                        function(specLookup) {
                            //todo: sort here based on counts or name?
                            //console.log(specLookup);
                            if (nar_info[10].description) {
                                $container.append('<br><b>Description</b><br><div style="text-align:left;">'+nar_info[10].description+'</div>');
                            }
                            
                            if (apps.length>0) {
                                $container.append('<br><b>Apps</b><br>');
                                var $apptbl = $('<table>').css({'width':'100%'});
                                for(var k=0; k<apps.length; k++) {
                                    var link = '<a href="'+self.options.landing_page_url+'narrativestore/app/'+apps[k].name+'" target="_blank">'+apps[k].name+'</a>';
                                    if (specLookup.apps[apps[k].name]) {
                                        link = '<a href="'+self.options.landing_page_url+'narrativestore/app/'+apps[k].name+'" target="_blank">'+specLookup.apps[apps[k].name].info.name+'</a>';
                                    }
                                    $apptbl.append($('<tr>')
                                            .append($('<td>').append(link))
                                            .append($('<td>').append(apps[k].count)));
                                }
                                $container.append($apptbl);
                            }
                            
                            if (methods.length>0) {
                                $container.append('<br><b>Methods</b><br>');
                                var $methodtbl = $('<table>').css({'width':'100%'});
                                for(var k=0; k<methods.length; k++) {
                                    var link = '<a href="'+self.options.landing_page_url+'narrativestore/method/'+methods[k].name+'" target="_blank">'+methods[k].name+'</a>';
                                    if (specLookup.methods[methods[k].name]) {
                                        link = '<a href="'+self.options.landing_page_url+'narrativestore/method/'+methods[k].name+'" target="_blank">'+specLookup.methods[methods[k].name].info.name+'</a>';
                                    }
                                    $methodtbl.append($('<tr>')
                                            .append($('<td>').append(link))
                                            .append($('<td>').append(methods[k].count)));
                                }
                                $container.append($methodtbl);
                            }
                            $container.append('<br>');
                        }]);
            }
            return $container;
        },
        
        // edited from: http://stackoverflow.com/questions/3177836/how-to-format-time-since-xxx-e-g-4-minutes-ago-similar-to-stack-exchange-site
        getTimeStampStr: function (objInfoTimeStamp) {
            var date = new Date(objInfoTimeStamp);
            var seconds = Math.floor((new Date() - date) / 1000);
            
            // f-ing safari, need to add extra ':' delimiter to parse the timestamp
            if (isNaN(seconds)) {
                var tokens = objInfoTimeStamp.split('+');  // this is just the date without the GMT offset
                var newTimestamp = tokens[0] + '+'+tokens[0].substr(0,2) + ":" + tokens[1].substr(2,2);
                date = new Date(newTimestamp);
                seconds = Math.floor((new Date() - date) / 1000);
                if (isNaN(seconds)) {
                    // just in case that didn't work either, then parse without the timezone offset, but
                    // then just show the day and forget the fancy stuff...
                    date = new Date(tokens[0]);
                    return this.monthLookup[date.getMonth()]+" "+date.getDate()+", "+date.getFullYear();
                }
            }
            
            // keep it simple, just give a date
            return this.monthLookup[date.getMonth()]+" "+date.getDate()+", "+date.getFullYear();
        },
        
        monthLookup : ["Jan", "Feb", "Mar","Apr", "May", "Jun", "Jul", "Aug", "Sep","Oct", "Nov", "Dec"],
        
        /* we really need to stop all this copy pasting */
        real_name_lookup: {},
        displayRealName: function(username,$targetSpan) {
	    var self = this;
	    if (self.ws) { // make sure we are logged in and have some things
		
                if (self.real_name_lookup[username] && self.real_name_lookup[username] !=="...") {
                    $targetSpan.html(self.real_name_lookup[username]+" ("+username+")");
                } else {
                    self.real_name_lookup[username] = "..."; // set a temporary value so we don't search again
                    $targetSpan.html(username);
                    $.ajax({
                            type: "GET",
                            url: self.options.user_name_fetch_url + username + "&token="+self._attributes.auth.token,
                            dataType:"json",
                            crossDomain : true,
                            success: function(data,res,jqXHR) {
                                if (username in data['data'] && data['data'][username]['fullName']) {
                                    self.real_name_lookup[username] = data['data'][username]['fullName'];
                                    $targetSpan.html(self.real_name_lookup[username]+" ("+username+")");
                                }
                            },
                            error: function(jqXHR, textStatus, errorThrown) {
                                //do nothing
                            }
                        });
                }
	    }
        }
        
    });

})( jQuery );

/**
 * "Download" panel for each element in data list panel.
 * @author Roman Sutormin <rsutormin@lbl.gov>
 * @public
 */
(function( $, undefined ) {
    $.KBWidget({
        name: "kbaseNarrativeDownloadPanel",
        parent: "kbaseWidget",
        version: "1.0.0",
        options: {
        	token: null,
        	type: null,
        	wsId: null,
        	objId: null
        },
        token: null,
        type: null,
        wsId: null,
        objId: null,
        loadingImage: "static/kbase/images/ajax-loader.gif",
        wsUrl: window.kbconfig.urls.workspace,
        transformURL: window.kbconfig.urls.transform,
        ujsURL: window.kbconfig.urls.user_and_job_state,
        shockURL: window.kbconfig.urls.shock,
        exportURL: window.kbconfig.urls.data_import_export,
        timer: null,
        
        downloaders: {  // type -> {name: ..., external_type: ...[, transform_options: ...[, unzip: <file_ext>]}
        	'KBaseGenomes.ContigSet': [{name: 'FASTA', external_type: 'FASTA.DNA.Assembly', transform_options: {output_file_name: 'fs.fasta'}}],
        	'KBaseGenomes.Genome': [{name: "GENBANK", external_type: 'Genbank.Genome', transform_options: {}}],
        	
		'KBaseAssembly.SingleEndLibrary': [{name: "FASTA/FASTQ", external_type: 'SequenceReads', transform_options: {}}],
		'KBaseAssembly.PairedEndLibrary': [{name: "FASTA/FASTQ", external_type: 'SequenceReads', transform_options: {}}],
		'KBaseFile.SingleEndLibrary': [{name: "FASTA/FASTQ", external_type: 'SequenceReads', transform_options: {}}],
		'KBaseFile.PairedEndLibrary': [{name: "FASTA/FASTQ", external_type: 'SequenceReads', transform_options: {}}],
		
		'KBaseFBA.FBAModel':[{name: "SBML", external_type: 'SBML.FBAModel', transform_options: {}},
				     {name: "CSV", external_type: 'CSV.FBAModel', transform_options: {}}],
		
		/* not working yet - 'KBaseBiochem.Media':[{name: "CSV", external_type: 'CSV.Media', transform_options: {}}] */
	},

        init: function(options) {
            this._super(options);
            this.token = this.options.token;
            this.type = this.options.type;
            this.wsId = this.options.wsId;
            this.objId = this.options.objId;
            this.render();
            return this;
        },
        
        render: function() {
            var self = this;
    		var downloadPanel = this.$elem;
		
		var $labeltd = $('<td>').css({'white-space':'nowrap','padding':'1px'}).append('Export as:');
		var $btnTd = $('<td>').css({'padding':'1px'});
		downloadPanel.append($('<table>').css({width:'100%'})
					.append('<tr>')
					   .append($labeltd)
					   .append($btnTd));
		
		
    		var addDownloader = function(descr) {
		    $btnTd.append($('<button>').addClass('kb-data-list-btn')
    					.append(descr.name)
    					.click(function() {
						$btnTd.find('.kb-data-list-btn').prop('disabled', true);
    						self.runDownloader(self.type, self.wsId, self.objId, descr);
    					}));
    		};
    		var downloaders = self.prepareDownloaders(self.type, self.wsId, self.objId);
    		for (var downloadPos in downloaders)
    			addDownloader(downloaders[downloadPos]);
		
    		$btnTd.append($('<button>').addClass('kb-data-list-btn')
                    .append('JSON')
                    .click(function() {
                    	var url = self.exportURL + '/download?ws='+self.wsId+'&id='+self.objId+'&token='+self.token+
                    		'&url='+encodeURIComponent(self.wsUrl) + "&wszip=1";
                    	self.downloadFile(url);
                    }));
    		$btnTd.append($('<button>').addClass('kb-data-list-cancel-btn')
                    .append('Cancel')
                    .click(function() {
			self.stopTimer();
			downloadPanel.empty();
		    } ));
		
	    self.$statusDiv = $('<div>').css({'margin':'15px'});
	    self.$statusDivContent = $('<div>');
	    self.$statusDiv.append(self.$statusDivContent);
	    downloadPanel.append(self.$statusDiv.hide());
        },
        
        prepareDownloaders: function(type, wsId, objId) {
        	var descrList = this.downloaders[type];
        	var ret = [];
        	for (var descrPos in descrList) {
        		var descr = descrList[descrPos];
        		var retDescr = {name: descr.name, external_type: descr.external_type, unzip: descr.unzip};
        		ret.push(retDescr);
        		if (descr.transform_options) {
        			retDescr.transform_options = {};
        			for (var key in descr.transform_options) {
        				if (!descr.transform_options.hasOwnProperty(key))
        					continue;
        				var value = descr.transform_options[key];
        				if (value.indexOf('?') == 0)
        					value = objId + value.substring(1);
        				retDescr.transform_options[key] = value;
        			}
        		}
        	}
        	return ret;
        },
        
        runDownloader: function(type, wsId, objId, descr) { // descr is {name: ..., external_type: ...[, transform_options: ...[, unzip: ...]]}
            var self = this;
            self.showMessage('<img src="'+self.loadingImage+'" /> Export status: Preparing data');
            self.$statusDiv.show();
        	var transform_options = descr.transform_options;
        	if (!transform_options)
        		transform_options = {};
        	var args = {external_type: descr.external_type, kbase_type: type, workspace_name: wsId, object_name: objId, optional_arguments: {transform: transform_options}};
    		console.log("Downloader data to be sent to transform service:");
    		console.log(JSON.stringify(args));
            var transformSrv = new Transform(this.transformURL, {token: this.token});
            transformSrv.download(args,
            		$.proxy(function(data) {
            			console.log(data);
            			var jobId = data[1];
            			self.waitForJob(jobId, objId, descr.unzip);
            		}, this),
            		$.proxy(function(data) {
            			console.log(data.error.error);
            			self.showError(data.error.error);
            		}, this)
            );
        },

        waitForJob: function(jobId, wsObjectName, unzip) {
            var self = this;
            var jobSrv = new UserAndJobState(this.ujsURL, {token: this.token});
			var timeLst = function(event) {
				jobSrv.get_job_status(jobId, function(data) {
					//console.log(data);
					var status = data[2];
					var complete = data[5];
					var wasError = data[6];
					if (complete === 1) {
						self.stopTimer();
						if (wasError === 0) {
							console.log("Export is complete");
							// Starting download from Shock
							jobSrv.get_results(jobId, function(data) {
								self.$statusDiv.hide();
								self.$elem.find('.kb-data-list-btn').prop('disabled', false);
								console.log(data);
								self.downloadUJSResults(data, wsObjectName, unzip);
							}, function(data) {
            					console.log(data.error.message);
                    			self.showError(data.error.message);
							});
						} else {
							console.log(status);
	            			self.showError(status);
						}
					} else {
						console.log("Export status: " + status, true);
			            self.showMessage('<img src="'+self.loadingImage+'" /> Export status: ' + status);
					}
				}, function(data) {
					self.stopTimer();
					console.log(data.error.message);
        			self.showError(data.error.message);
				});
			};
			self.timer = setInterval(timeLst, 5000);
			timeLst();
        },
        
        downloadUJSResults: function(ujsResults, wsObjectName, unzip) {
        	var self = this;
			var shockNode = ujsResults.shocknodes[0];
			var elems = shockNode.split('/');
			if (elems.length > 1)
				shockNode = elems[elems.length - 1];
			elems = shockNode.split('?');
			if (elems.length > 0)
				shockNode = elems[0];
			console.log("Shock node ID: " + shockNode);
        	var shockClient = new ShockClient({url: self.shockURL, token: self.token});
        	var downloadShockNodeWithName = function(name) {
    			var url = self.exportURL + '/download?id='+shockNode+'&token='+
    				encodeURIComponent(self.token)+'&del=1';
    			if (unzip) {
    				url += '&unzip='+encodeURIComponent(unzip);
    			} else {
    				url += '&name='+encodeURIComponent(name);
    			}
    			var remoteShockUrl = ujsResults.shockurl;
    			if (remoteShockUrl)
    				url += '&url='+encodeURIComponent(remoteShockUrl);
    			self.downloadFile(url);
        	};
        	/*shockClient.get_node(shockNode, function(data) {
        		console.log(data);
        		downloadShockNodeWithName(data.file.name);
        	}, function(error) {
        		console.log(error);
        	});*/
        	downloadShockNodeWithName(wsObjectName + ".zip");
        },
        
        downloadFile: function(url) {
        	console.log("Downloading url=" + url);
        	var hiddenIFrameID = 'hiddenDownloader';
            var iframe = document.getElementById(hiddenIFrameID);
        	if (iframe === null) {
        		iframe = document.createElement('iframe');
        		iframe.id = hiddenIFrameID;
        		iframe.style.display = 'none';
        		document.body.appendChild(iframe);
        	}
        	iframe.src = url;
        },
        
        showMessage: function(msg) {
        	var self = this;
            self.$statusDivContent.empty();
            self.$statusDivContent.append(msg);
        },
        
        showError: function(msg) {
        	var self = this;
		self.$statusDivContent.empty();
		self.$elem.find('.kb-data-list-btn').prop('disabled', false); // error is final state, so reactivate!
		self.$statusDivContent.append($('<span>').css({color:'#F44336'}).append('Error: '+msg));
        },
        
        stopTimer: function() {
			if (this.timer != null) {
				clearInterval(this.timer);
				this.timer = null;
				console.log("Timer was stopped");
			}
		}
    });
})( jQuery );

/**
 * @author Michael Sneddon <mwsneddon@lbl.gov>
 * @public
 */
(function( $, undefined ) {
    $.KBWidget({
        name: 'kbaseNarrativeDataList',
        parent: 'kbaseAuthenticatedWidget',
        version: '1.0.0',
        options: {
            ws_name: null, // must be the WS name, not the WS Numeric ID

            ws_url:"https://kbase.us/services/ws",
            landing_page_url: "/functional-site/#/", // !! always include trailing slash
            default_landing_page_url: "/functional-site/#/json/", // ws_name/obj_name,

            user_name_fetch_url:"https://kbase.us/services/genome_comparison/users?usernames=",

            loadingImage: 'static/kbase/images/ajax-loader.gif',
            methodStoreURL: 'http://dev19.berkeley.kbase.us/narrative_method_store',

            ws_chunk_size:10000,  // this is the limit of the number of objects to retrieve from the ws on each pass
            ws_max_objs_to_fetch: 75000, // this is the total limit of the number of objects before we stop trying to get more
                                         // note that if there are more objects than this, then sorts/search filters may
                                         // not show accurate results

            objs_to_render_to_start:40, // initial number of rows to display
            objs_to_render_on_scroll:5, // number of rows to add when the user scrolls to the bottom, should be <=5, much more and
                                        // the addition of new rows becomes jerky

            max_objs_to_prevent_filter_as_you_type_in_search:50000, //if there are more than this # of objs, user must click search
                                                                    //instead of updating as you type

            max_objs_to_prevent_initial_sort:10000, // initial sort makes loading slower, so we can turn it off if
                                                    // there are more than this number of objects

            max_name_length:33,
            refresh_interval:30000,

            parentControlPanel: null
        },

        // private variables
        mainListPanelHeight : '340px',

        ws_name: null,
        ws: null,
        ws_last_update_timestamp: null,
        ws_obj_count: null,

        n_objs_rendered:0,

        ws_landing_page_map: {},
        real_name_lookup: {},

        $searchInput: null,
        $filterTypeSelect: null,
        availableTypes:{},

        $searchDiv: null,
        $sortByDiv: null,
        $filterTypeDiv: null,

        $addDataButton:null,
        $controllerDiv: null,
        $mainListDiv:null,
        mainListId:null,
        $loadingDiv:null,

        methClient: null,

        obj_list : [],
        obj_data : {}, // old style - type_name : info

        my_user_id: null,

        /**
         * @method init
         * Builds the DOM structure for the widget.
         * Includes the tables and panel.
         * If any data was passed in (options.data), that gets shoved into the datatable.
         * @param {Object} - the options set.
         * @returns {Object} this shiny new widget.
         * @private
         */
        init: function(options) {
            this._super(options);
            var self = this;
            this.getLandingPageMap();  //start off this request so that we hopefully get something back right away

            this.$controllerDiv = $('<div>');
            this.$elem.append(this.$controllerDiv);
            this.renderController();
            this.$loadingDiv = $('<div>').addClass('kb-data-loading')
                                 .append('<img src="' + this.options.loadingImage + '">');
            this.$elem.append(this.$loadingDiv);
            this.mainListId=this.genUUID();
            this.$mainListDiv = $('<div id='+this.mainListId+'>')
                .css({'overflow-x' : 'hidden', 'overflow-y':'auto', 'height':this.mainListPanelHeight })
                .on('scroll', function() {
                    if($(this).scrollTop() + $(this).innerHeight() >= this.scrollHeight) {
                        self.renderMore();
                    }
                });

            this.$addDataButton = $('<span>').addClass('kb-data-list-add-data-button fa fa-plus fa-2x')
                                    .css({'position':'absolute', bottom:'15px', right:'25px', 'z-index':'5'})
                                    .click(function() {
                                        self.trigger('hideGalleryPanelOverlay.Narrative');
                                        self.trigger('toggleSidePanelOverlay.Narrative', self.options.parentControlPanel.$overlayPanel);
                                    });
            var $mainListDivContainer = $('<div>').css({'position':'relative'})
                                            .append(this.$mainListDiv)
                                            .append(this.$addDataButton.hide());
            this.$elem.append($mainListDivContainer);

            if (window.kbconfig === undefined || window.kbconfig.urls === undefined ||
                window.kbconfig.icons === undefined) {
              // bail out now
              alert("Failed to load base configuration! Aborting narrative now.");
              window.location = "/"; //XXX: Need to load the error page!!
            }
            this.options.methodStoreURL = window.kbconfig.urls.narrative_method_store;
            this.options.ws_url = window.kbconfig.urls.workspace;
            this.data_icons = window.kbconfig.icons.data;
            this.icon_colors = window.kbconfig.icons.colors;



            if (this._attributes.auth) {
                this.ws = new Workspace(this.options.ws_url, this._attributes.auth);
            }
            setInterval(function(){self.refresh();}, this.options.refresh_interval); // check if there is new data every X ms

            // listener for refresh
            $(document).on('updateDataList.Narrative', function() {
                self.refresh()
            })

            this.showLoading();
            if (this.options.ws_name) {
                this.setWorkspace(this.options.ws_name);
            }

            this.methClient = new NarrativeMethodStore(this.options.methodStoreURL);

            return this;
        },

        setWorkspace : function(ws_name) {
            this.ws_name = ws_name;
            //this.ws_name = "janakacore"; // for testing a bigish workspace
            //this.ws_name = "KBasePublicGenomesV4"; // for testing a very big workspace
            this.refresh();
        },

        refresh: function() {
            var self = this;
            if (self.ws_name && self.ws) {
                self.ws.get_workspace_info({
                        workspace: this.ws_name
                    },
                    function(workspace_info) {
                        //[0] ws_id id, [1] ws_name workspace, [2] username owner, [3] timestamp moddate,
                        //[4] int object, [5] permission user_permission, [6] permission globalread,
                        //[7] lock_status lockstat, [8] usermeta metadata
                        //console.log('I have: '+self.ws_last_update_timestamp+ " remote has: "+workspace_info[3]);
                        if (self.ws_last_update_timestamp) {
                            if (self.ws_last_update_timestamp !== workspace_info[3]) {
                                self.ws_last_update_timestamp = workspace_info[3];
                                self.ws_obj_count = workspace_info[4];
                                self.reloadWsData();
                            } else {
                                //console.log('updating times');
                                self.refreshTimeStrings();
                            }
                        } else {
                            self.ws_last_update_timestamp = workspace_info[3];
                            self.ws_obj_count = workspace_info[4];
                            self.reloadWsData();
                        }
                    },
                    function(error) {
                        console.error(error);

                        self.$mainListDiv.show();
                        self.$mainListDiv.empty();
                        self.$mainListDiv.append($('<div>').css({'color':'#F44336','margin':'10px'})
                                                 .append('Error: '+error.error.message));
                        self.hideLoading();
                    });
            }
            else {
              // XXX: We should probably DO something
              var where = "kbaseNarrativeDataList.refresh";
              if (!self.ws) {
                KBError(where, "workspace not connected");
              }
              else {
                KBError(where, "workspace name is empty");
              }
            }
        },

        refreshSpecificObject: function() {

        },

        refreshTimeStrings: function() {
            var self = this; var newTime; var oldTime;
            if (self.objectList) {
                for(var i=0; i<self.objectList.length; i++) {
                    if(self.objectList[i].$div) {
                        newTime = self.getTimeStampStr(self.objectList[i].info[3]);
                        oldTime = self.objectList[i].$div.find('.kb-data-list-date').text();
                        if (newTime !== oldTime) {
                            self.objectList[i].$div.find('.kb-data-list-date').text(newTime);
                        }
                    }
                }
            }
        },

        reloadWsData: function () {
            var self = this;
            if (self.ws_name && self.ws) {
                // empty the existing object list first
                self.objectList = [];
                self.obj_data = {};
                self.availableTypes = {};

                self.getNextDataChunk(0);
            }
        },

        getNextDataChunk: function(skip) {
            var self = this;
            self.ws.list_objects({
                    workspaces : [self.ws_name],
                    includeMetadata: 1,
                    skip: skip,
                    limit: self.options.ws_chunk_size
                },
                function(infoList) {
                    // object_info:
                    // [0] : obj_id objid // [1] : obj_name name // [2] : type_string type
                    // [3] : timestamp save_date // [4] : int version // [5] : username saved_by
                    // [6] : ws_id wsid // [7] : ws_name workspace // [8] : string chsum
                    // [9] : int size // [10] : usermeta meta
                    for (var i=0; i<infoList.length; i++) {
                        // skip narrative objects
                        if (infoList[i][2].indexOf('KBaseNarrative') == 0) { continue; }
                        self.objectList.push(
                            {
                                $div:null, //self.renderObjectRowDiv(infoList[i]), // we defer rendering the div until it is shown
                                info:infoList[i],
                                attached:false
                            }
                        );
                        var typeKey = infoList[i][2].split("-")[0];
                        if (!(typeKey in self.obj_data)) {
                            self.obj_data[typeKey]=[];
                        }
                        self.obj_data[typeKey].push(infoList[i]);

                        var typeName = typeKey.split('.')[1];
                        if (!(typeName in self.availableTypes)) {
                            self.availableTypes[typeName] =
                                        {
                                            type:typeName,
                                            count:0
                                        };
                        }
                        self.availableTypes[typeName].count++;
                    }

                    // if we have more than 2k objects, make them hit enter to search...
                    self.$searchInput.off("input change blur");
                    self.$searchInput.on("change blur",function() { self.search(); });
                    if (self.objectList.length<=self.options.max_objs_to_prevent_filter_as_you_type_in_search) {
                        self.$searchInput.on("input",function() { self.search(); });
                    }

                    self.trigger('dataUpdated.Narrative');

                    //LOGIC: we keep trying to get more until we reach the ws_obj_count or untill the max
                    // fetch count option, UNLESS the last call returned nothing, in which case we stop.
                    //IMPORTANT NOTE: IN RARE CASES THIS DOES NOT GAURANTEE THAT WE GET ALL OBJECTS FROM
                    //THIS WS!!  IF THERE IS A CHUNK THAT RETURNED NOTHING, THERE STILL MAY BE MORE
                    //OBJECTS DUE TO A BUG IN THE WORKSPACE THAT INCLUDES OLD VERSIONS AND DELETED VERSIONS
                    //BEFORE FILTERING OUT THE NUMBER - A BETTER TEMP FIX WOULD BE TO LIMIT THE NUMBER OF
                    //RECURSIONS TO 2 or 3 MAYBE...
                    //BUT WHATEVER YOU DO PLEASE REMEMBER TO USE CAPITAL LETTERS EXTENSIVELY
                    //OTHERWISE PEOPLE MIGHT NOT NOTICE WHAT YOU ARE SAYING AND THAT WOULD
                    //BE EXTREMELY ANNOYING!!!! SERIOUSLY!!!
                    if (self.objectList.length < self.ws_obj_count
                            && self.objectList.length < self.options.ws_max_objs_to_fetch
                            && infoList.length>0) {
                        self.getNextDataChunk(skip+self.options.ws_chunk_size);
                    } else {
                        if (self.objectList.length<=self.options.max_objs_to_prevent_initial_sort) {
                            self.objectList.sort(function(a,b) {
                                    if (a.info[3] > b.info[3]) return -1; // sort by date
                                    if (a.info[3] < b.info[3]) return 1;  // sort by date
                                    return 0;
                                });
                            self.$elem.find('#nar-data-list-default-sort-label').addClass('active');
                            self.$elem.find('#nar-data-list-default-sort-option').attr('checked');
                        }
                    }

                    self.populateAvailableTypes();
                    self.renderList();
                    self.hideLoading();
                },
                function(error) {
                    console.error(error);
                    KBError("kbaseNarrativeDataList.getNextDataChunk",
                            error.error.message);
                    self.$mainListDiv.show();
                    self.$mainListDiv.empty();
                    self.$mainListDiv.append($('<div>').css({'color':'#F44336','margin':'10px'})
                                             .append('Error: '+error.error.message));
                    self.hideLoading();
                });

        },

        getObjData: function(type, ignoreVersion) {
            if (type) {
                var dataSet = {};
                if (typeof type === 'string') {
                    type = [type];
                }
                for (var i=0; i<type.length; i++) {
                    if (this.obj_data[type[i]]) {
                        dataSet[type[i]]=this.obj_data[type[i]];
                    }
                }
                return dataSet;
            }
            return this.obj_data;
        },

        $currentSelectedRow : null,
        selectedObject: null,
        setSelected: function($selectedRow, object_info) {
            var self = this;
            if (self.$currentSelectedRow) {
                self.$currentSelectedRow.removeClass('kb-data-list-obj-row-selected');
            }
            if (object_info[0]===self.selectedObject) {
                self.$currentSelectedRow = null;
                self.selectedObject = null;
                self.trigger('removeFilterMethods.Narrative');
            } else {
                $selectedRow.addClass('kb-data-list-obj-row-selected');
                self.$currentSelectedRow = $selectedRow;
                self.selectedObject = object_info[0];
                self.trigger('filterMethods.Narrative','type:'+object_info[2].split('-')[0].split('.')[1]);
            }
        },


        addDataControls: function(object_info, $alertContainer) {
            var self = this;
            var $btnToolbar = $('<span>')
                                        .addClass('btn-toolbar')
                                        .attr('role', 'toolbar');

            var btnClasses = "btn btn-xs btn-default";
            var css = {'color':'#888'};

                                /*.append($('<div>').css({'text-align':'center','margin':'5pt'})
                                            .append('<a href="'+landingPageLink+'" target="_blank">'+
                                                        'explore data</a>&nbsp&nbsp|&nbsp&nbsp')
                                            .append('<a href="'+this.options.landing_page_url+'objgraphview/'+object_info[7] +'/'+object_info[1] +'" target="_blank">'+
                                                        'view provenance</a><br>'))*/

            var $openLandingPage = $('<span>')
                                        .tooltip({title:'Explore data', 'container':'#'+this.mainListId})
                                        .addClass(btnClasses)
                                        .append($('<span>').addClass('fa fa-binoculars').css(css))
                                        .click(function(e) {
                                            e.stopPropagation(); $alertContainer.empty();
                                            var typeTokens = object_info[2].split('-')[0].split('.');
                                            var landingPageLink = self.options.default_landing_page_url +object_info[7]+ '/' + object_info[1];
                                            if (self.ws_landing_page_map) {
                                                if (self.ws_landing_page_map[typeTokens[0]]) {
                                                    if (self.ws_landing_page_map[typeTokens[0]][typeTokens[1]]) {
                                                        landingPageLink = self.options.landing_page_url +
                                                            self.ws_landing_page_map[typeTokens[0]][typeTokens[1]] + "/" +
                                                            object_info[7]+ '/' + object_info[1];
                                                    }
                                                }
                                            }
                                            window.open(landingPageLink);
                                        });

            var $openHistory = $('<span>')
                                        .addClass(btnClasses).css(css)
                                        .tooltip({title:'View history to revert changes', 'container':'body'})
                                        .append($('<span>').addClass('fa fa-history').css(css))
                                        .click(function(e) {
                                            e.stopPropagation(); $alertContainer.empty();

                                            if (self.ws_name && self.ws) {
                                                self.ws.get_object_history({ref:object_info[6]+"/"+object_info[0]},
                                                    function(history) {
                                                        $alertContainer.append($('<div>')
                                                            .append($('<button>').addClass('kb-data-list-cancel-btn')
                                                                        .append('Hide History')
                                                                        .click(function() {$alertContainer.empty();} )));
                                                        history.reverse();
                                                        var $tbl = $('<table>').css({'width':'100%'});
                                                        for(var k=0; k<history.length;k++) {
                                                            var $revertBtn = $('<button>').append('v'+history[k][4]).addClass('kb-data-list-btn');
                                                            if (k==0) {
                                                                $revertBtn.tooltip({title:'Current Version', 'container':'body',placement:'bottom'});
                                                            } else {
                                                                var revertRef = {wsid:history[k][6], objid:history[k][0], ver:history[k][4]};
                                                                (function(revertRefLocal) {
                                                                    $revertBtn.tooltip({title:'Revert to this version?', 'container':'body',placement:'bottom'})
                                                                        .click(function() {
                                                                            self.ws.revert_object(revertRefLocal,
                                                                                function(reverted_obj_info) {
                                                                                    self.refresh();
                                                                                }, function(error) {
                                                                                    console.error(error);
                                                                                    $alertContainer.empty();
                                                                                    $alertContainer.append($('<span>').css({'color':'#F44336'}).append("Error! "+error.error.message));
                                                                                });
                                                                        }); })(revertRef);
                                                            }
                                                            $tbl.append($('<tr>')
                                                                        .append($('<td>').append($revertBtn))
                                                                        .append($('<td>').append('Saved by '+history[k][5]+'<br>'+self.getTimeStampStr(history[k][3])))
                                                                        .append($('<td>').append($('<span>').css({margin:'4px'}).addClass('fa fa-info pull-right'))
                                                                                 .tooltip({title:history[k][2]+'<br>'+history[k][8]+'<br>'+history[k][9]+' bytes', container:'body',html:true,placement:'bottom'}))
                                                                                );
                                                        }
                                                        $alertContainer.append($tbl);
                                                    },
                                                    function(error) {
                                                        console.error(error);
                                                        $alertContainer.empty();
                                                        $alertContainer.append($('<span>').css({'color':'#F44336'}).append("Error! "+error.error.message));
                                                    });
                                            }


                                        });

            var $openProvenance = $('<span>')
                                        .addClass(btnClasses).css(css)
                                        .tooltip({title:'View data provenance and relationships', 'container':'body'})
                                        .append($('<span>').addClass('fa fa-sitemap fa-rotate-90').css(css))
                                        .click(function(e) {
                                            e.stopPropagation(); $alertContainer.empty();
                                            window.open(self.options.landing_page_url+'objgraphview/'+object_info[7]+'/'+object_info[1]);
                                        });
            var $download = $('<span>')
                                        .addClass(btnClasses).css(css)
                                        .tooltip({title:'Export / Download data', 'container':'body'})
                                        .append($('<span>').addClass('fa fa-download').css(css))
                                        .click(function(e) {
                                            e.stopPropagation(); $alertContainer.empty();
                                            var type = object_info[2].split('-')[0];
                                            var wsId = object_info[7];
                                            var objId = object_info[1];
                                            var downloadPanel = $('<div>');
                                            $alertContainer.append(downloadPanel);
                                            downloadPanel.kbaseNarrativeDownloadPanel({token: self._attributes.auth.token, type: type, wsId: wsId, objId: objId});
                                        });

            var $rename = $('<span>')
                                        .addClass(btnClasses).css(css)
                                        .tooltip({title:'Rename data', 'container':'body'})
                                        .append($('<span>').addClass('fa fa-font').css(css))
                                        .click(function(e) {
                                            e.stopPropagation(); $alertContainer.empty();
                                            var $newNameInput = $('<input type="text">').addClass('form-control').val(object_info[1]);
                                            $alertContainer.append($('<div>')
                                                .append($('<div>').append("Warning: Apps using the old name may break."))
                                                .append($('<div>').append($newNameInput))
                                                .append($('<button>').addClass('kb-data-list-btn')
                                                            .append('Rename')
                                                            .click(function() {
                                                                if (self.ws_name && self.ws) {
                                                                    self.ws.rename_object({
                                                                            obj: {ref:object_info[6]+"/"+object_info[0]},
                                                                            new_name: $newNameInput.val()
                                                                        },
                                                                        function(renamed_info) {
                                                                            self.refresh();
                                                                        },
                                                                        function(error) {
                                                                            console.error(error);
                                                                            $alertContainer.empty();
                                                                            $alertContainer.append($('<span>').css({'color':'#F44336'}).append("Error! "+error.error.message));
                                                                        });
                                                                }
                                                            }))
                                                .append($('<button>').addClass('kb-data-list-cancel-btn')
                                                            .append('Cancel')
                                                            .click(function() {$alertContainer.empty();} )));
                                        });
            var $delete = $('<span>')
                                        .addClass(btnClasses).css(css)
                                        .tooltip({title:'Delete data'})
                                        .append($('<span>').addClass('fa fa-trash-o').css(css))
                                        .click(function(e) {
                                            e.stopPropagation();
                                            $alertContainer.empty();
                                            $alertContainer.append($('<div>')
                                                .append($('<span>').append('Are you sure?'))
                                                .append($('<button>').addClass('kb-data-list-btn')
                                                            .append('Delete')
                                                            .click(function() {
                                                                if (self.ws_name && self.ws) {
                                                                    self.ws.rename_object({
                                                                            obj: {ref:object_info[6]+"/"+object_info[0]},
                                                                            new_name: object_info[1].split('-deleted-')[0] + "-deleted-"+(new Date()).getTime()
                                                                        },
                                                                        function(renamed_info) {
                                                                            self.ws.delete_objects([{ref:object_info[6]+"/"+object_info[0]}],
                                                                                function() {
                                                                                    self.refresh();
                                                                                },
                                                                                function(error) {
                                                                                    console.error(error);
                                                                                    $alertContainer.empty();
                                                                                    $alertContainer.append($('<span>').css({'color':'#F44336'}).append("Error! "+error.error.message));
                                                                                });
                                                                        },
                                                                        function(error) {
                                                                            console.error(error);
                                                                            $alertContainer.empty();
                                                                            $alertContainer.append($('<span>').css({'color':'#F44336'}).append("Error! "+error.error.message));
                                                                        });
                                                                }
                                                            }))
                                                .append($('<button>').addClass('kb-data-list-cancel-btn')
                                                            .append('Cancel')
                                                            .click(function() {$alertContainer.empty();} )));
                                        });

            $btnToolbar
                .append($openLandingPage)
                .append($openHistory)
                .append($openProvenance)
                .append($download)
                .append($rename)
                .append($delete);

            return $btnToolbar;
        },


        renderObjectRowDiv: function(object_info, object_key) {
            var self = this;
            // object_info:
            // [0] : obj_id objid // [1] : obj_name name // [2] : type_string type
            // [3] : timestamp save_date // [4] : int version // [5] : username saved_by
            // [6] : ws_id wsid // [7] : ws_name workspace // [8] : string chsum
            // [9] : int size // [10] : usermeta meta
            var type_tokens = object_info[2].split('.')
            var type_module = type_tokens[0];
            var type = type_tokens[1].split('-')[0];
            var unversioned_full_type = type_module + '.' + type;
            var icons = this.data_icons;
            var icon = _.has(icons, type) ? icons[type] : icons['DEFAULT'];
            var icon_cls = icon.join(' ');
            var $logo = $('<div>')
              // background circle
              .addClass("fa-stack fa-2x").css({'cursor':'pointer'})
              .append($('<i>')
                .addClass("fa fa-circle fa-stack-2x")
                .css({'color':this.logoColorLookup(type)}));
            // add stack of font-awesome icons
            _.each(icon, function(cls) {
              $logo.append($('<i>')
                .addClass("fa fa-inverse fa-stack-1x " + cls));
            });
            // add behavior
            $logo.click(function(e) {
                e.stopPropagation();
                self.insertViewer(object_key);
            });

            var shortName = object_info[1]; var isShortened=false;
            if (shortName.length>this.options.max_name_length) {
                shortName = shortName.substring(0,this.options.max_name_length-3)+'...';
                isShortened=true;
            }
            var $name = $('<span>').addClass("kb-data-list-name").append(shortName)
                            .css({'cursor':'pointer'})
                            .click(function(e) {
                                e.stopPropagation();
                                self.insertViewer(object_key);
                            });
            if (isShortened) { $name.tooltip({title:object_info[1], placement:'bottom', delay: { show: 750, hide: 0 } }); }

            var $version = $('<span>').addClass("kb-data-list-version").append('v'+object_info[4]);
            var $type = $('<span>').addClass("kb-data-list-type").append(type);

            var $date = $('<span>').addClass("kb-data-list-date").append(this.getTimeStampStr(object_info[3]));
            var $byUser = $('<span>').addClass("kb-data-list-edit-by");
            if (object_info[5] !== self.my_user_id) {
                $byUser.append(' by '+object_info[5])
                    .click(function(e) {
                        e.stopPropagation();
                        window.open(self.options.landing_page_url+'people/'+object_info[5]);
                    });
            }
            var metadata = object_info[10];
            var metadataText = '';
            for(var key in metadata) {
                if (metadata.hasOwnProperty(key)) {
                    metadataText += '<tr><th>'+ key +'</th><td>'+ metadata[key] + '</td></tr>';
                }
            }
            if (type==='Genome') {
                if (metadata.hasOwnProperty('Name')) {
                    $type.text(type+': '+metadata['Name']);
                }
            }

            var $savedByUserSpan = $('<td>').addClass('kb-data-list-username-td');
            this.displayRealName(object_info[5],$savedByUserSpan);

            var $alertDiv = $('<div>').css({'text-align':'center','margin':'10px 0px'});
            var typeLink = '<a href="'+this.options.landing_page_url+'spec/module/'+type_module+'" target="_blank">' +type_module+"</a>.<wbr>" +
                           '<a href="'+this.options.landing_page_url+'spec/type/'+object_info[2]+'" target="_blank">' +(type_tokens[1].replace('-','&#8209;')) + '.' + type_tokens[2] + '</a>';
            var $moreRow  = $('<div>').addClass("kb-data-list-more-div").hide()
                                .append($('<div>').css({'text-align':'center','margin':'5pt'})
                                            .append(self.addDataControls(object_info,$alertDiv)).append($alertDiv))
                                .append(
                                    $('<table style="width:100%;">')
                                        .append("<tr><th>Permament Id</th><td>" +object_info[6]+ "/" +object_info[0]+ "/" +object_info[4] + '</td></tr>')
                                        .append("<tr><th>Full Type</th><td>"+typeLink+'</td></tr>')
                                        .append($('<tr>').append('<th>Saved by</th>').append($savedByUserSpan))
                                        .append(metadataText));

            var $toggleAdvancedViewBtn = $('<span>').addClass("kb-data-list-more")//.addClass('btn btn-default btn-xs kb-data-list-more-btn')
                .hide()
                .html('<span class="fa fa-ellipsis-h" style="color:#999" aria-hidden="true"/>');
            var toggleAdvanced = function() {
                    if (self.selectedObject == object_info[0] && $moreRow.is(':visible')) {
                        // assume selection handling occurs before this is called
                        // so if we are now selected and the moreRow is visible, leave it...
                        return;
                    }
                    if ($moreRow.is(':visible')) {
                        $moreRow.slideUp('fast');
                        $toggleAdvancedViewBtn.show();
                    } else {
                        self.getRichData(object_info,$moreRow);
                        $moreRow.slideDown('fast');
                        $toggleAdvancedViewBtn.hide();
                    }
                };

            var $mainDiv  = $('<div>').addClass('kb-data-list-info').css({padding:'0px',margin:'0px'})
                                .append($name).append($version).append('<br>')
                                .append($type).append('<br>').append($date).append($byUser)
                                .append($toggleAdvancedViewBtn)
                                .click(
                                    function() {
                                        self.setSelected($(this).closest('.kb-data-list-obj-row'),object_info);
                                        toggleAdvanced();
                                    });

            var $topTable = $('<table>').attr('kb-oid', object_key)
                             .css({'width':'100%','background':'#fff'})  // set background to white looks better on DnD
                             .append($('<tr>')
                                     .append($('<td>')
                                             .css({'width':'15%'})
                                             .append($logo))
                                     .append($('<td>')
                                             .append($mainDiv)));

            var $row = $('<div>').addClass('kb-data-list-obj-row')
                            .append($('<div>').addClass('kb-data-list-obj-row-main')
                                        .append($topTable))
                            .append($moreRow)
                            // show/hide ellipses on hover, show extra info on click
                            .mouseenter(function(){
                                if (!$moreRow.is(':visible')) { $toggleAdvancedViewBtn.show(); }
                            })
                            .mouseleave(function(){ $toggleAdvancedViewBtn.hide(); });


            // Drag and drop
            this.addDragAndDrop($topTable);

            var $rowWithHr = $('<div>')
                                .append($('<hr>')
                                            .addClass('kb-data-list-row-hr')
                                            .css({'margin-left':'65px'}))
                                .append($row);

            return $rowWithHr;
        },

        // ============= DnD ==================

        addDragAndDrop: function($row) {

            var self = this;

            // Add data drag-and-drop (jquery-ui)
            // allow data element to visually leave the left column
            //$('#left-column').css('overflow', 'visible');
            $row.draggable({
                cursor: 'move',
                containment: '#main-container',
                helper: function() {
                            var w = $row.width(); // get orig. width
                            var $elt = $row.clone();
                            $elt.addClass("kb-data-inflight");
                            // append to root container, to help with z-index
                            $("#notebook-container").prepend($elt);
                            // reset width (was: 100%)
                            $elt.width(w);
                            return $elt; }
                //start: this.dataDragged
            });

            // Dropping data directly onto the notebook. (As opposed to on input fields)
            $('#notebook-container').droppable({
                drop: function(event, ui) {
                    var $elt = $(ui.draggable);
                    // Insert cell onto narrative canvas near drop point:
                    // (a) find nearest cell using 'jquery-nearest'
                    var $near_elt = $($elt.nearest('.cell'));
                    var near_idx = 0;
                    if ($near_elt == null || $near_elt.data() == null) {
                      // no cell found, so place at top
                    }
                    else {
                      // (b) map that cell back to an index
                      near_idx = IPython.notebook.find_cell_index($near_elt.data().cell);
                    }
                    // var cell = IPython.notebook.insert_cell_at_index('markdown', near_idx);
                    // // Add unique id attr. to cell
                    // var cell_id = self.genUUID();
                    // cell.rendered = false;
                    // cell.set_text('<div id="' + cell_id + '">&nbsp;</div>');
                    // cell.render();
                    // // Get object info
                    var key = $elt.attr('kb-oid');
                    var obj = _.findWhere(self.objectList, {key: key});
                    console.debug('drag-n-drop: key=' + key, obj);
                    var info = self.createInfoObject(obj.info);
                    // // Insert the narrative data cell into the div we just rendered
                    // $('#' + cell_id).kbaseNarrativeDataCell({cell: cell, info: info});
                    self.trigger('createViewerCell.Narrative', {
                        'nearCellIdx': near_idx,
                        'widget': 'kbaseNarrativeDataCell',
                        'info' : info
                    });
                }
            });

            // Add tooltip to indicate this functionality
            $row.attr({'data-toggle': 'tooltip',
                       'data-placement': 'top',
                        'title': 'Drag onto narrative &rarr;'});
            $row.tooltip({delay: { show: 1500, hide: 0 }, html: true});

            return this;
        },

        /**
         * Helper function to create named object attrs from
         * list of fields returned from Workspace service.
         */
        createInfoObject: function(info) {
          return _.object(['id', 'name', 'type', 'save_date', 'version',
                           'saved_by', 'ws_id', 'ws_name', 'chsum', 'size',
                           'meta'], info);
        },

        // ============= end DnD ================

        insertViewer: function(key) {
            var self = this;
            var cell = IPython.notebook.get_selected_cell();
            var near_idx = 0;
            if (cell) {
            	near_idx = IPython.notebook.find_cell_index(cell);
            	$(cell.element).off('dblclick');
            	$(cell.element).off('keydown');
            }
            console.log(cell, near_idx);

            //var cell_id = self.genUUID();
            //cell.rendered = false;
            //cell.set_text('<div id="' + cell_id + '">&nbsp;</div>');
            //cell.render();

            var obj = _.findWhere(self.objectList, {key: key});
            var info = self.createInfoObject(obj.info);
            // Insert the narrative data cell into the div we just rendered
            //$('#' + cell_id).kbaseNarrativeDataCell({cell: cell, info: info});
            self.trigger('createViewerCell.Narrative', {
                'nearCellIdx': near_idx,
                'widget': 'kbaseNarrativeDataCell',
                'info' : info
            });

        },

        renderMore: function() {
            var self=this;
            if (self.objectList) {

                if (!self.searchFilterOn) { // if search filter is off, then we just are showing everything
                    var start = self.n_objs_rendered;
                    for(var i=start; i<self.objectList.length; i++) {
                        // only show them as we scroll to them
                        if (self.n_objs_rendered >= start+self.options.objs_to_render_on_scroll) {
                            break;
                        }
                        if (self.objectList[i].key == undefined) {
                            self.objectList[i].key = self.genUUID();
                        }
                        self.attachRow(i);
                    }
                    //console.log('showing '+ self.n_objs_rendered + ' of ' + self.objectList.length);
                } else {
                    // search filter is on, so we have to base this on what is currently filtered
                    var start = self.n_filteredObjsRendered;
                    for(var i=start; i<self.currentMatch.length; i++) {
                        // only show them as we scroll to them
                        if (self.n_filteredObjsRendered >= start+self.options.objs_to_render_on_scroll) {
                            break;
                        }
                        self.attachRowElement(self.currentMatch[i]);
                        self.n_filteredObjsRendered++;
                    }
                    //console.log('showing '+ self.n_filteredObjsRendered + ' of ' + self.currentMatch.length + ' objs matching search filter');
                }
            }
        },

        attachRow: function(index) {
            var obj = this.objectList[index];
            if (obj.attached) { return; }
            if (obj.$div) {
                this.$mainListDiv.append(obj.$div);
            } else {
                obj.$div = this.renderObjectRowDiv(obj.info, obj.key);
                this.$mainListDiv.append(obj.$div);
            }
            obj.attached = true;
            this.n_objs_rendered++;
        },

        attachRowElement: function(row) {
            if (row.attached) { return; } // return if we are already attached
            if (row.$div) {
                this.$mainListDiv.append(row.$div);
            } else {
                row.$div = this.renderObjectRowDiv(row.info, row.key);
                this.$mainListDiv.append(row.$div);
            }
            row.attached = true;
            this.n_objs_rendered++;
        },

        detachAllRows: function() {
            for (var i=0; i<this.objectList.length; i++) {
                this.detachRow(i);
            }
            this.$mainListDiv.children().detach();
            this.n_objs_rendered=0;
            this.renderedAll = false;
        },
        detachRow: function(index) {
            if (this.objectList[index].attached) {
                if (this.objectList[index].$div) {
                    this.objectList[index].$div.detach();
                }
                this.objectList[index].attached = false;
                this.n_objs_rendered--;
            }
        },


        renderList: function() {
            var self = this;
            self.showLoading();

            self.detachAllRows();

            if (self.objectList.length>0) {
                for(var i=0; i < self.objectList.length; i++) {
                    // only show up to the given number
                    if (i >= self.options.objs_to_render_to_start) {
                        self.n_objs_rendered = i;
                        break;
                    }
                    // If object does not have a key, define one.
                    // This will be used for 'id' of rendered element.
                    // But do *not* replace an existing key.
                    if (self.objectList[i].key == undefined) {
                        self.objectList[i].key = self.genUUID();
                    }
                    self.attachRow(i);
                }
                this.$addDataButton.show();
            } else {
                // todo: show an upload button or some other message if there are no elements
                self.$mainListDiv.append($('<div>').css({'text-align':'center','margin':'20pt'})
                                         .append("This Narrative has no data yet.<br><br>")
                                         .append($("<button>").append('Add Data').addClass('kb-data-list-add-data-text-button').css({'margin':'20px'})
                                                 .click(function() {
                                                        self.trigger('hideGalleryPanelOverlay.Narrative');
                                                        self.trigger('toggleSidePanelOverlay.Narrative', self.options.parentControlPanel.$overlayPanel);
                                                    })));
            }

            self.hideLoading();
        },

        renderController: function() {
            var self = this;

            var $byDate = $('<label id="nar-data-list-default-sort-label" class="btn btn-default">').addClass('btn btn-default')
                                .append($('<input type="radio" name="options" id="nar-data-list-default-sort-option" autocomplete="off">'))
                                .append("date")
                                .on('click',function() {
                                    self.sortData(function(a,b) {
                                        if (a.info[3] > b.info[3]) return -1; // sort by date
                                        if (a.info[3] < b.info[3]) return 1;  // sort by date
                                        return 0;
                                    });
                                });

            var $byName = $('<label class="btn btn-default">')
                                .append($('<input type="radio" name="options" id="option2" autocomplete="off">'))
                                .append("name")
                                .on('click',function() {
                                    self.sortData(function(a,b) {
                                        if (a.info[1].toUpperCase() < b.info[1].toUpperCase()) return -1; // sort by name
                                        if (a.info[1].toUpperCase() > b.info[1].toUpperCase()) return 1;
                                        return 0;
                                    });
                                });

            var $byType = $('<label class="btn btn-default">')
                                .append($('<input type="radio" name="options" id="option3" autocomplete="off">'))
                                .append("type")
                                .on('click',function() {
                                    self.sortData(function(a,b) {
                                        if (a.info[2].toUpperCase() > b.info[2].toUpperCase()) return -1; // sort by type
                                        if (a.info[2].toUpperCase() < b.info[2].toUpperCase()) return 1;
                                        return 0;
                                    });
                                });
            var $upOrDown = $('<button class="btn btn-default btn-sm" type="button">').css({'margin-left':'5px'})
                                .append('<span class="glyphicon glyphicon-sort" style="color:#777" aria-hidden="true" />')
                                .on('click',function() {
                                    self.reverseData();
                                });

            var $sortByGroup = $('<div data-toggle="buttons">')
                                    .addClass("btn-group btn-group-sm")
                                    .css({"margin":"2px"})
                                    .append($byDate)
                                    .append($byName)
                                    .append($byType);

            // var $addDataBtn = $('<button>')
            //                     .addClass("btn btn-warning kb-data-list-get-data-button")
            //                     .append('<span class="fa fa-plus" style="color:#fff" aria-hidden="true" /> Add Data')
            //                     .on('click',function() {
            //                         self.trigger('toggleSidePanelOverlay.Narrative');
            //                     });



            var $openSearch = $('<span>')
                .addClass('btn btn-xs btn-default')
                .tooltip({title:'Search data in narrative', 'container':'body', delay: { "show": 400, "hide": 50 }})
                .append('<span class="fa fa-search"></span>')
                .on('click',function() {
                    if(!self.$searchDiv.is(':visible')) {
                        self.$searchDiv.show();
                        self.$sortByDiv.hide();
                        self.$filterTypeDiv.hide();
                    } else {
                        self.$searchDiv.hide();
                    }
                });

            var $openSort = $('<span>')
                .addClass('btn btn-xs btn-default')
                .tooltip({title:'Sort data list', 'container':'body', delay: { "show": 400, "hide": 50 }})
                .append('<span class="fa fa-sort-amount-asc"></span>')
                .on('click',function() {
                    if(!self.$sortByDiv.is(':visible')) {
                        self.$sortByDiv.show();
                        self.$searchDiv.hide();
                        self.$filterTypeDiv.hide();
                    } else {
                        self.$sortByDiv.hide();
                    }
                });

            var $openFilter = $('<span>')
                .addClass('btn btn-xs btn-default')
                .tooltip({title:'Filter data by type', 'container':'body', delay: { "show": 400, "hide": 50 }})
                .append('<span class="fa fa-filter"></span>')
                .on('click',function() {
                    if(!self.$filterTypeDiv.is(':visible')) {
                        self.$filterTypeDiv.show();
                        self.$sortByDiv.hide();
                        self.$searchDiv.hide();
                    } else {
                        self.$filterTypeDiv.hide();
                    }
                });
            self.$searchInput = $('<input type="text">').addClass('form-control');
            self.$searchDiv = $('<div>').addClass("input-group").css({'margin-bottom':'10px'})
                                .append(self.$searchInput)
                                .append($("<span>").addClass("input-group-addon")
                                            .append($("<span>")
                                                .addClass("glyphicon glyphicon-search")
                                                .css({'cursor':'pointer'})
                                                .on('click',function() {
                                                        self.search();
                                                    })  ));

            self.$sortByDiv = $('<div>').css({'margin':'3px','margin-left':'5px','margin-bottom':'10px'})
                                .append("<small>sort by: </small>")
                                .append($sortByGroup)
                                .append($upOrDown);

            self.$filterTypeSelect = $('<select>').addClass("form-control")
                                        .append($('<option value="">'))
                                        .change(function() {
                                            var optionSelected = $(this).find("option:selected");
                                            var typeSelected  = optionSelected.val();
                                            self.filterByType(typeSelected);
                                        });

            self.$filterTypeDiv = $('<div>').css({'margin':'3px','margin-left':'5px','margin-bottom':'10px'})
                                .append(self.$filterTypeSelect);

            var $header = $('<div>');
            if(self.options.parentControlPanel) {
                self.options.parentControlPanel.addButtonToControlPanel($openSearch);
                self.options.parentControlPanel.addButtonToControlPanel($openSort);
                self.options.parentControlPanel.addButtonToControlPanel($openFilter);
            }
            else {
                $header.addClass('row').css({'margin':'5px'})
                    .append($('<div>').addClass('col-xs-12').css({'margin':'0px','padding':'0px','text-align':'right'})
                        .append($openSearch)
                        .append($openSort)
                        .append($openFilter))
            }


            self.$sortByDiv.hide();
            self.$searchDiv.hide();
            self.$filterTypeDiv.hide();

            var $filterDiv = $('<div>')
                                .append(self.$sortByDiv)
                                .append(self.$searchDiv)
                                .append(self.$filterTypeDiv);

            self.$controllerDiv.append($header).append($filterDiv);
        },

        populateAvailableTypes: function() {
            var self = this;
            if (self.availableTypes && self.$filterTypeSelect) {

                var types = [];
                for(var type in self.availableTypes) {
                    if(self.availableTypes.hasOwnProperty(type)) {
                        types.push(type);
                    }
                }
                types.sort();

                self.$filterTypeSelect.empty();
                var runningCount = 0;
                for(var i=0; i<types.length; i++) {
                    runningCount += self.availableTypes[types[i]].count;
                    var countStr = '';
                    if(self.availableTypes[types[i]].count==1) {
                        countStr = " (".concat(self.availableTypes[types[i]].count).concat(" object)");
                    } else {
                        countStr = " (".concat(self.availableTypes[types[i]].count).concat(" objects)");
                    }
                    self.$filterTypeSelect.append(
                        $('<option value="'+self.availableTypes[types[i]].type+'">')
                            .append(self.availableTypes[types[i]].type + countStr));
                }
                if (runningCount==1) {
                    self.$filterTypeSelect.prepend($('<option value="">').append("Show All Types ("+runningCount+" object)"));
                } else {
                    self.$filterTypeSelect.prepend($('<option value="">').append("Show All Types ("+runningCount+" objects)"));
                }
            }
        },


        reverseData: function() {
            var self = this;
            if (!self.objectList) { return; }

            self.objectList.reverse();
            self.renderList();
            self.search();

            self.hideLoading();
        },

        sortData: function(sortfunction) {
            var self = this;
            if (!self.objectList) { return; }
            //should add spinning wait bar ....
            self.showLoading();

            self.objectList.sort(sortfunction);
            self.renderList();
            self.search();  // always refilter on the search term search if there is something there

            self.hideLoading();

            // go back to the top on sort
            self.$mainListDiv.animate({
                scrollTop:0
            }, 300); // fast = 200, slow = 600
        },


        currentMatch: [],
        currentTerm: '',
        searchFilterOn: false,
        n_filteredObjsRendered: null,

        search: function(term, type) {
            var self = this;
            if (!self.objectList) { return; }

            if (!term && self.$searchInput) {
                term = self.$searchInput.val();
            }

            // if type wasn't selected, then we try to get something that was set
            if (!type) {
                if (self.$filterTypeSelect) {
                    type = self.$filterTypeSelect.find("option:selected").val();
                }
            }

            term = term.trim();
            if (term.length>0 || type) {
                self.searchFilterOn = true;
                // todo: should show searching indicator (could take several seconds if there is a lot of data)
                // optimization => we filter existing matches instead of researching everything if the new
                // term starts with the last term searched for
                var newMatch = [];
                if (!self.currentTerm) {
                    // reset if currentTerm is null or empty
                    self.currentMatch = self.objectList;
                } else {
                    if (term.indexOf(self.currentTerm)!==0) {
                        self.currentMatch = self.objectList;
                    }
                }
                // clean the term for regex use
                term = term.replace(/\|/g,'\\|').replace(/\\\\\|/g,'|'); // bars are common in kb ids, so escape them unless we have \\|
                term = term.replace(/\./g,'\\.').replace(/\\\\\./g,'.'); // dots are common in names, so we escape them, but
                                                                         // if a user writes '\\.' we assume they want the regex '.'

                var regex = new RegExp(term, 'i');

                var n_matches = 0; self.n_filteredObjsRendered = 0;
                for(var k=0; k<self.currentMatch.length; k++) {
                    // [0] : obj_id objid // [1] : obj_name name // [2] : type_string type
                    // [3] : timestamp save_date // [4] : int version // [5] : username saved_by
                    // [6] : ws_id wsid // [7] : ws_name workspace // [8] : string chsum
                    // [9] : int size // [10] : usermeta meta
                    var match = false;
                    var info = self.currentMatch[k].info;
                    if (regex.test(info[1])) { match = true; } // match on name
                    else if (regex.test(info[2].split('.')[1].split('-'))) { match = true; } // match on type name
                    else if (regex.test(info[5])) { match = true; } // match on saved_by user

                    if (!match && info[10]) { // match on metadata values
                        for(var metaKey in info[10]) {
                            if (info[10].hasOwnProperty(metaKey)) {
                                if (regex.test(info[10][metaKey])) { match = true; break; }
                                else if (regex.test(metaKey+"::"+info[10][metaKey])) {
                                    match = true; break;
                                }
                            }
                        }
                    }


                    if (type) { // if type is defined, then our sort must also filter by the type
                        if (type !== info[2].split('-')[0].split('.')[1]) {
                            match = false; // no match if we are not the selected type!
                        }
                    }

                    if (match) {
                        // matches must always switch to show if they are rendered
                        if (self.currentMatch[k].$div) {
                            self.currentMatch[k].$div.show();
                        }

                        // todo: add check so we only show up to the number we render... switching to this will require that
                        // we revise the renderMore logic...
                        if (n_matches < self.options.objs_to_render_to_start) {
                            self.attachRowElement(self.currentMatch[k]);
                            self.n_filteredObjsRendered++;
                        }

                        newMatch.push(self.currentMatch[k]);
                        n_matches++;
                    }
                    else {
                        if (self.currentMatch[k].$div) {
                            self.currentMatch[k].$div.hide();
                        }
                    }
                }
                self.currentMatch = newMatch; // update the current match
            } else {
                self.searchFilterOn = false;
                // no new search, so show all and render the list
                for(var k=0; k<self.objectList.length; k++) {
                    if (self.objectList[k].$div) {
                        self.objectList[k].$div.show();
                    }
                }
                self.renderList();
            }
            self.currentTerm = term;
        },


        filterByType: function(type) {
            var self = this;
            self.search(null,type);
        },

        getRichData: function(object_info,$moreRow) {
            var self = this;
            var $usernameTd = $moreRow.find(".kb-data-list-username-td");
            self.displayRealName(object_info[5],$usernameTd);
        },

        showLoading : function() {
            this.$loadingDiv.show();
            this.$mainListDiv.hide();
        },
        hideLoading : function() {
            this.$loadingDiv.hide();
            this.$mainListDiv.show();
        },

        displayRealName: function(username,$targetSpan) {
	    var self = this;
	    // todo : use globus to populate user names, but we use a hack because of globus CORS headers
	    if (self.ws) { // make sure we are logged in and have some things

                if (self.real_name_lookup[username]) {
                    $targetSpan.html(self.real_name_lookup[username]+' (<a href="'+self.options.landing_page_url+'people/'+username+'" target="_blank">'+username+"</a>)");
                } else {
                    self.real_name_lookup[username] = "..."; // set a temporary value so we don't search again
                    $targetSpan.html('<a href="'+self.options.landing_page_url+'people/'+username+'" target="_blank">'+username+"</a>");
                    $.ajax({
                            type: "GET",
                            url: self.options.user_name_fetch_url + username + "&token="+self._attributes.auth.token,
                            dataType:"json",
                            crossDomain : true,
                            success: function(data,res,jqXHR) {
                                if (username in data['data'] && data['data'][username]['fullName']) {
                                    self.real_name_lookup[username] = data['data'][username]['fullName'];
                                    $targetSpan.html(self.real_name_lookup[username]+' (<a href="'+self.options.landing_page_url+'people/'+username+'" target="_blank">'+username+"</a>)");
                                }
                            },
                            error: function(jqXHR, textStatus, errorThrown) {
                                //do nothing
                            }
                        });
                }
	    }
        },

        getLandingPageMap: function() {
            this.ws_landing_page_map = window.kbconfig.landing_page_map;
        },

        /**
         * @method loggedInCallback
         * This is associated with the login widget (through the kbaseAuthenticatedWidget parent) and
         * is triggered when a login event occurs.
         * It associates the new auth token with this widget and refreshes the data panel.
         * @private
         */
        loggedInCallback: function(event, auth) {
            this.ws = new Workspace(this.options.ws_url, auth);
            //this.user_profile = new UserProfile(this.options.user_profile_url, auth);
            this.my_user_id = auth.user_id;
            this.isLoggedIn = true;
            this.refresh();
            return this;
        },

        /**
         * @method loggedOutCallback
         * Like the loggedInCallback, this is triggered during a logout event (through the login widget).
         * It throws away the auth token and workspace client, and refreshes the widget
         * @private
         */
        loggedOutCallback: function(event, auth) {
            this.ws = null;
            this.isLoggedIn = false;
            this.my_user_id = null;
            this.refresh();
            return this;
        },

        logoColorLookup:function(type) {
          var code = 0;
          for (var i=0; i < type.length; code += type.charCodeAt(i++));
          return this.icon_colors[ code % this.icon_colors.length ];
        },

        // edited from: http://stackoverflow.com/questions/3177836/how-to-format-time-since-xxx-e-g-4-minutes-ago-similar-to-stack-exchange-site
        getTimeStampStr: function (objInfoTimeStamp) {
            var date = new Date(objInfoTimeStamp);
            var seconds = Math.floor((new Date() - date) / 1000);

            // f-ing safari, need to add extra ':' delimiter to parse the timestamp
            if (isNaN(seconds)) {
                var tokens = objInfoTimeStamp.split('+');  // this is just the date without the GMT offset
                var newTimestamp = tokens[0] + '+'+tokens[0].substr(0,2) + ":" + tokens[1].substr(2,2);
                date = new Date(newTimestamp);
                seconds = Math.floor((new Date() - date) / 1000);
                if (isNaN(seconds)) {
                    // just in case that didn't work either, then parse without the timezone offset, but
                    // then just show the day and forget the fancy stuff...
                    date = new Date(tokens[0]);
                    return this.monthLookup[date.getMonth()]+" "+date.getDate()+", "+date.getFullYear();
                }
            }

            var interval = Math.floor(seconds / 31536000);
            if (interval > 1) {
                return this.monthLookup[date.getMonth()]+" "+date.getDate()+", "+date.getFullYear();
            }
            interval = Math.floor(seconds / 2592000);
            if (interval > 1) {
                if (interval<4) {
                    return interval + " months ago";
                } else {
                    return this.monthLookup[date.getMonth()]+" "+date.getDate()+", "+date.getFullYear();
                }
            }
            interval = Math.floor(seconds / 86400);
            if (interval > 1) {
                return interval + " days ago";
            }
            interval = Math.floor(seconds / 3600);
            if (interval > 1) {
                return interval + " hours ago";
            }
            interval = Math.floor(seconds / 60);
            if (interval > 1) {
                return interval + " minutes ago";
            }
            return Math.floor(seconds) + " seconds ago";
        },

        monthLookup : ["Jan", "Feb", "Mar","Apr", "May", "Jun", "Jul", "Aug", "Sep","Oct", "Nov", "Dec"],

        genUUID: function() {
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
                var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);
                return v.toString(16);
            });
        }
    })

})(jQuery);

(function( $, undefined ) {
    $.KBWidget({
        name: 'kbaseNarrativeAppsPanel', 
        parent: 'kbaseNarrativeControlPanel',
        version: '0.0.1',
        options: {
            loadingImage: 'static/kbase/images/ajax-loader.gif',
            autopopulate: true,
            title: 'Apps',
            methodStoreURL: 'http://dev19.berkeley.kbase.us/narrative_method_store/rpc',
            appHelpLink: '/functional-site/#/narrativestore/app/',
        },

        init: function(options) {
            this._super(options);
            if (window.kbconfig && window.kbconfig.urls) {
                this.options.methodStoreURL = window.kbconfig.urls.narrative_method_store;
            }

            this.methClient = new NarrativeMethodStore(this.options.methodStoreURL);

            this.$appListElem = $('<ul>');

            // Make a function panel for everything to sit inside.
            this.$appPanel = $('<div>')
                             .addClass('kb-function-body')
                             .append(this.$appListElem);

            // The 'loading' panel should just have a spinning gif in it.
            this.$loadingPanel = $('<div>')
                                 .addClass('kb-data-loading')
                                 .append('<img src="' + this.options.loadingImage + '">')
                                 .append($('<div>')
                                         .attr('id', 'message'))
                                 .hide();

            // The error panel should be empty for now.
            this.$errorPanel = $('<div>')
                               .addClass('kb-error')
                               .hide();

            // The help element should be outside of the panel itself, so it can be manipulated separately.
            // It should hide itself when clicked.
            this.$bodyDiv.append($('<div>')
                                 .addClass('kb-narr-panel-body')
                                 .append(this.$appPanel)
                                 .append(this.$loadingPanel)
                                 .append(this.$errorPanel));

            // Add the tooltip panel
            this.initMethodTooltip();
            
            if (this.options.autopopulate === true) {
                this.refresh();
            }
            return this;
        },

        refresh: function() {
            this.showLoadingMessage("Loading KBase Apps from service...");

            this.methClient.list_apps({}, 
                $.proxy(function (appList) {
                    appList.sort(function(a, b) {
                        return a.name.localeCompare(b.name);
                    });
                    this.appList = appList;
                    for (var i=0; i<appList.length; i++) {
                        this.$appListElem.append(this.buildAppElem(appList[i]));
                        this.showAppPanel();
                    }
                }, this),
                $.proxy(function (error) {
                    this.showError(error);
                }, this)
            );
        },

        buildAppElem: function(app) {
            var $helpButton = $('<span>')
                              .addClass('glyphicon glyphicon-question-sign kb-function-help')
                              .css({'margin-top': '-5px'})
                              .click($.proxy(function(event) {
                                  event.preventDefault();
                                  event.stopPropagation();
                                  this.showTooltip(app, event);
                              }, this));

            var $errButton = $('<span>')
                             .addClass('glyphicon glyphicon-warning-sign kb-function-help')
                             .css({'margin-top' : '-5px'})
                             .click($.proxy(function(event) {
                                event.preventDefault();
                                event.stopPropagation();
                                self.showErrorTooltip(app, event);
                             }, this));

            /* this is for handling long function names.
               long names will be cropped and have a tooltip
               with the full name */
            var appName = app.name;
            var $appSpan = $('<span class="kb-data-obj-name" style="margin-bottom:-5px">');
            if (appName.length > 31) {
                $appSpan.append(appName);
                $appSpan.tooltip({
                    title: app.name,
                    placement: "bottom"
                }); 
            } else {
                 $appSpan.append(appName);
            }
            
            var $newApp = $('<li>')
                             .append($appSpan);

            if (app.loading_error) {
                $newApp.addClass('kb-function-error')
                          .append($errButton)
                          .click($.proxy(function(event) {
                              this.showErrorTooltip(app, event);
                          }, this));
            }
            else {
                $newApp.append($helpButton)
                       .click(
                           $.proxy(function(event) {
                               this.trigger('appClicked.Narrative', app);
                           }, this));
                // $newApp.append($helpButton)
                //           .click($.proxy(function(event) {
                //               // needs to move to controller.
                //               this.methClient.get_app_spec({ 'ids' : [app.id] },
                //                   $.proxy(function(spec) {
                //                       this.trigger('appClicked.Narrative', spec[0]);
                //                   }, this),
                //                   $.proxy(function(error) {
                //                       this.showError(error);
                //                   }, this)
                //               );
                //           }, this));
            }
            return $newApp;            
        },
        
        initMethodTooltip: function() {
            this.help = {};

            this.help.$helpPanel = $('<div>')
                                   .addClass('kb-function-help-popup alert alert-info')
                                   .hide()
                                   .click($.proxy(function(event) { this.help.$helpPanel.hide(); }, this));
            this.help.$helpTitle = $('<span>');
            this.help.$helpVersion = $('<span>')
                                   .addClass('version');

            var $helpHeader = $('<div>')
                              //.addClass('header')
                              .append(
                                    $('<h1>')
                                      .css("display","inline")
                                      .css("padding-right","8px")
                                        .append(this.help.$helpTitle))
                              .append(this.help.$helpVersion);

            this.help.$helpBody = $('<div>')
                                  .addClass('body');
                                  
            /* No app page yet, so for now we don't add this element - also need to uncomment the link in the showTooltip function
            this.help.$helpLinkout = $('<a>')
                                     .attr('href', this.options.methodHelpLink)
                                     .attr('target', '_blank')
                                     .append('More...'); */

            this.help.$helpPanel.append($helpHeader)
                                .append(this.help.$helpBody)
                                .append($('<div>').append(this.help.$helpLinkout))
                                .append($('<h2>').append('Click to hide'));
            $('body').append(this.help.$helpPanel);

        },
        
        
        /**
         * Shows a popup panel with a description of the clicked method.
         * @param {object} method - the method containing a title and 
         * description for populating the popup.
         * @private
         */
        showTooltip: function(app, event) {
            this.help.$helpTitle.text(app.name);
            this.help.$helpVersion.text('v' + app.ver);
            this.help.$helpBody.html(app.tooltip);
            //this.help.$helpLinkout.attr('href', this.options.appHelpLink + app.id);
            this.help.$helpPanel.css({
                                       'left':event.pageX, 
                                       'top':event.pageY
                                     })
                                .show();
        },

        showErrorTooltip: function(app, event) {
            this.showTooltip({
                'name' : app.name,
                'ver' : app.ver,
                'id' : app.id,
                'tooltip' : "This App has an internal error and cannot currently be used.<br><br>The detailed error message is:<br>"+app.loading_error
            }, event);
        },
        

        /**
         * Shows a loading spinner or message on top of the panel.
         * @private
         */
        showLoadingMessage: function(message) {
            this.$loadingPanel.find('#message').empty();
            if (message) 
                this.$loadingPanel.find('#message').html(message);
            this.$appPanel.hide();
            this.$errorPanel.hide();
            this.$loadingPanel.show();
        },

        /**
         * Shows the main function panel, hiding all others.
         * @private
         */
        showAppPanel: function() {
            this.$errorPanel.hide();
            this.$loadingPanel.hide();
            this.$appPanel.show();
        },

        /**
         * Shows an error text message on top of the panel. All other pieces are hidden.
         * @param {string} error - the text of the error message
         * @private
         */
        showError: function(error) {
            var $errorHeader = $('<div>')
                               .addClass('alert alert-danger')
                               .append('<b>Sorry, an error occurred while loading KBase functions.</b><br>Please contact the KBase team at <a href="mailto:help@kbase.us?subject=Narrative%20function%20loading%20error">help@kbase.us</a> with the information below.');

            this.$errorPanel.empty();
            this.$errorPanel.append($errorHeader);

            // If it's a string, just dump the string.
            if (typeof error === 'string') {
                this.$errorPanel.append($('<div>').append(error));
            }

            // If it's an object, expect an error object as returned by the execute_reply callback from the IPython kernel.
            else if (typeof error === 'object') {
                var $details = $('<div>');
                $details.append($('<div>').append('<b>Type:</b> ' + error.ename))
                        .append($('<div>').append('<b>Value:</b> ' + error.evalue));

                var $tracebackDiv = $('<div>')
                                 .addClass('kb-function-error-traceback');
                for (var i=0; i<error.traceback.length; i++) {
                    $tracebackDiv.append(error.traceback[i] + "<br>");
                }

                var $tracebackPanel = $('<div>');
                var tracebackAccordion = [{'title' : 'Traceback', 'body' : $tracebackDiv}];

                this.$errorPanel.append($details)
                                .append($tracebackPanel);
                $tracebackPanel.kbaseAccordion({ elements : tracebackAccordion });
            }

            this.$appPanel.hide();
            this.$loadingPanel.hide();
            this.$errorPanel.show();
        },

    });
})(jQuery);
"use strict";

(function( $, undefined ) {
    $.KBWidget({
        name: 'kbaseNarrativeJobsPanel',
        parent: 'kbaseNarrativeControlPanel',
        version: '0.0.1',
        options: {
            loadingImage: 'static/kbase/images/ajax-loader.gif',
            autopopulate: true,
            title: 'Jobs',
        },
        $jobCountBadge: $('<span>')
                        .addClass('label label-danger'),
        title: $('<span>Jobs </span>'),
        // these are the elements that contain running apps and methods
        $appsList: null,
        $methodsList: null,

        /* when populated, should have the structure:
         * {
         *    jobId: { id: <str>,
                       status : <str>, 
                       source : <id of source cell>,
                       $elem : element of rendered job info,
                       timestamp: <str> }
         * }
         */
        jobStates: null,

        /* when populated should have structure:
         * {
         *    sourceId : jobId
         * }
         */
        source2Job: {},

        refreshTimer: null,
        refreshInterval: 10000,

        completedStatus: [ 'completed', 'done', 'deleted', 'suspend', 'not_found_error', 'unauthorized_error', 'awe_error' ],

        init: function(options) {
            this._super(options);
            this.title.append(this.$jobCountBadge);
            $(document).on('registerMethod.Narrative', $.proxy(
                function(e, jobInfo) {
                    this.registerJob(jobInfo, false);
                }, this)
            );

            $(document).on('registerApp.Narrative', $.proxy(
                function(e, jobInfo) {
                    this.registerJob(jobInfo, true);
                }, this)
            );

            $(document).on('refreshJobs.Narrative', $.proxy(
                function(e) {
                    this.refresh();
                }, this)
            );

            $(document).on('cancelJobCell.Narrative', $.proxy(
                function(e, cellId, showPrompt, callback) {
                    // Find job based on cellId
                    var jobId = this.source2Job[cellId];

                    // If we can't find the job, then it's not being tracked, so we
                    // should just assume it's gone already and return true to the callback.
                    if (jobId === undefined && callback)
                        callback(true);
                    else if (jobId !== undefined) {
                        if (showPrompt)
                            this.openJobDeletePrompt(jobId, null, callback);
                        else 
                            this.deleteJob(jobId, callback);
                    }
                }, this)
            );

            var $refreshBtn = $('<button>')
                              .addClass('btn btn-xs btn-default')
                              .click($.proxy(function(event) { this.refresh(); }, this))
                              .append($('<span>')
                                      .addClass('glyphicon glyphicon-refresh'));

            var $headerDiv = $('<div>')
                              .append('Jobs')
                              .append($('<button>')
                                      .addClass('btn btn-xs btn-default kb-ws-refresh-btn')
                                      .css({'margin-top': '-4px',
                                            'margin-right': '4px'})
                                      .click($.proxy(function(event) { this.refresh(); }, this))
                                      .append($('<span>')
                                              .addClass('glyphicon glyphicon-refresh')));

            this.$methodsList = $('<div>');
            this.$appsList = $('<div>');

            this.$jobsAccordion = $('<div>');
            // Make a function panel for everything to sit inside.
            this.$jobsPanel = $('<div>')
                              .addClass('kb-function-body');

            // The 'loading' panel should just have a spinning gif in it.
            this.$loadingPanel = $('<div>')
                                 .addClass('kb-data-loading')
                                 .append('<img src="' + this.options.loadingImage + '">')
                                 .append($('<div>')
                                         .attr('id', 'message'))
                                 .hide();

            // The error panel should be empty for now.
            this.$errorPanel = $('<div>')
                               .addClass('kb-error')
                               .hide();

            this.$jobsModalBody = $('<div>');
            this.$jobsModalTitle = $('<div>').html('Remove Job?');

            var buttonList = [
                {
                    name : 'Cancel',
                    type : 'default',
                    callback : function(e, $prompt) {
                        $prompt.closePrompt();
                        this.removeId = null;
                    },
                },
                {
                    name : 'Delete Job',
                    type : 'danger',
                    callback : $.proxy(function(e, $prompt) {
                        if (this.removeId) {
                            this.deleteJob(this.removeId);
                        }
                        if (this.deleteCallback)
                            this.deleteCallback(true);
                        this.deleteCallback = null;
                        $prompt.closePrompt();
                    }, this)
                }
            ];
            this.$jobsModal = $('<div>').kbasePrompt({
                title : this.$jobsModalTitle,
                body : this.$jobsModalBody,
                controls : buttonList
            });

            this.addButton($refreshBtn);

            this.body().append(this.$jobsPanel)
                       .append(this.$loadingPanel)
                       .append(this.$errorPanel);

            if (this.options.autopopulate) {
                this.initJobStates();
                this.refresh();
            }


            return this;
        },

        setJobCounter: function(numJobs) {
            this.$jobCountBadge.empty();
            if (numJobs > 0)
                this.$jobCountBadge.append(numJobs);
        },

        /**
         * @method
         * Initializes the jobStates object that the panel knows about.
         * We treat the IPython.notebook.metadata.job_ids as a (more or less) read-only 
         * object for the purposes of loading and refreshing.
         * 
         * At load time, that gets adapted into the jobStates object, which is used to
         * keep track of the job state.
         */
        initJobStates: function() {
            if (this.jobStates === null)
                this.jobStates = {};
            if (IPython.notebook && IPython.notebook.metadata && IPython.notebook.metadata.job_ids) {
                // this is actually like: ['apps': [list of app jobs], 'methods':[list of method jobs]
                var jobIds = IPython.notebook.metadata.job_ids;
                for (var jobType in jobIds) {
                    if (!(jobIds[jobType] instanceof Array))
                        continue;
                    for (var i=0; i<jobIds[jobType].length; i++) {
                        var job = jobIds[jobType][i];
                        this.jobStates[job.id] = $.extend({}, job, { 'status' : null, '$elem' : null, 'id' : job.id });
                        this.source2Job[job.source] = job.id;
                    }
                }
            }
        },

        /**
         * @method
         * Opens a delete prompt for this job, with a 'Delete' and 'Cancel' button.
         * If the user clicks 'Cancel', then it shouldn't do anything besides close.
         * If the user clicks 'Delete', then it tries to delete the job through the backend, 
         * then clears the job info from the front end and refreshes.
         * 
         * Under the covers, since we're using kbasePrompt and those buttons are a little
         * disconnected from everything else, this sets widget variables 'removeId' and 'deleteCallback'.
         * The 'removeId' is the id of the job to delete, and 'deleteCallback' is invoked 
         * after the deletion is done.
         *
         * @param {object} jobId
         * @param {object} jobState
         * @param {function} callback - a callback to invoke when finished.
         */
        openJobDeletePrompt: function(jobId, jobState, callback) {
            if (!jobId)
                return;

            var removeText = "Deleting this job will remove it from your Narrative. Any already generated data will be retained. Continue?";
            var warningText = "";

            if (jobState) {
                jobState = jobState.toLowerCase();
                var jobState = jobState.toLowerCase();
                if (jobState === 'queued' || jobState === 'running' || jobState === 'in-progress') {
                    warningText = "This job is currently running on KBase servers! Removing it will attempt to stop the running job.";
                }
                else if (jobState === 'completed') {
                    warningText = "This job has completed running. You may safely remove it without affecting your Narrative.";
                }
            }
            this.$jobsModalBody.empty().append(warningText + '<br><br>' + removeText);
            this.$jobsModalTitle.empty().html('Remove Job?');
            this.removeId = jobId;

            this.deleteCallback = callback;
            this.$jobsModal.openPrompt();
        },

        /**
         * Attempts to delete a job in the backend (by making a kernel call - this lets the kernel decide
         * what kind of job it is and how to stop/delete it).
         * When it gets a response, it then clears the job from the Jobs list.
         */
        deleteJob: function(jobId, callback) {
            var deleteJobCmd = 'from biokbase.narrative.common.kbjob_manager import KBjobManager\n' +
                               'jm = KBjobManager()\n' +
                               'print jm.delete_jobs(["' + jobId + '"], as_json=True)\n';

            var callbacks = {
                'output' : $.proxy(function(msgType, content) {
                    var response = this.deleteResponse(msgType, content, jobId);
                    if (callback)
                        callback(response);
                }, this),
                'execute_reply' : $.proxy(function(content) { 
                    this.handleCallback('execute_reply', content); 
                }, this),
                'clear_output' : $.proxy(function(content) { 
                    this.handleCallback('clear_output', content); 
                }, this),
                'set_next_input' : $.proxy(function(content) { 
                    this.handleCallback('set_next_input', content); 
                }, this),
                'input_request' : $.proxy(function(content) { 
                    this.handleCallback('input_request', content); 
                }, this)
            };

            IPython.notebook.kernel.execute(deleteJobCmd, callbacks, {store_history: false, silent: true});
        },

        /**
         * @method
         * When we get the deletion response from the kernel, we should delete the job.
         * We should *probably* just delete the job anyway, whether there's an error or not.
         */
        deleteResponse: function(msgType, content, jobId) {
            if (msgType != 'stream') {
                console.error('An error occurred while trying to delete a job');
                this.refresh(false);
                return;
            }
            var result = content.data;
            try {
                result = JSON.parse(result);
            }
            catch(err) {
                // ignore and return. assume it failed.
                // I guess we don't really care if it fails, though, the user just wants that job to be outro'd.
                // Comment this out for now, until we make some sensible error popup or something.
                // return false;
            }

            // first, wipe the metadata
            var appIds = IPython.notebook.metadata.job_ids.apps;
            appIds = appIds.filter(function(val) { return val.id !== jobId });
            IPython.notebook.metadata.job_ids.apps = appIds;

            // ...and from the method list
            var methodIds = IPython.notebook.metadata.job_ids.methods;
            methodIds = methodIds.filter(function(val) { return val.id !== jobId });
            IPython.notebook.metadata.job_ids.methods = methodIds;

            // remove it from the 'cache' in this jobs panel
            delete this.source2Job[this.jobStates[jobId].source];
            delete this.jobStates[jobId];

            // nuke the removeId
            this.removeId = null;
            
            // save the narrative!
            IPython.notebook.save_checkpoint();


            this.refresh(false);
            return true;
        },

        /**
         * Shows a loading spinner or message on top of the panel.
         * @private
         */
        showMessage: function(message, loading) {
            this.$loadingPanel.find('#message').empty();
            if (message) 
                this.$loadingPanel.find('#message').html(message);
            if (loading)
                this.$loadingPanel.find('img').show();
            else
                this.$loadingPanel.find('img').hide();
            this.$jobsPanel.hide();
            this.$errorPanel.hide();
            this.$loadingPanel.show();
        },

        showLoadingMessage: function(message) {
            this.showMessage(message, true);
        },

        /**
         * Shows the main jobs panel, hiding all others.
         * @private
         */
        showJobsPanel: function() {
            this.$errorPanel.hide();
            this.$loadingPanel.hide();
            this.$jobsPanel.show();
        },

        /**
         * @method
         * Registers a job with the Narrative. This adds its job id and source of the job (the cell that started it) to 
         * the narrative metadata. It also starts caching the state internally to the jobs panel. Once all this is done,
         * so the user doesn't accidentally lose the job, it triggers a narrative save.
         */
        registerJob: function(jobInfo, isApp) {
            // Check to make sure the Narrative has been instantiated to begin with.
            if (!IPython || !IPython.notebook || !IPython.notebook.kernel || !IPython.notebook.metadata)
                return;

            // If the job ids hasn't been inited yet, or it was done in the old way (as an array) then do it.
            if (!IPython.notebook.metadata.job_ids || 
                Object.prototype.toString.call(IPython.notebook.metadata.job_ids) === '[object Array]') {
                IPython.notebook.metadata.job_ids = {
                    'methods' : [],
                    'apps' : []
                };
            }
            // Double-check that it has the right properties
            if (!IPython.notebook.metadata.job_ids['methods'])
                IPython.notebook.metadata.job_ids['methods'] = [];
            if (!IPython.notebook.metadata.job_ids['apps'])
                IPython.notebook.metadata.job_ids['apps'] = [];

            var type = isApp ? 'apps' : 'methods';
            IPython.notebook.metadata.job_ids[type].push(jobInfo);
            // put a stub in the job states
            this.jobStates[jobInfo.id] = $.extend({}, jobInfo, {'status' : null, '$elem' : 'null'});
            this.source2Job[jobInfo.source] = jobInfo.id;
            // save the narrative!
            IPython.notebook.save_checkpoint();

            this.refresh();
        },

        /*
         * For now, ':' is the delimiter.
         * Anything before ':' is the job type.
         */
        jobTypeFromId: function(jobId) {
            if (jobId.indexOf(':') === -1) 
                return 'ujs';
            else {
                var type = jobId.split(':')[0];
                return type.toLowerCase();
            }
        },

        /**
         * There are a few different status options that show a job is complete vs. 
         * incomplete. We mark ones as "running" for our purpose if they do not
         * have any of these statuses.
         * @method
         * @private
         */
        jobIsIncomplete: function(status) {
            if (!status)
                return true;

            status = status.toLowerCase();
            // if status matches any of the possible cases in this.completedStatus, 
            // return true
            for (var i=0; i<this.completedStatus.length; i++) {
                if (status.indexOf(this.completedStatus[i]) !== -1)
                    return false;
            }
            if (status === 'error')
                return false;
            return true;
        },

        /**
         * @method
         */
        refresh: function(hideLoadingMessage, initStates) {
            if (this.jobStates === null || initStates)
                this.initJobStates();

            // if there's no timer, set one up - this should only happen the first time.
            if (this.refreshTimer === null) {
                this.refreshTimer = setInterval(
                    $.proxy(function() { this.refresh(true, false); }, this),
                    this.refreshInterval
                );
            }

            // If none of the base IPython stuff shows up, then it's not inited yet.
            // Just return silently.
            if (!IPython || !IPython.notebook || !IPython.notebook.kernel || 
                !IPython.notebook.metadata)
                return;

            // If we don't have any job ids, or it's length is zero, just show a 
            // message and return.
            if (!IPython.notebook.metadata.job_ids || 
                IPython.notebook.metadata.job_ids.length === 0 ||
                Object.keys(this.jobStates).length === 0) {
                this.populateJobsPanel();
                return;
            }

            if (!hideLoadingMessage)
                this.showLoadingMessage('Loading running jobs...');

            // This contains all the job info like this:
            // { jobId: {spec: {}, state: {}}}
            var jobInfo = {};
            // This contains the list of lookup parameters for each job.
            // We pass back all specs/parameters so the back end can munge them into the right 
            // output structures.
            var jobParamList = [];

            for (var jobId in this.jobStates) {
                var jobState = this.jobStates[jobId];
                // if the job's incomplete, we have to go get it.
                var jobIncomplete = this.jobIsIncomplete(jobState.status);

                // The type dictates what cell it came from and how to deal with the inputs.
                var jobType = this.jobTypeFromId(jobId);
                var specInfo = null;
                var $sourceCell = $('#' + jobState.source);
                if ($sourceCell.length > 0) {  // if the source cell is there (kind of a jQuery trick).
                    // if it's an NJS job, then it's an App cell, so fetch all that info.
                    if (jobType === "njs") {
                        specInfo = $sourceCell.kbaseNarrativeAppCell('getSpecAndParameterInfo');
                        if (specInfo && jobIncomplete) {
                            jobParamList.push("['" + jobId + "', " +
                                              "'" + this.safeJSONStringify(specInfo.appSpec) + "', " +
                                              "'" + this.safeJSONStringify(specInfo.methodSpecs) + "', " +
                                              "'" + this.safeJSONStringify(specInfo.parameterValues) + "']");
                        }
                    }
                    // otherwise, it's a method cell, so fetch info that way.
                    else {
                        specInfo = $sourceCell.kbaseNarrativeMethodCell('getSpecAndParameterInfo');
                        if (jobIncomplete) {
                            if (specInfo) {
                                jobParamList.push("['" + jobId + "', " +
                                                  "'" + this.safeJSONStringify(specInfo.methodSpec) + "', " +
                                                  "'" + this.safeJSONStringify(specInfo.parameterValues) + "']");
                            }
                            else {
                                jobParamList.push("['" + jobId + "']");
                            }
                        }
                    }
                    jobInfo[jobId] = { 'spec': specInfo };
                }
                else
                    this.jobStates[jobId].status = 'error';
            }

            // console.log(['REFRESH: looking up ' + jobParamList.length]);
            // console.log(['REFRESH: jobstates:', this.jobStates]);

            var pollJobsCommand = 'from biokbase.narrative.common.kbjob_manager import KBjobManager\n' +
                                  'job_manager = KBjobManager()\n' +
                                  'print job_manager.poll_jobs([' + jobParamList + '], as_json=True)\n';
            var callbacks = {
                'output' : $.proxy(function(msgType, content) { 
                    this.parseKernelResponse(msgType, content, jobInfo); 
                }, this),
                'execute_reply' : $.proxy(function(content) { 
                    this.handleCallback('execute_reply', content); 
                }, this),
                'clear_output' : $.proxy(function(content) { 
                    this.handleCallback('clear_output', content); 
                }, this),
                'set_next_input' : $.proxy(function(content) { 
                    this.handleCallback('set_next_input', content); 
                }, this),
                'input_request' : $.proxy(function(content) { 
                    this.handleCallback('input_request', content); 
                }, this),
            };

            var msgid = IPython.notebook.kernel.execute(pollJobsCommand, callbacks, {silent: true, store_history: false});
        },

        /**
         * @method
         * convenience to stringify a structure while escaping everything that needs it.
         * @private
         */
        safeJSONStringify: function(method) {
            var esc = function(s) { 
                return s.replace(/'/g, "&apos;")
                        .replace(/"/g, "&quot;");
            };
            return JSON.stringify(method, function(key, value) {
                return (typeof(value) === 'string') ? esc(value) : value;
            });
        },

        /**
         * @method
         * Get the kernel response and render it if it's valid.
         */
        parseKernelResponse: function(msgType, content, jobInfo) {
            // if it's not a datastream, display some kind of error, and return.
            if (msgType != 'stream') {
                this.showError('Sorry, an error occurred while loading the job list.');
                return;
            }
            var buffer = content.data;
            if (buffer.length > 0) {
                var jobStatus = JSON.parse(buffer);
                this.populateJobsPanel(jobStatus, jobInfo);
            }
            this.$loadingPanel.hide();
            this.$jobsPanel.show();
        },

        /** 
         * @method
         * Generic callback handler for the IPython kernel.
         */
        handleCallback: function(call, content) {
            if (content.status === 'error') {
                this.showError(content);
            }
            else {
                // commented out for now
                // console.debug('kbaseJobManagerPanel.' + call);
                // console.debug(content);
            }
        },

        /**
         * @method
         * Here we go, the first part of the rendering routine.
         * @param {object} fetchedJobStatus - the results of the jobs looked up through the kernel. This has the job status objects from NJS, etc.
         * @param {object} jobInfo - the specs (and status) of ALL jobs, not just those looked up through the kernel. 
         * The specs and state are used to decorate both the job renderings and the cells with results, etc.
         * 
         * Here's the flow:
         * 1. Get a sorted list of *all* jobs from the this.jobStates buffer
         * 2. All of those are getting rendered one way or another. Iterate on through.
         * 3. When we get to one that has an update from the server, then we need to update this.jobStates, render that job info, and update the cell
         * (possibly).
         * 4. That's it. All should be refreshed! Update the DOM node that holds all job info.
         *
         * XXX - it would probably be faster to re-render all jobs in place iff they need it (e.g., probably just the time since start field).
         * But it's Friday night at 8:30 before the big build meeting, so that might not happen yet. In all reality, I have a hard time seeing a 
         * case where there's more than, say, 20 job elements at once in any given Narrative.
         * We should also expire jobs in a reasonable time, at least from the Narrative.
         */
        populateJobsPanel: function(fetchedJobStatus, jobInfo) {
            console.log(fetchedJobStatus, jobInfo);
            if (!this.jobStates || Object.keys(this.jobStates).length === 0) {
                this.showMessage('No running jobs!');
                this.setJobCounter(0);
                return;
            }

            // Instantiate a shiny new panel to hold job info.
            var $jobsList = $('<div>').addClass('kb-jobs-items');

            // If we don't have any running jobs, just leave a message.
            if (Object.keys(this.jobStates).length === 0) {
                $jobsList.append($('<div class="kb-data-loading">').append('No running jobs!'));
            }
            else {
                // sort our set of jobs.
                var sortedJobs = Object.keys(this.jobStates);
                sortedJobs.sort($.proxy(function(a, b) {
                    var aTime = this.jobStates[a].timestamp;
                    var bTime = this.jobStates[b].timestamp;
                    // if we have timestamps for both, compare them
                    if (aTime && bTime)
                        return (new Date(aTime) < new Date(bTime)) ? 1 : -1;
                    else if (aTime) // if we only have one for a, sort for a
                        return 1;
                    else            // if aTime is null, but bTime isn't, (OR they're both null), then put b first
                        return -1;
                }, this));

                var stillRunning = 0;
                for (var i=0; i<sortedJobs.length; i++) {
                    var jobId = sortedJobs[i];
                    var info = jobInfo[jobId];

                    // if the id shows up in the "render me!" list:
                    // only those we fetched might still be running.
                    if (fetchedJobStatus[jobId]) {
                        // update the state and cell
                        this.jobStates[jobId].status = fetchedJobStatus[jobId].job_state;
                        if (this.jobIsIncomplete(this.jobStates[jobId].status))
                            stillRunning++;
                        this.jobStates[jobId].state = fetchedJobStatus[jobId];
                        this.updateCell(jobId, jobInfo[jobId]);
                    }
                    // updating the given state first allows us to just pass the id and the status set to
                    // the renderer. If the status set doesn't exist (e.g. we didn't look it up in the 
                    // kernel), then that's just undefined and the renderer can deal.
                    $jobsList.append(this.renderJob(jobId, jobInfo[jobId]));
                }
                this.setJobCounter(stillRunning);
            }
            this.$jobsPanel.empty().append($jobsList);
        },

        renderJob: function(jobId, jobInfo) {
            var getStepSpec = function(id, spec) {
                for (var i=0; i<spec.steps.length; i++) {
                    if (id === spec.steps[i].step_id)
                        return spec.steps[i];
                }
                return null;
            };

            // get the state from this.jobStates[jobInfo.]
            var jobState = this.jobStates[jobId];


            /* Cases:
             * 1. have job, have info
             *    a. job has 'error' property
             *        - render as an error'd job!
             *        - include delete btn
             *    b. job looks normal, not complete
             *        - show status as usual
             *    c. job is completed
             *        - show delete btn
             * 2. have job, no info
             *    - probably an error - missing app cell or something
             *        - show an error, option to delete.
             * 3. have no job
             *    - just return null. nothing invokes this like that, anyway
             */
            var jobType = this.jobTypeFromId(jobId);

            var $jobDiv = $('<div>')
                          .addClass('kb-data-list-obj-row');
            // jobinfo: {
            //     state: { id, source, target, timestamp, $elem, status },
            //     spec: { appSpec?, methodSpec?, methodSpecs?, parameterValues }
            //     type=njs: appSpec, methodSpecs
            //     type=method: methodSpec
            // }
            var specType = null;
            switch(jobType) {
                case 'njs':
                    specType = 'appSpec';
                    break;
                case 'method':
                    specType = 'methodSpec';
                    break;
                default:
                    specType = 'methodSpec';
                    break;
            }

            // get the job's name from its spec
            var jobName = "Unknown " + ((jobType === 'njs') ? "App" : "Method");
            if (jobInfo && jobInfo.spec && jobInfo.spec[specType] && jobInfo.spec[specType].info)
                jobName = jobInfo.spec[specType].info.name;

            var $jobInfoDiv = $('<div class="kb-data-list-name">')
                               .append(jobName);
            var $jobControlDiv = $('<span class="pull-right">')
                                 .append(this.makeJobClearButton(jobId, jobState.status))
                                 .append('<br>')
                                 .append(this.makeScrollToButton(jobState.source));
            $jobInfoDiv.append($jobControlDiv)
                       .append($('<div style="font-size:75%">')
                               .append(jobId));

            var status = "Unknown";
            if (jobState)
                status = jobState.status.charAt(0).toUpperCase() + 
                         jobState.status.substring(1);
            var started = "Unknown";
            var position = null;
            var task = null;

            /* Lots of cases for status:
             * suspend, error, unknown, awe_error - do the usual blocked error thing.
             * deleted - treat job as deleted
             * not_found_error - job's not there, so say so.
             * unauthorized_error - not allowed to see it
             * network_error - a (hopefully transient) error response based on network issues. refreshing should fix it.
             * jobstate has step_errors - then at least one step has an error, so we should show them
             * otherwise, no errors, so render their status happily.
             */
            if (status === 'Suspend' || status === 'Error' || status === 'Unknown' || status === 'Awe_error') {
                status = this.makeJobErrorButton(jobId, jobInfo, 'Error');
                $jobDiv.addClass('kb-jobs-error');
            }
            else if (status === 'Deleted') {
                status = this.makeJobErrorButton(jobId, jobInfo, 'Deleted');
                $jobDiv.addClass('kb-jobs-error');                
            }
            else if (status === 'Not_found_error') {
                status = this.makeJobErrorButton(jobId, jobInfo, 'Job Not Found');
                $jobDiv.addClass('kb-jobs-error');
            }
            else if (status === 'Unauthorized_error') {
                status = this.makeJobErrorButton(jobId, jobInfo, 'Unauthorized');
                $jobDiv.addClass('kb-jobs-error');
            }
            else if (status === 'Network_error') {
                status = this.makeJobErrorButton(jobId, jobInfo, 'Network Error');
            }
            else if (jobState.state.step_errors && Object.keys(jobState.state.step_errors).length !== 0) {
                var $errBtn = this.makeJobErrorButton(jobId, jobInfo);
                status = $('<span>').append(status + ' ')
                                    .append($errBtn);
            }
            else {
                if (jobType === "njs" && jobState.state) {
                    var stepId = jobState.state.running_step_id;
                    if (stepId) {
                        var stepSpec = getStepSpec(stepId, jobInfo.spec.appSpec);
                        task = jobInfo.spec.methodSpecs[stepSpec.method_id].info.name;
                    }
                }
                if (jobState.state && jobState.state.position !== undefined && jobState.state.position !== null && jobState.state.position > 0)
                    position = jobState.state.position;
            }
            if (jobState.timestamp) {
                started = this.makePrettyTimestamp(jobState.timestamp);
            }
            var $infoTable = $('<table class="kb-jobs-info-table">')
                             .append(this.makeInfoRow('Status', status));
            if (task !== null)
                $infoTable.append(this.makeInfoRow('Task', task));
            if (position !== null)
                $infoTable.append(this.makeInfoRow('Queue Position', position));
            $infoTable.append(this.makeInfoRow('Started', started));

            $jobDiv.append($jobInfoDiv)
                   .append($infoTable);
            return $jobDiv;
        },

        /**
         * @method
         * Updates the status of the cell the given job is associated with. This figures out
         * which cell type it needs to talk to, then sends a message to that cell.
         * 'job' = the response from the server about the job. Contains info from the job service
         * 'jobInfo' = the info we know about the running job: its id, associated cell, etc.
         */
        updateCell: function(jobId, jobInfo) {
            var jobState = this.jobStates[jobId];
            var source = jobState.source;
            var jobType = this.jobTypeFromId(jobId);

            // console.log(['UPDATE_CELL', job, jobInfo]);
            var status = '';
            if (jobState.status)
                status = jobState.status.toLowerCase();
            
            // don't do anything if we don't know the source cell. it might have been deleted.
            if (!source)
                return;

            var $cell = $('#' + source);
            // don't do anything if we know what the source should be, but we can't find it.
            if (!$cell)
                return;

            // if it's running and an NJS job, then it's in an app cell
            if (jobState.state.running_step_id && jobType === 'njs') {
                $cell.kbaseNarrativeAppCell('setRunningStep', jobState.state.running_step_id);
            }
            // if it's a ujs or method job, then it's a method cell
            else if (jobType === 'ujs' || jobType === 'method') {
                // assume we have 'in-progress' or 'running' vs. 'complete' or 'done'
                var submitState = 'complete';
                if (status.indexOf('run') != -1 || status.indexOf('progress') != -1 || status.indexOf('started') != -1)
                    submitState = 'running';
                else if (status.indexOf('queue') != -1 || status.indexOf('submit') != -1)
                    submitState = 'submitted';
                $cell.kbaseNarrativeMethodCell('changeState', submitState);
            }
            // if we have outputs, those need to be passed along
            if (jobState.state.widget_outputs && Object.keys(jobState.state.widget_outputs).length > 0) {
                if (jobType === 'njs') {
                    for (var key in jobState.state.widget_outputs) {
                        if (jobState.state.widget_outputs.hasOwnProperty(key)) {
                            try {
                                $cell.kbaseNarrativeAppCell('setStepOutput', key, jobState.state.widget_outputs[key]);
                            }
                            catch (err) {
                                console.log(["ERROR'D APP OUTPUT", err]);
                            }
                        }
                    }
                }
                else {
                    try {
                        $cell.kbaseNarrativeMethodCell('setOutput', { 'cellId' : source, 'result' : jobState.state.widget_outputs });
                    }
                    catch (err) {
                        console.log(["ERROR'D METHOD OUTPUT", err]);
                    }
                }
            }
            // if it's an error, then we need to signal the cell
            if (status === "error" || (jobState.state.step_errors && Object.keys(jobState.state.step_errors).length !== 0)) {
                if (jobType === 'njs') {
                    $cell.kbaseNarrativeAppCell('setRunningState', 'error');
                }
                else {
                    $cell.kbaseNarrativeMethodCell('changeState', 'error');
                }
            }
            // ...and if it's done, we need to signal that, too. Note that it can be both (i.e. done with errors)
            if (status.indexOf('complete') !== -1 || status.indexOf('done') !== -1) {
                if (jobType === 'njs') {
                    $cell.kbaseNarrativeAppCell('setRunningState', 'complete');
                }
            }

            // other statuses - network_error, not_found_error, unauthorized_error, etc. - are ignored for now.
        },

        /**
         * @method
         * Dummy convenience method to make a little table row.
         */
        makeInfoRow: function(heading, info) {
            return $('<tr>').append($('<th>')
                                    .append(heading + ':'))
                            .append($('<td>')
                                    .append(info));
        },

        /**
         * @method
         * @private
         * Makes an error button for a job.
         * This invokes the JobPanel's popup error modal, so most of the logic here is figuring out what
         * should appear in that modal.
         * @param {object} jobStatus - the job status object 
         * @param {object} jobInfo - the job info object - main keys are 'state' and 'specs'
         * @param {string} btnText - the text of the button. If empty or null, the button just gets a /!\ icon.
         */
        makeJobErrorButton: function(jobId, jobInfo, btnText) {
            var jobState = this.jobStates[jobId];
            var removeText = "Deleting this job will remove it from your Narrative. Any generated data will be retained. Continue?";
            var headText = "An error has been detected in this job!";
            var errorText = "The KBase servers are reporting an error for this job:";
            var errorType = "Unknown";

            var $errBtn = $('<div>')
                          .addClass('btn btn-danger btn-xs kb-jobs-error-btn')
                          .append('<span class="fa fa-warning" style="color:white"></span>');
            if (btnText)
                $errBtn.append(' ' + btnText);
            $errBtn.click($.proxy(function(e) {
                this.removeId = jobId;
                this.$jobsModalTitle.html('Job Error');
                /* 1. jobState.source doesn't exist = not pointed at a cell
                 * 2. $('#jobState.source') doesn't exist = cell is missing
                 * 3. jobstate.state.error is a string.
                 * 4. jobstate.state is missing.
                 */
                if (!jobState || !jobState.source) {
                    errorText = "This job is not associated with a Running Cell.";
                    errorType = "Unknown Cell";                    
                }
                else if ($('#' + jobState.source).length === 0) {
                    errorText = "The App Cell associated with this job can no longer be found in your Narrative.";
                    errorType = "Missing Cell";
                }
                else if (btnText === 'Deleted') {
                    errorText = "This job has already been deleted from KBase Servers.";
                    errorType = "Invalid Job";
                }
                else if (btnText === 'Job Not Found') {
                    errorText = "This job was not found to be running on KBase Servers. It may have been deleted, or may not be started yet.";
                    errorType = "Invalid Job";
                }
                else if (btnText === 'Unauthorized') {
                    errorText = "You do not have permission to view information about this job.";
                    errorType = "Unauthorized";
                }
                else if (btnText === 'Network Error') {
                    errorText = "An error occurred while looking up job information. Please refresh the jobs panel to try again.";
                    errorType = "Network";
                }
                else if (jobState.state.error) {
                    errorText = $('<div class="kb-jobs-error-modal">').append(jobState.state.error);
                    errorType = "Runtime";
                    if (jobState.state.error === 'awe_error')
                        errorType = 'AWE Error';                    
                }

                /* error types:
                 * 1. jobState.state.error is a real string. Just cough it up.
                 * 2. jobState.state is missing
                 * 3. jobInfo is partly missing (e.g., lost the cell that it should point to)
                 * 4. jobInfo is still partly missing (e.g., dont' know what cell it should point to)
                 */
                else if (Object.keys(jobState.state.step_errors).length !== 0) {
                    errorType = "Runtime";
                    errorText = $('<div class="kb-jobs-error-modal">');
                    for (var stepId in jobState.state.step_errors) {
                        if (jobState.state.step_errors.hasOwnProperty(stepId)) {
                            // contort that into the method name
                            // gotta search for it in the spec for the method id, first.
                            var methodName = "Unknown method: " + stepId;
                            if (this.jobTypeFromId(jobId) === "njs") {
                                var methodId = null;
                                for (var i=0; i<jobInfo.spec.appSpec.steps.length; i++) {
                                    if (stepId === jobInfo.spec.appSpec.steps[i].step_id) {
                                        methodId = jobInfo.spec.appSpec.steps[i].method_id;
                                        break;
                                    }
                                }
                                if (methodId)
                                    methodName = jobInfo.spec.methodSpecs[methodId].info.name;
                            }
                            else {
                                methodName = jobInfo.spec.methodSpec.info.name;
                            }
                            errorText.append($('<b>').append('In ' + methodName + ':<br>'))
                                     .append(jobState.state.step_errors[stepId] + '<br><br>');
                        }
                    }
                }
 
                var $errorTable = $('<table class="table table-bordered">')
                                  .append(this.makeInfoRow('Id', jobId))
                                  .append(this.makeInfoRow('Type', errorType))
                                  .append(this.makeInfoRow('Error', errorText));

                this.$jobsModalBody.empty();
                this.$jobsModalBody.append($('<div>').append(headText))
                                   .append($errorTable);
                if (jobState.state.traceback) {
                    var $tb = $('<div>');
                    $tb.kbaseAccordion({
                        elements: [{
                            title: 'Detailed Error Information',
                            body: $('<pre style="max-height:300px; overflow-y: auto">').append(jobState.state.traceback)
                        }]
                    });
                    this.$jobsModalBody.append($tb);
                }

                this.$jobsModalBody.append($('<div>').append(removeText));
                this.$jobsModal.openPrompt();
            }, this));
            return $errBtn;
        },


        /**
         * @method
         * @private
         * Makes a little 'x' button to delete a job.
         * @param {string} jobId
         * @param {string} jobStatus 
         */
        makeJobClearButton: function(jobId, jobStatus) {
            return $('<span data-toggle="tooltip" title="Remove Job" data-placement="left">')
                   .addClass('btn-xs kb-data-list-more-btn pull-right fa fa-times')
                   .css({'cursor':'pointer'})
                   .click($.proxy(function() {
                       this.openJobDeletePrompt(jobId, jobStatus);
                   }, this))
                   .tooltip();
        },

        /**
         * @method
         * @private
         * Makes a little arrow button to scroll from a job to the associated app/method cell
         */
        makeScrollToButton: function(sourceId) {
            return $('<span data-toggle="tooltip" title="Scroll To App" data-placement="left">')
                   .addClass('btn-xs kb-data-list-more-btn pull-right fa fa-location-arrow')
                   .css({'cursor':'pointer'})
                   .click(function(e) {
                       if (sourceId) {
                           $('html, body').animate({ scrollTop: $('#' + sourceId).offset().top-85 }, 1000);
                           $('#' + sourceId).click();
                       }
                   })
                   .tooltip();
        },

        /**
         * @method makePrettyTimestamp
         * Makes a div containing the 'started time' in units of time ago, with a Bootstrap 3 tooltip
         * that gives the exact time.
         *
         * Note that this tooltip needs to be activated with the $().tooltip() method before it'll function.
         *
         * @param timestamp the timestamp to calculate this div around. Should be in a Date.parse() parseable format.
         * @param suffix an optional suffix for the time element. e.g. "ago" or "from now".
         * @return a div element with the timestamp calculated to be in terms of how long ago, with a tooltip containing the exact time.
         * @private
         */
        makePrettyTimestamp: function(timestamp, suffix) {
            var d = this.parseDate(timestamp);

            var parsedTime = this.parseTimestamp(null, d);
            var timediff = this.calcTimeDifference(null, d);
            var timeMillis = d ? d.getTime() : "";

            var timeHtml = '<div href="#" data-toggle="tooltip" title="' + parsedTime + '" millis="' + timeMillis + '" >' + timediff + '</div>';
            return timeHtml;
        },

        /**
         * Shows an error text message on top of the panel. All other pieces are hidden.
         * @param {string} error - the text of the error message
         * @private
         */
        showError: function(error) {
            var $errorHeader = $('<div>')
                               .addClass('alert alert-danger')
                               .append('<b>Sorry, an error occurred while loading KBase jobs.</b><br>Please contact the KBase team at <a href="mailto:help@kbase.us?subject=Narrative%20jobs20loading%20error">help@kbase.us</a> with the information below.');

            this.$errorPanel.empty();
            this.$errorPanel.append($errorHeader);

            // If it's a string, just dump the string.
            if (typeof error === 'string') {
                this.$errorPanel.append($('<div>').append(error));
            }

            // If it's an object, expect an error object as returned by the execute_reply callback from the IPython kernel.
            else if (typeof error === 'object') {
                var $details = $('<div>');
                $details.append($('<div>').append('<b>Type:</b> ' + error.ename))
                        .append($('<div>').append('<b>Value:</b> ' + error.evalue));

                var $tracebackDiv = $('<div>')
                                 .addClass('kb-function-error-traceback');
                for (var i=0; i<error.traceback.length; i++) {
                    error.traceback[i] = error.traceback[i].replace(/\[\d(;\d+)?m/g, '');
                    $tracebackDiv.append(error.traceback[i] + "<br>");
                }

                var $tracebackPanel = $('<div>');
                var tracebackAccordion = [{'title' : 'Traceback', 'body' : $tracebackDiv}];

                this.$errorPanel.append($details)
                                .append($tracebackPanel);
                $tracebackPanel.kbaseAccordion({ elements : tracebackAccordion });
            }
            if (this.refreshTimer)
                clearTimeout(this.refreshTimer);

            this.$jobsPanel.hide();
            this.$loadingPanel.hide();
            this.$errorPanel.show();
        },

        /**
         * @method parseTimestamp
         * Parses the user_and_job_state timestamp and returns it as a user-
         * readable string in the UTC time.
         *
         * This assumes that the timestamp string is in the following format:
         * 
         * YYYY-MM-DDThh:mm:ssZ, where Z is the difference
         * in time to UTC in the format +/-HHMM, eg:
         *   2012-12-17T23:24:06-0500 (EST time)
         *   2013-04-03T08:56:32+0000 (UTC time)
         * 
         * If the string is not in that format, this method returns the unchanged
         * timestamp.
         *        
         * @param {String} timestamp - the timestamp string returned by the service
         * @returns {String} a parsed timestamp in the format "YYYY-MM-DD HH:MM:SS" in the browser's local time.
         * @private
         */
        parseTimestamp: function(timestamp, dateObj) {
            var d = null;
            if (timestamp)
                d = this.parseDate(timestamp);
            else if(dateObj)
                d = dateObj;

            if (d === null)
                return timestamp;

            var addLeadingZeroes = function(value) {
                value = String(value);
                if (value.length === 1)
                    return '0' + value;
                return value;
            };

            return d.getFullYear() + '-' + 
                   addLeadingZeroes((d.getMonth() + 1)) + '-' + 
                   addLeadingZeroes(d.getDate()) + ' ' + 
                   addLeadingZeroes(d.getHours()) + ':' + 
                   addLeadingZeroes(d.getMinutes()) + ':' + 
                   addLeadingZeroes(d.getSeconds());
        },

        /**
         * @method calcTimeDifference
         * From two timestamps (i.e. Date.parse() parseable), calculate the
         * time difference and return it as a human readable string.
         *
         * @param {String} time - the timestamp to calculate a difference from
         * @returns {String} - a string representing the time difference between the two parameter strings
         */
        calcTimeDifference: function(timestamp, dateObj) {
            var now = new Date();
            var time = null;

            if (timestamp)
                time = this.parseDate(timestamp);
            else if(dateObj)
                time = dateObj;

            if (time === null)
                return 'Unknown time';

            // start with seconds
            var timeRem = Math.abs((time - now) / 1000 );
            var unit = ' sec';

            // if > 60 seconds, go to minutes.
            if (timeRem >= 60) {
                timeRem /= 60;
                unit = ' min';

                // if > 60 minutes, go to hours.
                if (timeRem >= 60) {
                    timeRem /= 60;
                    unit = ' hrs';

                    // if > 24 hours, go to days
                    if (timeRem >= 24) {
                        timeRem /= 24;
                        unit = ' days';
                    }

                    // now we're in days. if > 364.25, go to years)
                    if (timeRem >= 364.25) {
                        timeRem /= 364.25;
                        unit = ' yrs';

                        // now we're in years. just for fun, if we're over a century, do that too.
                        if (timeRem >= 100) {
                            timeRem /= 100;
                            unit = ' centuries';

                            // ok, fine, i'll do millennia, too.
                            if (timeRem >= 10) {
                                timeRem /= 10;
                                unit = ' millennia';
                            }
                        }
                    }
                }
            }


            var timediff = '~' + timeRem.toFixed(1) + unit;
            if (time > now)
                timediff += ' from now';
            else
                timediff += ' ago';

            return timediff;
        },

        /**
         * VERY simple date parser.
         * Returns a valid Date object if that time stamp's real. 
         * Returns null otherwise.
         * @param {String} time - the timestamp to convert to a Date
         * @returns {Object} - a Date object or null if the timestamp's invalid.
         */
        parseDate: function(time) {
            var d = new Date(time);
            // if that doesn't work, then split it apart.
            if (Object.prototype.toString.call(d) !== '[object Date]') {
                var t = time.split(/[^0-9]/);
                while (t.length < 7) {
                    t.append(0);
                }
                d = new Date(t[0], t[1]-1, t[2], t[3], t[4], t[5], t[6]);
                if (Object.prototype.toString.call(d) === '[object Date]') {
                    if (isNaN(d.getTime())) {
                        return null;
                    }
                    else {
                        d.setFullYear(t[0]);
                        return d;
                    }
                }
                return null;
            }
            else {
                return d;
            }
        },
    });
})( jQuery );
/**
 * Widget for viewing and modifying narrative share settings
 * @author Michael Sneddon <mwsneddon@lbl.gov>
 * @public
 */
(function( $, undefined ) {

    $.KBWidget({
        name: "kbaseNarrativeSharePanel", 
        parent: "kbaseAuthenticatedWidget",
        version: "1.0.0",
        
        options: {
            ws_url: "https://kbase.us/services/ws",
            user_profile_url: "https://kbase.us/services/user_profile/rpc",
            user_page_link:"/functional-site/#/people/",
            loadingImage: 'static/kbase/images/ajax-loader.gif',
            ws_name_or_id: null,
            max_name_length: 35,
            max_list_height: '250px',
            add_user_input_width: '200px'
        },
        
        ws:null, // workspace client
        user_profile:null, //user_profile client
        
        $mainPanel:null,
        $notificationPanel:null,
        
        init: function(options) {
            this._super(options);
            
            // always overwrite based on kbconfig
            if (window.kbconfig && window.kbconfig.urls) {
                this.options.ws_url = window.kbconfig.urls.workspace;
                this.options.user_profile_url = window.kbconfig.urls.user_profile;
            }
            
            this.$notificationPanel = $('<div>');
            this.$elem.append(this.$notificationPanel);
        
            this.$mainPanel = $('<div>');
            this.$elem.append(this.$mainPanel);
            this.showWorking("loading narrative information");
            this.getInfoAndRender();
            
            if (!this.options.ws_name_or_id) {
                $(document).on(
                    'setWorkspaceName.Narrative', $.proxy(function(e, info) {
                        this.options.ws_name_or_id = info.wsId;
                        this.refresh();
                    }, this)
                );
            }
            
            return this;
        },

        my_user_id: null,
        
        loggedInCallback: function(event, auth) {
            this.ws = new Workspace(this.options.ws_url, auth);
            this.user_profile = new UserProfile(this.options.user_profile_url, auth);
            this.my_user_id = auth.user_id;
            this.refresh();
            return this;
        },
        loggedOutCallback: function(event, auth) {
            this.ws = null;
            this.user_profile = null;
            this.my_user_id = null;
            this.refresh();
            return this;
        },
        
        
        ws_info: null,
        ws_permissions: null,
        user_data: {},
        
        all_users: null,
        
        getInfoAndRender: function() {
            var self = this;
            if (self.ws && self.options.ws_name_or_id) {
                var wsIdentity = {};
                if (this.options.ws_name_or_id) {
                    if(/^[1-9]\d*$/.test(this.options.ws_name_or_id)) {
                        wsIdentity.id = parseInt(this.options.ws_name_or_id);
                    } else {
                        wsIdentity.workspace = this.options.ws_name_or_id;
                    }
                }
                // first get ws info
                self.ws.get_workspace_info(wsIdentity,
                    function(info) {
                        self.ws_info = info;
                        self.ws.get_permissions(wsIdentity,
                            function(perm) {
                                self.ws_permissions = [];
                                self.user_data = {};
                                
                                var usernameList = [self.my_user_id];
                                var usernames = self.my_user_id + ",";
                                for(var u in perm) {
                                    if (perm.hasOwnProperty(u)) {
                                        if (u!=='*') {
                                            self.ws_permissions.push([u,perm[u]]);
                                            usernames += u+',';
                                            usernameList.push(u);
                                        }
                                    }
                                }
                                self.user_profile.lookup_globus_user(usernameList,
                                    function(data) {
                                        self.user_data = data;
                                        self.render();
                                    },
                                    function(error) {
                                        console.error(error);
                                        self.render();
                                    });
                            },
                            function(error){self.reportError(error);}
                            );
                    },
                    function(error){self.reportError(error);});
            }
        },
        /*

WORKSPACE INFO
0: ws_id id
1: ws_name workspace
2: username owner
3: timestamp moddate,
4: int object
5: permission user_permission
6: permission globalread,
7: lock_status lockstat
8: usermeta metadata

 
*/
        isPrivate:true, // set if this ws is private or public
        render: function() {
            var self = this;
            if (self.ws_info && self.ws_permissions) {
                self.$mainPanel.empty();
            
                var globalReadStatus = '<strong><span class="fa fa-lock" style="margin-right:10px"></span>Private</strong>';
                var globalReadClass = "alert alert-info";
                self.isPrivate = true;
                if (self.ws_info[6]==='r') {
                    self.isPrivate = false;
                    globalReadClass = "alert alert-success";
                    globalReadStatus = '<strong><span class="fa fa-unlock" style="margin-right:10px"></span>Public</strong>';
                }
            
                var $topDiv = $('<div>')
                        .addClass(globalReadClass)
                        .css({'text-align':'center','padding':'10px','margin':'5px'})
                        .append(globalReadStatus);
                self.$mainPanel.append($topDiv);
                
                var $togglePublicPrivate = $('<div>').css({'text-align':'center'}).hide();
                if (self.isPrivate) {
                    $togglePublicPrivate.append($('<a>').append('make public?')
                        .on('click',function() {
                            self.showWorking("updating permissions...");
                            self.ws.set_global_permission(
                                {id: self.ws_info[0], new_permission:'r' },
                                function() { self.refresh();},
                                function(error) {
                                    console.log(error);
                                    self.refresh();
                                }
                            );
                        }));
                } else {
                    $togglePublicPrivate.append($('<a>').append('make private?')
                        .on('click',function() {
                            self.showWorking("updating permissions...");
                            self.ws.set_global_permission(
                                {id: self.ws_info[0], new_permission:'n' },
                                function() { self.refresh();},
                                function(error){self.reportError(error); self.refresh(); }
                            );
                        }));
                }
                self.$mainPanel.append($togglePublicPrivate);
                
                var $meDiv = $('<div>').css({'margin':'5px','margin-top':'20px'});
                var status = "You do not have access to this Narrative.";
                var isOwner = false;
                if (self.ws_info[2]===self.my_user_id) {
                    status="You own this Narrative. You can edit it and share it with other users.";
                    isOwner = true;
                    $togglePublicPrivate.show();
                } else if (self.ws_info[5]==='a') {
                    status="You can edit and share this Narrative.";
                    isOwner = true;  // not really, but set this so we show sharing controls
                    $togglePublicPrivate.show();
                } else if (self.ws_info[5]==='w') {
                    status="You can edit this Narrative, but you cannot share it.";
                } else if (self.ws_info[5]==='r' || self.ws_info[6]==='r') { // either you can read it, or it is globally readable
                    status="You can view this Narrative, but you cannot edit or share it.";
                } 
                var display = self.renderUserIconAndName(self.my_user_id,null,true);
                $meDiv.append(display[0],display[1]);
                $meDiv.append($('<div>').css({'margin-top':'10px'}).append(status));
                self.$mainPanel.append($meDiv);
            
                if (isOwner) {
                    var $addUsersDiv = $('<div>').css({'margin-top':'10px'});
                    var $input = $('<input>').attr('type','text').css({'width':self.options.add_user_input_width});
                    
                    var $addAction =
                        $('<div>').addClass('btn-group')
                            .append($('<button>').addClass('btn btn-default dropdown-toggle ')
                                .attr('type','button').attr('data-toggle','dropdown').attr('aria-expanded','false')
                                .append('<span class="fa fa-caret-down"></span>'))
                            .append($('<ul>').addClass('dropdown-menu pull-right').attr('role','menu')
                                    // TODO: pull-right is deprecated, use dropdown-menu-right when bootstrap updates
                                    .append($('<li>').append(
                                        $('<a>').append('Add with view privileges')
                                            .on('click',function() {
                                                var data = $input.select2("data");
                                                self.showWorking("updating permissions...");
                                                var users = [];
                                                for(var i=0; i<data.length; i++) {
                                                    if(data[i].id.trim()!=='') {
                                                        users.push(data[i].id.trim());
                                                    }
                                                }
                                                self.ws.set_permissions(
                                                    {id: self.ws_info[0], new_permission:'r', users:users },
                                                    function() { self.refresh();},
                                                    function(error){self.reportError(error); self.refresh(); }
                                                );
                                            })))
                                    .append($('<li>').append($('<a>').append('Add with edit privileges')
                                            .on('click',function() {
                                                var data = $input.select2("data");
                                                self.showWorking("updating permissions...");
                                                var users = [];
                                                for(var i=0; i<data.length; i++) {
                                                    if(data[i].id.trim()!=='') {
                                                        users.push(data[i].id.trim());
                                                    }
                                                }
                                                self.ws.set_permissions(
                                                    {id: self.ws_info[0], new_permission:'w', users:users },
                                                    function() { self.refresh();},
                                                    function(error){self.reportError(error); self.refresh(); }
                                                );
                                            })))
                                    .append($('<li>').append($('<a>').append('Add with edit/share privileges')
                                            .on('click',function() {
                                                var data = $input.select2("data");
                                                self.showWorking("updating permissions...");
                                                var users = [];
                                                for(var i=0; i<data.length; i++) {
                                                    if(data[i].id.trim()!=='') {
                                                        users.push(data[i].id.trim());
                                                    }
                                                }
                                                self.ws.set_permissions(
                                                    {id: self.ws_info[0], new_permission:'a', users:users },
                                                    function() { self.refresh();},
                                                    function(error){self.reportError(error); self.refresh(); }
                                                );
                                            }))));
                    
                    $addUsersDiv.append(
                        $('<table>').css({'width':'100%'})
                            .append($('<tr>')
                                .append($('<td>').append($input))
                                .append($('<td>').append($addAction))));
                    
                    self.setupSelect2($input,'share with...');
                    self.$mainPanel.append($addUsersDiv);
                }
            
            
            
                var $othersDiv = $('<div>').css({
                        'margin-top':'15px',
                        'max-height':self.options.max_list_height,
                        'overflow-y':'auto',
                        'overflow-x':'hidden'
                        });
                var $tbl = $('<table>');
                $othersDiv.append($tbl);
                
                // sort
                self.ws_permissions.sort(function(a,b) {
                    if (a[1]!==b[1]) { // based on privilege first
                        var aLevel = 0; var bLevel = 0;
                        if(a[1]==='a') { aLevel=1; }
                        else if(a[1]==='w') { aLevel=2; }
                        else if(a[1]==='r') { aLevel=3; }
                        if(b[1]==='a') { bLevel=1; }
                        else if(b[1]==='w') { bLevel=2; }
                        else if(b[1]==='r') { bLevel=3; }
                        if(aLevel<bLevel) return -1;
                        if(aLevel>bLevel) return 1;
                    } // then on user name
                    if(a[0]<b[0]) return -1;
                    if(a[0]>b[0]) return 1;
                    return 0;
                });
                
                // show all other users
                for (var i=0; i<self.ws_permissions.length; i++) {
                    if (self.ws_permissions[i][0] !== self.my_user_id && self.ws_permissions[i][0] !== '*') {
                        var $select;
                        if (isOwner) {
                            var thisUser = self.ws_permissions[i][0];
                            // note that we can simply add a space since usernames cannot have spaces
                            $select = $('<select>').addClass('form-control kb-share-user-permissions-dropdown')
                                .append($('<option>').val(thisUser+' ---r').append('can view'))
                                .append($('<option>').val(thisUser+' ---w').append('can edit'))
                                .append($('<option>').val(thisUser+' ---a').append('can edit/share'))
                                .append($('<option>').val(thisUser+' ---n').append('remove access'))
                                .val(thisUser+' ---'+self.ws_permissions[i][1])
                                .on('change', function() {
                                    self.showWorking("updating permissions...");
                                    var tokens = $(this).val().split(' ---');
                                    self.ws.set_permissions(
                                        {
                                            id: self.ws_info[0],
                                            new_permission: tokens[1],
                                            users: [tokens[0]]
                                        },
                                        function () {
                                            self.refresh();
                                        },
                                        function(error){self.reportError(error); self.refresh(); }
                                    );
                                    
                                });
                        } else {
                            $select = $('<div>').addClass('form-control kb-share-user-permissions-dropdown');
                            if (self.ws_permissions[i][1]==='r') { $select.append('can view'); }
                            if (self.ws_permissions[i][1]==='w') { $select.append('can edit'); }
                            if (self.ws_permissions[i][1]==='a') { $select.append('can edit/share'); }
                        }
                        var user_display = self.renderUserIconAndName(self.ws_permissions[i][0],null,true);
                        $tbl.append(
                            $('<tr>')
                                .append($('<td>')
                                        .append(user_display[0]))
                                .append($('<td>').css({'padding':'4px','padding-top':'6px'})
                                        .append(user_display[1]).append($select)));
                    }
                }
                self.$mainPanel.append($othersDiv);
            }
        },
        
        
        /* private method - note: if placeholder is empty, then users cannot cancel a selection*/
        setupSelect2: function ($input, placeholder) {
            var self = this;
            var noMatchesFoundStr = "Search by Name or Username";//"no users found";
            $input.select2({
                matcher: self.select2Matcher,
                formatNoMatches: noMatchesFoundStr,
                placeholder:placeholder,
                allowClear: true,
                multiple: true,
                query: function (query) {
                    
                    var term = query.term.trim();
                    var results = [];
                    
                    if (term.length>=2) {
                        self.user_profile.filter_users({filter:term},
                            function(users) {
                                if (users.length>0) {
                                    for (var k=0; k<users.length; k++) {
                                        results.push({id:users[k].username, text:users[k].realname, found:true});
                                    }
                                    query.callback({results:results});
                                } else {
                                    // no matches in our profile, see if there was a globus match...
                                    term = term.toLowerCase();
                                    if(!/[^a-z0-9]/.test(term) ) {
                                        self.user_profile.lookup_globus_user([term],
                                            function(data) {
                                                if (data.hasOwnProperty(term)) {
                                                    results.push({id:term, text:data[term].fullName, found:false});
                                                } else {
                                                    results.push({id:term, text:term, found:false});
                                                }
                                                query.callback({results:results});
                                            },
                                            function(error) {
                                                // something went really wrong
                                                console.error(error);
                                                self.render();
                                                results.push({id:term, text:term, found:false});
                                                query.callback({results:results});
                                            });
                                    } else {
                                        results.push({id:term, text:term, found:false});
                                        query.callback({results:results});
                                    }
                                }
                            },
                            function(error) {
                                results.push({id:term,text:term, found:false});
                                console.error(error);
                                query.callback({results:results}); 
                            });
                    } else {
                       query.callback({results:results}); 
                    }
                },
                
                formatSelection: function(object, container) {
                    if (object.found) {
                        var toShow = self.renderUserIconAndName(object.id, object.text);
                        return $('<div>').append(toShow[0]).append(toShow[1].css({'white-space':'normal'})).html(); // wrapped in a div that we drop
                    }
                    return "<b>"+object.text+"</b> (not found)";
                },
                formatResult: function(object, container, query) {
                    if (object.found) {
                        var toShow = self.renderUserIconAndName(object.id, object.text);
                        // hack on a hack on a hack!
                        return $('<div>').append(toShow[0]).append(toShow[1].html()).html(); // wrapped in a div that we drop
                    }
                    return "<b>"+object.text+"</b> (not found)";
                }
            });
        },
        
        showWorking: function(message) {
            this.$mainPanel.empty();
            this.$mainPanel.append('<br><br><div style="text-align:center"><img src="' + this.options.loadingImage
                                   + '"><br>' + message + '</div>');
        },
        
        reportError: function(error) {
            console.error(error);
            this.$notificationPanel.append(
                $('<div>').addClass('alert alert-danger alert-dismissible').attr('role','alert')
                    .append('<button type="button" class="close" data-dismiss="alert"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>')
                    .append('<strong>Error: </strong> '+error.error.message)
            );
        },
        
        refresh: function() {
            this.getInfoAndRender();    
        },
        
        colors : [
            '#F44336', //red
            '#E91E63', //pink
            '#9C27B0', //purple
            '#673AB7', //deep purple
            '#3F51B5', //indigo
            '#2196F3', //blue
            '#03A9F4', //light blue
            '#00BCD4', //cyan
            '#009688', //teal
            '#4CAF50', //green
            '#8BC34A', //lime green
            '#CDDC39', //lime
            '#FFEB3B', //yellow
            '#FFC107', //amber
            '#FF9800', //orange
            '#FF5722', //deep orange
            '#795548', //brown
            '#9E9E9E', //grey
            '#607D8B'  //blue grey
        ],
        
        renderUserIconAndName: function(username, realName, turnOnLink) {
            var code = 0;
            for(var i=0; i<username.length; i++) {
                code += username.charCodeAt(i);
            }
            var userColor = this.colors[ code % this.colors.length ];
            var $span =  $("<span>").addClass("fa fa-user").css({'color':userColor});
            
            var userString = username;
            if (username === this.my_user_id) {
                userString = " Me ("+username+")";
            } else if (realName) {
                userString = " "+realName+" ("+username+")";
            } else if (this.user_data[username]) {
                userString = " "+this.user_data[username].fullName+" ("+username+")";
            }
            
            var shortName = userString; var isShortened=false;
            if (userString.length>this.options.max_name_length) {
                shortName = shortName.substring(0,this.options.max_name_length-3)+'...';
                isShortened=true;
            }
            var $name =  $("<span>").css({'color':userColor, 'white-space':'nowrap'}).append(shortName);
            if (isShortened) { $name.tooltip({title:userString, placement:'bottom'}); }
            
            if (turnOnLink) {
                $name =  $('<a href="'+this.options.user_page_link+username+'" target="_blank">').append(
                            $("<span>").css({'color':userColor, 'white-space':'nowrap'}).append(shortName));
            }
            return [$span,$name];
        }
        
    });

})( jQuery );

/**
 * Top-level 'widget' for the workspace interaction with the KBase narrative.
 *
 * The widget lists the objects in the workspace and include a search field
 * to filter the list, as well as a button to 'Add' new items from sources
 * like the CDS and local files.
 *
 * Options:
 *    loadingImage - an image to show in the middle of the widget while loading data
 *    tableElem - HTML element container for the data table
 *    controlsElem - HTML element container for the controls (search/add)
 *
 * Triggers events:
 * updateData.Narrative - when any externally represented data should be updated.
 *
 * @author Bill Riehl <wjriehl@lbl.gov>
 * @author Dan Gunter <dkgunter@lbl.gov>
 * @public
 */

(function( $, undefined ) {
    $.KBWidget({
        name: 'kbaseNarrativeWorkspace',
        parent: 'kbaseWidget',
        version: '1.0.0',
        options: {
            loadingImage: 'static/kbase/images/ajax-loader.gif',
            tableElem: null,
            controlsElem: null,
            ws_id: null,
            methodStoreURL: 'https://kbase.us/services/narrative_method_store',
        },
        ws_client: null,
        ws_id: null,
        defaultOutputWidget: "kbaseDefaultNarrativeOutput",
        defaultInputWidget: "kbaseDefaultNarrativeInput",
        errorWidget: "kbaseNarrativeError",
        connectable: {},

        inputsRendered: false,
        maxSavedStates: 2,      // limit the states saved to 2 for now.
        nextOutputCellId: '',

        // constant strings.
        KB_CELL: 'kb-cell',
        KB_TYPE: 'type',
        KB_APP_CELL: 'kb_app',
        KB_FUNCTION_CELL: 'function_input',
        KB_OUTPUT_CELL: 'function_output',
        KB_ERROR_CELL: 'kb_error',
        KB_CODE_CELL: 'kb_code',
        KB_STATE: 'widget_state',

        curCell: null,

        // set up as a hash for quickie lookup time!
        ignoredDataTypes : {
            'string' : 1,
            'unicode' : 1,
            'numeric' : 1,
            'integer' : 1,
            'list' : 1,
            'a number' : 1
        },

        init: function(options) {
            this._super(options);
            this.ws_id = this.options.ws_id;

            if (window.kbconfig && window.kbconfig.urls) {
                this.options.methodStoreURL = window.kbconfig.urls.narrative_method_store;
            }
            this.methClient = new NarrativeMethodStore(this.options.methodStoreURL);

            // Whenever the notebook gets loaded, it should rebind things.
            // This *should* only happen once, but I'm putting it here anyway.
            $([IPython.events]).on('notebook_loaded.Notebook',
                $.proxy(function() {
                    this.rebindActionButtons();
                    this.hideGeneratedCodeCells();
                }, this)
            );

            $(document).on('workspaceUpdated.Narrative',
                $.proxy(function(e, ws_id) {
                    this.ws_id = ws_id;
                },
                this)
            );

            $(document).on('dataUpdated.Narrative',
                $.proxy(function(event) {
                    if (IPython && IPython.notebook) {
                        // XXX: This is a hell of a hack. I hate
                        // using the 'first time' bit like this,
                        // but without some heavy rewiring, it's difficult
                        // to track when some event occurred.
                        // So, dirty bit it is.
                        this.refreshFunctionInputs(!this.inputsRendered);
                        if (!this.inputsRendered) {
                            this.loadAllRecentCellStates();
                            this.trigger('refreshJobs.Narrative');
                        }

                        this.inputsRendered = true;
                    }
                },
                this)
            );

            $(document).on('narrativeDataQuery.Narrative',
                $.proxy(function(e, callback) {
                    var objList = this.getNarrativeDependencies();
                    if (callback) {
                        callback(objList);
                    }
                },
                this)
            );

            // When a user clicks on a function, this event gets fired with
            // method information. This builds a function cell out of that method
            // and inserts it in the right place.
            /** DEPRECATED **
             * use methodClicked.Narrative or appClicked.Narrative instead *
             */
            // $(document).on('function_clicked.Narrative',
            //     $.proxy(function(event, method) {
            //         this.buildFunctionCell(method);
            //     },
            //     this)
            // );

            $(document).on('methodClicked.Narrative',
                $.proxy(function(event, method) {
                    this.buildMethodCell(method);
                },
                this)
            );

            $(document).on('appClicked.Narrative',
                $.proxy(function(event, appInfo) {
                    this.buildAppCell(appInfo);
                },
                this)
            );

            $(document).on('deleteCell.Narrative',
                $.proxy(function(event, index) {
                    this.deleteCell(index);
                },
                this)
            );

            $(document).on('runCell.Narrative',
                $.proxy(function(event, data) {
                    this.runMethodCell(data);
                },
                this)
            );

            $(document).on('runApp.Narrative',
                $.proxy(function(event, data) {
                    this.runAppCell(data);
                },
                this)
            );

            $(document).on('createOutputCell.Narrative',
                $.proxy(function(event, data) {
                    var cellIndex = $('#'+data.cellId).nearest('.cell').index();
                    var params = {'embed' : true,
                                  'data': this.safeJSONStringify(data.result)};
                    if (data.next_steps) {
                      console.debug("adding next steps in create");
                      params.next_steps = data.next_steps;
                    }
                    this.createOutputCell(IPython.notebook.get_cell(cellIndex),
                                          params);
                }, this)
            );

            $(document).on('showNextSteps.Narrative',
              $.proxy(function(event, obj) {
                this.showNextSteps(obj);
              }, this));

            $(document).on('createViewerCell.Narrative',
                $.proxy(function(event, data) {
                    this.createViewerCell(data.nearCellIdx, data, data.widget);
                }, this)
            );

            this.initDeleteCellModal();
            // Initialize the data table.
            this.render();
            return this;
        },

        initDeleteCellModal: function() {
            this.$deleteCellModalBody = $('<div>');

            var buttonList = [
                {
                    name : 'Cancel',
                    type : 'default',
                    callback : function(e, $prompt) {
                        this.cellToDelete = null;
                        $prompt.closePrompt();
                    },
                },
                {
                    name : 'Delete',
                    type : 'danger',
                    callback : $.proxy(function(e, $prompt) {
                        if (this.cellToDelete !== undefined && this.cellToDelete !== null) {
                            var cell = IPython.notebook.get_cell(this.cellToDelete);
                            var removeId = $(cell.element).find('[id^=kb-cell-]').attr('id');
                            this.trigger('cancelJobCell.Narrative', removeId, false);
                            IPython.notebook.delete_cell(this.cellToDelete);
                            this.cellToDelete = null;
                        }
                        $prompt.closePrompt();
                    }, this)
                }
            ];
            this.$deleteCellModal = $('<div>').kbasePrompt({
                title : 'Delete Cell and Job?',
                body : this.$deleteCellModalBody,
                controls : buttonList
            });
        },

        showDeleteCellModal: function(index, cell, message) {
            if (cell && cell.metadata[this.KB_CELL]) {
                this.cellToDelete = index;
                if (message)
                    this.$deleteCellModalBody.empty().html(message);
                this.$deleteCellModal.openPrompt();
            }
        },

        /**
         * @method buildMethodCell
         * @param {Object} method -
         * @public
         */
        buildMethodCell: function(method) {
            var cell = IPython.notebook.insert_cell_below('markdown');
            cell.celltoolbar.hide();

            // make this a function input cell, as opposed to an output cell
            this.setMethodCell(cell, method);

            // THIS IS WRONG! FIX THIS LATER!
            // But it should work for now... nothing broke up to this point, right?
            var cellIndex = IPython.notebook.ncells() - 1;
            var cellId = 'kb-cell-' + cellIndex + '-' + this.uuidgen();

            // The various components are HTML STRINGS, not jQuery objects.
            // This is because the cell expects a text input, not a jQuery input.
            // Yeah, I know it's ugly, but that's how it goes.
            var cellContent = "<div id='" + cellId + "'></div>" +
                              "\n<script>" +
                              "$('#" + cellId + "').kbaseNarrativeMethodCell({'method' : '" + this.safeJSONStringify(method) + "', 'cellId' : '" + cellId + "'});" +
                              "</script>";

            cell.set_text(cellContent);
            cell.rendered = false;
            cell.render();

            // restore the input widget's state.
            this.removeCellEditFunction(cell);
        },

        runMethodCell: function(data) {
            if (!data || !data.cell || !data.method || !data.parameters) {
                // do some erroring later.
                return;
            }
            this.saveCellState(data.cell);
            this.updateNarrativeDependencies();
            var self = this;
            var code = '';
            var showOutput = true;

            // Three cases to NOT show immediately:
            // 1. method.job_id_output_field is not null    -- long running (via UJS)
            // 2. method.behavior.kb_service_method is not null && method.behavior.kb_service_url IS null    -- long running service call (via NJS)
            // 3. method.behavior.script_module is not null -- AWE script backend (via NJS)

            // if there's a job_id_output_field in the method, then it's long-running, and we shouldn't show an output cell right away.
            // ...or maybe show a temporary one?
            if ((data.method.job_id_output_field && data.method.job_id_output_field != null) ||
                (data.method.behavior.kb_service_method && (!data.method.behavior.kb_service_url || data.method.behavior.kb_service_url.length === 0)) ||
                (data.method.behavior.script_module)) {
                showOutput = false;
            }
            // old, pre-njs style where the methods were all living in IPython-land
            if (data.method.behavior.python_class && data.method.behavior.python_function) {
                code = this.buildRunCommand(data.method.behavior.python_class, data.method.behavior.python_function, data.parameters);
            }
            // newer, njs/njs-mock style where methods get farmed out
            else if ((data.method.behavior.kb_service_method && data.method.behavior.kb_service_name) ||
                     (data.method.behavior.script_module && data.method.behavior.script_name)) {
                code = this.buildGenericRunCommand(data);
            }
            else {
                // something else!
                // do the standard for now.
                code = this.buildGenericRunCommand(data);
            }
            var callbacks = {
                'execute_reply' : function(content) { self.handleExecuteReply(data.cell, content); },
                'output' : function(msgType, content) { self.handleOutput(data.cell, msgType, content, showOutput); },
                'clear_output' : function(content) { self.handleClearOutput(data.cell, content); },
                'set_next_input' : function(text) { self.handleSetNextInput(data.cell, content); },
                'input_request' : function(content) { self.handleInputRequest(data.cell, content); },
            };

            $(data.cell.element).find('#kb-func-progress').css({'display': 'block'});
            IPython.notebook.kernel.execute(code, callbacks, {silent: true});
        },

        buildAppCell: function(appSpec) {
            var cell = IPython.notebook.insert_cell_below('markdown');
            cell.celltoolbar.hide();
            this.removeCellEditFunction(cell);

            var tempContent = '<img src="' + this.options.loadingImage + '">';
            cell.set_text(tempContent);
            cell.rendered = false;
            cell.render();

            this.setAppCell(cell, appSpec);
            var cellIndex = IPython.notebook.ncells() - 1;
            var cellId = 'kb-cell-' + cellIndex + '-' + this.uuidgen();

            // The various components are HTML STRINGS, not jQuery objects.
            // This is because the cell expects a text input, not a jQuery input.
            // Yeah, I know it's ugly, but that's how it goes.
            var cellContent = "<div id='" + cellId + "'></div>" +
                              "\n<script>" +
                              "$('#" + cellId + "').kbaseNarrativeAppCell({'appSpec' : '" + this.safeJSONStringify(appSpec) + "', 'cellId' : '" + cellId + "'});" +
                              "</script>";
            cell.set_text(cellContent);
            cell.rendered = false;
            cell.render();
        },

        runAppCell: function(data) {
            if (!data || !data.cell || !data.appSpec || !data.methodSpecs || !data.parameters) {
                // error out.
                return;
            }
            this.saveCellState(data.cell);
            this.updateNarrativeDependencies();
            var self = this;
            var callbacks = {
                'execute_reply' : function(content) { self.handleExecuteReply(data.cell, content); },
                'output' : function(msgType, content) { self.handleOutput(data.cell, msgType, content, "app"); },
                'clear_output' : function(content) { self.handleClearOutput(data.cell, content); },
                'set_next_input' : function(text) { self.handleSetNextInput(data.cell, content); },
                'input_request' : function(content) { self.handleInputRequest(data.cell, content); },
            };

            var code = this.buildAppCommand(data.appSpec, data.methodSpecs, data.parameters);
            IPython.notebook.kernel.execute(code, callbacks, {silent: true});
        },

        buildAppCommand: function(appSpec, methodSpecs, parameters) {
            console.log([appSpec, methodSpecs, parameters]);
            var appSpecJSON = this.safeJSONStringify(appSpec);
            var methodSpecJSON = this.safeJSONStringify(methodSpecs);
            var paramsJSON = this.safeJSONStringify(parameters);

            return "import biokbase.narrative.common.service as Service\n" +
                   "method = Service.get_service('app_service').get_method('app_call')\n" +
                   "method('" + appSpecJSON + "', '" + methodSpecJSON + "', '" + paramsJSON + "')";
        },

        /** DEPRECATED / OBSOLETED - use buildMethodCell or buildAppCell instead. **/
        // /**
        //  * @method buildFunctionCell
        //  * @param {Object} method - the JSON schema version of the method to invoke. This will
        //  * include a list of parameters and outputs.
        //  */
        // buildFunctionCell: function(method) {
        //     var cell = IPython.notebook.insert_cell_below('markdown');
        //     cell.celltoolbar.hide();
        //     // make this a function input cell, as opposed to an output cell
        //     this.setFunctionCell(cell, method);

        //     // THIS IS WRONG! FIX THIS LATER!
        //     // But it should work for now... nothing broke up to this point, right?
        //     var cellIndex = IPython.notebook.ncells() - 1;
        //     var cellId = 'kb-cell-' + cellIndex + '-' + this.uuidgen();

        //     // The various components are HTML STRINGS, not jQuery objects.
        //     // This is because the cell expects a text input, not a jQuery input.
        //     // Yeah, I know it's ugly, but that's how it goes.
        //     var cellContent;

        //     if (this.validateMethod(method)) {
        //         // This is the list of parameters for the given method
        //         var inputWidget = this.defaultInputWidget;
        //         if (method.properties.widgets.input)
        //             inputWidget = method.properties.widgets.input;

        //         var inputDiv = "<div id='inputs'></div>";

        //         // These are the 'delete' and 'run' buttons for the cell
        //         var button_content;
        //         if (this.readonly) {
        //             button_content = "";
        //         }
        //         else {
        //             button_content = "<button id='" + cellId + "-delete' type='button' value='Delete' class='btn btn-default btn-sm'>Delete</button> " +
        //                              "<button id='" + cellId + "-run' type='button' value='Run' class='btn btn-primary btn-sm'>Run</button>";
        //                              //style='margin-top:10px'>" +
        //         }
        //         var buttons = "<div class='buttons pull-right'>" + button_content +
        //                       "</div>";

        //         // The progress bar remains hidden until invoked by running the cell
        //         var progressBar = "<div id='kb-func-progress' class='pull-left' style='display:none;'>" +
        //                             "<div class='progress progress-striped active kb-cell-progressbar'>" +
        //                                 "<div class='progress-bar progress-bar-success' role='progressbar' aria-valuenow='0' " +
        //                                 "aria-valuemin='0' aria-valuemax='100' style='width:0%'/>" +
        //                             "</div>" +
        //                             "<p class='text-success'/>" +
        //                           "</div>";

        //         // Associate method title with description via BS3 collapsing
        //         var methodId = cellId + "-method-details";
        //         var buttonLabel = "...";
        //         var methodDesc = method.description.replace(/"/g, "'"); // double-quotes hurt markdown rendering
        //         var methodInfo = "<span class='kb-func-desc'>" +
        //                            "<h1 style='display:inline'><b>" + method.title + "</b></h1>" +
        //                            "<span class='pull-right kb-func-timestamp' id='last-run'></span>" +
        //                            "<button class='btn btn-default btn-xs' type='button' data-toggle='collapse'" +
        //                               " data-target='#" + methodId + "'>" + buttonLabel + "</button>" +
        //                             "<div><h2 class='collapse' id='" + methodId + "'>" +
        //                               methodDesc + "</h2></div>" +
        //                          "</span>";

        //         // Bringing it all together...
        //         cellContent = "<div class='panel kb-func-panel kb-cell-run' id='" + cellId + "'>" +
        //                           "<div class='panel-heading'>" +
        //                               methodInfo +
        //                           "</div>" +
        //                           "<div class='panel-body'>" +
        //                               inputDiv +
        //                           "</div>" +
        //                           "<div class='panel-footer' style='overflow:hidden'>" +
        //                               progressBar +
        //                               buttons +
        //                           "</div>" +
        //                       "</div>" +
        //                       "\n<script>" +
        //                       "$('#" + cellId + " > div > div#inputs')." + inputWidget + "({ method:'" +
        //                        this.safeJSONStringify(method) + "'});" +
        //                       "</script>";
        //         console.debug("created input cell '", methodDesc, "', id = ", cellId);
        //     }
        //     else {
        //         cellContent = "Error - the selected method is invalid.";
        //     }
        //     cell.set_text(cellContent);

        //     cell.rendered = false;
        //     cell.render();

        //     // restore the input widget's state.
        //     this.removeCellEditFunction(cell);
        //     this.bindActionButtons(cell);
        // },

        /**
         * A TEMPORARY FUNCTION that should refresh and update the given cell's metadata to the new(er) version,
         * if it needs to happen.
         * should be the structure:
         * {
         *     'kb-cell': {
         *         'type' : 'function_input' | 'function_output',
         *         'method' : object (if input cell),
         *         'widget' : <widget name>
         *         'widget_state' : [array of states]
         *     }
         * }
         */
        checkCellMetadata: function(cell) {
            if (cell.metadata[this.KB_CELL]) {
                // if that top-level one is a string, it'll probably be an output cell, so make it one.
                if (typeof cell.metadata[this.KB_CELL] === "string") {
                    var newMeta = {};
                    newMeta[this.KB_TYPE] = this.KB_OUTPUT_CELL;
                    newMeta['widget'] = undefined;
                    newMeta[this.KB_STATE] = [];
                    cell.metadata[this.KB_CELL] = newMeta;
                }
                else if (typeof cell.metadata[this.KB_CELL] === "object") {
                    // The "old" version (i.e. at the beginning of the workshop starting 1/6/2013)
                    // just needs to make sure the input cells have the widget state as an array.
                    // AND it should store the widget name, as found in the method, as a separate field.

                    if (cell.metadata[this.KB_CELL][this.KB_TYPE] === this.KB_FUNCTION_CELL) {
                        if (!cell.metadata[this.KB_CELL]['widget'])
                            cell.metadata[this.KB_CELL]['widget'] = cell.metadata[this.KB_CELL]['method'].properties.widgets.input || this.defaultInputWidget;
                        if (!cell.metadata[this.KB_CELL][this.KB_STATE]) {
                            cell.metadata[this.KB_CELL][this.KB_STATE] = [];
                            if (cell.metadata[this.KB_CELL]['input_state']) {
                                cell.metadata[this.KB_CELL][this.KB_STATE].unshift({ 'time': 0, 'state' : cell.metadata[this.KB_CELL]['input_state'] });
                            }
                        }
                        else if (Object.prototype.toString.call(cell.metadata[this.KB_CELL][this.KB_STATE]) !== '[object Array]') {
                            cell.metadata[this.KB_CELL][this.KB_STATE] = [ { 'time' : 0, 'state' : cell.metadata[this.KB_CELL][this.KB_STATE] } ];
                        }
                    }
                }
            }
        },

        /**
         * Escape chars like single quotes in descriptions and titles,
         * before rendering as a JSON string.
         *
         *
         *  THIS IS NOT SAFE BECAUSE THERE ARE HARD CODED KEYS THAT ARE CHECKED!!!! -mike
         *  It should be more safe now - **all** strings should have their quotes escaped before JSONifying them.
         *
         * @post This does not modify the input object.
         * @return {string} JSON string
         */
        safeJSONStringify: function(method) {
            var esc = function(s) {
                return s.replace(/'/g, "&apos;")
                        .replace(/"/g, "&quot;");
            };
            return JSON.stringify(method, function(key, value) {
                return (typeof(value) === 'string') ? esc(value) : value;
                // this seems not safe, since we can have many keys in the spec that are not these... -mike
                // return (typeof(value) == "string" &&
                //         (key == "description" || key == "title" || key=="header" || key=="tooltip" || key=="name" || key=="subtitle")) ?
                //     esc(value) : value;
            });
        },

        /**
         * Refreshes any function inputs to sync with workspace data.
         * Since this re-renders the cell, it must rebind all buttons, too.
         * Kind of annoying, but it should run quickly enough.
         *
         * Also checks to see if that cell has any parameter state associated
         * with it, and if so, sends that to the widget.
         * @private
         */
        refreshFunctionInputs: function(fullRender) {
            if (IPython && IPython.notebook) {
                var cells = IPython.notebook.get_cells();
                for (var i=0; i<cells.length; i++) {
                    var cell = cells[i];
                    if (this.isFunctionCell(cell)) {
                        var method = cell.metadata[this.KB_CELL].method;
                        // legacy cells.
                        if (method.properties) {
                            var inputWidget = method.properties.widgets.input || this.defaultInputWidget;

                            if (fullRender) {
                                cell.rendered = false;
                                cell.render();

                                this.loadRecentCellState(cell);
                                this.bindActionButtons(cell);
                            }
                            else {
                                $(cell.element).find("#inputs")[inputWidget]('refresh');
                            }
                        }
                        else {
                            $(cell.element).find("div[id^=kb-cell-]").kbaseNarrativeMethodCell('refresh');
                        }
                    }
                    else if (this.isAppCell(cell)) {
                        $(cell.element).find("div[id^=kb-cell-]").kbaseNarrativeAppCell('refresh');
                    }
                }
            }
        },

        /**
         * Checks if the given method object has a minimally valid structure.
         * Each method needs the following properties:
         * title - string, the title of the method (required non-empty)
         * service - string, the service where the method came from (required non-empty)
         * description - string, the description of the method
         * properties - object, contains parameters for the method
         * properties.parameters - object, essentially a list of parameters for the method
         *
         * @param {object} method - the method to validate
         * @private
         */
        validateMethod: function(method) {
            // if no title, return false
            if (!method.hasOwnProperty('title') || method.title.length == 0)
                return false;

            // if no service, return false
            if (!method.hasOwnProperty('service') || method.service.length == 0)
                return false;

            // if no properties, or it's not an object, return false
            if (!method.hasOwnProperty('properties') || typeof method.properties !== 'object')
                return false;

            if (!method.properties.hasOwnProperty('parameters') || typeof method.properties.parameters !== 'object')
                return false;

            return true;
        },

        /**
         * @method removeCellEditFunction
         * Removes the ability to edit a markdown cell by double-clicking or pressing Enter.
         * Handy for dealing with KBase function or output cells.
         * @param cell - the cell to modify.
         * @private
         */
        removeCellEditFunction: function(cell) {
            // remove its double-click and return functions. sneaky!
            $(cell.element).off('dblclick');
            $(cell.element).off('keydown');
        },

        /**
         * @method bindActionButtons
         * Binds the action (delete and run) buttons of a function cell.
         * This requires the cell to have {'kb-cell' : 'function'} in its metadata, otherwise it's ignored.
         * @param cell - the IPython Notebook cell with buttons to be bound.
         * @private
         */
        bindActionButtons: function(cell) {
            // get the cell.
            // look for the two buttons.
            // bind them to the right actions.
            if (this.isFunctionCell(cell)) {
                $(cell.element).find(".buttons [id*=delete]").off('click');
                $(cell.element).find(".buttons [id*=delete]").click(this.bindDeleteButton());
                $(cell.element).find(".buttons [id*=run]").off('click');
                $(cell.element).find(".buttons [id*=run]").click(this.bindRunButton());
            }
        },

        /**
         * Set narrative into read-only mode.
         */
        activateReadonlyMode: function() {
            var self = this;

            console.debug("activate read-only mode");
            // Hide delete and run buttons
            cells = IPython.notebook.get_cells();
            cells.forEach(function(cell) {
               ['delete', 'run'].forEach(function (e) {
                    $(this.element).find(".buttons [id*=" + e + "]").hide();
                }, cell);
            });

            // Delete left-side panel!
            $('#left-column').detach(); //hide();

            // Hide IPython toolbar
            $('#maintoolbar').hide();

            // Move content panels to the left
            $('#ipython-main-app').css({'left': '10px'});
            $('#menubar-container').css({'left': '10px'});

            // Disable text fields
            console.debug("readonly: Disable text fields");
            $(".cell input").attr('disabled', 'disabled');

            // Disable buttons
            console.debug("readonly: Disable internal buttons");
            $(".cell button").hide();  //attr('disabled', 'disabled');

            // Hide save/checkpoint status
            $('#autosave_status').text("(read-only)");
            $('#checkpoint_status').hide();

            var input_titles = [];

            // Remove h1 from input titles
            $('div.kb-func-desc h1').each(function(idx) {
                var title = $(this).text();
                var title_span = $('<span>' + title + '</span>');
                var desc = $(this).parent();
                desc.prepend(title_span);
                $(this).remove();
                input_titles.push([title, desc]);
                desc.prepend(
                    '<span class="label label-info" style="margin-right: 8px;" ' +
                    ' id="kb-input-' + idx + '">' +
                    'Input' +
                    '</span>');
            });

            // Add label before input titles
            // $('.kb-func-panel .panel-heading .kb-func-desc').prepend(
            //     '<span class="label label-info" style="margin-right: 8px;">' +
            //     ' id="kb-input-' + idx +
            //     'Input' +
            //     '</span>');

            // Remove trailing ' - Output' junk from output titles
            // and add label before them.
            // If a matching input title can be found, store in 'connectable'
            var matched_input = 0;
            var connectable = {};
            $('.kb-cell-output').each(function(idx) {
                var desc = $(this).find('.kb-out-desc');
                var title_full = desc.text();
                var otitle = title_full.replace(/\s*-\s*Output/,'');
                if (title_full != otitle) {
                    desc.text(otitle); // replace
                }
                var title_span = $('<span class="label label-primary" style="margin-right: 8px;"' +
                    ' id="kb-output-' + idx + '">' +
                'Output' +
                '</span>')
                desc.prepend(title_span);
                // Look for matching input
                for (var i=matched_input; i < input_titles.length; i++) {
                    var ititle = input_titles[i][0];
                    //console.debug('input title="'+ ititle + '" output title="' + otitle + '"');
                    if (ititle == otitle) {
                        matched_input = i + 1;
                        connectable[i] = idx;
                        break;
                    }
                }
            });

            // Add 'Copy' button after narrative title
            var narr_copy_id = "narr-copy";
            var button = $('<button type="button" ' +
                           'class="btn btn-success" ' +
                           'id="'  + narr_copy_id + '" ' +
                           'data-toggle="tooltip" ' +
                           'title="Copy this narrative to a workspace ' +
                           'where you can modify and run it" ' +
                           '>Copy</button>');
            button.css({'line-height': '1em',
                        'margin-top': '-15px',
                        'margin-left': '5em'});
            e = $('#menubar').append(button);
            this.bindCopyButton($('#' + narr_copy_id));

            this.connectable = connectable;
        },

        /**
         * Connect two elements with a 'line'.
         *
         * Args:
         *   p - Top element
         *   q - Bottom element
         *   g - Left gutter width, in pixels
         *   w - Line width, in pixels
         *   container - Containing element for line
         *   line_class - CSS class for line elements (for coloring)
         */
        connect: function(p, q, g, w, container, line_class) {
            var pc = $(p).position();
            var qc = $(q).position();
            console.debug("connect ", pc, " to ", qc);
            var py = pc.top + (p.height() - w) / 2.0;
            var qy = qc.top + (q.height() - w) / 2.0;
            var coords = [{
                left: g,
                top: py,
                width: (pc.left - g),
                height: w
            }, {
                left: g,
                top: py + w,
                width: w,
                height: qy - py
            }, {
                left: g,
                top: qy,
                width: qc.left - g,
                height: w
            }];
            for (var i = 0; i < 3; i += 1) {
                var $elt = $('<div>').addClass(line_class).attr('id', 'kb-line' + i);
                $elt.css(coords[i]);
                container.append($elt);
            }
        },

        /**
         * Activate "normal" R/W mode
         */
         activateReadwriteMode: function() {
            console.debug("activate read-write mode");
         },

        /**
         * Bind the 'Copy narrative' button to
         * a function that copies the narrative.
         */
        bindCopyButton: function(element) {
            var oid = this.getNarrId();
            element.click(function() {
                console.debug("Make a copy for narr. obj = ", oid);
                // XXX: Complete and utter FAKE!
                // XXX: Just jump to a hardcoded read/write narrative based on the input one
                var copy_id_map = {
                    'ws.2590.obj.8': 'ws.2615.obj.8', // comparative genomics
                };
                var copy_id = copy_id_map[oid];
                if (copy_id !== undefined) {
                    // Open new narrative
                    var oldpath = window.location.pathname;
                    var parts = oldpath.split('/');
                    parts.pop(); // pop off old id
                    parts.push(copy_id); // add new one
                    var newpath = parts.join('/'); // rejoin as a path
                    var newurl = window.location.protocol + '//' + window.location.host + newpath;
                    console.debug("Moving to new URL: ", newurl);
                    window.location.replace(newurl);
                }
            });
            return;
        },

        /**
         * Object identifier of current narrative, extracted from page URL.
         */
         getNarrId: function() {
            return window.location.pathname.split('/').pop();
         },

        /**
         * Once the notebook is loaded, all code cells with generated code
         * (e.g. the placeholder, provenance cells) should be hidden.
         * At least for now.
         * So this function does that.
         * @private
         */
        hideGeneratedCodeCells: function() {
            var cells = IPython.notebook.get_cells();
            for (var i=0; i<cells.length; i++) {
                var cell = cells[i];
                if (this.isFunctionCodeCell(cell))
                    cell.element.css('display', 'none');
            }
        },

        // Function input cell type.
        isFunctionCell: function(cell) {
            return this.checkCellType(cell, this.KB_FUNCTION_CELL);
        },

        isAppCell: function(cell) {
            return this.checkCellType(cell, this.KB_APP_CELL);
        },

        setFunctionCell: function(cell, method) {
            var cellInfo = {};
            cellInfo[this.KB_TYPE] = this.KB_FUNCTION_CELL;
            cellInfo['method'] = method;
            cellInfo[this.KB_STATE] = [];
            cellInfo['widget'] = method.properties.widgets.input || this.defaultInputWidget;

            cell.metadata[this.KB_CELL] = cellInfo;
        },

        setMethodCell: function(cell, method) {
            var cellInfo = {};
            cellInfo[this.KB_TYPE] = this.KB_FUNCTION_CELL;
            cellInfo['method'] = method;
            cellInfo[this.KB_STATE] = [];
            cellInfo['widget'] = method.widgets.input || this.defaultInputWidget;

            cell.metadata[this.KB_CELL] = cellInfo;
        },

        setAppCell: function(cell, appInfo) {
            var cellInfo = {};
            cellInfo[this.KB_TYPE] = this.KB_APP_CELL;
            cellInfo['app'] = appInfo;
            cellInfo[this.KB_STATE] = [];

            cell.metadata[this.KB_CELL] = cellInfo;
        },

        // Function output cell type.
        isOutputCell: function(cell) {
            return this.checkCellType(cell, this.KB_OUTPUT_CELL);
        },

        setOutputCell: function(cell, widget) {
            var cellInfo = {};
            cellInfo[this.KB_TYPE] = this.KB_OUTPUT_CELL;
            cellInfo[this.KB_STATE] = [];
            cellInfo['widget'] = widget;

            cell.metadata[this.KB_CELL] = cellInfo;
        },

        setErrorCell: function(cell) {
            var cellInfo = {};
            cellInfo[this.KB_TYPE] = this.KB_ERROR_CELL;
            cell.metadata[this.KB_CELL] = cellInfo;
        },

        // Backup function code cell type (usually hidden through css... I still think this is superfluous)
        isFunctionCodeCell: function(cell) {
            return this.checkCellType(cell, this.KB_CODE_CELL);
        },

        setCodeCell: function(cell) {
            var cellInfo = {};
            cellInfo[this.KB_TYPE] = this.KB_CODE_CELL;
            cell.metadata[this.KB_CELL] = cellInfo;
        },

        checkCellType: function(cell, type) {
            return cell.metadata &&
                   cell.metadata[this.KB_CELL] &&
                   cell.metadata[this.KB_CELL][this.KB_TYPE] === type;
        },

        getMethodCellDependencies: function(cell, paramValues) {
            if (!this.isFunctionCell(cell))
                return;
            paramValues = $(cell.element).find('div[id^=kb-cell-]').kbaseNarrativeMethodCell('getParameters') || [];
            var params = cell.metadata[this.KB_CELL].method.parameters;

            var data = [];

            // paramValues and method.properties.parameters should be parallel, but check anyway.
            // assume that those elements between the parameters list and method's params that
            var cellDeps = [];
            var types = [];
            var typesHash = {};

            // note - it's method.parameters.param##
            for (var i=0; i<params.length; i++) {
                var p = params[i];

                /* fields: default, description, type, ui_name */
                if (p.text_options) {
                    if (p.text_options.valid_ws_types) {
                        var type = p.text_options.valid_ws_types[0];
                        if (type && !this.ignoredDataTypes[type.toLowerCase()] && paramValues[i]) {
                            cellDeps.push([type, paramValues[i]]);
                            if (!typesHash[type]) {
                                typesHash[type] = 1;
                                types.push(type);
                            }
                        }
                    }
                }

            }

            // look up the deps in the data panel.
            // Cheating for now - needs to be a synchronous call, though! There's no reason for it not to be, if the data's already loaded!
            var objList = $('#kb-ws').kbaseNarrativeDataPanel('getLoadedData', types);

            // Man, now what. N^2 searching? What a drag.
            for (var i=0; i<cellDeps.length; i++) {
                var type = cellDeps[i][0];
                var found = false;
                if (objList[type] && objList[type].length > 0) {
                    for (var j=0; j<objList[type].length; j++) {
                        if (objList[type][j][1] === cellDeps[i][1]) {
                            data.push(objList[type][j][6] + '/' + objList[type][j][0] + '/' + objList[type][j][4]);
                            found = true;
                            break;
                        }
                    }
                }
            }
            return data;

        },

        /**
         * @method
         * Returns a list of Workspace object dependencies for a single cell.
         * These dependencies are returned as workspace object references of the format:
         * X/Y/Z
         * X = workspace number
         * Y = object number
         * Z = version number
         * @private
         */
        getCellDependencies: function(cell, paramValues) {
            if (!this.isFunctionCell(cell))
                return;

            var data = [];
            var target = '#inputs';
            // get a 'handle' (really just the invocable name) of the input widget
            var inputWidget = cell.metadata[this.KB_CELL].method.properties.widgets.input || this.defaultInputWidget;
            var params = cell.metadata[this.KB_CELL]['method'].properties.parameters;

            if (!paramValues) {
                paramValues = $(cell.element).find('#inputs')[inputWidget]('getParameters') || [];
            }

            // paramValues and method.properties.parameters should be parallel, but check anyway.
            // assume that those elements between the parameters list and method's params that
            var cellDeps = [];
            var types = [];
            var typesHash = {};

            // note - it's method.parameters.param##
            for (var i=0; i<Object.keys(params).length; i++) {
                var pid = 'param' + i;
                var p = params[pid];  // this is the param object itself.

                /* fields: default, description, type, ui_name */
                var type = p.type;
                if (!this.ignoredDataTypes[type.toLowerCase()] && paramValues[i]) {
                    cellDeps.push([type, paramValues[i]]);
                    if (!typesHash[type]) {
                        typesHash[type] = 1;
                        types.push(type);
                    }
                }
            }

            // look up the deps in the data panel.
            // Cheating for now - needs to be a synchronous call, though! There's no reason for it not to be, if the data's already loaded!
            var objList = $('#kb-ws').kbaseNarrativeDataPanel('getLoadedData', types);

            // Man, now what. N^2 searching? What a drag.
            for (var i=0; i<cellDeps.length; i++) {
                var type = cellDeps[i][0];
                var found = false;
                if (objList[type] && objList[type].length > 0) {
                    for (var j=0; j<objList[type].length; j++) {
                        if (objList[type][j][1] === cellDeps[i][1]) {
                            data.push(objList[type][j][6] + '/' + objList[type][j][0] + '/' + objList[type][j][4]);
                            found = true;
                            break;
                        }
                    }
                }
            }
            return data;
        },

        /**
         * @method
         * @return a list containing all dependencies as WS references.
         * @public
         */
        getNarrativeDependencies: function() {
            var cells = IPython.notebook.get_cells();
            var deps = {};
            // For each cell in the Notebook
            $.each(cells, $.proxy(function(idx, cell) {
                // Get its dependencies (it'll skip non-input cells)
                if (this.isFunctionCell(cell)) {
                    var cellDeps = [];
                    if (cell.metadata[this.KB_CELL].method.properties) {
                        cellDeps = this.getCellDependencies(cell);
                    }
                    else {
                        cellDeps = this.getMethodCellDependencies(cell);
                    }
                    // Shove them in the Object as properties to uniquify them.
                    for (var i=0; i<cellDeps.length; i++) {
                        deps[cellDeps[i]] = 1;
                    }
                }
            }, this));
            // Return the final, unique list (cleaner than looping over every returned hit)
            return Object.keys(deps);
        },

        /**
         * @method
         * @private
         */
        updateNarrativeDependencies: function() {
            var deps = this.getNarrativeDependencies();
            IPython.notebook.metadata.data_dependencies = deps;
        },

        /**
         * Saves a cell's state into its metadata.
         * This includes marking that state with a timestamp.
         * We might need to add more stuff as well, but this is a start.
         * Mostly, it gathers the state from the cell's widget (if it has one) and puts it together
         * with the timestamp.
         * {
         *    state: <cell state>,
         *    time: <timestamp in ms since the epoch>,
         * }
         * This is prepended to the front - so the most recent state is the first element of the array.
         */
        saveCellState: function(cell) {
            // ignore it if it isn't a KBase cell with a widget state to save.
            if (!this.isFunctionCell(cell) && !this.isOutputCell(cell) && !this.isAppCell(cell))
                return;

            var target = 'div[id^=kb-cell-]';
            var widget;

            if (this.isFunctionCell(cell)) {
                var method = cell.metadata[this.KB_CELL].method;
                // older way
                if (method.properties) {
                    widget = cell.metadata[this.KB_CELL].method.properties.widgets.input || this.defaultInputWidget;
                    target = '#inputs';
                }
                else {
                    widget = 'kbaseNarrativeMethodCell';
                }
            }
            else if (this.isOutputCell(cell)) {
                // do output widget stuff.
                widget = 'kbaseNarrativeOutputCell';
            }
            else if (this.isAppCell(cell)) {
                widget = 'kbaseNarrativeAppCell';
            }

            try {
                var state;
                if (widget && $(cell.element).find(target)[widget](['prototype'])['getState']) {
                    // if that widget can save state, do it!
                    state = $(cell.element).find(target)[widget]('getState');
                }

                var timestamp = this.getTimestamp();
                cell.metadata[this.KB_CELL][this.KB_STATE].unshift({ 'time' : timestamp, 'state' : state });
                while (this.maxSavedStates && cell.metadata[this.KB_CELL][this.KB_STATE].length > this.maxSavedStates) {
                    cell.metadata[this.KB_CELL][this.KB_STATE].pop();
                }
            }
            catch(error) {
                this.dbg('Unable to save state for cell:');
                this.dbg(cell);
            }
        },

        /**
         * Loads the most recent cell state (i.e. the top of the stack) of the given cell.
         * If that state is undefined (or if the state array is undefined or not an array), nothing is done.
         * @param {Object} cell - the cell to fetch the most recent cell state from
         * @returns the most recent cell state, in whatever form that state takes (scalar, array, object, etc.)
         * @private
         */
        loadRecentCellState: function(cell) {
            var state = this.getRecentState(cell);
            if (state) {
                var target = 'div[id^=kb-cell-]';
                var widget;

                // if it's labeled as a function cell do that.
                if (this.isFunctionCell(cell)) {
                    var method = cell.metadata[this.KB_CELL].method;
                    // older way
                    if (method.properties) {
                        widget = cell.metadata[this.KB_CELL].method.properties.widgets.input || this.defaultInputWidget;
                        target = '#inputs';
                    }
                    else {
                        widget = 'kbaseNarrativeMethodCell';
                    }
                }
                // if it's labeled as an output cell do that.
                else if (this.isOutputCell(cell)) {
                    // get the output cell's target and widget.
                    // eventually, we should probably just update the cells to the new version
                    // but this should sort out any backward compatibility issues for now.

                    var cellText = cell.get_text();
                    var capture = cellText.match(/<script>\$\([\"\'](.+)[\"\']\)\.(\w+)\(.+\);<\/script>/);
                    if (capture) {
                        target = capture[1];
                        widget = capture[2];
                    }

                    // // do output widget stuff.
                    // widget = 'kbaseNarrativeOutputCell';

                    // // if it's an older Narrative, then it might have metadata invoking a different widget.
                    // var metadata = cell.metadata[this.KB_CELL];
                    // if (metadata.widget)
                    //     widget = metadata.widget;
                }
                else if (this.isAppCell(cell)) {
                    widget = 'kbaseNarrativeAppCell';
                }
                // it might not be either! if we don't have both a target and widget, don't do anything!
                if (target && widget) {
                    try {
                        if ($(cell.element).find(target)[widget](['prototype'])['loadState']) {
                            $(cell.element).find(target)[widget]('loadState', state.state);
                            // later, do something with the timestamp.
                        }
                    } catch(err) {
                        // just ignore it and move on.
                        // this.dbg('Unable to load cell state! Ignoring the following cell:')
                        // this.dbg(cell);
                        // this.dbg(err);
                    }
                }
            }
        },

        /**
         * Returns the entire state array from the given cell.
         * If there is not an array present, or if the state object is not an array, then an empty list is returned.
         * @param {Object} cell - the cell to fetch the state array from
         * @returns {Array} an array of states for that cell
         * @private
         */
        getCellStateArray: function(cell) {
            if (this.isFunctionCell(cell) || this.isOutputCell(cell)) {
                var stateArr = cell.metadata[this.KB_CELL][this.KB_STATE];
                // if it's an array, return it.
                if (Object.prototype.toString.call(stateArr) === "[object Array]")
                    return stateArr;
            }
            // if the cell doesn't have a state array, or if it's NOT an array, return the empty array.
            return [];
        },

        /**
         * Saves the state of all cells into their respective arrays.
         * @public
         */
        saveAllCellStates: function() {
            var cells = IPython.notebook.get_cells();
            $.each(cells, $.proxy(function(idx, cell) {
                this.saveCellState(cell);
            }, this));
        },

        /**
         * Loads the most recently saved state into all cells.
         * @public
         */
        loadAllRecentCellStates: function() {
            var cells = IPython.notebook.get_cells();
            $.each(cells, $.proxy(function(idx, cell) {
                this.loadRecentCellState(cell);
            }, this));
        },

        /**
         * Fetches the most recent cell state. If the cell state is an array, it gets the first element,
         * if it's NOT an array, it just returns that state.
         * This *should* make things still functional for the older (non-array-based) stateful cells.
         * XXX: eventually update this to just array, once we're out of dev-panic-mode and closer to production.
         */
        getRecentState: function(cell) {
            var state;
            if (this.isFunctionCell(cell) || this.isOutputCell(cell) || this.isAppCell(cell)) {
                var stateList = cell.metadata[this.KB_CELL][this.KB_STATE];
                if (Object.prototype.toString.call(stateList) === "[object Array]")
                    state = stateList[0];
                else
                    state = stateList;
            }
            return state;
        },

        /**
         * @method bindRunButton
         * @private
         */
        bindRunButton: function() {
            var self = this;
            return (
                function(event) {
                    event.preventDefault();
                    // get the cell
                    var cell = IPython.notebook.get_selected_cell();

                    // get a 'handle' (really just the invocable name) of the input widget
                    var inputWidget = cell.metadata[self.KB_CELL].method.properties.widgets.input || self.defaultInputWidget;

                    // get the list of parameters and save the state in the cell's metadata
                    var paramList = $(cell.element).find("#inputs")[inputWidget]('getParameters');
                    self.saveCellState(cell);
                    self.updateNarrativeDependencies();

                    // var state = $(cell.element).find("#inputs")[inputWidget]('getState');
                    // cell.metadata[self.KB_CELL][self.KB_STATE] = state;

                    // Run the method.
                    var method = cell.metadata[self.KB_CELL].method;
                    self.runCell()(cell, method.service, method.title, paramList);
                    $(cell.element).find("#last-run").html("Last run: " + self.readableTimestamp(self.getTimestamp()));
                }
            );
        },

        /**
         * @method deleteCell
         * @private
         */
        deleteCell: function(index) {
            if (index !== undefined && index !== null) {
                var cell = IPython.notebook.get_cell(index);
                if (cell) {
                    // if it's a kbase method or app cell, trigger a popup
                    if (cell.metadata[this.KB_CELL]) {
                        widget = null; // default is app cell
                        var state = 'input'; // default is input... also doubles as a proxy for output cells
                        if (this.isFunctionCell(cell))
                            widget = 'kbaseNarrativeMethodCell';
                        else if (this.isAppCell(cell))
                            widget = 'kbaseNarrativeAppCell';
                        if (widget)
                            state = $(cell.element).find('div[id^=kb-cell-]')[widget]('getRunningState');

                        if (state === 'input') {
                            IPython.notebook.delete_cell(index);
                            return;
                        }
                        else {
                            // if it's running, say so, and say it'll stop and delete the job
                            // if it's done, say it'll clear the associated job, but won't delete data
                            // if it's error, say it'll delete the assoc'd job

                            var stateWarning = 'Deleting this cell will also delete any associated job. ' +
                                               'Any generated data will be retained. Continue?';

                            this.showDeleteCellModal(index, cell, stateWarning);
                            // switch(state) {
                            //     case 'running':
                            //         // set some text
                            //         stateWarning = 'This cell appears to have a running job associated with it. ' +
                            //                        'Deleting this cell will also stop and delete the running job. ' +
                            //                        'Any generated data will not be deleted. Continue?';
                            //         break;
                            //     case 'error':
                            //         // set some text
                            //         stateWarning = 'This cell appears to have produced an error while running. ' +
                            //                        'Deleting this cell will also stop and delete the associated job. ' +
                            //                        'Any generated data will be maintained. Continue?';
                            //         break;
                            //     case 'done':
                            //         // set some text
                            //         stateWarning = 'This cell has finished running but may have a job still associated with it. ' +
                            //                        'Deleting this cell will also delete that job, but not any generated data. ' +
                            //                        'Continue?';
                            //         break;
                            //     default:
                            //         // set no text
                            //         stateWarning = 'Deleting this cell will also delete any associated job. Any generated data will be retained. Continue?';
                            //         break;
                            // }
                        }
                    }
                    else {
                        IPython.notebook.delete_cell(index);
                    }
                }
            }
        },

        /**
         * @method bindDeleteButton
         * @private
         */
        bindDeleteButton: function() {
            var self = this;
            return(
                function(event) {
                    event.preventDefault();
                    var idx = IPython.notebook.get_selected_index();
                    IPython.notebook.delete_cell(idx);
                }
            );
        },

        /**
         * @method rebindActionButtons
         * Rebinds all the run buttons to their original function.
         * This iterates over all cells, looking for a 'kb-cell' field in its metadata.
         * If it finds it, it removes the double-click and keyboard-enter abilities from the cell.
         * If that 'kb-cell' field === 'function', it rebinds the delete and run buttons as well.
         *
         * @public
         */
        rebindActionButtons: function() {
            if (!(IPython && IPython.notebook))
                return;

            // Rewrite the following to iterate using the IPython cell
            // based methods instead of DOM objects

            var cells = IPython.notebook.get_cells();

            // not using $.each because its namespacing kinda screws things up.
            for (var i=0; i<cells.length; i++) {
                var cell = cells[i];
                var cellType = cell.metadata[this.KB_CELL];
                if (cellType) {
                    this.removeCellEditFunction(cell);
                    if (this.isFunctionCell(cell)) {
                        // added to only update the built-in non-widgetized function cells
                        if (cell.metadata[this.KB_CELL].method.properties) { // cheat to see if it's an old one!
                            this.bindActionButtons(cell);
                        }
                    }
                }
            }
        },

        /**
         * Run a function cell
         * The cell should contain all the information it needs to run.
         *
         * @param {Object} cell - the cell that needs to be run
         * @param {}
         * @private
         */
        runCell: function() {
            var self = this;
            return function(cell, service, method, params) {
                var nb = IPython.notebook;
                var currentIndex = nb.get_selected_index();

                var callbacks = {
                    'execute_reply' : function(content) { self.handleExecuteReply(cell, content); },
                    'output' : function(msgType, content) { self.handleOutput(cell, msgType, content); },
                    'clear_output' : function(content) { self.handleClearOutput(cell, content); },
                    'set_next_input' : function(text) { self.handleSetNextInput(cell, content); },
                    'input_request' : function(content) { self.handleInputRequest(cell, content); },
                };

                // ignore making code cells for now.
                // var codeCell = nb.insert_cell_below('code', currentIndex);
                // self.setCodeCell(codeCell);
                // codeCell.element.css('display', 'none');

                var code = self.buildRunCommand(service, method, params);
                // codeCell.set_text(code);
                // codeCell.output_area.clear_output(true, true, true);
                // codeCell.set_input_prompt('*');

                $(cell.element).find('#kb-func-progress').css({'display': 'block'});
                nb.kernel.execute(code, callbacks, {silent: true});
            };
        },

        buildGenericRunCommand: function(data) {
            var methodJSON = this.safeJSONStringify(data.method);
            var paramsJSON = this.safeJSONStringify(data.parameters);

            return "import biokbase.narrative.common.service as Service\n" +
                   "method = Service.get_service('generic_service').get_method('method_call')\n" +
                   "method('" + methodJSON + "', '" + paramsJSON + "')";
        },

        /**
         * Stitches together the command needed to run a method in the IPython kernel.
         * It is assumed that params is a list, with all values in the right order.
         * @param {String} service - the registered service name
         * @param {String} method - the registered method name
         * @param {Array} params - a list of parameter values
         * @returns {String} the constructed IPython kernel command
         * @private
         */
        buildRunCommand: function(service, method, params) {
            // very nice quote-escaper found here:
            // http://stackoverflow.com/questions/770523/escaping-strings-in-javascript
            // and
            // http://phpjs.org/functions/addslashes/
            var addSlashes = function(str) {
                return (str + '').replace(/[\\"']/g, '\\$&').replace(/\u0000/g, '\\0');
            };

            var escService = addSlashes(service);
            var escMethod = addSlashes(method);
            var cmd = "import biokbase.narrative.common.service as Service\n" +
                      "method = Service.get_service('" + escService + "').get_method('" + escMethod + "')\n";

            var paramList = params.map(
                function(p) {
                    return "'" + addSlashes(p) + "'";
                }
            );
            cmd += "method(" + paramList + ")";

            return cmd;
        },

        /**
         * Make JS dict into Python dict (string)
         */
         _pythonDict: function(data) {
            var dict = "{";
            $.each(data, function(key, value) {
                dict += "'" + key + "': ";
                // XXX: assume either more maps or simple type
                var vtype = typeof value;
                switch(vtype) {
                    case "boolean":
                        if (value)
                            dict += "True";
                        else
                            dict += "False";
                        break;
                    case "number":
                        dict += value;
                        break;
                    case "string":
                        dict += "'" + value + "'";
                        break;
                    case "undefined":
                        dict += "None";
                        break;
                    case "object":
                        dict += this._pythonDict(value);
                        break;
                    default:
                        console.error("Cannot convert to Python:", vtype);
                }
                dict += ", "
            });
            return dict + "}";
         },

        /* ------------------------------------------------------
         * Functions to handle running code.
         */
        /**
         * @method _handle_execute_reply
         * @private
         */
        handleExecuteReply: function (cell, content) {
            // this.dbg('[handleExecuteReply]');
            // // this.dbg(content);

            // this.dbg(cell);
            /* This catches and displays any errors that don't get piped through
             * the back-end service.py mechanism.
             * Any code that makes it that far gets reported through the output
             * mechanism and ends here with an 'ok' message.
             */
            if (content.status === 'error') {
                var errorBlob = {
                    msg : content.evalue,
                    type : content.ename,
                };

                if (cell && cell.metadata && cell.metadata['kb-cell'] &&
                    cell.metadata['kb-cell'].method)
                    errorBlob.method_name = cell.metadata['kb-cell'].method.title;

                var removeVt = function(line) {
                    return line.replace(/\[\d+(;\d+)?m/g, '');
                };

                var errTb = content.traceback.map(function(line) {
                    return {
                        filename: null,
                        function: null,
                        line: null,
                        text: removeVt(line)
                    };
                });

                errorBlob.traceback = errTb;
                this.createOutputCell(cell, '{"error" :' + JSON.stringify(errorBlob) + '}', true);

            }
            this.showCellProgress(cell, "DONE", 0, 0);
            //this.set_input_prompt(content.execution_count);
            $([IPython.events]).trigger('set_dirty.Notebook', {value: true});
        },
        /**
         * @method _handle_set_next_input
         * @private
         */
        handleSetNextInput: function (cell, text) {
            var data = {'cell': this, 'text': text}
            $([IPython.events]).trigger('set_next_input.Notebook', data);
        },
        /**
         * @method _handle_input_request
         * @private
         */
        handleInputRequest: function (cell, content) {
            this.dbg("handle input request called");
            return;
            //this.output_area.append_raw_input(content);
        },
        /**
         * @method _handle_clear_output
         * @private
         */
        handleClearOutput: function (cell, content) {
            this.dbg("handle clear output called");
            return;
            //this.clear_output(content.stdout, content.stderr, content.other);
        },

        /**
         * @method _handle_output
         */
        handleOutput: function (cell, msgType, content, showOutput) {
            // copied from outputarea.js
            var buffer = "";
            if (msgType === "stream") {
                buffer += content.data;
                var lines = buffer.split("\n");
                var offs = 0,
                    done = false,
                    self = this,
                    result = "";

                $.each(lines, function(index, line) {
                    if (!done) {
                        if (line.length == 0) {
                            offs += 1; // blank line, move offset
                        }
                        else {
                            // look for @@S, @@P, @@D, @@G, @@J, @@E, or @@A
                            var matches = line.match(/^@@([ADEGJSP])(.*)/);
                            if (matches) { // if we got one
                                switch(matches[1]) {
                                    case 'S': // Start running
                                        // if we're starting, init the progress bar.
                                        break;

                                    case 'D': // Done running
                                        // were done, so hide the progress bar (wait like a second or two?)
                                        self.resetProgress(cell);
                                        break;

                                    case 'P': // Progress step
                                        var progressInfo = matches[2].split(',');
                                        if (progressInfo.length == 3) {
                                            self.showCellProgress(cell, progressInfo[0], progressInfo[1], progressInfo[2]);
                                            offs += line.length;
                                            if (index < lines.length - 1)
                                                offs += 1;
                                        }
                                        else
                                            done = true;
                                        break;

                                    case 'E': // Error while running
                                        var errorJson = matches[2];
                                        errorJson = errorJson.replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/\$/g, "&#36;");
                                        self.createOutputCell(cell, '{"error" :' + errorJson + '}', true);
                                        break;

                                    case 'G': // debuG message
                                        var debug = matches[2];
                                        self.dbg("[KERNEL] " + debug);
                                        break;

                                    case 'J': // Job id register
                                        var jobId = matches[2];
                                        self.dbg("[JOB ID] " + jobId);
                                        self.registerJobId(jobId, cell);
                                        break;

                                    case 'A': // App id register
                                        var appId = matches[2];
                                        self.dbg("[APP ID] " + appId);
                                        self.registerJobId(appId, cell);
                                        break;

                                    default:
                                        // by default just dump it to the console
                                        self.dbg("[UNKNOWN TAG] " + line);
                                        break;
                                }
                                return;
                            }
                            // No progress marker on non-empty line => treat as final output of program.
                            else {
                                result += line;
                                // all but the last line should have \n appended
                                if (index < lines.length - 1) {
                                    result += "\n";
                                }
                            }
                        }
                    }
                });
                if (offs > 0) {
                    // if we found progress markers, trim processed prefix from buffer
                    buffer = buffer.substr(offs, buffer.length - offs);
                }
                if (result.length > 0) {
                    if (showOutput === "app" && window.kbconfig && window.kbconfig.mode === "debug") {
                        if (!cell.metadata[this.KB_CELL].stackTrace)
                            cell.metadata[this.KB_CELL].stackTrace = [];
                        // try to parse the result as JSON - if so, then it's a final result and we just
                        // need the 'data' field
                        try {
                            var data = JSON.parse(result);
                            if (data && typeof data === 'object')
                                cell.metadata[this.KB_CELL].stackTrace.push(data.data);
                        }
                        catch (err) {
                            // it's NOT JSON, and we should just append it.
                            cell.metadata[this.KB_CELL].stackTrace.push(result);
                        }
                    }
                    else if (showOutput)
                        this.createOutputCell(cell, result);
                }
            }
        },

        /**
         * @method
         * Registers the given job id with the Narrative.
         * This stores the job id in the Narrative's metadata.
         * XXX: Should this trigger a save?
         */
        registerJobId: function(jobId, sourceCell) {
            // This is possibly the ugliest hack here. In the future, all cells should actually know their
            // fancy UUIDs. But that *might* be backwards incompatible with existing narratives that we want
            // to show off.
            //
            // Really, all cells should be "NarrativeInput" or "NarrativeOutput" widgets that wrap their actual
            // contents, and we can poke those widgets for their IDs. But that's later.
            var txt = sourceCell.get_text();
            var cellId = 'unknown';

            if (txt)
                cellId = $('<div>').append(txt).find('div[id^=kb-cell-]').attr('id');

            var jobInfo = {
                id : jobId,
                source : cellId,
                target : '',
                timestamp : new Date().toISOString()
            };

            if (this.isAppCell(sourceCell))
                this.trigger('registerApp.Narrative', jobInfo);
            else
                this.trigger('registerMethod.Narrative', jobInfo);
        },


        createViewerCell: function(cellIndex, data, widget) {
            var cell = this.addOutputCell(cellIndex, widget);
            var title = "Data Viewer";
            var type = "viewer";

            var uuid = this.uuidgen();
            var outCellId = 'kb-cell-out-' + uuid;
            var outputData = '{"data":' + this.safeJSONStringify(data) + ', ' +
                               '"type":"' + type + '", ' +
                               '"widget":"' + widget + '", ' +
                               '"cellId":"' + outCellId + '", ' +
                               '"title":"' + title + '", ' +
                               '"time":' + this.getTimestamp() + '}';

            cellText = '<div id="' + outCellId + '"></div>\n' +
                       '<script>' +
                       '$("#' + outCellId + '").kbaseNarrativeOutputCell(' + outputData + ');' +
                       '</script>';
            cell.set_text(cellText);
            cell.rendered = false; // force a render
            cell.render();
        },

        /**
         * Result is an object with this structure:
         * cell = the invoking function cell.
         * result = the result data object from the Python call.
         * widget - the widget to use (if null, then use kbaseDefaultNarrativeOutput)
         * data - the object to be passed in to the widget
         * embed - if true, then embed the widget and render it.
         * Returns unique id (string) of output cell <div>
         */
        createOutputCell: function(cell, result, isError, widget) {
            if (typeof result === 'string' && !isError) {
                // try to parse it as JSON.
                // if we fail, then it's not something we can deal with and shouldn't
                // make an output cell from it.
                try {
                    result = JSON.parse(result);
                    if (!result || typeof result !== 'object' || result === null)
                        return;
                }
                catch (err) {
                    return;
                }
            }

            // If result.embed is false,
            // or if the result doesn't have any data to put into a widget,
            // don't make a widget! Assume that this will have thrown an error somewhere
            // along the way.
            //
            // Note that an empty object is not null! So if result.data = {}, it'll still do something.
            if (!isError && (!result.embed || result.data === null || result.data === undefined)) {
                //do something.
                console.error('Unable to create output cell from supplied data object');
                console.error(result);
                return;
            }

            var widget = this.defaultOutputWidget;
            var outputTitle = '';
            var outputType = 'method';
            var data = isError ? result : result.data;

            if (this.isFunctionCell(cell)) {
                /**
                 * 2 cases here:
                 * cell.metadata['kb-cell'].method exists:
                 * it either has widgets.output (new cell)
                 * or it doesn't, and that comes from result.widget (old cell)
                 *
                 * cell.metadata[kb-cell].app exists:
                 * use default output for now
                 */
                var method = cell.metadata[this.KB_CELL].method;
                widget = result.widget;
                if (!widget) {
                    if (method.widgets && method.widgets.output) {
                        widget = method.widgets.output;
                    }
                    else {
                        widget = this.defaultOutputWidget;
                    }
                }
                outputTitle = method.title;
                if (!outputTitle && method.info && method.info.name)
                    outputTitle = method.info.name;
            }
            else if (this.isAppCell(cell)) {
                var app = cell.metadata[this.KB_CELL].app;
                outputTitle = app.info.name || 'KBase App';
                outputType = 'app';
            }
            if (isError) {
                widget = this.errorWidget;
                outputType = 'error';
            }

            var outputCell = isError ? this.addErrorCell(IPython.notebook.find_cell_index(cell), widget) :
                                       this.addOutputCell(IPython.notebook.find_cell_index(cell), widget);

            var uuid = this.uuidgen();
            var outCellId = 'kb-cell-out-' + uuid;
            var outputData = '{"data":' + data + ', ' +
                               '"type":"' + outputType + '", ' +
                               '"widget":"' + widget + '", ' +
                               '"cellId":"' + outCellId + '", ' +
                               '"title":"' + outputTitle + '", ' +
                               '"time":' + this.getTimestamp() + '}';

            cellText = '<div id="' + outCellId + '"></div>\n' +
                       '<script>' +
                       '$("#' + outCellId + '").kbaseNarrativeOutputCell(' + outputData + ');' +
                       '</script>';
            outputCell.set_text(cellText);
            outputCell.rendered = false; // force a render
            outputCell.render();
            // If present, add list of "next steps"
            if (result.next_steps.apps || result.next_steps.methods) {
              var $body = $('#' + outCellId).find('.panel-body');
              this.showNextSteps({elt: $body, next_steps: result.next_steps});
            }
            this.resetProgress(cell);
            this.trigger('updateData.Narrative');
            return outCellId;
        },

        /**
        * Show a list of suggested 'next steps' after we have finished the run.
        * The input is an object of the form:
        *   { next_steps: value is exactly the same type of object,
        *                 returned by the `getfunctionSpecs.Narrative`
        *                 trigger in `kbaseNarrativeMethodPanel`.
        *     elt: Created <div> is added with .append()
        *   }
        * Returns the <div> that was populated.
        */
        showNextSteps: function(obj) {
          var $elt = obj.elt, next_steps = obj.next_steps;
          var $tgt = $('<div>').addClass('kb-app-next');
          var $title = $('<h3>').text('Suggested next steps:');
          $tgt.append($title);
          // init hide/unhide behavior
          $hide_btn = $('<span>').addClass('kb-app-next-hide').text('hide');
          $unhide_btn = $('<span>').addClass('kb-app-next-unhide')
                      .text('next steps').hide();
          $hide_btn.click(function() {                  // hide
            $title.hide(); $tgt.find('a').hide();
            $hide_btn.hide(); $unhide_btn.show(); });
          $unhide_btn.click(function() {                // unhide
            $title.show(); $tgt.find('a').show();
            $unhide_btn.hide(); $hide_btn.show(); });
          $tgt.append($hide_btn).append($unhide_btn);
          // add all the links to the next-step apps/methods
          var $apps = $('<div>'), comma = {v: ''}, self = this;
          // iterate over apps and methods in the result
          var has_both = next_steps.apps && next_steps.methods;
          _.each(['apps', 'methods'], function(mtype) {
            if (has_both) { /* XXX: prefix with (App) or something? */ }
            var specs = next_steps[mtype];
            // Iterate over all specs in app/method section
            _.each(_.values(specs), function(s) {
              var name = s.info.name; // readable name, displayed to user
              var href = $('<a>').attr({'href': 'javascript:;'})
                                 .text(comma.v + name);
              // insert app/method on click
              href.click(function() {
                self.trigger(mtype.slice(0, -1) + "Clicked.Narrative", s);
              });
              $apps.append(href);
              comma.v = ', ';
            });
          });
          $tgt.append($apps);
          $elt.append($tgt);
          return $tgt;
        },

        /**
         * @method resetProgress
         * @private
         * Resets the progress bar in the given cell to not show any progress or progress message.
         * @param cell - the IPython notebook cell to reset.
         */
        resetProgress: function(cell) {
            var $progressBar = $(cell.element).find("#kb-func-progress .kb-cell-progressbar .progress-bar");
            $progressBar.css('width', '0%');

            var $progressMsg = $(cell.element).find("#kb-func-progress .text-success");
            $progressMsg.text("");
        },

        /**
         * @method showCellProgress
         *
         * Shows current progress in a running IPython function.
         * @param cell - the cell being run
         * @param name - the text of the progress to set
         * @param done - the number of steps finished.
         * @param total - the total number of steps to go through.
         *
         * @private
         */
        showCellProgress: function(cell, name, done, total) {
            var percentDone = 0;

            var $progressBar = $(cell.element).find("#kb-func-progress .kb-cell-progressbar .progress-bar");
            var $progressMsg = $(cell.element).find("#kb-func-progress .text-success");
            if (name === 'DONE') {
                $progressMsg.text("Completed");
                percentDone = 100;
                $progressBar.css('width', '100%');
                $(cell.element).find("#kb-func-progress").fadeOut(1000, $.proxy(function() { this.resetProgress(cell); }, this));
            }
            else {
                $progressMsg.text("Step " + done + " / " + total + ": " + name);
                percentDone = (100 * done - 100) / total;
                $progressBar.css('width', percentDone + '%');
            }
        },

        /**
         * Add a new cell for output of the script.
         *
         * The cell is added below the cell in currentIndex. This position
         * should be set by the calling function to represent the position of
         * the calling function cell.
         *
         * @method _addOutputCell
         * @private
         * @return id of <div> inside cell where content can be placed
         */
        addOutputCell: function(currentIndex, widget) {
            var cell = IPython.notebook.insert_cell_below('markdown', currentIndex);
            cell.celltoolbar.hide();
            this.setOutputCell(cell, widget);
            this.removeCellEditFunction(cell);

            return cell;
        },

        addErrorCell: function(currentIndex) {
            var cell = IPython.notebook.insert_cell_below('markdown', currentIndex);
            cell.celltoolbar.hide();
            this.setErrorCell(cell);
            this.removeCellEditFunction(cell);
            return cell;
        },

        /** Not really used right now. */
        convert_mime_types: function (json, data) {
            if (data === undefined) {
                return json;
            }
            if (data['text/plain'] !== undefined) {
                json.text = data['text/plain'];
            }
            if (data['text/html'] !== undefined) {
                json.html = data['text/html'];
            }
            if (data['image/svg+xml'] !== undefined) {
                json.svg = data['image/svg+xml'];
            }
            if (data['image/png'] !== undefined) {
                json.png = data['image/png'];
            }
            if (data['image/jpeg'] !== undefined) {
                json.jpeg = data['image/jpeg'];
            }
            if (data['text/latex'] !== undefined) {
                json.latex = data['text/latex'];
            }
            if (data['application/json'] !== undefined) {
                json.json = data['application/json'];
            }
            if (data['application/javascript'] !== undefined) {
                json.javascript = data['application/javascript'];
            }
            return json;
        },

        /* ------------------------------------------------------ */
        /* Accessors */

        workspace : function(key, value) {
            return this._accessor('_workspace', key, value);
        },

        _accessor : function(name, key, value) {
            if (this.data(name) == undefined) {
                this.data(name, {});
            }

            var obj = this.data(name);

            if (arguments.length == 2) {
                obj[key] = value;
            }

            if (arguments.length > 0) {
                return obj[key];
            }
            else {
                return obj;
            }
        },

        /* ------------------------------------------------------ */

        /**
         * Render the widgets.
         *
         * @returns this
         */
        render: function() {
            var creator = IPython.notebook.metadata.creator;
            if (creator) {// insert agnosticism here
                $('.creator-stamp').text('Created by ' + creator);
            }

            this.rebindActionButtons();
            this.hideGeneratedCodeCells();
            var cells = IPython.notebook.get_cells();
            for (var i=0; i<cells.length; i++) {
                this.checkCellMetadata(cells[i]);
            }
            this.loadAllRecentCellStates();
            // Check for older version of data dependencies
            // update them if necessary.
            this.trigger('updateData.Narrative');

            return this;
        },

        /*
         * Show input/output cell connections.
         */
         show_connections: function() {
            var self = this;
            console.debug("show_connections.start");
            _.each(_.pairs(this.connectable), function(pair) {
                var e1 = $('#kb-input-' + pair[0]);
                var e2 = $('#kb-output-' + pair[1]);
                self.connect(e1, e2, 20, 2,
                    $('#notebook-container'), 'kb-line');
            });
            console.debug("show_connections.end");
        },

        /**
         * Log out from all the widgets.
         *
         * @param token
         * @returns this
         */
        loggedOut: function(token) {
            if (this.dataTableWidget)
                this.dataTableWidget.loggedOut(token);
            this.ws_client = null, this.ws_auth = null;
        },

        /**
         * Initialize the logger
         */
        initLogging: function(level) {
            Logger.useDefaults();
            Logger.setLevel(level);
        },
        /**
         * uuid generator
         *
         * @private
         */
        uuidgen: function() {
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
                var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);
                return v.toString(16);});
        },

        /**
         * Returns a timestamp in milliseconds since the epoch.
         * (This is a one-liner, but kept as a separate function in case our needs change.
         * Maybe we'll want to use UTC or whatever...)
         * @public
         */
        getTimestamp: function() {
            return new Date().getTime();
        },

        /**
         * Converts a timestamp to a simple string.
         * Do this American style - HH:MM:SS MM/DD/YYYY
         *
         * @param {string} timestamp - a timestamp in number of milliseconds since the epoch.
         * @return {string} a human readable timestamp
         */
        readableTimestamp: function(timestamp) {
            var format = function(x) {
                if (x < 10)
                    x = '0' + x;
                return x;
            };

            var d = new Date(timestamp);
            var hours = format(d.getHours());
            var minutes = format(d.getMinutes());
            var seconds = format(d.getSeconds());
            var month = d.getMonth()+1;
            var day = format(d.getDate());
            var year = d.getFullYear();

            return hours + ":" + minutes + ":" + seconds + ", " + month + "/" + day + "/" + year;
        },

        /**
         * @method
         * Scans through all cells and performs a version updating, if necessary.
         * Updates performed:
         * 1. kbaseNarrativeCell -> kbaseNarrativeMethodCell
         * 2. More to come!
         */
        scanAndUpdateCells: function() {
            var cells = IPython.notebook.get_cells();
            for (var i=0; i<cells.length; i++) {
                var cell = cells[i];
                if (this.isFunctionCell(cell)) {
                    var cellText = cell.get_text();
                    var matchArr = cellText.match(/(<script>\s*\$\(['"]\#(.+)['"]\)\.)kbaseNarrativeCell/);
                    if (matchArr && matchArr.length >= 2) {
                        cellText = cellText.replace(matchArr[0], matchArr[1] + 'kbaseNarrativeMethodCell');
                    }
                    cell.set_text(cellText);
                    cell.rendered = false;
                    cell.render();
                }
            }
        },

    });

})( jQuery );

/**
 * Base for our custom Narrative cells.
 *
 * @public
 */
(function($, undefined) {
    $.KBWidget({
        /* 
         * (required) Your widget should be named in CamelCase.
         */
        name: 'kbaseNarrativeCell',
        parent: 'kbaseWidget',
        version: '0.0.1',
        options: {
        },

        /**
         * Init cell.
         */
        init: function(options) {
            //console.debug("kbaseNarrativeCell.init");
            this._super(options);
        },
    });
})(jQuery);

/**
 * Narrative data cell.
 *
 * Uses kbaseNarrativeViewers.js to "view" itself.
 *
 * @public
 */

// Global singleton for viewers
kb_g_viewers = null;


/**
 * Get/store info on all viewers from method store.
 *
 * Parameters:
 *  mclient - Method store client
 */
var KBaseNarrativeViewers = function(mclient, done) {
    this.viewers = {};
    this.landing_page_urls = {};
    this.type_names = {};
    this.specs = {};
    this.method_ids = [];
    var self = this;
    // Get application types, and populate data structures
    mclient.list_categories({'load_methods': 1, 'load_apps': 0, 'load_types': 1},
        function(data) {
    		var methodInfo = data[1];
            var aTypes = data[3];
            _.each(aTypes, function(val, key) {
                if (val.loading_error) {
                    console.error("Error loading method [" + key + "]: " + val.loading_error);
                }
                else if (val.view_method_ids && val.view_method_ids.length > 0) {
                    //console.debug("adding view method[" + key + "]=", val);
                    var mid = val.view_method_ids[0];
                    if (!methodInfo[mid]) {
                    	console.log('Can\'t find method info for id: ' + mid);
                    } else if (methodInfo[mid].loading_error) {
                    	console.log('There is an error for method info with id [' + mid + ']: ' + methodInfo[mid].loading_error);
                    } else {
                    	self.viewers[key] = mid;
                    	self.landing_page_urls[key] = val.landing_page_url_prefix;
                    	self.type_names[key] = val.name;
                    	self.method_ids.push(mid);
                    }
                }
                else {
                    //console.warn("No output types for: " + key);
                }
            });
            // Get method specs from all method_ids associated with some type in the previous loop
            // and populate `specs` with the data.
            self.method_ids = _.uniq(self.method_ids);
            mclient.get_method_spec({'ids':self.method_ids},
                function(specs) {
                    _.each(specs, function(value, key) {
                        //console.debug("Set spec[" + value.info.id + "]");
                        self.specs[value.info.id] = value;
                    });
                    if (done) {
                        done();
                    }
                },
                function(error) {
                    console.error("get_method_spec:",error);
            });
    });
    return this;
};

// Methods
KBaseNarrativeViewers.prototype.create_viewer = function(elt, data_cell) {
    // Helper functions
    /** Get value of parameter in mapping. */
    var get_param_value = function(o, mapping) {
          var param = null;
          // Get input/output parameter value
          if (mapping.input_parameter) {
              param = o.name;
          }
          else if (mapping.constant_value) {
              param = mapping.constant_value;
          }
          else if (mapping.narrative_system_variable) {
              switch (mapping.narrative_system_variable) {
                  case 'workspace':
                      param = o.ws_name;
                      break;
                  default:
                      console.error('Method (' + method_id + ') spec: unknown narrative system variable=' + sysProp);
              }
          }
          return param;
    };
    /** Transform parameter according to transform given by mapping */
    var transform_param = function(o, mapping, param) {
          if (mapping.target_type_transform) {
          	switch (mapping.target_type_transform) {
              case 'list':
          		param = [param];
                  break;
              case 'ref':
          		param = o['ws_name'] + '/' + param;
                  break;
          	default:
                  param = null;
          	}
          }
          return param;
    };
    // Variables and main method
    var o = data_cell.obj_info;
    var method_id = this.viewers[o.bare_type];
    if (!method_id) {
        //console.debug("No viewer found for type=" + o.bare_type);
        return null;
    }
    var spec = this.specs[method_id];
	  var inputParamId = spec['parameters'][0]['id'];
	  var output = {};
    var mappings = spec.behavior.output_mapping;
    _.each(mappings, function(mapping) {
        // Get parameter value
        var param = get_param_value(o, mapping);
        if (param == null) {
            console.error('Unsupported output mapping structure:', mapping);
            return null;
        }
        // Get transformed parameter value
        param = transform_param(o, mapping, param);
        if (param == null) {
            console.error('Method (' + method_id + ') spec: bad transformation type=',
                          method.target_type_transform);
            return null;
        }
        // Get target property
        if (!mapping.target_property) {
            console.error('Method (' + method_id + ') spec: missing target property');
            return null;
        }
        // Set target property to transformed parameter value
        output[mapping.target_property] = param;
    });
    output.widget_title = this.type_names[o.bare_type];  //spec.info.name;
    output.landing_page_url_prefix = this.landing_page_urls[o.bare_type];
    var output_widget = spec.widgets.output;
    try {
      var w = elt[output_widget](output);
      return w;
    }
    catch(err){
      console.error("error making widget: " + output_widget);
    }
    // return elt[output_widget](output);
};

/**
 * Default viewer.
 *
 * Parameters:
 *    elt - jQuery element that the viewer should be attached to
 *    data_cell - The kbaseNarrativeDataCell widget with the data, etc.
 */
var KBaseNarrativeDefaultViewer = function(elt, data_cell) {
    var o = data_cell.obj_info;
    var md_desc = '';
    if (_.isEmpty(o.meta)) {
        md_desc += "No metadata";
    } else {
      md_desc += "Metadata\n";
      this.prev = false;
      _.each(_.pairs(o.meta), function(p) {
        if (this.prev) {
          md_desc += "\n";
        }
        md_desc += p[0] + ": " + p[1];
        this.prev = true;
      });
    }
    return elt.append($('<pre>').append(md_desc));
};

/**
 * NarrativeDataCell widget.
 *
 * This is the widget passed into
 * the viewer.
*/

(function($, undefined) {
    $.KBWidget({
        name: 'kbaseNarrativeDataCell',
        parent: 'kbaseNarrativeCell',
        version: '0.0.1',
        options: {
            info: null, // object info
            cell: null  // IPython cell
        },
        obj_info: null,
        // for 'method_store' service
        method_client: null,
        // IPython cell
        ip_cell: null,

        /**
         * Initialize
         */
        init: function(options) {
            //console.debug("kbaseNarrativeDataCell.init.start");
            this._super(options);
            this.obj_info = options.info;
            this.obj_info.bare_type = /[^-]*/.exec(this.obj_info.type);
            this.obj_info.simple_date = /[^+]*/.exec(this.obj_info.save_date);
            this.ip_cell = options.cell;
            this._initMethodStoreClient();
            if (kb_g_viewers == null) {
		// we have to wait until the type/method specs are loaded the first time
		var self = this;
		
		var done = function() {
		    //console.debug("kbaseNarrativeDataCell.init.done with load");
		    kb_g_viewers = this.all_viewers;
		    self.render(options.info);
		}
		this.all_viewers = new KBaseNarrativeViewers(this.method_client,done);
            } else {
		// if they are already loaded, we can just grab it and render
		this.all_viewers = kb_g_viewers;
		//console.debug("kbaseNarrativeDataCell.init.done");
		this.render(options.info);
	    }
            
            return this; 
        },

        _initMethodStoreClient: function() {
            if (this.method_client === null) {
              this.method_client = new NarrativeMethodStore(this._getMethodStoreURL());
            }
        },

        _getMethodStoreURL: function() {
            var methodStoreURL = null;
            if (window.kbconfig && window.kbconfig.urls) {
                methodStoreURL = window.kbconfig.urls.narrative_method_store;
            } else {
                methodStoreURL = 'http://dev19.berkeley.kbase.us/narrative_method_store';
            }
            return methodStoreURL;
        },

        /**
         * Instantiate viewer widget for a data object.
         *
         * @param object_info (object) Object with info about data item
         * @return Whatever the 'viewer' function returns.
         */
        render: function() {
            var $label = $('<span>').addClass('label label-info').append('Data');
            var baseClass = 'kb-cell-output';
            var panelClass = 'panel-default';
            var headerClass = 'kb-out-desc'; 

            var is_default = false; // default-viewer
            var self = this;
            var widgetTitleElem = self.$elem.closest('.kb-cell-output').find('.panel').find('.panel-heading').find('.kb-out-desc').find('b');
            var mainPanel = $('<div>');
            self.$elem.append(mainPanel);
            var $view = this.all_viewers.create_viewer(mainPanel, self);

            var landing_page_url_prefix = null;
            var type_tokens = self.obj_info.type.split('.')
            var type_module = type_tokens[0];
            var type = type_tokens[1].split('-')[0];
            var ws_landing_page_map = window.kbconfig.landing_page_map;
            if (ws_landing_page_map && ws_landing_page_map[type_module] && ws_landing_page_map[type_module][type]) {
            	landing_page_url_prefix = ws_landing_page_map[type_module][type];
            }
            var widget_title = '';
            if (_.isNull($view)) {
                KBaseNarrativeDefaultViewer(mainPanel, self);
                widget_title = type;
                is_default = true;
            }
            else {
                widget_title = $view.options.widget_title;
                if (!landing_page_url_prefix)
                	landing_page_url_prefix = $view.options.landing_page_url_prefix;
            }
            if (!landing_page_url_prefix)
            	landing_page_url_prefix = 'json';
            widgetTitleElem.empty();
            widgetTitleElem.append(widget_title);
            widgetTitleElem.append('&nbsp;<a href="'+self.shortMarkdownDesc(self.obj_info, 
            		landing_page_url_prefix)+'" target="_blank">'+self.obj_info.name+'</a>');
            // Return the rendered widget
            return this;
        },

        shortMarkdownDesc: function(o, landing_page_url_prefix) {
          var link = "https://"; // force https
          if (window.location.hostname == '0.0.0.0' ||
              window.location.hostname == '127.0.0.1') {
            link += "narrative-dev.kbase.us"; // for testing
          }
          else {
            link += window.location.host;
          }
          link += "/functional-site/#/" + landing_page_url_prefix + "/" + o.ws_name + "/" + o.name;
          return link;
        },

        /**
         * Converts a timestamp to a simple string.
         * Do this American style - HH:MM:SS MM/DD/YYYY
         *
         * @param {string} timestamp - a timestamp in number of milliseconds since the epoch.
         * @return {string} a human readable timestamp
         */
        readableTimestamp: function(timestamp) {
            var format = function(x) {
                if (x < 10)
                    x = '0' + x;
                return x;
            };

            var d = new Date(timestamp);
            var hours = format(d.getHours());
            var minutes = format(d.getMinutes());
            var seconds = format(d.getSeconds());
            var month = d.getMonth()+1;
            var day = format(d.getDate());
            var year = d.getFullYear();

            return hours + ":" + minutes + ":" + seconds + ", " + month + "/" + day + "/" + year;
        }

    })
})(jQuery);

/**
 * KBase preset wrapper for its cell menu.
 */
(function (IPython) {
    "use strict";

    var CellToolbar = IPython.CellToolbar;

    var $kbMenu = $('<span>');
    var makeKBaseMenu = function(div, cell) {
        $(div).kbaseNarrativeCellMenu();
    };

    CellToolbar.register_callback('kbase.menu', makeKBaseMenu);
    var kbasePreset = [];
    kbasePreset.push('kbase.menu');

    CellToolbar.register_preset('KBase', kbasePreset);
    console.log('KBase extension cell toolbar loaded.');
}(IPython));

/**
 * This is the entry point for the Narrative's front-end. It initializes
 * the login session, fires up the data and function widgets, and creates
 * the kbaseNarrativeWorkspace wrapper around the IPython notebook that
 * does fun things like manage widgets and cells and kernel events to talk to them.
 */
"use strict";

// Bind all page buttons right at startup.
(function() {
    $(document).on('workspaceIdQuery.Narrative', function(e, callback) {
        if (callback) {
            callback(workspaceId);
        }
    });

    // bind menubar buttons
    $('#kb-save-btn').click(function(e) {
        if (IPython && IPython.notebook) {
            var narrName = IPython.notebook.notebook_name;
            // we do not allow users to leave their narratives untitled
            if (narrName.trim().toLowerCase()==='untitled' || narrName.trim().length === 0) {
                IPython.save_widget.rename_notebook("Please name your Narrative before saving.", false);
            } else {
                IPython.notebook.save_checkpoint();
            }
        }
    });
    $('#kb-narr-name #name').click(function(e) {
        if (IPython && IPython.save_widget) {
            IPython.save_widget.rename_notebook("Rename your Narrative.", true);
            var narrName = IPython.notebook.notebook_name;
            // this code needs to move to the save widget since rename_notebook is async!!
            //$('#kb-narr-name #name').text(narrName);
        }
    });
    $('#kb-kernel-int-btn').click(function(e) {
        if (IPython && IPython.notebook && IPython.notebook.kernel) {
            IPython.notebook.kernel.interrupt();
        }
    });
    $('#kb-kernel-ref-btn').click(function(e) {
        if (IPython && IPython.notebook && IPython.notebook.kernel) {
            IPython.notebook.kernel.restart();
        }
    });
    $('#kb-del-btn').click(function(e) {
        if (IPython && IPython.notebook)
            IPython.notebook.delete_cell();
    });
    $('#kb-jira-btn').attr('href', window.kbconfig.urls.submit_jira_ticket + '%20' + window.kbconfig.version);
    $('#kb-status-btn').attr('href', window.kbconfig.urls.status_page);

    var $dataList = $('<div>');
    var $shareWidget = $dataList["kbaseNarrativeSharePanel"]({});
    $('#kb-share-btn').popover({
        html : true,
        placement : "bottom",
        //title: function() {
        //    return "Share this Narrative & Data";
        //},
        content: function() {
            // we do not allow users to leave thier narratives untitled
            if (IPython && IPython.notebook) {
                var narrName = IPython.notebook.notebook_name;
                if (narrName.trim().toLowerCase()==='untitled' || narrName.trim().length === 0) {
                    IPython.save_widget.rename_notebook("Your Narrative must be named before you can share it with others.", false);
                    return "<br><br>Please name your Narrative before sharing.<br><br>"
                }
            }

            //!! arg!! I have to refresh to get reattach the events, which are lost when
            //the popover is hidden!!!  makes it a little slower because we refetch permissions from ws each time
            $shareWidget.refresh();
            return $dataList;
        }
    });

    $('#kb-add-code-cell').click(function() { IPython.notebook.insert_cell_below('code'); })
    $('#kb-add-md-cell').click(function() { IPython.notebook.insert_cell_below('markdown'); })

})();

/**
 * Error logging for detectable failure conditions.
 * Logs go through the kernel and thus are sent to the
 * main KBase logging facility (Splunk, as of this writing).
 *
 * Usage:
 *    KBFail(<is_it_fatal>, "what you were doing", "what happened");
 * Returns: false if IPython not initialized yet, true otherwise
 */
var _kb_failed_once = false;
var KBFail = function(is_fatal, where, what) {
    if (!IPython || !IPython.notebook || !IPython.notebook.kernel) {
        return false;
    }
    var code = "";
    if (_kb_failed_once == false) {
        code += "from biokbase.narrative.common import kblogging\n";
        _kb_failed_once = true;
    }
    code += "kblogging.NarrativeUIError(";
    if (is_fatal) {
        code += "True,";
    }
    else {
        code += "False,";
    }
    if (where) {
        code += 'where="' + where + '"';
    }
    if (what) {
        if (where) { code += ", "; }
        code += 'what="' + what + '"';
    }
    code += ")\n";
    // Log the failure
    try {
        IPython.notebook.kernel.execute(code, null, {store_history: false});        
    }
    catch (err) {
        // wait half a second and try one more time.
        console.log(err);
        setTimeout( function() { IPython.notebook.kernel.execute(code, null, {store_history: false}); }, 500 );
    }    
    return true;
}
/**
 * Syntactic sugar for logging error vs. fatal error.
 *
 * Same as KBFail() with boolean flag replaced by different names
 * for the function.
 */
var KBError = function(where, what) {
  return KBFail(false, where, what);
}
var KBFatal = function(where, what) {
  return KBFail(true, where, what);
}

var Narrative = function() {
    this.narr_ws = null;
    this.readonly = false; /* whether whole narrative is read-only */
    this.authToken = null;
    this.versionCheckTime = 6000*60*1000;
    this.versionHtml = 'KBase Narrative<br>Alpha version';
    this.selectedCell = null;
    this.currentVersion = window.kbconfig.version;

    return this;
};

Narrative.prototype.showIPythonCellToolbar = function(cell) {
    if (this.selectedCell && cell != this.selectedCell)
        this.selectedCell.celltoolbar.hide();
    this.selectedCell = cell;
    // show the new one
    if (this.selectedCell && !this.selectedCell.metadata['kb-cell'])
        this.selectedCell.celltoolbar.show();
};

Narrative.prototype.registerEvents = function() {
    $([IPython.events]).on('status_idle.Kernel',function () {
        $("#kb-kernel-icon").removeClass().addClass('fa fa-circle-o');
    });

    $([IPython.events]).on('status_busy.Kernel',function () {
        $("#kb-kernel-icon").removeClass().addClass('fa fa-circle');
    });

    $([IPython.events]).on('select.Cell', $.proxy(function(event, data) {
        this.showIPythonCellToolbar(data.cell);
    }, this));

    $([IPython.events]).on('create.Cell', $.proxy(function(event, data) {
        this.showIPythonCellToolbar(data.cell);
    }, this));

    $([IPython.events]).on('delete.Cell', $.proxy(function(event, data) {
        this.showIPythonCellToolbar(IPython.notebook.get_selected_cell());
    }, this));
};

Narrative.prototype.initUpgradeDialog = function() {
    var $newVersion = $('<span>')
                      .append('<b>No new version</b>');  // init to the current version
    var $cancelBtn = $('<button type="button" data-dismiss="modal">')
                     .addClass('btn btn-default')
                     .append('Cancel');
    var $upgradeBtn = $('<button type="button" data-dismiss="modal">')
                      .addClass('btn btn-success')
                      .append('Update and Reload')
                      .click($.proxy(function(e) {
                          this.updateVersion();
                      }, this));
    var $upgradeModal = $('<div tabindex=-1 role="dialog" aria-hidden="true">')
                        .addClass('modal fade')
                        .append($('<div>')
                                .addClass('modal-dialog')
                                .append($('<div>')
                                    .addClass('modal-content')
                                    .append($('<div>')
                                            .addClass('modal-header')
                                            .append($('<h4>')
                                                    .addClass('modal-title')
                                                    .attr('id', 'kb-version-label')
                                                    .append('New Narrative Version available!')))
                                    .append($('<div>')
                                            .addClass('modal-body')
                                            .append($('<span>').append('Your current version of the Narrative is <b>' + this.currentVersion + '</b>. Version '))
                                            .append($newVersion)
                                            .append($('<span>').append(' is now available.<br><br>' + 
                                                                       'See <a href="' + window.kbconfig.release_notes + '" target="_blank">here</a> for current release notes.<br>' +
                                                                       'Click "Update and Reload" to reload with the latest version!<br><br>' + 
                                                                       '<b>Any unsaved data in any open Narrative in any window WILL BE LOST!</b>')))
                                    .append($('<div>')
                                            .addClass('modal-footer')
                                            .append($('<div>')
                                                    .append($cancelBtn)
                                                    .append($upgradeBtn)))));
    $('#kb-update-btn').click(function(event) {
        $upgradeModal.modal('show');
    });
    this.checkVersion($newVersion);
    // ONLY CHECK AT STARTUP FOR NOW.
    // setInterval(function() {
    //     self.checkVersion($newVersion);
    // }, this.versionCheckTime);
};

Narrative.prototype.checkVersion = function($newVersion) {
    // look up new version here.
    var self = this;
    $.ajax({
        url: window.kbconfig.urls.version_check,
        async: true,
        dataType: 'text',
        crossDomain: true,
        success: function(ver) {
            ver = $.parseJSON(ver);
            if (self.currentVersion !== ver.version) {
                $newVersion.empty().append('<b>' + ver.version + '</b>');
                $('#kb-update-btn').fadeIn('fast'); 
            }
        },
        fail: function(err) {
            console.log('err');
        }
    });
};

Narrative.prototype.initAboutDialog = function() {
    if (window.kbconfig &&
        window.kbconfig.name &&
        window.kbconfig.version) {
        var $versionDiv = $('<div>')
                          .append('<b>Version:</b> ' + window.kbconfig.version);
        if (window.kbconfig.git_commit_hash && window.kbconfig.git_commit_time)
            $versionDiv.append('<br><b>Git Commit:</b> ' + window.kbconfig.git_commit_hash + ' -- ' + window.kbconfig.git_commit_time);
        if (window.kbconfig.release_notes)
            $versionDiv.append('<br>View release notes on <a href="' + window.kbconfig.release_notes + '" target="_blank">Github</a>');

        if (window.kbconfig.urls) {
            var urlList = Object.keys(window.kbconfig.urls).sort();
            var $versionTable = $('<table>')
                                .addClass('table table-striped table-bordered');
            $.each(urlList,
                function(idx, val) {
                    var url = window.kbconfig.urls[val].toString();
                    // if url looks like a url (starts with http), include it.
                    // ignore job proxy and submit ticket
                    if (val === 'narrative_job_proxy' || val === 'submit_jira_ticket')
                        return;
                    if (url && url.toLowerCase().indexOf('http') == 0) {
                        var $testTarget = $('<td>');
                        $versionTable.append($('<tr>')
                                             .append($('<td>').append(val))
                                             .append($('<td>').append(url)));
                    }
                }
            );
            var $verAccordion = $('<div style="margin-top:15px">');
            $verAccordion.kbaseAccordion({
                elements: [{
                    title: 'KBase Service URLs',
                    body: $versionTable
                }]
            })
            $versionDiv.append($verAccordion);
        }
    }

    var $shutdownButton = $('<button>')
                          .attr({'type':'button', 'data-dismiss':'modal'})
                          .addClass('btn btn-danger')
                          .append('Okay. Shut it all down!')
                          .click($.proxy(function(e) {
                              this.updateVersion();
                          }, this));
    var $reallyShutdownPanel = $('<div style="margin-top:10px">')
                               .append('This will shutdown your Narrative session and close this window.<br><b>Any unsaved data in any open Narrative in any window WILL BE LOST!</b><br>')
                               .append($shutdownButton)
                               .hide();

    var $firstShutdownBtn = $('<button>')
                            .attr({'type':'button'})
                            .addClass('btn btn-danger')
                            .append('Shutdown')
                            .click(function(e) {
                                $reallyShutdownPanel.slideDown('fast');
                            });

    var $versionModal = $('<div tabindex=-1 role="dialog" aria-labelledby="kb-version-label" aria-hidden="true">')
                        .addClass('modal fade')
                        .append($('<div>')
                                .addClass('modal-dialog')
                                .append($('<div>')
                                    .addClass('modal-content')
                                    .append($('<div>')
                                            .addClass('modal-header')
                                            .append($('<h4>')
                                                    .addClass('modal-title')
                                                    .attr('id', 'kb-version-label')
                                                    .append('KBase Narrative Properties')))
                                    .append($('<div>')
                                            .addClass('modal-body')
                                            .append($versionDiv))
                                    .append($('<div>')
                                            .addClass('modal-footer')
                                            .append($('<div>')
                                                    .append($('<button type="button" data-dismiss="modal">')
                                                            .addClass('btn btn-default')
                                                            .append('Dismiss')
                                                            .click(function(e) {
                                                                $reallyShutdownPanel.hide();
                                                            }))
                                                    .append($firstShutdownBtn))
                                            .append($reallyShutdownPanel))));

    $('#kb-about-btn').click(function(event) {
        $versionModal.modal('show');
    });
    $('#notebook').append($versionModal);
};

Narrative.prototype.init = function() {
    this.registerEvents();
    this.initAboutDialog();
    this.initUpgradeDialog();

    $('[data-toggle="tooltip"]').tooltip()
    /*
     * Before we get everything loading, just grey out the whole %^! page
     */
    var $sidePanel = $('#kb-side-panel').kbaseNarrativeSidePanel({ autorender: false });

    /*
     * Once everything else is loaded and the Kernel is idle,
     * Go ahead and fill in the rest of the Javascript stuff.
     */
    $([IPython.events]).one('status_started.Kernel', function() {
        // NAR-271 - Firefox needs to be told where the top of the page is. :P
        window.scrollTo(0,0);
        
        IPython.notebook.set_autosave_interval(0);
        IPython.CellToolbar.activate_preset("KBase");

        var ws_name = null;
        if (IPython && IPython.notebook && IPython.notebook.metadata) {
            ws_name = IPython.notebook.metadata.ws_name;
            var narrname = IPython.notebook.notebook_name;
            var username = IPython.notebook.metadata.creator;
            $('#kb-narr-name #name').text(narrname);
            $('#kb-narr-creator').text(username);
            $('.kb-narr-namestamp').css({'display':'block'});

            var token = null;
            if (window.kb && window.kb.token)
                token = window.kb.token;

            $.ajax({
                type: 'GET',
                url: 'https://kbase.us/services/genome_comparison/users?usernames=' + username + '&token=' + token,
                dataType: 'json',
                crossDomain: true,
                success: function(data, res, jqXHR) {
                    if (username in data.data && data.data[username].fullName) {
                        var fullName = data.data[username].fullName;
                        $('#kb-narr-creator').text(fullName + ' (' + username + ')');
                    }
                }
            });

            // This puts the cell menu in the right place.
            $([IPython.events]).trigger('select.Cell', {cell: IPython.notebook.get_selected_cell()});
        }
        if (ws_name) {
            /* It's ON like DONKEY KONG! */
            $('a#workspace-link').attr('href', $('a#workspace-link').attr('href') + 'objects/' + ws_name);
            var narr_ws = $('#notebook_panel').kbaseNarrativeWorkspace({
                loadingImage: "/static/kbase/images/ajax-loader.gif",
                ws_id: IPython.notebook.metadata.ws_name
            });
            $sidePanel.render();
            $(document).trigger('setWorkspaceName.Narrative', {'wsId' : ws_name, 'narrController': narr_ws});
        }
        else {
            // ?
        }
    });
};

Narrative.prototype.updateVersion = function() {
    var user = $('#signin-button').kbaseLogin('session', 'user_id');
    var prom = $.ajax({
        contentType: 'application/json',
        url: '/narrative_shutdown/' + user,
        type: 'DELETE',
        crossDomain: true
    });
    prom.done(function(jqXHR, response, status) {
        setTimeout(function() { location.reload(true); }, 200);
    });
    prom.fail(function(jqXHR, response, error) {
        alert('Unable to update your Narrative session\nError: ' + jqXHR.status + ' ' + error);
    });
};
/**
 * A simple widget intended to format and display errors that come from
 * the narrative kernel (these are typically back-end errors that
 * occur while running the function). The cause of these errors will
 * probably be either errors with user inputs, or errors while 
 * communicating with the KBase API.
 *
 * @author Bill Riehl <wjriehl@lbl.gov>
 * @public
 */
(function($, undefined) {
    $.KBWidget({
        /* 
         * (required) Your widget should be named in CamelCase.
         */
        name: 'kbaseNarrativeError',

        /*
         * Extending kbaseAuthenticatedWidget lets you use auth tokens
         * semi-automatically, assuming the page this is used in fires
         * the loggedIn.kbase, loggedOut.kbase, and loggedInQuery events.
         * These are usually fired by the kbaseLogin widget.
         *
         * this.user_id() = the logged in user id
         * this.authToken() = the current authentication token
         */
        parent: 'kbaseWidget',

        /*
         * (optional) Widgets should be semantically versioned.
         * See http://semver.org
         */
        version: '1.0.0',

        /*
         * (optional) Widgets are implied to include an options structure.
         * It's useful to put default values here.
         */
        options: {
            error: {
                'msg' : 'An error occurred',
                'method_name' : 'No method',
                'type' : 'Error',
                'severity' : 'Catastrophic'
            },
        },

        /**
         * (required) This is the only required function for a KBase Widget.
         * @param {object} options - a structure containing the set of 
         * options to be passed to this widget.
         * @private
         */
        init: function(options) {
            this._super(options);

            return this.render();
        },

        render: function() {
            var addRow = function(name, value) {
                return "<tr><td><b>" + name + "</b></td><td>" + value + "</td></tr>";
            };

            // Shamelessly lifted from kbaseNarrativeWorkspace.
            // Thanks Dan!
            var esc = function(s) { 
                return s;
                // return s.replace(/'/g, "&apos;")
                //         .replace(/"/g, "&quot;")
                //         .replace(/</g, "&gt;")
                //         .replace(/>/g, "&lt;");
            };

            // Reformat a TB as a list
            var format_tb = function(err) {
                var s = "\n";
                var ind = ""; // keep in case change of mind
                if (err.traceback === undefined) {
                    s += "No traceback available.\n";
                }
                else if (err.traceback instanceof Array) {
                    s += "Traceback (most recent call last):\n";
                    var tb = err.traceback;
                    for (var i=0, ctr=0; i < tb.length; i++) {
                        var entry = tb[i];
                        if (entry.function == "__call__")
                            continue;  // ignore wrapper
                        ctr++;
                        var txt = "";
                        if (entry.function || entry.line) {
                            var txt = ctr + ") ";
                            txt += "in '" + entry.function + "' line " + entry.line + ": ";
                        }
                        txt += entry.text;
                        s += ind + txt + "\n";
                    }
                }
                else if (err.traceback instanceof Object) {
                    for (var i in err.traceback) {
                        s += JSON.stringify(err.traceback[i]);
                    }
                }
                else {
                    s += err.traceback;
                }
                return s;
            };

            var $errorHead = $('<div>')
                             .addClass('well well-sm')
                             .append('<b>An error occurred while running your function!</b>');

            var $errorTable = $('<table>')
                              .addClass('table table-bordered')
                              .css({'margin-right':'auto', 'margin-left':'auto'})
                              .append(addRow("Function", esc(this.options.error.method_name)))
                              .append(addRow("Error Type", esc(this.options.error.type)))
                              .append(addRow("Severity", esc(this.options.error.severity)));

            var $stackTraceAccordion = $('<div>');

            this.$elem.append($errorHead)
                      .append($errorTable)
                      .append($stackTraceAccordion);

            $stackTraceAccordion.kbaseAccordion(
                { 
                    elements: [
                        {
                            title: 'Detailed Error Message',
                            body: $('<pre>')
                                  .addClass('kb-err-msg')
                                  .append(esc(this.options.error.msg))
                                  .append(format_tb(this.options.error)),
                        }
                    ]
                }
            );

            return this;
        },
    });
})(jQuery);
/**
 * This is a simple template for building KBase Narrative Widgets.
 * KBase Widgets are based around the jQuery widget extension architecture,
 * and are also instantiated as such.
 *
 * Your widget will need (at minimum) a unique name, a parent to inherit 
 * from, a semantic version, an 'options' structure, and an init() function
 * that returns itself.
 *
 * Details are described below.
 *
 * Instantiating a widget is done using a code form like this:
 * $("#myElement").MyWidget({ option1: value1, option2:value2 });
 *
 * Instantiating this widget within the narrative just requires the output
 * of a function that is run in the IPython Kernel to output the widget and
 * the set of options it requires. Examples to follow.
 *
 * This version of the widget template includes authentication options for
 * free - you shouldn't need to handle passing in user ids or auth tokens.
 * These are referenced by the functions:
 * this.user_id();
 * and
 * this.authToken();
 *
 * @see kbaseAuthenticatedWidget.js
 * @public
 */
(function($, undefined) {
    $.KBWidget({
        /* 
         * (required) Your widget should be named in CamelCase.
         */
        name: 'kbaseDefaultNarrativeOutput',

        /*
         * Extending kbaseAuthenticatedWidget lets you use auth tokens
         * semi-automatically, assuming the page this is used in fires
         * the loggedIn.kbase, loggedOut.kbase, and loggedInQuery events.
         * These are usually fired by the kbaseLogin widget.
         *
         * this.user_id() = the logged in user id
         * this.authToken() = the current authentication token
         */
        parent: 'kbaseWidget',

        /*
         * (optional) Widgets should be semantically versioned.
         * See http://semver.org
         */
        version: '1.0.0',

        /*
         * (optional) Widgets are implied to include an options structure.
         * It's useful to put default values here.
         */
        options: {
            data: null,
        },

        /**
         * (required) This is the only required function for a KBase Widget.
         * @param {object} options - a structure containing the set of 
         * options to be passed to this widget.
         * @private
         */
        init: function(options) {
            /*
             * This should be the first line of your init function.
             * It registers the new widget, overriding existing options.
             *
             * The members of the options structure will become members of 
             * this.options, overriding any existing members.
             */
            this._super(options);

            /*
             * It is required to return this.
             */
            return this.render();
        },

        /**
         * (not required)
         * I prefer to keep initialization and rendering code separate, but
         * that's just a style thing. You can do whatever the widget requires.
         */
        render: function() {
            var s = this.options.data;
            if (typeof s != 'string') {
                s = JSON.stringify(s, undefined, 2);
                s = s.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
                s = s.replace(/("(\\u[a-zA-Z0-9]{4}|\\[^u]|[^\\"])*"(\s*:)?|\b(true|false|null)\b|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?)/g, 
                    function (match) {
                        var cls = 'number';
                        if (/^"/.test(match)) {
                            if (/:$/.test(match)) {
                                cls = 'key';
                            } else {
                                cls = 'string';
                            }
                        } else if (/true|false/.test(match)) {
                            cls = 'boolean';
                        } else if (/null/.test(match)) {
                            cls = 'null';
                        }
                        return '<span class="' + cls + '">' + match + '</span>';
                    }
                );
            }
            this.$elem.append($('<pre>').append(s));

            return this;
        },


    });
})(jQuery);